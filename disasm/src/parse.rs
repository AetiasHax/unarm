#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(clippy::eq_op)]
#![allow(clippy::double_parens)]
#![allow(clippy::unnecessary_cast)]
#![allow(clippy::derivable_impls)]
#![allow(clippy::needless_else)]
#![allow(unused_parens)]
#![allow(unused_variables)]
use crate::*;
impl BranchTarget {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Self {
        Self {
            addr: pc.wrapping_add((value)),
        }
    }
}
impl BlxTarget {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Option<Self> {
        if (value & 0xf000000) == 0xb000000 {
            Some(
                Self::Direct(
                    BranchTarget::parse(
                        (((((((value) & 0xffffff) << 2) | ((((value) >> 24) & 0x1) << 1))
                            as i32) << 6 >> 6) as u32)
                            .wrapping_add(8),
                        pc,
                    ),
                ),
            )
        } else if (value & 0xffffff0) == 0x12fff30 {
            Some(Self::Indirect(Reg::parse(((value) & 0xf), pc)))
        } else {
            None
        }
    }
}
impl Cond {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Self {
        debug_assert!(value < 15, "Invalid enum value {:#x} for Cond", value);
        unsafe { core::mem::transmute::<u8, Self>(value as u8) }
    }
}
impl Reg {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Self {
        debug_assert!(value < 16, "Invalid enum value {:#x} for Reg", value);
        unsafe { core::mem::transmute::<u8, Self>(value as u8) }
    }
}
impl StatusReg {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Self {
        debug_assert!(value < 2, "Invalid enum value {:#x} for StatusReg", value);
        unsafe { core::mem::transmute::<u8, Self>(value as u8) }
    }
}
impl StatusFields {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Self {
        Self {
            reg: StatusReg::parse((((value) >> 22) & 0x1), pc),
            c: (((value) >> 16) & 0x1) != 0,
            x: (((value) >> 17) & 0x1) != 0,
            s: (((value) >> 18) & 0x1) != 0,
            f: (((value) >> 19) & 0x1) != 0,
        }
    }
}
impl MsrOp2 {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Option<Self> {
        if (value & 0x2000000) == 0x2000000 {
            Some(Self::Imm(((value) & 0xff).rotate_right((((value) >> 8) & 0xf))))
        } else if (value & 0x20000f0) == 0x0 {
            if value & 0xf00 != 0 {
                return None;
            }
            Some(Self::Reg(Reg::parse(((value) & 0xf), pc)))
        } else {
            None
        }
    }
}
impl ShiftOp {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Self {
        debug_assert!(value < 4, "Invalid enum value {:#x} for ShiftOp", value);
        unsafe { core::mem::transmute::<u8, Self>(value as u8) }
    }
}
impl Coproc {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Self {
        debug_assert!(value < 16, "Invalid enum value {:#x} for Coproc", value);
        unsafe { core::mem::transmute::<u8, Self>(value as u8) }
    }
}
impl CoReg {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Self {
        debug_assert!(value < 16, "Invalid enum value {:#x} for CoReg", value);
        unsafe { core::mem::transmute::<u8, Self>(value as u8) }
    }
}
impl Op2 {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Option<Self> {
        if (value & 0x2000000) == 0x2000000 {
            Some(Self::Imm(((value) & 0xff).rotate_right((((value) >> 8) & 0xf) << 1)))
        } else if (value & 0x2000010) == 0x10 {
            Some(Self::ShiftReg(ShiftReg::parse(((value) & 0xfff), pc)))
        } else if (value & 0x2000010) == 0x0 {
            Some(Self::ShiftImm(ShiftImm::parse(((value) & 0xfff), pc)))
        } else {
            None
        }
    }
}
impl ShiftReg {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Self {
        Self {
            rm: Reg::parse(((value) & 0xf), pc),
            shift_op: ShiftOp::parse((((value) >> 5) & 0x3), pc),
            rs: Reg::parse((((value) >> 8) & 0xf), pc),
        }
    }
}
impl ShiftImm {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Self {
        Self {
            rm: Reg::parse(((value) & 0xf), pc),
            shift_op: ShiftOp::parse((((value) >> 5) & 0x3), pc),
            imm: (((value) >> 7) & 0x1f),
        }
    }
}
impl Op2Shift {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Option<Self> {
        if (value & 0x10) == 0x0 {
            Some(
                Self::Imm(
                    if (((value) >> 7) & 0x1f) != 0 {
                        (((value) >> 7) & 0x1f)
                    } else {
                        32
                    },
                ),
            )
        } else if (value & 0x90) == 0x10 {
            Some(Self::Reg(Reg::parse((((value) >> 8) & 0xf), pc)))
        } else {
            None
        }
    }
}
impl CpsEffect {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Option<Self> {
        match value {
            0x0 => Some(Self::SetMode),
            0x2 => Some(Self::Ie),
            0x3 => Some(Self::Id),
            _ => None,
        }
    }
}
impl AifFlags {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Self {
        Self {
            a: (((value) >> 2) & 0x1) != 0,
            i: (((value) >> 1) & 0x1) != 0,
            f: ((value) & 0x1) != 0,
        }
    }
}
impl AddrLdcStc {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Option<Self> {
        if (value & 0x1000000) == 0x1000000 {
            Some(Self::Pre {
                rn: Reg::parse((((value) >> 16) & 0xf), pc),
                offset: ((if (((value) >> 23) & 0x1) == 0 {
                    -((((value) & 0xff) << 2) as i32)
                } else {
                    (((value) & 0xff) << 2) as i32
                })) as i32,
                writeback: ((((value) >> 21) & 0x1)) != 0,
            })
        } else if (value & 0x1200000) == 0x200000 {
            Some(Self::Post {
                rn: Reg::parse((((value) >> 16) & 0xf), pc),
                offset: ((if (((value) >> 23) & 0x1) == 0 {
                    -((((value) & 0xff) << 2) as i32)
                } else {
                    (((value) & 0xff) << 2) as i32
                })) as i32,
            })
        } else if (value & 0x1a00000) == 0x800000 {
            Some(Self::Unidx {
                rn: Reg::parse((((value) >> 16) & 0xf), pc),
                option: ((value) & 0xff),
            })
        } else {
            None
        }
    }
}
impl LdmStmMode {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Self {
        debug_assert!(value < 4, "Invalid enum value {:#x} for LdmStmMode", value);
        unsafe { core::mem::transmute::<u8, Self>(value as u8) }
    }
}
impl AddrLdrStr {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Option<Self> {
        if (value & 0x1000000) == 0x1000000 {
            Some(Self::Pre {
                rn: Reg::parse((((value) >> 16) & 0xf), pc),
                offset: LdrStrOffset::parse((value), pc)?,
                writeback: ((((value) >> 21) & 0x1)) != 0,
            })
        } else if (value & 0x1200000) == 0x0 {
            Some(Self::Post(AddrLdrStrPost::parse((value), pc)?))
        } else {
            None
        }
    }
}
impl AddrLdrStrPost {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Option<Self> {
        Some(Self {
            rn: Reg::parse((((value) >> 16) & 0xf), pc),
            offset: LdrStrOffset::parse((value), pc)?,
        })
    }
}
impl LdrStrOffset {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Option<Self> {
        if (value & 0x2000000) == 0x0 {
            Some(
                Self::Imm(
                    ((if (((value) >> 23) & 0x1) == 0 {
                        -(((value) & 0xfff) as i32)
                    } else {
                        ((value) & 0xfff) as i32
                    })) as i32,
                ),
            )
        } else if (value & 0x2000000) == 0x2000000 {
            Some(Self::Reg {
                subtract: ((((value) >> 23) & 0x1) ^ 1) != 0,
                rm: Reg::parse(((value) & 0xf), pc),
                shift_op: ShiftOp::parse((((value) >> 5) & 0x3), pc),
                imm: if (((value) >> 5) & 0x3) == 1 && (((value) >> 7) & 0x1f) == 0 {
                    0x20
                } else {
                    (((value) >> 7) & 0x1f)
                },
            })
        } else {
            None
        }
    }
}
impl AddrMiscLoad {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Option<Self> {
        if (value & 0x1000000) == 0x1000000 {
            Some(Self::Pre {
                rn: Reg::parse((((value) >> 16) & 0xf), pc),
                offset: MiscLoadOffset::parse((value), pc)?,
                writeback: ((((value) >> 21) & 0x1)) != 0,
            })
        } else if (value & 0x1200000) == 0x0 {
            Some(Self::Post {
                rn: Reg::parse((((value) >> 16) & 0xf), pc),
                offset: MiscLoadOffset::parse((value), pc)?,
            })
        } else {
            None
        }
    }
}
impl MiscLoadOffset {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Option<Self> {
        if (value & 0xe400090) == 0x400090 {
            Some(
                Self::Imm(
                    ((if (((value) >> 23) & 0x1) == 0 {
                        -((((((value) >> 8) & 0xf) << 4) | ((value) & 0xf)) as i32)
                    } else {
                        (((((value) >> 8) & 0xf) << 4) | ((value) & 0xf)) as i32
                    })) as i32,
                ),
            )
        } else if (value & 0xe400090) == 0x90 {
            if value & 0xf00 != 0 {
                return None;
            }
            Some(Self::Reg {
                rm: Reg::parse(((value) & 0xf), pc),
                subtract: ((((value) >> 23) & 0x1) ^ 1) != 0,
            })
        } else {
            None
        }
    }
}
impl SrsRfeMode {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Self {
        debug_assert!(value < 4, "Invalid enum value {:#x} for SrsRfeMode", value);
        unsafe { core::mem::transmute::<u8, Self>(value as u8) }
    }
}
impl Endianness {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Self {
        debug_assert!(value < 2, "Invalid enum value {:#x} for Endianness", value);
        unsafe { core::mem::transmute::<u8, Self>(value as u8) }
    }
}
impl RegSide {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Self {
        debug_assert!(value < 2, "Invalid enum value {:#x} for RegSide", value);
        unsafe { core::mem::transmute::<u8, Self>(value as u8) }
    }
}
impl Sreg {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Self {
        debug_assert!(value < 32, "Invalid enum value {:#x} for Sreg", value);
        unsafe { core::mem::transmute::<u8, Self>(value as u8) }
    }
}
impl Dreg {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Self {
        debug_assert!(value < 32, "Invalid enum value {:#x} for Dreg", value);
        unsafe { core::mem::transmute::<u8, Self>(value as u8) }
    }
}
impl VcmpF32Op2 {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Option<Self> {
        if (value & 0x3f) == 0x0 {
            Some(Self::Zero)
        } else if (value & 0x10) == 0x0 {
            Some(
                Self::Reg(
                    Sreg::parse((((value) & 0xf) << 1) | (((value) >> 5) & 0x1), pc),
                ),
            )
        } else {
            None
        }
    }
}
impl VcmpF64Op2 {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Option<Self> {
        if (value & 0x3f) == 0x0 {
            Some(Self::Zero)
        } else if (value & 0x10) == 0x0 {
            Some(
                Self::Reg(
                    Dreg::parse(((((value) >> 5) & 0x1) << 4) | ((value) & 0xf), pc),
                ),
            )
        } else {
            None
        }
    }
}
impl DregIndex {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Self {
        Self {
            dreg: Dreg::parse(
                ((((value) >> 7) & 0x1) << 4) | (((value) >> 16) & 0xf),
                pc,
            ),
            index: (((value) >> 21) & 0x1),
        }
    }
}
impl Fpscr {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Self {
        Self {}
    }
}
impl VldmVstmMode {
    #[inline(always)]
    pub(crate) fn parse(value: u32, pc: u32) -> Option<Self> {
        match value {
            0x1 => Some(Self::Ia),
            0x2 => Some(Self::Db),
            _ => None,
        }
    }
}
impl Default for BranchTarget {
    fn default() -> Self {
        Self { addr: 0 }
    }
}
impl Default for Cond {
    fn default() -> Self {
        Self::Al
    }
}
impl Default for ShiftOp {
    fn default() -> Self {
        Self::Lsl
    }
}
impl Default for AifFlags {
    fn default() -> Self {
        Self {
            a: false,
            i: false,
            f: false,
        }
    }
}
impl Default for LdmStmMode {
    fn default() -> Self {
        Self::Ia
    }
}
impl Default for SrsRfeMode {
    fn default() -> Self {
        Self::Ia
    }
}
impl Default for Fpscr {
    fn default() -> Self {
        Self {}
    }
}
pub fn parse_arm(ins: u32, pc: u32) -> Option<Ins> {
    match (((ins) & 0x1f0) >> 4) | (((ins) & 0xff80000) >> 14) {
        0x0 => parse_arm_0(ins, pc),
        0x1 => parse_arm_1(ins, pc),
        0x2 => parse_arm_2(ins, pc),
        0x3 => parse_arm_3(ins, pc),
        0x4 => parse_arm_4(ins, pc),
        0x5 => parse_arm_5(ins, pc),
        0x6 => parse_arm_6(ins, pc),
        0x7 => parse_arm_7(ins, pc),
        0x8 => parse_arm_8(ins, pc),
        0x9 => parse_arm_9(ins, pc),
        0xa => parse_arm_10(ins, pc),
        0xb => parse_arm_11(ins, pc),
        0xc => parse_arm_12(ins, pc),
        0xd => parse_arm_13(ins, pc),
        0xe => parse_arm_14(ins, pc),
        0xf => parse_arm_15(ins, pc),
        0x10 => parse_arm_16(ins, pc),
        0x11 => parse_arm_17(ins, pc),
        0x12 => parse_arm_18(ins, pc),
        0x13 => parse_arm_19(ins, pc),
        0x14 => parse_arm_20(ins, pc),
        0x15 => parse_arm_21(ins, pc),
        0x16 => parse_arm_22(ins, pc),
        0x17 => parse_arm_23(ins, pc),
        0x18 => parse_arm_24(ins, pc),
        0x19 => parse_arm_25(ins, pc),
        0x1a => parse_arm_26(ins, pc),
        0x1b => parse_arm_27(ins, pc),
        0x1c => parse_arm_28(ins, pc),
        0x1d => parse_arm_29(ins, pc),
        0x1e => parse_arm_30(ins, pc),
        0x1f => parse_arm_31(ins, pc),
        0x20 => parse_arm_32(ins, pc),
        0x21 => parse_arm_33(ins, pc),
        0x22 => parse_arm_34(ins, pc),
        0x23 => parse_arm_35(ins, pc),
        0x24 => parse_arm_36(ins, pc),
        0x25 => parse_arm_37(ins, pc),
        0x26 => parse_arm_38(ins, pc),
        0x27 => parse_arm_39(ins, pc),
        0x28 => parse_arm_40(ins, pc),
        0x29 => parse_arm_41(ins, pc),
        0x2a => parse_arm_42(ins, pc),
        0x2b => parse_arm_43(ins, pc),
        0x2c => parse_arm_44(ins, pc),
        0x2d => parse_arm_45(ins, pc),
        0x2e => parse_arm_46(ins, pc),
        0x2f => parse_arm_47(ins, pc),
        0x30 => parse_arm_48(ins, pc),
        0x31 => parse_arm_49(ins, pc),
        0x32 => parse_arm_50(ins, pc),
        0x33 => parse_arm_51(ins, pc),
        0x34 => parse_arm_52(ins, pc),
        0x35 => parse_arm_53(ins, pc),
        0x36 => parse_arm_54(ins, pc),
        0x37 => parse_arm_55(ins, pc),
        0x38 => parse_arm_56(ins, pc),
        0x39 => parse_arm_57(ins, pc),
        0x3a => parse_arm_58(ins, pc),
        0x3b => parse_arm_59(ins, pc),
        0x3c => parse_arm_60(ins, pc),
        0x3d => parse_arm_61(ins, pc),
        0x3e => parse_arm_62(ins, pc),
        0x3f => parse_arm_63(ins, pc),
        0x40 => parse_arm_64(ins, pc),
        0x41 => parse_arm_65(ins, pc),
        0x42 => parse_arm_66(ins, pc),
        0x43 => parse_arm_67(ins, pc),
        0x44 => parse_arm_68(ins, pc),
        0x45 => parse_arm_69(ins, pc),
        0x46 => parse_arm_70(ins, pc),
        0x47 => parse_arm_71(ins, pc),
        0x48 => parse_arm_72(ins, pc),
        0x49 => parse_arm_73(ins, pc),
        0x4a => parse_arm_74(ins, pc),
        0x4b => parse_arm_75(ins, pc),
        0x4c => parse_arm_76(ins, pc),
        0x4d => parse_arm_77(ins, pc),
        0x4e => parse_arm_78(ins, pc),
        0x4f => parse_arm_79(ins, pc),
        0x50 => parse_arm_80(ins, pc),
        0x51 => parse_arm_81(ins, pc),
        0x52 => parse_arm_82(ins, pc),
        0x53 => parse_arm_83(ins, pc),
        0x54 => parse_arm_84(ins, pc),
        0x55 => parse_arm_85(ins, pc),
        0x56 => parse_arm_86(ins, pc),
        0x57 => parse_arm_87(ins, pc),
        0x58 => parse_arm_88(ins, pc),
        0x59 => parse_arm_89(ins, pc),
        0x5a => parse_arm_90(ins, pc),
        0x5b => parse_arm_91(ins, pc),
        0x5c => parse_arm_92(ins, pc),
        0x5d => parse_arm_93(ins, pc),
        0x5e => parse_arm_94(ins, pc),
        0x5f => parse_arm_95(ins, pc),
        0x60 => parse_arm_96(ins, pc),
        0x61 => parse_arm_97(ins, pc),
        0x62 => parse_arm_98(ins, pc),
        0x63 => parse_arm_99(ins, pc),
        0x64 => parse_arm_100(ins, pc),
        0x65 => parse_arm_101(ins, pc),
        0x66 => parse_arm_102(ins, pc),
        0x67 => parse_arm_103(ins, pc),
        0x68 => parse_arm_104(ins, pc),
        0x69 => parse_arm_105(ins, pc),
        0x6a => parse_arm_106(ins, pc),
        0x6b => parse_arm_107(ins, pc),
        0x6c => parse_arm_108(ins, pc),
        0x6d => parse_arm_109(ins, pc),
        0x6e => parse_arm_110(ins, pc),
        0x6f => parse_arm_111(ins, pc),
        0x70 => parse_arm_112(ins, pc),
        0x71 => parse_arm_113(ins, pc),
        0x72 => parse_arm_114(ins, pc),
        0x73 => parse_arm_115(ins, pc),
        0x74 => parse_arm_116(ins, pc),
        0x75 => parse_arm_117(ins, pc),
        0x76 => parse_arm_118(ins, pc),
        0x77 => parse_arm_119(ins, pc),
        0x78 => parse_arm_120(ins, pc),
        0x79 => parse_arm_121(ins, pc),
        0x7a => parse_arm_122(ins, pc),
        0x7b => parse_arm_123(ins, pc),
        0x7c => parse_arm_124(ins, pc),
        0x7d => parse_arm_125(ins, pc),
        0x7e => parse_arm_126(ins, pc),
        0x7f => parse_arm_127(ins, pc),
        0x80 => parse_arm_128(ins, pc),
        0x81 => parse_arm_129(ins, pc),
        0x82 => parse_arm_130(ins, pc),
        0x83 => parse_arm_131(ins, pc),
        0x84 => parse_arm_132(ins, pc),
        0x85 => parse_arm_133(ins, pc),
        0x86 => parse_arm_134(ins, pc),
        0x87 => parse_arm_135(ins, pc),
        0x88 => parse_arm_136(ins, pc),
        0x89 => parse_arm_137(ins, pc),
        0x8a => parse_arm_138(ins, pc),
        0x8b => parse_arm_139(ins, pc),
        0x8c => parse_arm_140(ins, pc),
        0x8d => parse_arm_141(ins, pc),
        0x8e => parse_arm_142(ins, pc),
        0x8f => parse_arm_143(ins, pc),
        0x90 => parse_arm_144(ins, pc),
        0x91 => parse_arm_145(ins, pc),
        0x92 => parse_arm_146(ins, pc),
        0x93 => parse_arm_147(ins, pc),
        0x94 => parse_arm_148(ins, pc),
        0x95 => parse_arm_149(ins, pc),
        0x96 => parse_arm_150(ins, pc),
        0x97 => parse_arm_151(ins, pc),
        0x98 => parse_arm_152(ins, pc),
        0x99 => parse_arm_153(ins, pc),
        0x9a => parse_arm_154(ins, pc),
        0x9b => parse_arm_155(ins, pc),
        0x9c => parse_arm_156(ins, pc),
        0x9d => parse_arm_157(ins, pc),
        0x9e => parse_arm_158(ins, pc),
        0x9f => parse_arm_159(ins, pc),
        0xa0 => parse_arm_160(ins, pc),
        0xa1 => parse_arm_161(ins, pc),
        0xa2 => parse_arm_162(ins, pc),
        0xa3 => parse_arm_163(ins, pc),
        0xa4 => parse_arm_164(ins, pc),
        0xa5 => parse_arm_165(ins, pc),
        0xa6 => parse_arm_166(ins, pc),
        0xa7 => parse_arm_167(ins, pc),
        0xa8 => parse_arm_168(ins, pc),
        0xa9 => parse_arm_169(ins, pc),
        0xaa => parse_arm_170(ins, pc),
        0xab => parse_arm_171(ins, pc),
        0xac => parse_arm_172(ins, pc),
        0xad => parse_arm_173(ins, pc),
        0xae => parse_arm_174(ins, pc),
        0xaf => parse_arm_175(ins, pc),
        0xb0 => parse_arm_176(ins, pc),
        0xb1 => parse_arm_177(ins, pc),
        0xb2 => parse_arm_178(ins, pc),
        0xb3 => parse_arm_179(ins, pc),
        0xb4 => parse_arm_180(ins, pc),
        0xb5 => parse_arm_181(ins, pc),
        0xb6 => parse_arm_182(ins, pc),
        0xb7 => parse_arm_183(ins, pc),
        0xb8 => parse_arm_184(ins, pc),
        0xb9 => parse_arm_185(ins, pc),
        0xba => parse_arm_186(ins, pc),
        0xbb => parse_arm_187(ins, pc),
        0xbc => parse_arm_188(ins, pc),
        0xbd => parse_arm_189(ins, pc),
        0xbe => parse_arm_190(ins, pc),
        0xbf => parse_arm_191(ins, pc),
        0xc0 => parse_arm_192(ins, pc),
        0xc1 => parse_arm_193(ins, pc),
        0xc2 => parse_arm_194(ins, pc),
        0xc3 => parse_arm_195(ins, pc),
        0xc4 => parse_arm_196(ins, pc),
        0xc5 => parse_arm_197(ins, pc),
        0xc6 => parse_arm_198(ins, pc),
        0xc7 => parse_arm_199(ins, pc),
        0xc8 => parse_arm_200(ins, pc),
        0xc9 => parse_arm_201(ins, pc),
        0xca => parse_arm_202(ins, pc),
        0xcb => parse_arm_203(ins, pc),
        0xcc => parse_arm_204(ins, pc),
        0xcd => parse_arm_205(ins, pc),
        0xce => parse_arm_206(ins, pc),
        0xcf => parse_arm_207(ins, pc),
        0xd0 => parse_arm_208(ins, pc),
        0xd1 => parse_arm_209(ins, pc),
        0xd2 => parse_arm_210(ins, pc),
        0xd3 => parse_arm_211(ins, pc),
        0xd4 => parse_arm_212(ins, pc),
        0xd5 => parse_arm_213(ins, pc),
        0xd6 => parse_arm_214(ins, pc),
        0xd7 => parse_arm_215(ins, pc),
        0xd8 => parse_arm_216(ins, pc),
        0xd9 => parse_arm_217(ins, pc),
        0xda => parse_arm_218(ins, pc),
        0xdb => parse_arm_219(ins, pc),
        0xdc => parse_arm_220(ins, pc),
        0xdd => parse_arm_221(ins, pc),
        0xde => parse_arm_222(ins, pc),
        0xdf => parse_arm_223(ins, pc),
        0xe0 => parse_arm_224(ins, pc),
        0xe1 => parse_arm_225(ins, pc),
        0xe2 => parse_arm_226(ins, pc),
        0xe3 => parse_arm_227(ins, pc),
        0xe4 => parse_arm_228(ins, pc),
        0xe5 => parse_arm_229(ins, pc),
        0xe6 => parse_arm_230(ins, pc),
        0xe7 => parse_arm_231(ins, pc),
        0xe8 => parse_arm_232(ins, pc),
        0xe9 => parse_arm_233(ins, pc),
        0xea => parse_arm_234(ins, pc),
        0xeb => parse_arm_235(ins, pc),
        0xec => parse_arm_236(ins, pc),
        0xed => parse_arm_237(ins, pc),
        0xee => parse_arm_238(ins, pc),
        0xef => parse_arm_239(ins, pc),
        0xf0 => parse_arm_240(ins, pc),
        0xf1 => parse_arm_241(ins, pc),
        0xf2 => parse_arm_242(ins, pc),
        0xf3 => parse_arm_243(ins, pc),
        0xf4 => parse_arm_244(ins, pc),
        0xf5 => parse_arm_245(ins, pc),
        0xf6 => parse_arm_246(ins, pc),
        0xf7 => parse_arm_247(ins, pc),
        0xf8 => parse_arm_248(ins, pc),
        0xf9 => parse_arm_249(ins, pc),
        0xfa => parse_arm_250(ins, pc),
        0xfb => parse_arm_251(ins, pc),
        0xfc => parse_arm_252(ins, pc),
        0xfd => parse_arm_253(ins, pc),
        0xfe => parse_arm_254(ins, pc),
        0xff => parse_arm_255(ins, pc),
        0x100 => parse_arm_256(ins, pc),
        0x101 => parse_arm_257(ins, pc),
        0x102 => parse_arm_258(ins, pc),
        0x103 => parse_arm_259(ins, pc),
        0x104 => parse_arm_260(ins, pc),
        0x105 => parse_arm_261(ins, pc),
        0x106 => parse_arm_262(ins, pc),
        0x107 => parse_arm_263(ins, pc),
        0x108 => parse_arm_264(ins, pc),
        0x109 => parse_arm_265(ins, pc),
        0x10a => parse_arm_266(ins, pc),
        0x10b => parse_arm_267(ins, pc),
        0x10c => parse_arm_268(ins, pc),
        0x10d => parse_arm_269(ins, pc),
        0x10e => parse_arm_270(ins, pc),
        0x10f => parse_arm_271(ins, pc),
        0x110 => parse_arm_272(ins, pc),
        0x111 => parse_arm_273(ins, pc),
        0x112 => parse_arm_274(ins, pc),
        0x113 => parse_arm_275(ins, pc),
        0x114 => parse_arm_276(ins, pc),
        0x115 => parse_arm_277(ins, pc),
        0x116 => parse_arm_278(ins, pc),
        0x117 => parse_arm_279(ins, pc),
        0x118 => parse_arm_280(ins, pc),
        0x119 => parse_arm_281(ins, pc),
        0x11a => parse_arm_282(ins, pc),
        0x11b => parse_arm_283(ins, pc),
        0x11c => parse_arm_284(ins, pc),
        0x11d => parse_arm_285(ins, pc),
        0x11e => parse_arm_286(ins, pc),
        0x11f => parse_arm_287(ins, pc),
        0x120 => parse_arm_288(ins, pc),
        0x121 => parse_arm_289(ins, pc),
        0x122 => parse_arm_290(ins, pc),
        0x123 => parse_arm_291(ins, pc),
        0x124 => parse_arm_292(ins, pc),
        0x125 => parse_arm_293(ins, pc),
        0x126 => parse_arm_294(ins, pc),
        0x127 => parse_arm_295(ins, pc),
        0x128 => parse_arm_296(ins, pc),
        0x129 => parse_arm_297(ins, pc),
        0x12a => parse_arm_298(ins, pc),
        0x12b => parse_arm_299(ins, pc),
        0x12c => parse_arm_300(ins, pc),
        0x12d => parse_arm_301(ins, pc),
        0x12e => parse_arm_302(ins, pc),
        0x12f => parse_arm_303(ins, pc),
        0x130 => parse_arm_304(ins, pc),
        0x131 => parse_arm_305(ins, pc),
        0x132 => parse_arm_306(ins, pc),
        0x133 => parse_arm_307(ins, pc),
        0x134 => parse_arm_308(ins, pc),
        0x135 => parse_arm_309(ins, pc),
        0x136 => parse_arm_310(ins, pc),
        0x137 => parse_arm_311(ins, pc),
        0x138 => parse_arm_312(ins, pc),
        0x139 => parse_arm_313(ins, pc),
        0x13a => parse_arm_314(ins, pc),
        0x13b => parse_arm_315(ins, pc),
        0x13c => parse_arm_316(ins, pc),
        0x13d => parse_arm_317(ins, pc),
        0x13e => parse_arm_318(ins, pc),
        0x13f => parse_arm_319(ins, pc),
        0x140 => parse_arm_320(ins, pc),
        0x141 => parse_arm_321(ins, pc),
        0x142 => parse_arm_322(ins, pc),
        0x143 => parse_arm_323(ins, pc),
        0x144 => parse_arm_324(ins, pc),
        0x145 => parse_arm_325(ins, pc),
        0x146 => parse_arm_326(ins, pc),
        0x147 => parse_arm_327(ins, pc),
        0x148 => parse_arm_328(ins, pc),
        0x149 => parse_arm_329(ins, pc),
        0x14a => parse_arm_330(ins, pc),
        0x14b => parse_arm_331(ins, pc),
        0x14c => parse_arm_332(ins, pc),
        0x14d => parse_arm_333(ins, pc),
        0x14e => parse_arm_334(ins, pc),
        0x14f => parse_arm_335(ins, pc),
        0x150 => parse_arm_336(ins, pc),
        0x151 => parse_arm_337(ins, pc),
        0x152 => parse_arm_338(ins, pc),
        0x153 => parse_arm_339(ins, pc),
        0x154 => parse_arm_340(ins, pc),
        0x155 => parse_arm_341(ins, pc),
        0x156 => parse_arm_342(ins, pc),
        0x157 => parse_arm_343(ins, pc),
        0x158 => parse_arm_344(ins, pc),
        0x159 => parse_arm_345(ins, pc),
        0x15a => parse_arm_346(ins, pc),
        0x15b => parse_arm_347(ins, pc),
        0x15c => parse_arm_348(ins, pc),
        0x15d => parse_arm_349(ins, pc),
        0x15e => parse_arm_350(ins, pc),
        0x15f => parse_arm_351(ins, pc),
        0x160 => parse_arm_352(ins, pc),
        0x161 => parse_arm_353(ins, pc),
        0x162 => parse_arm_354(ins, pc),
        0x163 => parse_arm_355(ins, pc),
        0x164 => parse_arm_356(ins, pc),
        0x165 => parse_arm_357(ins, pc),
        0x166 => parse_arm_358(ins, pc),
        0x167 => parse_arm_359(ins, pc),
        0x168 => parse_arm_360(ins, pc),
        0x169 => parse_arm_361(ins, pc),
        0x16a => parse_arm_362(ins, pc),
        0x16b => parse_arm_363(ins, pc),
        0x16c => parse_arm_364(ins, pc),
        0x16d => parse_arm_365(ins, pc),
        0x16e => parse_arm_366(ins, pc),
        0x16f => parse_arm_367(ins, pc),
        0x170 => parse_arm_368(ins, pc),
        0x171 => parse_arm_369(ins, pc),
        0x172 => parse_arm_370(ins, pc),
        0x173 => parse_arm_371(ins, pc),
        0x174 => parse_arm_372(ins, pc),
        0x175 => parse_arm_373(ins, pc),
        0x176 => parse_arm_374(ins, pc),
        0x177 => parse_arm_375(ins, pc),
        0x178 => parse_arm_376(ins, pc),
        0x179 => parse_arm_377(ins, pc),
        0x17a => parse_arm_378(ins, pc),
        0x17b => parse_arm_379(ins, pc),
        0x17c => parse_arm_380(ins, pc),
        0x17d => parse_arm_381(ins, pc),
        0x17e => parse_arm_382(ins, pc),
        0x17f => parse_arm_383(ins, pc),
        0x180 => parse_arm_384(ins, pc),
        0x181 => parse_arm_385(ins, pc),
        0x182 => parse_arm_386(ins, pc),
        0x183 => parse_arm_387(ins, pc),
        0x184 => parse_arm_388(ins, pc),
        0x185 => parse_arm_389(ins, pc),
        0x186 => parse_arm_390(ins, pc),
        0x187 => parse_arm_391(ins, pc),
        0x188 => parse_arm_392(ins, pc),
        0x189 => parse_arm_393(ins, pc),
        0x18a => parse_arm_394(ins, pc),
        0x18b => parse_arm_395(ins, pc),
        0x18c => parse_arm_396(ins, pc),
        0x18d => parse_arm_397(ins, pc),
        0x18e => parse_arm_398(ins, pc),
        0x18f => parse_arm_399(ins, pc),
        0x190 => parse_arm_400(ins, pc),
        0x191 => parse_arm_401(ins, pc),
        0x192 => parse_arm_402(ins, pc),
        0x193 => parse_arm_403(ins, pc),
        0x194 => parse_arm_404(ins, pc),
        0x195 => parse_arm_405(ins, pc),
        0x196 => parse_arm_406(ins, pc),
        0x197 => parse_arm_407(ins, pc),
        0x198 => parse_arm_408(ins, pc),
        0x199 => parse_arm_409(ins, pc),
        0x19a => parse_arm_410(ins, pc),
        0x19b => parse_arm_411(ins, pc),
        0x19c => parse_arm_412(ins, pc),
        0x19d => parse_arm_413(ins, pc),
        0x19e => parse_arm_414(ins, pc),
        0x19f => parse_arm_415(ins, pc),
        0x1a0 => parse_arm_416(ins, pc),
        0x1a1 => parse_arm_417(ins, pc),
        0x1a2 => parse_arm_418(ins, pc),
        0x1a3 => parse_arm_419(ins, pc),
        0x1a4 => parse_arm_420(ins, pc),
        0x1a5 => parse_arm_421(ins, pc),
        0x1a6 => parse_arm_422(ins, pc),
        0x1a7 => parse_arm_423(ins, pc),
        0x1a8 => parse_arm_424(ins, pc),
        0x1a9 => parse_arm_425(ins, pc),
        0x1aa => parse_arm_426(ins, pc),
        0x1ab => parse_arm_427(ins, pc),
        0x1ac => parse_arm_428(ins, pc),
        0x1ad => parse_arm_429(ins, pc),
        0x1ae => parse_arm_430(ins, pc),
        0x1af => parse_arm_431(ins, pc),
        0x1b0 => parse_arm_432(ins, pc),
        0x1b1 => parse_arm_433(ins, pc),
        0x1b2 => parse_arm_434(ins, pc),
        0x1b3 => parse_arm_435(ins, pc),
        0x1b4 => parse_arm_436(ins, pc),
        0x1b5 => parse_arm_437(ins, pc),
        0x1b6 => parse_arm_438(ins, pc),
        0x1b7 => parse_arm_439(ins, pc),
        0x1b8 => parse_arm_440(ins, pc),
        0x1b9 => parse_arm_441(ins, pc),
        0x1ba => parse_arm_442(ins, pc),
        0x1bb => parse_arm_443(ins, pc),
        0x1bc => parse_arm_444(ins, pc),
        0x1bd => parse_arm_445(ins, pc),
        0x1be => parse_arm_446(ins, pc),
        0x1bf => parse_arm_447(ins, pc),
        0x1c0 => parse_arm_448(ins, pc),
        0x1c1 => parse_arm_449(ins, pc),
        0x1c2 => parse_arm_450(ins, pc),
        0x1c3 => parse_arm_451(ins, pc),
        0x1c4 => parse_arm_452(ins, pc),
        0x1c5 => parse_arm_453(ins, pc),
        0x1c6 => parse_arm_454(ins, pc),
        0x1c7 => parse_arm_455(ins, pc),
        0x1c8 => parse_arm_456(ins, pc),
        0x1c9 => parse_arm_457(ins, pc),
        0x1ca => parse_arm_458(ins, pc),
        0x1cb => parse_arm_459(ins, pc),
        0x1cc => parse_arm_460(ins, pc),
        0x1cd => parse_arm_461(ins, pc),
        0x1ce => parse_arm_462(ins, pc),
        0x1cf => parse_arm_463(ins, pc),
        0x1d0 => parse_arm_464(ins, pc),
        0x1d1 => parse_arm_465(ins, pc),
        0x1d2 => parse_arm_466(ins, pc),
        0x1d3 => parse_arm_467(ins, pc),
        0x1d4 => parse_arm_468(ins, pc),
        0x1d5 => parse_arm_469(ins, pc),
        0x1d6 => parse_arm_470(ins, pc),
        0x1d7 => parse_arm_471(ins, pc),
        0x1d8 => parse_arm_472(ins, pc),
        0x1d9 => parse_arm_473(ins, pc),
        0x1da => parse_arm_474(ins, pc),
        0x1db => parse_arm_475(ins, pc),
        0x1dc => parse_arm_476(ins, pc),
        0x1dd => parse_arm_477(ins, pc),
        0x1de => parse_arm_478(ins, pc),
        0x1df => parse_arm_479(ins, pc),
        0x1e0 => parse_arm_480(ins, pc),
        0x1e1 => parse_arm_481(ins, pc),
        0x1e2 => parse_arm_482(ins, pc),
        0x1e3 => parse_arm_483(ins, pc),
        0x1e4 => parse_arm_484(ins, pc),
        0x1e5 => parse_arm_485(ins, pc),
        0x1e6 => parse_arm_486(ins, pc),
        0x1e7 => parse_arm_487(ins, pc),
        0x1e8 => parse_arm_488(ins, pc),
        0x1e9 => parse_arm_489(ins, pc),
        0x1ea => parse_arm_490(ins, pc),
        0x1eb => parse_arm_491(ins, pc),
        0x1ec => parse_arm_492(ins, pc),
        0x1ed => parse_arm_493(ins, pc),
        0x1ee => parse_arm_494(ins, pc),
        0x1ef => parse_arm_495(ins, pc),
        0x1f0 => parse_arm_496(ins, pc),
        0x1f1 => parse_arm_497(ins, pc),
        0x1f2 => parse_arm_498(ins, pc),
        0x1f3 => parse_arm_499(ins, pc),
        0x1f4 => parse_arm_500(ins, pc),
        0x1f5 => parse_arm_501(ins, pc),
        0x1f6 => parse_arm_502(ins, pc),
        0x1f7 => parse_arm_503(ins, pc),
        0x1f8 => parse_arm_504(ins, pc),
        0x1f9 => parse_arm_505(ins, pc),
        0x1fa => parse_arm_506(ins, pc),
        0x1fb => parse_arm_507(ins, pc),
        0x1fc => parse_arm_508(ins, pc),
        0x1fd => parse_arm_509(ins, pc),
        0x1fe => parse_arm_510(ins, pc),
        0x1ff => parse_arm_511(ins, pc),
        0x200 => parse_arm_512(ins, pc),
        0x201 => parse_arm_513(ins, pc),
        0x202 => parse_arm_514(ins, pc),
        0x203 => parse_arm_515(ins, pc),
        0x204 => parse_arm_516(ins, pc),
        0x205 => parse_arm_517(ins, pc),
        0x206 => parse_arm_518(ins, pc),
        0x207 => parse_arm_519(ins, pc),
        0x208 => parse_arm_520(ins, pc),
        0x209 => parse_arm_521(ins, pc),
        0x20a => parse_arm_522(ins, pc),
        0x20b => parse_arm_523(ins, pc),
        0x20c => parse_arm_524(ins, pc),
        0x20d => parse_arm_525(ins, pc),
        0x20e => parse_arm_526(ins, pc),
        0x20f => parse_arm_527(ins, pc),
        0x210 => parse_arm_528(ins, pc),
        0x211 => parse_arm_529(ins, pc),
        0x212 => parse_arm_530(ins, pc),
        0x213 => parse_arm_531(ins, pc),
        0x214 => parse_arm_532(ins, pc),
        0x215 => parse_arm_533(ins, pc),
        0x216 => parse_arm_534(ins, pc),
        0x217 => parse_arm_535(ins, pc),
        0x218 => parse_arm_536(ins, pc),
        0x219 => parse_arm_537(ins, pc),
        0x21a => parse_arm_538(ins, pc),
        0x21b => parse_arm_539(ins, pc),
        0x21c => parse_arm_540(ins, pc),
        0x21d => parse_arm_541(ins, pc),
        0x21e => parse_arm_542(ins, pc),
        0x21f => parse_arm_543(ins, pc),
        0x220 => parse_arm_544(ins, pc),
        0x221 => parse_arm_545(ins, pc),
        0x222 => parse_arm_546(ins, pc),
        0x223 => parse_arm_547(ins, pc),
        0x224 => parse_arm_548(ins, pc),
        0x225 => parse_arm_549(ins, pc),
        0x226 => parse_arm_550(ins, pc),
        0x227 => parse_arm_551(ins, pc),
        0x228 => parse_arm_552(ins, pc),
        0x229 => parse_arm_553(ins, pc),
        0x22a => parse_arm_554(ins, pc),
        0x22b => parse_arm_555(ins, pc),
        0x22c => parse_arm_556(ins, pc),
        0x22d => parse_arm_557(ins, pc),
        0x22e => parse_arm_558(ins, pc),
        0x22f => parse_arm_559(ins, pc),
        0x230 => parse_arm_560(ins, pc),
        0x231 => parse_arm_561(ins, pc),
        0x232 => parse_arm_562(ins, pc),
        0x233 => parse_arm_563(ins, pc),
        0x234 => parse_arm_564(ins, pc),
        0x235 => parse_arm_565(ins, pc),
        0x236 => parse_arm_566(ins, pc),
        0x237 => parse_arm_567(ins, pc),
        0x238 => parse_arm_568(ins, pc),
        0x239 => parse_arm_569(ins, pc),
        0x23a => parse_arm_570(ins, pc),
        0x23b => parse_arm_571(ins, pc),
        0x23c => parse_arm_572(ins, pc),
        0x23d => parse_arm_573(ins, pc),
        0x23e => parse_arm_574(ins, pc),
        0x23f => parse_arm_575(ins, pc),
        0x240 => parse_arm_576(ins, pc),
        0x241 => parse_arm_577(ins, pc),
        0x242 => parse_arm_578(ins, pc),
        0x243 => parse_arm_579(ins, pc),
        0x244 => parse_arm_580(ins, pc),
        0x245 => parse_arm_581(ins, pc),
        0x246 => parse_arm_582(ins, pc),
        0x247 => parse_arm_583(ins, pc),
        0x248 => parse_arm_584(ins, pc),
        0x249 => parse_arm_585(ins, pc),
        0x24a => parse_arm_586(ins, pc),
        0x24b => parse_arm_587(ins, pc),
        0x24c => parse_arm_588(ins, pc),
        0x24d => parse_arm_589(ins, pc),
        0x24e => parse_arm_590(ins, pc),
        0x24f => parse_arm_591(ins, pc),
        0x250 => parse_arm_592(ins, pc),
        0x251 => parse_arm_593(ins, pc),
        0x252 => parse_arm_594(ins, pc),
        0x253 => parse_arm_595(ins, pc),
        0x254 => parse_arm_596(ins, pc),
        0x255 => parse_arm_597(ins, pc),
        0x256 => parse_arm_598(ins, pc),
        0x257 => parse_arm_599(ins, pc),
        0x258 => parse_arm_600(ins, pc),
        0x259 => parse_arm_601(ins, pc),
        0x25a => parse_arm_602(ins, pc),
        0x25b => parse_arm_603(ins, pc),
        0x25c => parse_arm_604(ins, pc),
        0x25d => parse_arm_605(ins, pc),
        0x25e => parse_arm_606(ins, pc),
        0x25f => parse_arm_607(ins, pc),
        0x260 => parse_arm_608(ins, pc),
        0x261 => parse_arm_609(ins, pc),
        0x262 => parse_arm_610(ins, pc),
        0x263 => parse_arm_611(ins, pc),
        0x264 => parse_arm_612(ins, pc),
        0x265 => parse_arm_613(ins, pc),
        0x266 => parse_arm_614(ins, pc),
        0x267 => parse_arm_615(ins, pc),
        0x268 => parse_arm_616(ins, pc),
        0x269 => parse_arm_617(ins, pc),
        0x26a => parse_arm_618(ins, pc),
        0x26b => parse_arm_619(ins, pc),
        0x26c => parse_arm_620(ins, pc),
        0x26d => parse_arm_621(ins, pc),
        0x26e => parse_arm_622(ins, pc),
        0x26f => parse_arm_623(ins, pc),
        0x270 => parse_arm_624(ins, pc),
        0x271 => parse_arm_625(ins, pc),
        0x272 => parse_arm_626(ins, pc),
        0x273 => parse_arm_627(ins, pc),
        0x274 => parse_arm_628(ins, pc),
        0x275 => parse_arm_629(ins, pc),
        0x276 => parse_arm_630(ins, pc),
        0x277 => parse_arm_631(ins, pc),
        0x278 => parse_arm_632(ins, pc),
        0x279 => parse_arm_633(ins, pc),
        0x27a => parse_arm_634(ins, pc),
        0x27b => parse_arm_635(ins, pc),
        0x27c => parse_arm_636(ins, pc),
        0x27d => parse_arm_637(ins, pc),
        0x27e => parse_arm_638(ins, pc),
        0x27f => parse_arm_639(ins, pc),
        0x280 => parse_arm_640(ins, pc),
        0x281 => parse_arm_641(ins, pc),
        0x282 => parse_arm_642(ins, pc),
        0x283 => parse_arm_643(ins, pc),
        0x284 => parse_arm_644(ins, pc),
        0x285 => parse_arm_645(ins, pc),
        0x286 => parse_arm_646(ins, pc),
        0x287 => parse_arm_647(ins, pc),
        0x288 => parse_arm_648(ins, pc),
        0x289 => parse_arm_649(ins, pc),
        0x28a => parse_arm_650(ins, pc),
        0x28b => parse_arm_651(ins, pc),
        0x28c => parse_arm_652(ins, pc),
        0x28d => parse_arm_653(ins, pc),
        0x28e => parse_arm_654(ins, pc),
        0x28f => parse_arm_655(ins, pc),
        0x290 => parse_arm_656(ins, pc),
        0x291 => parse_arm_657(ins, pc),
        0x292 => parse_arm_658(ins, pc),
        0x293 => parse_arm_659(ins, pc),
        0x294 => parse_arm_660(ins, pc),
        0x295 => parse_arm_661(ins, pc),
        0x296 => parse_arm_662(ins, pc),
        0x297 => parse_arm_663(ins, pc),
        0x298 => parse_arm_664(ins, pc),
        0x299 => parse_arm_665(ins, pc),
        0x29a => parse_arm_666(ins, pc),
        0x29b => parse_arm_667(ins, pc),
        0x29c => parse_arm_668(ins, pc),
        0x29d => parse_arm_669(ins, pc),
        0x29e => parse_arm_670(ins, pc),
        0x29f => parse_arm_671(ins, pc),
        0x2a0 => parse_arm_672(ins, pc),
        0x2a1 => parse_arm_673(ins, pc),
        0x2a2 => parse_arm_674(ins, pc),
        0x2a3 => parse_arm_675(ins, pc),
        0x2a4 => parse_arm_676(ins, pc),
        0x2a5 => parse_arm_677(ins, pc),
        0x2a6 => parse_arm_678(ins, pc),
        0x2a7 => parse_arm_679(ins, pc),
        0x2a8 => parse_arm_680(ins, pc),
        0x2a9 => parse_arm_681(ins, pc),
        0x2aa => parse_arm_682(ins, pc),
        0x2ab => parse_arm_683(ins, pc),
        0x2ac => parse_arm_684(ins, pc),
        0x2ad => parse_arm_685(ins, pc),
        0x2ae => parse_arm_686(ins, pc),
        0x2af => parse_arm_687(ins, pc),
        0x2b0 => parse_arm_688(ins, pc),
        0x2b1 => parse_arm_689(ins, pc),
        0x2b2 => parse_arm_690(ins, pc),
        0x2b3 => parse_arm_691(ins, pc),
        0x2b4 => parse_arm_692(ins, pc),
        0x2b5 => parse_arm_693(ins, pc),
        0x2b6 => parse_arm_694(ins, pc),
        0x2b7 => parse_arm_695(ins, pc),
        0x2b8 => parse_arm_696(ins, pc),
        0x2b9 => parse_arm_697(ins, pc),
        0x2ba => parse_arm_698(ins, pc),
        0x2bb => parse_arm_699(ins, pc),
        0x2bc => parse_arm_700(ins, pc),
        0x2bd => parse_arm_701(ins, pc),
        0x2be => parse_arm_702(ins, pc),
        0x2bf => parse_arm_703(ins, pc),
        0x2c0 => parse_arm_704(ins, pc),
        0x2c1 => parse_arm_705(ins, pc),
        0x2c2 => parse_arm_706(ins, pc),
        0x2c3 => parse_arm_707(ins, pc),
        0x2c4 => parse_arm_708(ins, pc),
        0x2c5 => parse_arm_709(ins, pc),
        0x2c6 => parse_arm_710(ins, pc),
        0x2c7 => parse_arm_711(ins, pc),
        0x2c8 => parse_arm_712(ins, pc),
        0x2c9 => parse_arm_713(ins, pc),
        0x2ca => parse_arm_714(ins, pc),
        0x2cb => parse_arm_715(ins, pc),
        0x2cc => parse_arm_716(ins, pc),
        0x2cd => parse_arm_717(ins, pc),
        0x2ce => parse_arm_718(ins, pc),
        0x2cf => parse_arm_719(ins, pc),
        0x2d0 => parse_arm_720(ins, pc),
        0x2d1 => parse_arm_721(ins, pc),
        0x2d2 => parse_arm_722(ins, pc),
        0x2d3 => parse_arm_723(ins, pc),
        0x2d4 => parse_arm_724(ins, pc),
        0x2d5 => parse_arm_725(ins, pc),
        0x2d6 => parse_arm_726(ins, pc),
        0x2d7 => parse_arm_727(ins, pc),
        0x2d8 => parse_arm_728(ins, pc),
        0x2d9 => parse_arm_729(ins, pc),
        0x2da => parse_arm_730(ins, pc),
        0x2db => parse_arm_731(ins, pc),
        0x2dc => parse_arm_732(ins, pc),
        0x2dd => parse_arm_733(ins, pc),
        0x2de => parse_arm_734(ins, pc),
        0x2df => parse_arm_735(ins, pc),
        0x2e0 => parse_arm_736(ins, pc),
        0x2e1 => parse_arm_737(ins, pc),
        0x2e2 => parse_arm_738(ins, pc),
        0x2e3 => parse_arm_739(ins, pc),
        0x2e4 => parse_arm_740(ins, pc),
        0x2e5 => parse_arm_741(ins, pc),
        0x2e6 => parse_arm_742(ins, pc),
        0x2e7 => parse_arm_743(ins, pc),
        0x2e8 => parse_arm_744(ins, pc),
        0x2e9 => parse_arm_745(ins, pc),
        0x2ea => parse_arm_746(ins, pc),
        0x2eb => parse_arm_747(ins, pc),
        0x2ec => parse_arm_748(ins, pc),
        0x2ed => parse_arm_749(ins, pc),
        0x2ee => parse_arm_750(ins, pc),
        0x2ef => parse_arm_751(ins, pc),
        0x2f0 => parse_arm_752(ins, pc),
        0x2f1 => parse_arm_753(ins, pc),
        0x2f2 => parse_arm_754(ins, pc),
        0x2f3 => parse_arm_755(ins, pc),
        0x2f4 => parse_arm_756(ins, pc),
        0x2f5 => parse_arm_757(ins, pc),
        0x2f6 => parse_arm_758(ins, pc),
        0x2f7 => parse_arm_759(ins, pc),
        0x2f8 => parse_arm_760(ins, pc),
        0x2f9 => parse_arm_761(ins, pc),
        0x2fa => parse_arm_762(ins, pc),
        0x2fb => parse_arm_763(ins, pc),
        0x2fc => parse_arm_764(ins, pc),
        0x2fd => parse_arm_765(ins, pc),
        0x2fe => parse_arm_766(ins, pc),
        0x2ff => parse_arm_767(ins, pc),
        0x300 => parse_arm_768(ins, pc),
        0x301 => parse_arm_769(ins, pc),
        0x302 => parse_arm_770(ins, pc),
        0x303 => parse_arm_771(ins, pc),
        0x304 => parse_arm_772(ins, pc),
        0x305 => parse_arm_773(ins, pc),
        0x306 => parse_arm_774(ins, pc),
        0x307 => parse_arm_775(ins, pc),
        0x308 => parse_arm_776(ins, pc),
        0x309 => parse_arm_777(ins, pc),
        0x30a => parse_arm_778(ins, pc),
        0x30b => parse_arm_779(ins, pc),
        0x30c => parse_arm_780(ins, pc),
        0x30d => parse_arm_781(ins, pc),
        0x30e => parse_arm_782(ins, pc),
        0x30f => parse_arm_783(ins, pc),
        0x310 => parse_arm_784(ins, pc),
        0x311 => parse_arm_785(ins, pc),
        0x312 => parse_arm_786(ins, pc),
        0x313 => parse_arm_787(ins, pc),
        0x314 => parse_arm_788(ins, pc),
        0x315 => parse_arm_789(ins, pc),
        0x316 => parse_arm_790(ins, pc),
        0x317 => parse_arm_791(ins, pc),
        0x318 => parse_arm_792(ins, pc),
        0x319 => parse_arm_793(ins, pc),
        0x31a => parse_arm_794(ins, pc),
        0x31b => parse_arm_795(ins, pc),
        0x31c => parse_arm_796(ins, pc),
        0x31d => parse_arm_797(ins, pc),
        0x31e => parse_arm_798(ins, pc),
        0x31f => parse_arm_799(ins, pc),
        0x320 => parse_arm_800(ins, pc),
        0x321 => parse_arm_801(ins, pc),
        0x322 => parse_arm_802(ins, pc),
        0x323 => parse_arm_803(ins, pc),
        0x324 => parse_arm_804(ins, pc),
        0x325 => parse_arm_805(ins, pc),
        0x326 => parse_arm_806(ins, pc),
        0x327 => parse_arm_807(ins, pc),
        0x328 => parse_arm_808(ins, pc),
        0x329 => parse_arm_809(ins, pc),
        0x32a => parse_arm_810(ins, pc),
        0x32b => parse_arm_811(ins, pc),
        0x32c => parse_arm_812(ins, pc),
        0x32d => parse_arm_813(ins, pc),
        0x32e => parse_arm_814(ins, pc),
        0x32f => parse_arm_815(ins, pc),
        0x330 => parse_arm_816(ins, pc),
        0x331 => parse_arm_817(ins, pc),
        0x332 => parse_arm_818(ins, pc),
        0x333 => parse_arm_819(ins, pc),
        0x334 => parse_arm_820(ins, pc),
        0x335 => parse_arm_821(ins, pc),
        0x336 => parse_arm_822(ins, pc),
        0x337 => parse_arm_823(ins, pc),
        0x338 => parse_arm_824(ins, pc),
        0x339 => parse_arm_825(ins, pc),
        0x33a => parse_arm_826(ins, pc),
        0x33b => parse_arm_827(ins, pc),
        0x33c => parse_arm_828(ins, pc),
        0x33d => parse_arm_829(ins, pc),
        0x33e => parse_arm_830(ins, pc),
        0x33f => parse_arm_831(ins, pc),
        0x340 => parse_arm_832(ins, pc),
        0x341 => parse_arm_833(ins, pc),
        0x342 => parse_arm_834(ins, pc),
        0x343 => parse_arm_835(ins, pc),
        0x344 => parse_arm_836(ins, pc),
        0x345 => parse_arm_837(ins, pc),
        0x346 => parse_arm_838(ins, pc),
        0x347 => parse_arm_839(ins, pc),
        0x348 => parse_arm_840(ins, pc),
        0x349 => parse_arm_841(ins, pc),
        0x34a => parse_arm_842(ins, pc),
        0x34b => parse_arm_843(ins, pc),
        0x34c => parse_arm_844(ins, pc),
        0x34d => parse_arm_845(ins, pc),
        0x34e => parse_arm_846(ins, pc),
        0x34f => parse_arm_847(ins, pc),
        0x350 => parse_arm_848(ins, pc),
        0x351 => parse_arm_849(ins, pc),
        0x352 => parse_arm_850(ins, pc),
        0x353 => parse_arm_851(ins, pc),
        0x354 => parse_arm_852(ins, pc),
        0x355 => parse_arm_853(ins, pc),
        0x356 => parse_arm_854(ins, pc),
        0x357 => parse_arm_855(ins, pc),
        0x358 => parse_arm_856(ins, pc),
        0x359 => parse_arm_857(ins, pc),
        0x35a => parse_arm_858(ins, pc),
        0x35b => parse_arm_859(ins, pc),
        0x35c => parse_arm_860(ins, pc),
        0x35d => parse_arm_861(ins, pc),
        0x35e => parse_arm_862(ins, pc),
        0x35f => parse_arm_863(ins, pc),
        0x360 => parse_arm_864(ins, pc),
        0x361 => parse_arm_865(ins, pc),
        0x362 => parse_arm_866(ins, pc),
        0x363 => parse_arm_867(ins, pc),
        0x364 => parse_arm_868(ins, pc),
        0x365 => parse_arm_869(ins, pc),
        0x366 => parse_arm_870(ins, pc),
        0x367 => parse_arm_871(ins, pc),
        0x368 => parse_arm_872(ins, pc),
        0x369 => parse_arm_873(ins, pc),
        0x36a => parse_arm_874(ins, pc),
        0x36b => parse_arm_875(ins, pc),
        0x36c => parse_arm_876(ins, pc),
        0x36d => parse_arm_877(ins, pc),
        0x36e => parse_arm_878(ins, pc),
        0x36f => parse_arm_879(ins, pc),
        0x370 => parse_arm_880(ins, pc),
        0x371 => parse_arm_881(ins, pc),
        0x372 => parse_arm_882(ins, pc),
        0x373 => parse_arm_883(ins, pc),
        0x374 => parse_arm_884(ins, pc),
        0x375 => parse_arm_885(ins, pc),
        0x376 => parse_arm_886(ins, pc),
        0x377 => parse_arm_887(ins, pc),
        0x378 => parse_arm_888(ins, pc),
        0x379 => parse_arm_889(ins, pc),
        0x37a => parse_arm_890(ins, pc),
        0x37b => parse_arm_891(ins, pc),
        0x37c => parse_arm_892(ins, pc),
        0x37d => parse_arm_893(ins, pc),
        0x37e => parse_arm_894(ins, pc),
        0x37f => parse_arm_895(ins, pc),
        0x380 => parse_arm_896(ins, pc),
        0x381 => parse_arm_897(ins, pc),
        0x382 => parse_arm_898(ins, pc),
        0x383 => parse_arm_899(ins, pc),
        0x384 => parse_arm_900(ins, pc),
        0x385 => parse_arm_901(ins, pc),
        0x386 => parse_arm_902(ins, pc),
        0x387 => parse_arm_903(ins, pc),
        0x388 => parse_arm_904(ins, pc),
        0x389 => parse_arm_905(ins, pc),
        0x38a => parse_arm_906(ins, pc),
        0x38b => parse_arm_907(ins, pc),
        0x38c => parse_arm_908(ins, pc),
        0x38d => parse_arm_909(ins, pc),
        0x38e => parse_arm_910(ins, pc),
        0x38f => parse_arm_911(ins, pc),
        0x390 => parse_arm_912(ins, pc),
        0x391 => parse_arm_913(ins, pc),
        0x392 => parse_arm_914(ins, pc),
        0x393 => parse_arm_915(ins, pc),
        0x394 => parse_arm_916(ins, pc),
        0x395 => parse_arm_917(ins, pc),
        0x396 => parse_arm_918(ins, pc),
        0x397 => parse_arm_919(ins, pc),
        0x398 => parse_arm_920(ins, pc),
        0x399 => parse_arm_921(ins, pc),
        0x39a => parse_arm_922(ins, pc),
        0x39b => parse_arm_923(ins, pc),
        0x39c => parse_arm_924(ins, pc),
        0x39d => parse_arm_925(ins, pc),
        0x39e => parse_arm_926(ins, pc),
        0x39f => parse_arm_927(ins, pc),
        0x3a0 => parse_arm_928(ins, pc),
        0x3a1 => parse_arm_929(ins, pc),
        0x3a2 => parse_arm_930(ins, pc),
        0x3a3 => parse_arm_931(ins, pc),
        0x3a4 => parse_arm_932(ins, pc),
        0x3a5 => parse_arm_933(ins, pc),
        0x3a6 => parse_arm_934(ins, pc),
        0x3a7 => parse_arm_935(ins, pc),
        0x3a8 => parse_arm_936(ins, pc),
        0x3a9 => parse_arm_937(ins, pc),
        0x3aa => parse_arm_938(ins, pc),
        0x3ab => parse_arm_939(ins, pc),
        0x3ac => parse_arm_940(ins, pc),
        0x3ad => parse_arm_941(ins, pc),
        0x3ae => parse_arm_942(ins, pc),
        0x3af => parse_arm_943(ins, pc),
        0x3b0 => parse_arm_944(ins, pc),
        0x3b1 => parse_arm_945(ins, pc),
        0x3b2 => parse_arm_946(ins, pc),
        0x3b3 => parse_arm_947(ins, pc),
        0x3b4 => parse_arm_948(ins, pc),
        0x3b5 => parse_arm_949(ins, pc),
        0x3b6 => parse_arm_950(ins, pc),
        0x3b7 => parse_arm_951(ins, pc),
        0x3b8 => parse_arm_952(ins, pc),
        0x3b9 => parse_arm_953(ins, pc),
        0x3ba => parse_arm_954(ins, pc),
        0x3bb => parse_arm_955(ins, pc),
        0x3bc => parse_arm_956(ins, pc),
        0x3bd => parse_arm_957(ins, pc),
        0x3be => parse_arm_958(ins, pc),
        0x3bf => parse_arm_959(ins, pc),
        0x3c0 => parse_arm_960(ins, pc),
        0x3c1 => parse_arm_961(ins, pc),
        0x3c2 => parse_arm_962(ins, pc),
        0x3c3 => parse_arm_963(ins, pc),
        0x3c4 => parse_arm_964(ins, pc),
        0x3c5 => parse_arm_965(ins, pc),
        0x3c6 => parse_arm_966(ins, pc),
        0x3c7 => parse_arm_967(ins, pc),
        0x3c8 => parse_arm_968(ins, pc),
        0x3c9 => parse_arm_969(ins, pc),
        0x3ca => parse_arm_970(ins, pc),
        0x3cb => parse_arm_971(ins, pc),
        0x3cc => parse_arm_972(ins, pc),
        0x3cd => parse_arm_973(ins, pc),
        0x3ce => parse_arm_974(ins, pc),
        0x3cf => parse_arm_975(ins, pc),
        0x3d0 => parse_arm_976(ins, pc),
        0x3d1 => parse_arm_977(ins, pc),
        0x3d2 => parse_arm_978(ins, pc),
        0x3d3 => parse_arm_979(ins, pc),
        0x3d4 => parse_arm_980(ins, pc),
        0x3d5 => parse_arm_981(ins, pc),
        0x3d6 => parse_arm_982(ins, pc),
        0x3d7 => parse_arm_983(ins, pc),
        0x3d8 => parse_arm_984(ins, pc),
        0x3d9 => parse_arm_985(ins, pc),
        0x3da => parse_arm_986(ins, pc),
        0x3db => parse_arm_987(ins, pc),
        0x3dc => parse_arm_988(ins, pc),
        0x3dd => parse_arm_989(ins, pc),
        0x3de => parse_arm_990(ins, pc),
        0x3df => parse_arm_991(ins, pc),
        0x3e0 => parse_arm_992(ins, pc),
        0x3e1 => parse_arm_993(ins, pc),
        0x3e2 => parse_arm_994(ins, pc),
        0x3e3 => parse_arm_995(ins, pc),
        0x3e4 => parse_arm_996(ins, pc),
        0x3e5 => parse_arm_997(ins, pc),
        0x3e6 => parse_arm_998(ins, pc),
        0x3e7 => parse_arm_999(ins, pc),
        0x3e8 => parse_arm_1000(ins, pc),
        0x3e9 => parse_arm_1001(ins, pc),
        0x3ea => parse_arm_1002(ins, pc),
        0x3eb => parse_arm_1003(ins, pc),
        0x3ec => parse_arm_1004(ins, pc),
        0x3ed => parse_arm_1005(ins, pc),
        0x3ee => parse_arm_1006(ins, pc),
        0x3ef => parse_arm_1007(ins, pc),
        0x3f0 => parse_arm_1008(ins, pc),
        0x3f1 => parse_arm_1009(ins, pc),
        0x3f2 => parse_arm_1010(ins, pc),
        0x3f3 => parse_arm_1011(ins, pc),
        0x3f4 => parse_arm_1012(ins, pc),
        0x3f5 => parse_arm_1013(ins, pc),
        0x3f6 => parse_arm_1014(ins, pc),
        0x3f7 => parse_arm_1015(ins, pc),
        0x3f8 => parse_arm_1016(ins, pc),
        0x3f9 => parse_arm_1017(ins, pc),
        0x3fa => parse_arm_1018(ins, pc),
        0x3fb => parse_arm_1019(ins, pc),
        0x3fc => parse_arm_1020(ins, pc),
        0x3fd => parse_arm_1021(ins, pc),
        0x3fe => parse_arm_1022(ins, pc),
        0x3ff => parse_arm_1023(ins, pc),
        0x400 => parse_arm_1024(ins, pc),
        0x401 => parse_arm_1025(ins, pc),
        0x402 => parse_arm_1026(ins, pc),
        0x403 => parse_arm_1027(ins, pc),
        0x404 => parse_arm_1028(ins, pc),
        0x405 => parse_arm_1029(ins, pc),
        0x406 => parse_arm_1030(ins, pc),
        0x407 => parse_arm_1031(ins, pc),
        0x408 => parse_arm_1032(ins, pc),
        0x409 => parse_arm_1033(ins, pc),
        0x40a => parse_arm_1034(ins, pc),
        0x40b => parse_arm_1035(ins, pc),
        0x40c => parse_arm_1036(ins, pc),
        0x40d => parse_arm_1037(ins, pc),
        0x40e => parse_arm_1038(ins, pc),
        0x40f => parse_arm_1039(ins, pc),
        0x410 => parse_arm_1040(ins, pc),
        0x411 => parse_arm_1041(ins, pc),
        0x412 => parse_arm_1042(ins, pc),
        0x413 => parse_arm_1043(ins, pc),
        0x414 => parse_arm_1044(ins, pc),
        0x415 => parse_arm_1045(ins, pc),
        0x416 => parse_arm_1046(ins, pc),
        0x417 => parse_arm_1047(ins, pc),
        0x418 => parse_arm_1048(ins, pc),
        0x419 => parse_arm_1049(ins, pc),
        0x41a => parse_arm_1050(ins, pc),
        0x41b => parse_arm_1051(ins, pc),
        0x41c => parse_arm_1052(ins, pc),
        0x41d => parse_arm_1053(ins, pc),
        0x41e => parse_arm_1054(ins, pc),
        0x41f => parse_arm_1055(ins, pc),
        0x420 => parse_arm_1056(ins, pc),
        0x421 => parse_arm_1057(ins, pc),
        0x422 => parse_arm_1058(ins, pc),
        0x423 => parse_arm_1059(ins, pc),
        0x424 => parse_arm_1060(ins, pc),
        0x425 => parse_arm_1061(ins, pc),
        0x426 => parse_arm_1062(ins, pc),
        0x427 => parse_arm_1063(ins, pc),
        0x428 => parse_arm_1064(ins, pc),
        0x429 => parse_arm_1065(ins, pc),
        0x42a => parse_arm_1066(ins, pc),
        0x42b => parse_arm_1067(ins, pc),
        0x42c => parse_arm_1068(ins, pc),
        0x42d => parse_arm_1069(ins, pc),
        0x42e => parse_arm_1070(ins, pc),
        0x42f => parse_arm_1071(ins, pc),
        0x430 => parse_arm_1072(ins, pc),
        0x431 => parse_arm_1073(ins, pc),
        0x432 => parse_arm_1074(ins, pc),
        0x433 => parse_arm_1075(ins, pc),
        0x434 => parse_arm_1076(ins, pc),
        0x435 => parse_arm_1077(ins, pc),
        0x436 => parse_arm_1078(ins, pc),
        0x437 => parse_arm_1079(ins, pc),
        0x438 => parse_arm_1080(ins, pc),
        0x439 => parse_arm_1081(ins, pc),
        0x43a => parse_arm_1082(ins, pc),
        0x43b => parse_arm_1083(ins, pc),
        0x43c => parse_arm_1084(ins, pc),
        0x43d => parse_arm_1085(ins, pc),
        0x43e => parse_arm_1086(ins, pc),
        0x43f => parse_arm_1087(ins, pc),
        0x440 => parse_arm_1088(ins, pc),
        0x441 => parse_arm_1089(ins, pc),
        0x442 => parse_arm_1090(ins, pc),
        0x443 => parse_arm_1091(ins, pc),
        0x444 => parse_arm_1092(ins, pc),
        0x445 => parse_arm_1093(ins, pc),
        0x446 => parse_arm_1094(ins, pc),
        0x447 => parse_arm_1095(ins, pc),
        0x448 => parse_arm_1096(ins, pc),
        0x449 => parse_arm_1097(ins, pc),
        0x44a => parse_arm_1098(ins, pc),
        0x44b => parse_arm_1099(ins, pc),
        0x44c => parse_arm_1100(ins, pc),
        0x44d => parse_arm_1101(ins, pc),
        0x44e => parse_arm_1102(ins, pc),
        0x44f => parse_arm_1103(ins, pc),
        0x450 => parse_arm_1104(ins, pc),
        0x451 => parse_arm_1105(ins, pc),
        0x452 => parse_arm_1106(ins, pc),
        0x453 => parse_arm_1107(ins, pc),
        0x454 => parse_arm_1108(ins, pc),
        0x455 => parse_arm_1109(ins, pc),
        0x456 => parse_arm_1110(ins, pc),
        0x457 => parse_arm_1111(ins, pc),
        0x458 => parse_arm_1112(ins, pc),
        0x459 => parse_arm_1113(ins, pc),
        0x45a => parse_arm_1114(ins, pc),
        0x45b => parse_arm_1115(ins, pc),
        0x45c => parse_arm_1116(ins, pc),
        0x45d => parse_arm_1117(ins, pc),
        0x45e => parse_arm_1118(ins, pc),
        0x45f => parse_arm_1119(ins, pc),
        0x460 => parse_arm_1120(ins, pc),
        0x461 => parse_arm_1121(ins, pc),
        0x462 => parse_arm_1122(ins, pc),
        0x463 => parse_arm_1123(ins, pc),
        0x464 => parse_arm_1124(ins, pc),
        0x465 => parse_arm_1125(ins, pc),
        0x466 => parse_arm_1126(ins, pc),
        0x467 => parse_arm_1127(ins, pc),
        0x468 => parse_arm_1128(ins, pc),
        0x469 => parse_arm_1129(ins, pc),
        0x46a => parse_arm_1130(ins, pc),
        0x46b => parse_arm_1131(ins, pc),
        0x46c => parse_arm_1132(ins, pc),
        0x46d => parse_arm_1133(ins, pc),
        0x46e => parse_arm_1134(ins, pc),
        0x46f => parse_arm_1135(ins, pc),
        0x470 => parse_arm_1136(ins, pc),
        0x471 => parse_arm_1137(ins, pc),
        0x472 => parse_arm_1138(ins, pc),
        0x473 => parse_arm_1139(ins, pc),
        0x474 => parse_arm_1140(ins, pc),
        0x475 => parse_arm_1141(ins, pc),
        0x476 => parse_arm_1142(ins, pc),
        0x477 => parse_arm_1143(ins, pc),
        0x478 => parse_arm_1144(ins, pc),
        0x479 => parse_arm_1145(ins, pc),
        0x47a => parse_arm_1146(ins, pc),
        0x47b => parse_arm_1147(ins, pc),
        0x47c => parse_arm_1148(ins, pc),
        0x47d => parse_arm_1149(ins, pc),
        0x47e => parse_arm_1150(ins, pc),
        0x47f => parse_arm_1151(ins, pc),
        0x480 => parse_arm_1152(ins, pc),
        0x481 => parse_arm_1153(ins, pc),
        0x482 => parse_arm_1154(ins, pc),
        0x483 => parse_arm_1155(ins, pc),
        0x484 => parse_arm_1156(ins, pc),
        0x485 => parse_arm_1157(ins, pc),
        0x486 => parse_arm_1158(ins, pc),
        0x487 => parse_arm_1159(ins, pc),
        0x488 => parse_arm_1160(ins, pc),
        0x489 => parse_arm_1161(ins, pc),
        0x48a => parse_arm_1162(ins, pc),
        0x48b => parse_arm_1163(ins, pc),
        0x48c => parse_arm_1164(ins, pc),
        0x48d => parse_arm_1165(ins, pc),
        0x48e => parse_arm_1166(ins, pc),
        0x48f => parse_arm_1167(ins, pc),
        0x490 => parse_arm_1168(ins, pc),
        0x491 => parse_arm_1169(ins, pc),
        0x492 => parse_arm_1170(ins, pc),
        0x493 => parse_arm_1171(ins, pc),
        0x494 => parse_arm_1172(ins, pc),
        0x495 => parse_arm_1173(ins, pc),
        0x496 => parse_arm_1174(ins, pc),
        0x497 => parse_arm_1175(ins, pc),
        0x498 => parse_arm_1176(ins, pc),
        0x499 => parse_arm_1177(ins, pc),
        0x49a => parse_arm_1178(ins, pc),
        0x49b => parse_arm_1179(ins, pc),
        0x49c => parse_arm_1180(ins, pc),
        0x49d => parse_arm_1181(ins, pc),
        0x49e => parse_arm_1182(ins, pc),
        0x49f => parse_arm_1183(ins, pc),
        0x4a0 => parse_arm_1184(ins, pc),
        0x4a1 => parse_arm_1185(ins, pc),
        0x4a2 => parse_arm_1186(ins, pc),
        0x4a3 => parse_arm_1187(ins, pc),
        0x4a4 => parse_arm_1188(ins, pc),
        0x4a5 => parse_arm_1189(ins, pc),
        0x4a6 => parse_arm_1190(ins, pc),
        0x4a7 => parse_arm_1191(ins, pc),
        0x4a8 => parse_arm_1192(ins, pc),
        0x4a9 => parse_arm_1193(ins, pc),
        0x4aa => parse_arm_1194(ins, pc),
        0x4ab => parse_arm_1195(ins, pc),
        0x4ac => parse_arm_1196(ins, pc),
        0x4ad => parse_arm_1197(ins, pc),
        0x4ae => parse_arm_1198(ins, pc),
        0x4af => parse_arm_1199(ins, pc),
        0x4b0 => parse_arm_1200(ins, pc),
        0x4b1 => parse_arm_1201(ins, pc),
        0x4b2 => parse_arm_1202(ins, pc),
        0x4b3 => parse_arm_1203(ins, pc),
        0x4b4 => parse_arm_1204(ins, pc),
        0x4b5 => parse_arm_1205(ins, pc),
        0x4b6 => parse_arm_1206(ins, pc),
        0x4b7 => parse_arm_1207(ins, pc),
        0x4b8 => parse_arm_1208(ins, pc),
        0x4b9 => parse_arm_1209(ins, pc),
        0x4ba => parse_arm_1210(ins, pc),
        0x4bb => parse_arm_1211(ins, pc),
        0x4bc => parse_arm_1212(ins, pc),
        0x4bd => parse_arm_1213(ins, pc),
        0x4be => parse_arm_1214(ins, pc),
        0x4bf => parse_arm_1215(ins, pc),
        0x4c0 => parse_arm_1216(ins, pc),
        0x4c1 => parse_arm_1217(ins, pc),
        0x4c2 => parse_arm_1218(ins, pc),
        0x4c3 => parse_arm_1219(ins, pc),
        0x4c4 => parse_arm_1220(ins, pc),
        0x4c5 => parse_arm_1221(ins, pc),
        0x4c6 => parse_arm_1222(ins, pc),
        0x4c7 => parse_arm_1223(ins, pc),
        0x4c8 => parse_arm_1224(ins, pc),
        0x4c9 => parse_arm_1225(ins, pc),
        0x4ca => parse_arm_1226(ins, pc),
        0x4cb => parse_arm_1227(ins, pc),
        0x4cc => parse_arm_1228(ins, pc),
        0x4cd => parse_arm_1229(ins, pc),
        0x4ce => parse_arm_1230(ins, pc),
        0x4cf => parse_arm_1231(ins, pc),
        0x4d0 => parse_arm_1232(ins, pc),
        0x4d1 => parse_arm_1233(ins, pc),
        0x4d2 => parse_arm_1234(ins, pc),
        0x4d3 => parse_arm_1235(ins, pc),
        0x4d4 => parse_arm_1236(ins, pc),
        0x4d5 => parse_arm_1237(ins, pc),
        0x4d6 => parse_arm_1238(ins, pc),
        0x4d7 => parse_arm_1239(ins, pc),
        0x4d8 => parse_arm_1240(ins, pc),
        0x4d9 => parse_arm_1241(ins, pc),
        0x4da => parse_arm_1242(ins, pc),
        0x4db => parse_arm_1243(ins, pc),
        0x4dc => parse_arm_1244(ins, pc),
        0x4dd => parse_arm_1245(ins, pc),
        0x4de => parse_arm_1246(ins, pc),
        0x4df => parse_arm_1247(ins, pc),
        0x4e0 => parse_arm_1248(ins, pc),
        0x4e1 => parse_arm_1249(ins, pc),
        0x4e2 => parse_arm_1250(ins, pc),
        0x4e3 => parse_arm_1251(ins, pc),
        0x4e4 => parse_arm_1252(ins, pc),
        0x4e5 => parse_arm_1253(ins, pc),
        0x4e6 => parse_arm_1254(ins, pc),
        0x4e7 => parse_arm_1255(ins, pc),
        0x4e8 => parse_arm_1256(ins, pc),
        0x4e9 => parse_arm_1257(ins, pc),
        0x4ea => parse_arm_1258(ins, pc),
        0x4eb => parse_arm_1259(ins, pc),
        0x4ec => parse_arm_1260(ins, pc),
        0x4ed => parse_arm_1261(ins, pc),
        0x4ee => parse_arm_1262(ins, pc),
        0x4ef => parse_arm_1263(ins, pc),
        0x4f0 => parse_arm_1264(ins, pc),
        0x4f1 => parse_arm_1265(ins, pc),
        0x4f2 => parse_arm_1266(ins, pc),
        0x4f3 => parse_arm_1267(ins, pc),
        0x4f4 => parse_arm_1268(ins, pc),
        0x4f5 => parse_arm_1269(ins, pc),
        0x4f6 => parse_arm_1270(ins, pc),
        0x4f7 => parse_arm_1271(ins, pc),
        0x4f8 => parse_arm_1272(ins, pc),
        0x4f9 => parse_arm_1273(ins, pc),
        0x4fa => parse_arm_1274(ins, pc),
        0x4fb => parse_arm_1275(ins, pc),
        0x4fc => parse_arm_1276(ins, pc),
        0x4fd => parse_arm_1277(ins, pc),
        0x4fe => parse_arm_1278(ins, pc),
        0x4ff => parse_arm_1279(ins, pc),
        0x500 => parse_arm_1280(ins, pc),
        0x501 => parse_arm_1281(ins, pc),
        0x502 => parse_arm_1282(ins, pc),
        0x503 => parse_arm_1283(ins, pc),
        0x504 => parse_arm_1284(ins, pc),
        0x505 => parse_arm_1285(ins, pc),
        0x506 => parse_arm_1286(ins, pc),
        0x507 => parse_arm_1287(ins, pc),
        0x508 => parse_arm_1288(ins, pc),
        0x509 => parse_arm_1289(ins, pc),
        0x50a => parse_arm_1290(ins, pc),
        0x50b => parse_arm_1291(ins, pc),
        0x50c => parse_arm_1292(ins, pc),
        0x50d => parse_arm_1293(ins, pc),
        0x50e => parse_arm_1294(ins, pc),
        0x50f => parse_arm_1295(ins, pc),
        0x510 => parse_arm_1296(ins, pc),
        0x511 => parse_arm_1297(ins, pc),
        0x512 => parse_arm_1298(ins, pc),
        0x513 => parse_arm_1299(ins, pc),
        0x514 => parse_arm_1300(ins, pc),
        0x515 => parse_arm_1301(ins, pc),
        0x516 => parse_arm_1302(ins, pc),
        0x517 => parse_arm_1303(ins, pc),
        0x518 => parse_arm_1304(ins, pc),
        0x519 => parse_arm_1305(ins, pc),
        0x51a => parse_arm_1306(ins, pc),
        0x51b => parse_arm_1307(ins, pc),
        0x51c => parse_arm_1308(ins, pc),
        0x51d => parse_arm_1309(ins, pc),
        0x51e => parse_arm_1310(ins, pc),
        0x51f => parse_arm_1311(ins, pc),
        0x520 => parse_arm_1312(ins, pc),
        0x521 => parse_arm_1313(ins, pc),
        0x522 => parse_arm_1314(ins, pc),
        0x523 => parse_arm_1315(ins, pc),
        0x524 => parse_arm_1316(ins, pc),
        0x525 => parse_arm_1317(ins, pc),
        0x526 => parse_arm_1318(ins, pc),
        0x527 => parse_arm_1319(ins, pc),
        0x528 => parse_arm_1320(ins, pc),
        0x529 => parse_arm_1321(ins, pc),
        0x52a => parse_arm_1322(ins, pc),
        0x52b => parse_arm_1323(ins, pc),
        0x52c => parse_arm_1324(ins, pc),
        0x52d => parse_arm_1325(ins, pc),
        0x52e => parse_arm_1326(ins, pc),
        0x52f => parse_arm_1327(ins, pc),
        0x530 => parse_arm_1328(ins, pc),
        0x531 => parse_arm_1329(ins, pc),
        0x532 => parse_arm_1330(ins, pc),
        0x533 => parse_arm_1331(ins, pc),
        0x534 => parse_arm_1332(ins, pc),
        0x535 => parse_arm_1333(ins, pc),
        0x536 => parse_arm_1334(ins, pc),
        0x537 => parse_arm_1335(ins, pc),
        0x538 => parse_arm_1336(ins, pc),
        0x539 => parse_arm_1337(ins, pc),
        0x53a => parse_arm_1338(ins, pc),
        0x53b => parse_arm_1339(ins, pc),
        0x53c => parse_arm_1340(ins, pc),
        0x53d => parse_arm_1341(ins, pc),
        0x53e => parse_arm_1342(ins, pc),
        0x53f => parse_arm_1343(ins, pc),
        0x540 => parse_arm_1344(ins, pc),
        0x541 => parse_arm_1345(ins, pc),
        0x542 => parse_arm_1346(ins, pc),
        0x543 => parse_arm_1347(ins, pc),
        0x544 => parse_arm_1348(ins, pc),
        0x545 => parse_arm_1349(ins, pc),
        0x546 => parse_arm_1350(ins, pc),
        0x547 => parse_arm_1351(ins, pc),
        0x548 => parse_arm_1352(ins, pc),
        0x549 => parse_arm_1353(ins, pc),
        0x54a => parse_arm_1354(ins, pc),
        0x54b => parse_arm_1355(ins, pc),
        0x54c => parse_arm_1356(ins, pc),
        0x54d => parse_arm_1357(ins, pc),
        0x54e => parse_arm_1358(ins, pc),
        0x54f => parse_arm_1359(ins, pc),
        0x550 => parse_arm_1360(ins, pc),
        0x551 => parse_arm_1361(ins, pc),
        0x552 => parse_arm_1362(ins, pc),
        0x553 => parse_arm_1363(ins, pc),
        0x554 => parse_arm_1364(ins, pc),
        0x555 => parse_arm_1365(ins, pc),
        0x556 => parse_arm_1366(ins, pc),
        0x557 => parse_arm_1367(ins, pc),
        0x558 => parse_arm_1368(ins, pc),
        0x559 => parse_arm_1369(ins, pc),
        0x55a => parse_arm_1370(ins, pc),
        0x55b => parse_arm_1371(ins, pc),
        0x55c => parse_arm_1372(ins, pc),
        0x55d => parse_arm_1373(ins, pc),
        0x55e => parse_arm_1374(ins, pc),
        0x55f => parse_arm_1375(ins, pc),
        0x560 => parse_arm_1376(ins, pc),
        0x561 => parse_arm_1377(ins, pc),
        0x562 => parse_arm_1378(ins, pc),
        0x563 => parse_arm_1379(ins, pc),
        0x564 => parse_arm_1380(ins, pc),
        0x565 => parse_arm_1381(ins, pc),
        0x566 => parse_arm_1382(ins, pc),
        0x567 => parse_arm_1383(ins, pc),
        0x568 => parse_arm_1384(ins, pc),
        0x569 => parse_arm_1385(ins, pc),
        0x56a => parse_arm_1386(ins, pc),
        0x56b => parse_arm_1387(ins, pc),
        0x56c => parse_arm_1388(ins, pc),
        0x56d => parse_arm_1389(ins, pc),
        0x56e => parse_arm_1390(ins, pc),
        0x56f => parse_arm_1391(ins, pc),
        0x570 => parse_arm_1392(ins, pc),
        0x571 => parse_arm_1393(ins, pc),
        0x572 => parse_arm_1394(ins, pc),
        0x573 => parse_arm_1395(ins, pc),
        0x574 => parse_arm_1396(ins, pc),
        0x575 => parse_arm_1397(ins, pc),
        0x576 => parse_arm_1398(ins, pc),
        0x577 => parse_arm_1399(ins, pc),
        0x578 => parse_arm_1400(ins, pc),
        0x579 => parse_arm_1401(ins, pc),
        0x57a => parse_arm_1402(ins, pc),
        0x57b => parse_arm_1403(ins, pc),
        0x57c => parse_arm_1404(ins, pc),
        0x57d => parse_arm_1405(ins, pc),
        0x57e => parse_arm_1406(ins, pc),
        0x57f => parse_arm_1407(ins, pc),
        0x580 => parse_arm_1408(ins, pc),
        0x581 => parse_arm_1409(ins, pc),
        0x582 => parse_arm_1410(ins, pc),
        0x583 => parse_arm_1411(ins, pc),
        0x584 => parse_arm_1412(ins, pc),
        0x585 => parse_arm_1413(ins, pc),
        0x586 => parse_arm_1414(ins, pc),
        0x587 => parse_arm_1415(ins, pc),
        0x588 => parse_arm_1416(ins, pc),
        0x589 => parse_arm_1417(ins, pc),
        0x58a => parse_arm_1418(ins, pc),
        0x58b => parse_arm_1419(ins, pc),
        0x58c => parse_arm_1420(ins, pc),
        0x58d => parse_arm_1421(ins, pc),
        0x58e => parse_arm_1422(ins, pc),
        0x58f => parse_arm_1423(ins, pc),
        0x590 => parse_arm_1424(ins, pc),
        0x591 => parse_arm_1425(ins, pc),
        0x592 => parse_arm_1426(ins, pc),
        0x593 => parse_arm_1427(ins, pc),
        0x594 => parse_arm_1428(ins, pc),
        0x595 => parse_arm_1429(ins, pc),
        0x596 => parse_arm_1430(ins, pc),
        0x597 => parse_arm_1431(ins, pc),
        0x598 => parse_arm_1432(ins, pc),
        0x599 => parse_arm_1433(ins, pc),
        0x59a => parse_arm_1434(ins, pc),
        0x59b => parse_arm_1435(ins, pc),
        0x59c => parse_arm_1436(ins, pc),
        0x59d => parse_arm_1437(ins, pc),
        0x59e => parse_arm_1438(ins, pc),
        0x59f => parse_arm_1439(ins, pc),
        0x5a0 => parse_arm_1440(ins, pc),
        0x5a1 => parse_arm_1441(ins, pc),
        0x5a2 => parse_arm_1442(ins, pc),
        0x5a3 => parse_arm_1443(ins, pc),
        0x5a4 => parse_arm_1444(ins, pc),
        0x5a5 => parse_arm_1445(ins, pc),
        0x5a6 => parse_arm_1446(ins, pc),
        0x5a7 => parse_arm_1447(ins, pc),
        0x5a8 => parse_arm_1448(ins, pc),
        0x5a9 => parse_arm_1449(ins, pc),
        0x5aa => parse_arm_1450(ins, pc),
        0x5ab => parse_arm_1451(ins, pc),
        0x5ac => parse_arm_1452(ins, pc),
        0x5ad => parse_arm_1453(ins, pc),
        0x5ae => parse_arm_1454(ins, pc),
        0x5af => parse_arm_1455(ins, pc),
        0x5b0 => parse_arm_1456(ins, pc),
        0x5b1 => parse_arm_1457(ins, pc),
        0x5b2 => parse_arm_1458(ins, pc),
        0x5b3 => parse_arm_1459(ins, pc),
        0x5b4 => parse_arm_1460(ins, pc),
        0x5b5 => parse_arm_1461(ins, pc),
        0x5b6 => parse_arm_1462(ins, pc),
        0x5b7 => parse_arm_1463(ins, pc),
        0x5b8 => parse_arm_1464(ins, pc),
        0x5b9 => parse_arm_1465(ins, pc),
        0x5ba => parse_arm_1466(ins, pc),
        0x5bb => parse_arm_1467(ins, pc),
        0x5bc => parse_arm_1468(ins, pc),
        0x5bd => parse_arm_1469(ins, pc),
        0x5be => parse_arm_1470(ins, pc),
        0x5bf => parse_arm_1471(ins, pc),
        0x5c0 => parse_arm_1472(ins, pc),
        0x5c1 => parse_arm_1473(ins, pc),
        0x5c2 => parse_arm_1474(ins, pc),
        0x5c3 => parse_arm_1475(ins, pc),
        0x5c4 => parse_arm_1476(ins, pc),
        0x5c5 => parse_arm_1477(ins, pc),
        0x5c6 => parse_arm_1478(ins, pc),
        0x5c7 => parse_arm_1479(ins, pc),
        0x5c8 => parse_arm_1480(ins, pc),
        0x5c9 => parse_arm_1481(ins, pc),
        0x5ca => parse_arm_1482(ins, pc),
        0x5cb => parse_arm_1483(ins, pc),
        0x5cc => parse_arm_1484(ins, pc),
        0x5cd => parse_arm_1485(ins, pc),
        0x5ce => parse_arm_1486(ins, pc),
        0x5cf => parse_arm_1487(ins, pc),
        0x5d0 => parse_arm_1488(ins, pc),
        0x5d1 => parse_arm_1489(ins, pc),
        0x5d2 => parse_arm_1490(ins, pc),
        0x5d3 => parse_arm_1491(ins, pc),
        0x5d4 => parse_arm_1492(ins, pc),
        0x5d5 => parse_arm_1493(ins, pc),
        0x5d6 => parse_arm_1494(ins, pc),
        0x5d7 => parse_arm_1495(ins, pc),
        0x5d8 => parse_arm_1496(ins, pc),
        0x5d9 => parse_arm_1497(ins, pc),
        0x5da => parse_arm_1498(ins, pc),
        0x5db => parse_arm_1499(ins, pc),
        0x5dc => parse_arm_1500(ins, pc),
        0x5dd => parse_arm_1501(ins, pc),
        0x5de => parse_arm_1502(ins, pc),
        0x5df => parse_arm_1503(ins, pc),
        0x5e0 => parse_arm_1504(ins, pc),
        0x5e1 => parse_arm_1505(ins, pc),
        0x5e2 => parse_arm_1506(ins, pc),
        0x5e3 => parse_arm_1507(ins, pc),
        0x5e4 => parse_arm_1508(ins, pc),
        0x5e5 => parse_arm_1509(ins, pc),
        0x5e6 => parse_arm_1510(ins, pc),
        0x5e7 => parse_arm_1511(ins, pc),
        0x5e8 => parse_arm_1512(ins, pc),
        0x5e9 => parse_arm_1513(ins, pc),
        0x5ea => parse_arm_1514(ins, pc),
        0x5eb => parse_arm_1515(ins, pc),
        0x5ec => parse_arm_1516(ins, pc),
        0x5ed => parse_arm_1517(ins, pc),
        0x5ee => parse_arm_1518(ins, pc),
        0x5ef => parse_arm_1519(ins, pc),
        0x5f0 => parse_arm_1520(ins, pc),
        0x5f1 => parse_arm_1521(ins, pc),
        0x5f2 => parse_arm_1522(ins, pc),
        0x5f3 => parse_arm_1523(ins, pc),
        0x5f4 => parse_arm_1524(ins, pc),
        0x5f5 => parse_arm_1525(ins, pc),
        0x5f6 => parse_arm_1526(ins, pc),
        0x5f7 => parse_arm_1527(ins, pc),
        0x5f8 => parse_arm_1528(ins, pc),
        0x5f9 => parse_arm_1529(ins, pc),
        0x5fa => parse_arm_1530(ins, pc),
        0x5fb => parse_arm_1531(ins, pc),
        0x5fc => parse_arm_1532(ins, pc),
        0x5fd => parse_arm_1533(ins, pc),
        0x5fe => parse_arm_1534(ins, pc),
        0x5ff => parse_arm_1535(ins, pc),
        0x600 => parse_arm_1536(ins, pc),
        0x601 => parse_arm_1537(ins, pc),
        0x602 => parse_arm_1538(ins, pc),
        0x603 => parse_arm_1539(ins, pc),
        0x604 => parse_arm_1540(ins, pc),
        0x605 => parse_arm_1541(ins, pc),
        0x606 => parse_arm_1542(ins, pc),
        0x607 => parse_arm_1543(ins, pc),
        0x608 => parse_arm_1544(ins, pc),
        0x609 => parse_arm_1545(ins, pc),
        0x60a => parse_arm_1546(ins, pc),
        0x60b => parse_arm_1547(ins, pc),
        0x60c => parse_arm_1548(ins, pc),
        0x60d => parse_arm_1549(ins, pc),
        0x60e => parse_arm_1550(ins, pc),
        0x60f => parse_arm_1551(ins, pc),
        0x610 => parse_arm_1552(ins, pc),
        0x611 => parse_arm_1553(ins, pc),
        0x612 => parse_arm_1554(ins, pc),
        0x613 => parse_arm_1555(ins, pc),
        0x614 => parse_arm_1556(ins, pc),
        0x615 => parse_arm_1557(ins, pc),
        0x616 => parse_arm_1558(ins, pc),
        0x617 => parse_arm_1559(ins, pc),
        0x618 => parse_arm_1560(ins, pc),
        0x619 => parse_arm_1561(ins, pc),
        0x61a => parse_arm_1562(ins, pc),
        0x61b => parse_arm_1563(ins, pc),
        0x61c => parse_arm_1564(ins, pc),
        0x61d => parse_arm_1565(ins, pc),
        0x61e => parse_arm_1566(ins, pc),
        0x61f => parse_arm_1567(ins, pc),
        0x620 => parse_arm_1568(ins, pc),
        0x621 => parse_arm_1569(ins, pc),
        0x622 => parse_arm_1570(ins, pc),
        0x623 => parse_arm_1571(ins, pc),
        0x624 => parse_arm_1572(ins, pc),
        0x625 => parse_arm_1573(ins, pc),
        0x626 => parse_arm_1574(ins, pc),
        0x627 => parse_arm_1575(ins, pc),
        0x628 => parse_arm_1576(ins, pc),
        0x629 => parse_arm_1577(ins, pc),
        0x62a => parse_arm_1578(ins, pc),
        0x62b => parse_arm_1579(ins, pc),
        0x62c => parse_arm_1580(ins, pc),
        0x62d => parse_arm_1581(ins, pc),
        0x62e => parse_arm_1582(ins, pc),
        0x62f => parse_arm_1583(ins, pc),
        0x630 => parse_arm_1584(ins, pc),
        0x631 => parse_arm_1585(ins, pc),
        0x632 => parse_arm_1586(ins, pc),
        0x633 => parse_arm_1587(ins, pc),
        0x634 => parse_arm_1588(ins, pc),
        0x635 => parse_arm_1589(ins, pc),
        0x636 => parse_arm_1590(ins, pc),
        0x637 => parse_arm_1591(ins, pc),
        0x638 => parse_arm_1592(ins, pc),
        0x639 => parse_arm_1593(ins, pc),
        0x63a => parse_arm_1594(ins, pc),
        0x63b => parse_arm_1595(ins, pc),
        0x63c => parse_arm_1596(ins, pc),
        0x63d => parse_arm_1597(ins, pc),
        0x63e => parse_arm_1598(ins, pc),
        0x63f => parse_arm_1599(ins, pc),
        0x640 => parse_arm_1600(ins, pc),
        0x641 => parse_arm_1601(ins, pc),
        0x642 => parse_arm_1602(ins, pc),
        0x643 => parse_arm_1603(ins, pc),
        0x644 => parse_arm_1604(ins, pc),
        0x645 => parse_arm_1605(ins, pc),
        0x646 => parse_arm_1606(ins, pc),
        0x647 => parse_arm_1607(ins, pc),
        0x648 => parse_arm_1608(ins, pc),
        0x649 => parse_arm_1609(ins, pc),
        0x64a => parse_arm_1610(ins, pc),
        0x64b => parse_arm_1611(ins, pc),
        0x64c => parse_arm_1612(ins, pc),
        0x64d => parse_arm_1613(ins, pc),
        0x64e => parse_arm_1614(ins, pc),
        0x64f => parse_arm_1615(ins, pc),
        0x650 => parse_arm_1616(ins, pc),
        0x651 => parse_arm_1617(ins, pc),
        0x652 => parse_arm_1618(ins, pc),
        0x653 => parse_arm_1619(ins, pc),
        0x654 => parse_arm_1620(ins, pc),
        0x655 => parse_arm_1621(ins, pc),
        0x656 => parse_arm_1622(ins, pc),
        0x657 => parse_arm_1623(ins, pc),
        0x658 => parse_arm_1624(ins, pc),
        0x659 => parse_arm_1625(ins, pc),
        0x65a => parse_arm_1626(ins, pc),
        0x65b => parse_arm_1627(ins, pc),
        0x65c => parse_arm_1628(ins, pc),
        0x65d => parse_arm_1629(ins, pc),
        0x65e => parse_arm_1630(ins, pc),
        0x65f => parse_arm_1631(ins, pc),
        0x660 => parse_arm_1632(ins, pc),
        0x661 => parse_arm_1633(ins, pc),
        0x662 => parse_arm_1634(ins, pc),
        0x663 => parse_arm_1635(ins, pc),
        0x664 => parse_arm_1636(ins, pc),
        0x665 => parse_arm_1637(ins, pc),
        0x666 => parse_arm_1638(ins, pc),
        0x667 => parse_arm_1639(ins, pc),
        0x668 => parse_arm_1640(ins, pc),
        0x669 => parse_arm_1641(ins, pc),
        0x66a => parse_arm_1642(ins, pc),
        0x66b => parse_arm_1643(ins, pc),
        0x66c => parse_arm_1644(ins, pc),
        0x66d => parse_arm_1645(ins, pc),
        0x66e => parse_arm_1646(ins, pc),
        0x66f => parse_arm_1647(ins, pc),
        0x670 => parse_arm_1648(ins, pc),
        0x671 => parse_arm_1649(ins, pc),
        0x672 => parse_arm_1650(ins, pc),
        0x673 => parse_arm_1651(ins, pc),
        0x674 => parse_arm_1652(ins, pc),
        0x675 => parse_arm_1653(ins, pc),
        0x676 => parse_arm_1654(ins, pc),
        0x677 => parse_arm_1655(ins, pc),
        0x678 => parse_arm_1656(ins, pc),
        0x679 => parse_arm_1657(ins, pc),
        0x67a => parse_arm_1658(ins, pc),
        0x67b => parse_arm_1659(ins, pc),
        0x67c => parse_arm_1660(ins, pc),
        0x67d => parse_arm_1661(ins, pc),
        0x67e => parse_arm_1662(ins, pc),
        0x67f => parse_arm_1663(ins, pc),
        0x680 => parse_arm_1664(ins, pc),
        0x681 => parse_arm_1665(ins, pc),
        0x682 => parse_arm_1666(ins, pc),
        0x683 => parse_arm_1667(ins, pc),
        0x684 => parse_arm_1668(ins, pc),
        0x685 => parse_arm_1669(ins, pc),
        0x686 => parse_arm_1670(ins, pc),
        0x687 => parse_arm_1671(ins, pc),
        0x688 => parse_arm_1672(ins, pc),
        0x689 => parse_arm_1673(ins, pc),
        0x68a => parse_arm_1674(ins, pc),
        0x68b => parse_arm_1675(ins, pc),
        0x68c => parse_arm_1676(ins, pc),
        0x68d => parse_arm_1677(ins, pc),
        0x68e => parse_arm_1678(ins, pc),
        0x68f => parse_arm_1679(ins, pc),
        0x690 => parse_arm_1680(ins, pc),
        0x691 => parse_arm_1681(ins, pc),
        0x692 => parse_arm_1682(ins, pc),
        0x693 => parse_arm_1683(ins, pc),
        0x694 => parse_arm_1684(ins, pc),
        0x695 => parse_arm_1685(ins, pc),
        0x696 => parse_arm_1686(ins, pc),
        0x697 => parse_arm_1687(ins, pc),
        0x698 => parse_arm_1688(ins, pc),
        0x699 => parse_arm_1689(ins, pc),
        0x69a => parse_arm_1690(ins, pc),
        0x69b => parse_arm_1691(ins, pc),
        0x69c => parse_arm_1692(ins, pc),
        0x69d => parse_arm_1693(ins, pc),
        0x69e => parse_arm_1694(ins, pc),
        0x69f => parse_arm_1695(ins, pc),
        0x6a0 => parse_arm_1696(ins, pc),
        0x6a1 => parse_arm_1697(ins, pc),
        0x6a2 => parse_arm_1698(ins, pc),
        0x6a3 => parse_arm_1699(ins, pc),
        0x6a4 => parse_arm_1700(ins, pc),
        0x6a5 => parse_arm_1701(ins, pc),
        0x6a6 => parse_arm_1702(ins, pc),
        0x6a7 => parse_arm_1703(ins, pc),
        0x6a8 => parse_arm_1704(ins, pc),
        0x6a9 => parse_arm_1705(ins, pc),
        0x6aa => parse_arm_1706(ins, pc),
        0x6ab => parse_arm_1707(ins, pc),
        0x6ac => parse_arm_1708(ins, pc),
        0x6ad => parse_arm_1709(ins, pc),
        0x6ae => parse_arm_1710(ins, pc),
        0x6af => parse_arm_1711(ins, pc),
        0x6b0 => parse_arm_1712(ins, pc),
        0x6b1 => parse_arm_1713(ins, pc),
        0x6b2 => parse_arm_1714(ins, pc),
        0x6b3 => parse_arm_1715(ins, pc),
        0x6b4 => parse_arm_1716(ins, pc),
        0x6b5 => parse_arm_1717(ins, pc),
        0x6b6 => parse_arm_1718(ins, pc),
        0x6b7 => parse_arm_1719(ins, pc),
        0x6b8 => parse_arm_1720(ins, pc),
        0x6b9 => parse_arm_1721(ins, pc),
        0x6ba => parse_arm_1722(ins, pc),
        0x6bb => parse_arm_1723(ins, pc),
        0x6bc => parse_arm_1724(ins, pc),
        0x6bd => parse_arm_1725(ins, pc),
        0x6be => parse_arm_1726(ins, pc),
        0x6bf => parse_arm_1727(ins, pc),
        0x6c0 => parse_arm_1728(ins, pc),
        0x6c1 => parse_arm_1729(ins, pc),
        0x6c2 => parse_arm_1730(ins, pc),
        0x6c3 => parse_arm_1731(ins, pc),
        0x6c4 => parse_arm_1732(ins, pc),
        0x6c5 => parse_arm_1733(ins, pc),
        0x6c6 => parse_arm_1734(ins, pc),
        0x6c7 => parse_arm_1735(ins, pc),
        0x6c8 => parse_arm_1736(ins, pc),
        0x6c9 => parse_arm_1737(ins, pc),
        0x6ca => parse_arm_1738(ins, pc),
        0x6cb => parse_arm_1739(ins, pc),
        0x6cc => parse_arm_1740(ins, pc),
        0x6cd => parse_arm_1741(ins, pc),
        0x6ce => parse_arm_1742(ins, pc),
        0x6cf => parse_arm_1743(ins, pc),
        0x6d0 => parse_arm_1744(ins, pc),
        0x6d1 => parse_arm_1745(ins, pc),
        0x6d2 => parse_arm_1746(ins, pc),
        0x6d3 => parse_arm_1747(ins, pc),
        0x6d4 => parse_arm_1748(ins, pc),
        0x6d5 => parse_arm_1749(ins, pc),
        0x6d6 => parse_arm_1750(ins, pc),
        0x6d7 => parse_arm_1751(ins, pc),
        0x6d8 => parse_arm_1752(ins, pc),
        0x6d9 => parse_arm_1753(ins, pc),
        0x6da => parse_arm_1754(ins, pc),
        0x6db => parse_arm_1755(ins, pc),
        0x6dc => parse_arm_1756(ins, pc),
        0x6dd => parse_arm_1757(ins, pc),
        0x6de => parse_arm_1758(ins, pc),
        0x6df => parse_arm_1759(ins, pc),
        0x6e0 => parse_arm_1760(ins, pc),
        0x6e1 => parse_arm_1761(ins, pc),
        0x6e2 => parse_arm_1762(ins, pc),
        0x6e3 => parse_arm_1763(ins, pc),
        0x6e4 => parse_arm_1764(ins, pc),
        0x6e5 => parse_arm_1765(ins, pc),
        0x6e6 => parse_arm_1766(ins, pc),
        0x6e7 => parse_arm_1767(ins, pc),
        0x6e8 => parse_arm_1768(ins, pc),
        0x6e9 => parse_arm_1769(ins, pc),
        0x6ea => parse_arm_1770(ins, pc),
        0x6eb => parse_arm_1771(ins, pc),
        0x6ec => parse_arm_1772(ins, pc),
        0x6ed => parse_arm_1773(ins, pc),
        0x6ee => parse_arm_1774(ins, pc),
        0x6ef => parse_arm_1775(ins, pc),
        0x6f0 => parse_arm_1776(ins, pc),
        0x6f1 => parse_arm_1777(ins, pc),
        0x6f2 => parse_arm_1778(ins, pc),
        0x6f3 => parse_arm_1779(ins, pc),
        0x6f4 => parse_arm_1780(ins, pc),
        0x6f5 => parse_arm_1781(ins, pc),
        0x6f6 => parse_arm_1782(ins, pc),
        0x6f7 => parse_arm_1783(ins, pc),
        0x6f8 => parse_arm_1784(ins, pc),
        0x6f9 => parse_arm_1785(ins, pc),
        0x6fa => parse_arm_1786(ins, pc),
        0x6fb => parse_arm_1787(ins, pc),
        0x6fc => parse_arm_1788(ins, pc),
        0x6fd => parse_arm_1789(ins, pc),
        0x6fe => parse_arm_1790(ins, pc),
        0x6ff => parse_arm_1791(ins, pc),
        0x700 => parse_arm_1792(ins, pc),
        0x701 => parse_arm_1793(ins, pc),
        0x702 => parse_arm_1794(ins, pc),
        0x703 => parse_arm_1795(ins, pc),
        0x704 => parse_arm_1796(ins, pc),
        0x705 => parse_arm_1797(ins, pc),
        0x706 => parse_arm_1798(ins, pc),
        0x707 => parse_arm_1799(ins, pc),
        0x708 => parse_arm_1800(ins, pc),
        0x709 => parse_arm_1801(ins, pc),
        0x70a => parse_arm_1802(ins, pc),
        0x70b => parse_arm_1803(ins, pc),
        0x70c => parse_arm_1804(ins, pc),
        0x70d => parse_arm_1805(ins, pc),
        0x70e => parse_arm_1806(ins, pc),
        0x70f => parse_arm_1807(ins, pc),
        0x710 => parse_arm_1808(ins, pc),
        0x711 => parse_arm_1809(ins, pc),
        0x712 => parse_arm_1810(ins, pc),
        0x713 => parse_arm_1811(ins, pc),
        0x714 => parse_arm_1812(ins, pc),
        0x715 => parse_arm_1813(ins, pc),
        0x716 => parse_arm_1814(ins, pc),
        0x717 => parse_arm_1815(ins, pc),
        0x718 => parse_arm_1816(ins, pc),
        0x719 => parse_arm_1817(ins, pc),
        0x71a => parse_arm_1818(ins, pc),
        0x71b => parse_arm_1819(ins, pc),
        0x71c => parse_arm_1820(ins, pc),
        0x71d => parse_arm_1821(ins, pc),
        0x71e => parse_arm_1822(ins, pc),
        0x71f => parse_arm_1823(ins, pc),
        0x720 => parse_arm_1824(ins, pc),
        0x721 => parse_arm_1825(ins, pc),
        0x722 => parse_arm_1826(ins, pc),
        0x723 => parse_arm_1827(ins, pc),
        0x724 => parse_arm_1828(ins, pc),
        0x725 => parse_arm_1829(ins, pc),
        0x726 => parse_arm_1830(ins, pc),
        0x727 => parse_arm_1831(ins, pc),
        0x728 => parse_arm_1832(ins, pc),
        0x729 => parse_arm_1833(ins, pc),
        0x72a => parse_arm_1834(ins, pc),
        0x72b => parse_arm_1835(ins, pc),
        0x72c => parse_arm_1836(ins, pc),
        0x72d => parse_arm_1837(ins, pc),
        0x72e => parse_arm_1838(ins, pc),
        0x72f => parse_arm_1839(ins, pc),
        0x730 => parse_arm_1840(ins, pc),
        0x731 => parse_arm_1841(ins, pc),
        0x732 => parse_arm_1842(ins, pc),
        0x733 => parse_arm_1843(ins, pc),
        0x734 => parse_arm_1844(ins, pc),
        0x735 => parse_arm_1845(ins, pc),
        0x736 => parse_arm_1846(ins, pc),
        0x737 => parse_arm_1847(ins, pc),
        0x738 => parse_arm_1848(ins, pc),
        0x739 => parse_arm_1849(ins, pc),
        0x73a => parse_arm_1850(ins, pc),
        0x73b => parse_arm_1851(ins, pc),
        0x73c => parse_arm_1852(ins, pc),
        0x73d => parse_arm_1853(ins, pc),
        0x73e => parse_arm_1854(ins, pc),
        0x73f => parse_arm_1855(ins, pc),
        0x740 => parse_arm_1856(ins, pc),
        0x741 => parse_arm_1857(ins, pc),
        0x742 => parse_arm_1858(ins, pc),
        0x743 => parse_arm_1859(ins, pc),
        0x744 => parse_arm_1860(ins, pc),
        0x745 => parse_arm_1861(ins, pc),
        0x746 => parse_arm_1862(ins, pc),
        0x747 => parse_arm_1863(ins, pc),
        0x748 => parse_arm_1864(ins, pc),
        0x749 => parse_arm_1865(ins, pc),
        0x74a => parse_arm_1866(ins, pc),
        0x74b => parse_arm_1867(ins, pc),
        0x74c => parse_arm_1868(ins, pc),
        0x74d => parse_arm_1869(ins, pc),
        0x74e => parse_arm_1870(ins, pc),
        0x74f => parse_arm_1871(ins, pc),
        0x750 => parse_arm_1872(ins, pc),
        0x751 => parse_arm_1873(ins, pc),
        0x752 => parse_arm_1874(ins, pc),
        0x753 => parse_arm_1875(ins, pc),
        0x754 => parse_arm_1876(ins, pc),
        0x755 => parse_arm_1877(ins, pc),
        0x756 => parse_arm_1878(ins, pc),
        0x757 => parse_arm_1879(ins, pc),
        0x758 => parse_arm_1880(ins, pc),
        0x759 => parse_arm_1881(ins, pc),
        0x75a => parse_arm_1882(ins, pc),
        0x75b => parse_arm_1883(ins, pc),
        0x75c => parse_arm_1884(ins, pc),
        0x75d => parse_arm_1885(ins, pc),
        0x75e => parse_arm_1886(ins, pc),
        0x75f => parse_arm_1887(ins, pc),
        0x760 => parse_arm_1888(ins, pc),
        0x761 => parse_arm_1889(ins, pc),
        0x762 => parse_arm_1890(ins, pc),
        0x763 => parse_arm_1891(ins, pc),
        0x764 => parse_arm_1892(ins, pc),
        0x765 => parse_arm_1893(ins, pc),
        0x766 => parse_arm_1894(ins, pc),
        0x767 => parse_arm_1895(ins, pc),
        0x768 => parse_arm_1896(ins, pc),
        0x769 => parse_arm_1897(ins, pc),
        0x76a => parse_arm_1898(ins, pc),
        0x76b => parse_arm_1899(ins, pc),
        0x76c => parse_arm_1900(ins, pc),
        0x76d => parse_arm_1901(ins, pc),
        0x76e => parse_arm_1902(ins, pc),
        0x76f => parse_arm_1903(ins, pc),
        0x770 => parse_arm_1904(ins, pc),
        0x771 => parse_arm_1905(ins, pc),
        0x772 => parse_arm_1906(ins, pc),
        0x773 => parse_arm_1907(ins, pc),
        0x774 => parse_arm_1908(ins, pc),
        0x775 => parse_arm_1909(ins, pc),
        0x776 => parse_arm_1910(ins, pc),
        0x777 => parse_arm_1911(ins, pc),
        0x778 => parse_arm_1912(ins, pc),
        0x779 => parse_arm_1913(ins, pc),
        0x77a => parse_arm_1914(ins, pc),
        0x77b => parse_arm_1915(ins, pc),
        0x77c => parse_arm_1916(ins, pc),
        0x77d => parse_arm_1917(ins, pc),
        0x77e => parse_arm_1918(ins, pc),
        0x77f => parse_arm_1919(ins, pc),
        0x780 => parse_arm_1920(ins, pc),
        0x781 => parse_arm_1921(ins, pc),
        0x782 => parse_arm_1922(ins, pc),
        0x783 => parse_arm_1923(ins, pc),
        0x784 => parse_arm_1924(ins, pc),
        0x785 => parse_arm_1925(ins, pc),
        0x786 => parse_arm_1926(ins, pc),
        0x787 => parse_arm_1927(ins, pc),
        0x788 => parse_arm_1928(ins, pc),
        0x789 => parse_arm_1929(ins, pc),
        0x78a => parse_arm_1930(ins, pc),
        0x78b => parse_arm_1931(ins, pc),
        0x78c => parse_arm_1932(ins, pc),
        0x78d => parse_arm_1933(ins, pc),
        0x78e => parse_arm_1934(ins, pc),
        0x78f => parse_arm_1935(ins, pc),
        0x790 => parse_arm_1936(ins, pc),
        0x791 => parse_arm_1937(ins, pc),
        0x792 => parse_arm_1938(ins, pc),
        0x793 => parse_arm_1939(ins, pc),
        0x794 => parse_arm_1940(ins, pc),
        0x795 => parse_arm_1941(ins, pc),
        0x796 => parse_arm_1942(ins, pc),
        0x797 => parse_arm_1943(ins, pc),
        0x798 => parse_arm_1944(ins, pc),
        0x799 => parse_arm_1945(ins, pc),
        0x79a => parse_arm_1946(ins, pc),
        0x79b => parse_arm_1947(ins, pc),
        0x79c => parse_arm_1948(ins, pc),
        0x79d => parse_arm_1949(ins, pc),
        0x79e => parse_arm_1950(ins, pc),
        0x79f => parse_arm_1951(ins, pc),
        0x7a0 => parse_arm_1952(ins, pc),
        0x7a1 => parse_arm_1953(ins, pc),
        0x7a2 => parse_arm_1954(ins, pc),
        0x7a3 => parse_arm_1955(ins, pc),
        0x7a4 => parse_arm_1956(ins, pc),
        0x7a5 => parse_arm_1957(ins, pc),
        0x7a6 => parse_arm_1958(ins, pc),
        0x7a7 => parse_arm_1959(ins, pc),
        0x7a8 => parse_arm_1960(ins, pc),
        0x7a9 => parse_arm_1961(ins, pc),
        0x7aa => parse_arm_1962(ins, pc),
        0x7ab => parse_arm_1963(ins, pc),
        0x7ac => parse_arm_1964(ins, pc),
        0x7ad => parse_arm_1965(ins, pc),
        0x7ae => parse_arm_1966(ins, pc),
        0x7af => parse_arm_1967(ins, pc),
        0x7b0 => parse_arm_1968(ins, pc),
        0x7b1 => parse_arm_1969(ins, pc),
        0x7b2 => parse_arm_1970(ins, pc),
        0x7b3 => parse_arm_1971(ins, pc),
        0x7b4 => parse_arm_1972(ins, pc),
        0x7b5 => parse_arm_1973(ins, pc),
        0x7b6 => parse_arm_1974(ins, pc),
        0x7b7 => parse_arm_1975(ins, pc),
        0x7b8 => parse_arm_1976(ins, pc),
        0x7b9 => parse_arm_1977(ins, pc),
        0x7ba => parse_arm_1978(ins, pc),
        0x7bb => parse_arm_1979(ins, pc),
        0x7bc => parse_arm_1980(ins, pc),
        0x7bd => parse_arm_1981(ins, pc),
        0x7be => parse_arm_1982(ins, pc),
        0x7bf => parse_arm_1983(ins, pc),
        0x7c0 => parse_arm_1984(ins, pc),
        0x7c1 => parse_arm_1985(ins, pc),
        0x7c2 => parse_arm_1986(ins, pc),
        0x7c3 => parse_arm_1987(ins, pc),
        0x7c4 => parse_arm_1988(ins, pc),
        0x7c5 => parse_arm_1989(ins, pc),
        0x7c6 => parse_arm_1990(ins, pc),
        0x7c7 => parse_arm_1991(ins, pc),
        0x7c8 => parse_arm_1992(ins, pc),
        0x7c9 => parse_arm_1993(ins, pc),
        0x7ca => parse_arm_1994(ins, pc),
        0x7cb => parse_arm_1995(ins, pc),
        0x7cc => parse_arm_1996(ins, pc),
        0x7cd => parse_arm_1997(ins, pc),
        0x7ce => parse_arm_1998(ins, pc),
        0x7cf => parse_arm_1999(ins, pc),
        0x7d0 => parse_arm_2000(ins, pc),
        0x7d1 => parse_arm_2001(ins, pc),
        0x7d2 => parse_arm_2002(ins, pc),
        0x7d3 => parse_arm_2003(ins, pc),
        0x7d4 => parse_arm_2004(ins, pc),
        0x7d5 => parse_arm_2005(ins, pc),
        0x7d6 => parse_arm_2006(ins, pc),
        0x7d7 => parse_arm_2007(ins, pc),
        0x7d8 => parse_arm_2008(ins, pc),
        0x7d9 => parse_arm_2009(ins, pc),
        0x7da => parse_arm_2010(ins, pc),
        0x7db => parse_arm_2011(ins, pc),
        0x7dc => parse_arm_2012(ins, pc),
        0x7dd => parse_arm_2013(ins, pc),
        0x7de => parse_arm_2014(ins, pc),
        0x7df => parse_arm_2015(ins, pc),
        0x7e0 => parse_arm_2016(ins, pc),
        0x7e1 => parse_arm_2017(ins, pc),
        0x7e2 => parse_arm_2018(ins, pc),
        0x7e3 => parse_arm_2019(ins, pc),
        0x7e4 => parse_arm_2020(ins, pc),
        0x7e5 => parse_arm_2021(ins, pc),
        0x7e6 => parse_arm_2022(ins, pc),
        0x7e7 => parse_arm_2023(ins, pc),
        0x7e8 => parse_arm_2024(ins, pc),
        0x7e9 => parse_arm_2025(ins, pc),
        0x7ea => parse_arm_2026(ins, pc),
        0x7eb => parse_arm_2027(ins, pc),
        0x7ec => parse_arm_2028(ins, pc),
        0x7ed => parse_arm_2029(ins, pc),
        0x7ee => parse_arm_2030(ins, pc),
        0x7ef => parse_arm_2031(ins, pc),
        0x7f0 => parse_arm_2032(ins, pc),
        0x7f1 => parse_arm_2033(ins, pc),
        0x7f2 => parse_arm_2034(ins, pc),
        0x7f3 => parse_arm_2035(ins, pc),
        0x7f4 => parse_arm_2036(ins, pc),
        0x7f5 => parse_arm_2037(ins, pc),
        0x7f6 => parse_arm_2038(ins, pc),
        0x7f7 => parse_arm_2039(ins, pc),
        0x7f8 => parse_arm_2040(ins, pc),
        0x7f9 => parse_arm_2041(ins, pc),
        0x7fa => parse_arm_2042(ins, pc),
        0x7fb => parse_arm_2043(ins, pc),
        0x7fc => parse_arm_2044(ins, pc),
        0x7fd => parse_arm_2045(ins, pc),
        0x7fe => parse_arm_2046(ins, pc),
        0x7ff => parse_arm_2047(ins, pc),
        0x800 => parse_arm_2048(ins, pc),
        0x801 => parse_arm_2049(ins, pc),
        0x802 => parse_arm_2050(ins, pc),
        0x803 => parse_arm_2051(ins, pc),
        0x804 => parse_arm_2052(ins, pc),
        0x805 => parse_arm_2053(ins, pc),
        0x806 => parse_arm_2054(ins, pc),
        0x807 => parse_arm_2055(ins, pc),
        0x808 => parse_arm_2056(ins, pc),
        0x809 => parse_arm_2057(ins, pc),
        0x80a => parse_arm_2058(ins, pc),
        0x80b => parse_arm_2059(ins, pc),
        0x80c => parse_arm_2060(ins, pc),
        0x80d => parse_arm_2061(ins, pc),
        0x80e => parse_arm_2062(ins, pc),
        0x80f => parse_arm_2063(ins, pc),
        0x810 => parse_arm_2064(ins, pc),
        0x811 => parse_arm_2065(ins, pc),
        0x812 => parse_arm_2066(ins, pc),
        0x813 => parse_arm_2067(ins, pc),
        0x814 => parse_arm_2068(ins, pc),
        0x815 => parse_arm_2069(ins, pc),
        0x816 => parse_arm_2070(ins, pc),
        0x817 => parse_arm_2071(ins, pc),
        0x818 => parse_arm_2072(ins, pc),
        0x819 => parse_arm_2073(ins, pc),
        0x81a => parse_arm_2074(ins, pc),
        0x81b => parse_arm_2075(ins, pc),
        0x81c => parse_arm_2076(ins, pc),
        0x81d => parse_arm_2077(ins, pc),
        0x81e => parse_arm_2078(ins, pc),
        0x81f => parse_arm_2079(ins, pc),
        0x820 => parse_arm_2080(ins, pc),
        0x821 => parse_arm_2081(ins, pc),
        0x822 => parse_arm_2082(ins, pc),
        0x823 => parse_arm_2083(ins, pc),
        0x824 => parse_arm_2084(ins, pc),
        0x825 => parse_arm_2085(ins, pc),
        0x826 => parse_arm_2086(ins, pc),
        0x827 => parse_arm_2087(ins, pc),
        0x828 => parse_arm_2088(ins, pc),
        0x829 => parse_arm_2089(ins, pc),
        0x82a => parse_arm_2090(ins, pc),
        0x82b => parse_arm_2091(ins, pc),
        0x82c => parse_arm_2092(ins, pc),
        0x82d => parse_arm_2093(ins, pc),
        0x82e => parse_arm_2094(ins, pc),
        0x82f => parse_arm_2095(ins, pc),
        0x830 => parse_arm_2096(ins, pc),
        0x831 => parse_arm_2097(ins, pc),
        0x832 => parse_arm_2098(ins, pc),
        0x833 => parse_arm_2099(ins, pc),
        0x834 => parse_arm_2100(ins, pc),
        0x835 => parse_arm_2101(ins, pc),
        0x836 => parse_arm_2102(ins, pc),
        0x837 => parse_arm_2103(ins, pc),
        0x838 => parse_arm_2104(ins, pc),
        0x839 => parse_arm_2105(ins, pc),
        0x83a => parse_arm_2106(ins, pc),
        0x83b => parse_arm_2107(ins, pc),
        0x83c => parse_arm_2108(ins, pc),
        0x83d => parse_arm_2109(ins, pc),
        0x83e => parse_arm_2110(ins, pc),
        0x83f => parse_arm_2111(ins, pc),
        0x840 => parse_arm_2112(ins, pc),
        0x841 => parse_arm_2113(ins, pc),
        0x842 => parse_arm_2114(ins, pc),
        0x843 => parse_arm_2115(ins, pc),
        0x844 => parse_arm_2116(ins, pc),
        0x845 => parse_arm_2117(ins, pc),
        0x846 => parse_arm_2118(ins, pc),
        0x847 => parse_arm_2119(ins, pc),
        0x848 => parse_arm_2120(ins, pc),
        0x849 => parse_arm_2121(ins, pc),
        0x84a => parse_arm_2122(ins, pc),
        0x84b => parse_arm_2123(ins, pc),
        0x84c => parse_arm_2124(ins, pc),
        0x84d => parse_arm_2125(ins, pc),
        0x84e => parse_arm_2126(ins, pc),
        0x84f => parse_arm_2127(ins, pc),
        0x850 => parse_arm_2128(ins, pc),
        0x851 => parse_arm_2129(ins, pc),
        0x852 => parse_arm_2130(ins, pc),
        0x853 => parse_arm_2131(ins, pc),
        0x854 => parse_arm_2132(ins, pc),
        0x855 => parse_arm_2133(ins, pc),
        0x856 => parse_arm_2134(ins, pc),
        0x857 => parse_arm_2135(ins, pc),
        0x858 => parse_arm_2136(ins, pc),
        0x859 => parse_arm_2137(ins, pc),
        0x85a => parse_arm_2138(ins, pc),
        0x85b => parse_arm_2139(ins, pc),
        0x85c => parse_arm_2140(ins, pc),
        0x85d => parse_arm_2141(ins, pc),
        0x85e => parse_arm_2142(ins, pc),
        0x85f => parse_arm_2143(ins, pc),
        0x860 => parse_arm_2144(ins, pc),
        0x861 => parse_arm_2145(ins, pc),
        0x862 => parse_arm_2146(ins, pc),
        0x863 => parse_arm_2147(ins, pc),
        0x864 => parse_arm_2148(ins, pc),
        0x865 => parse_arm_2149(ins, pc),
        0x866 => parse_arm_2150(ins, pc),
        0x867 => parse_arm_2151(ins, pc),
        0x868 => parse_arm_2152(ins, pc),
        0x869 => parse_arm_2153(ins, pc),
        0x86a => parse_arm_2154(ins, pc),
        0x86b => parse_arm_2155(ins, pc),
        0x86c => parse_arm_2156(ins, pc),
        0x86d => parse_arm_2157(ins, pc),
        0x86e => parse_arm_2158(ins, pc),
        0x86f => parse_arm_2159(ins, pc),
        0x870 => parse_arm_2160(ins, pc),
        0x871 => parse_arm_2161(ins, pc),
        0x872 => parse_arm_2162(ins, pc),
        0x873 => parse_arm_2163(ins, pc),
        0x874 => parse_arm_2164(ins, pc),
        0x875 => parse_arm_2165(ins, pc),
        0x876 => parse_arm_2166(ins, pc),
        0x877 => parse_arm_2167(ins, pc),
        0x878 => parse_arm_2168(ins, pc),
        0x879 => parse_arm_2169(ins, pc),
        0x87a => parse_arm_2170(ins, pc),
        0x87b => parse_arm_2171(ins, pc),
        0x87c => parse_arm_2172(ins, pc),
        0x87d => parse_arm_2173(ins, pc),
        0x87e => parse_arm_2174(ins, pc),
        0x87f => parse_arm_2175(ins, pc),
        0x880 => parse_arm_2176(ins, pc),
        0x881 => parse_arm_2177(ins, pc),
        0x882 => parse_arm_2178(ins, pc),
        0x883 => parse_arm_2179(ins, pc),
        0x884 => parse_arm_2180(ins, pc),
        0x885 => parse_arm_2181(ins, pc),
        0x886 => parse_arm_2182(ins, pc),
        0x887 => parse_arm_2183(ins, pc),
        0x888 => parse_arm_2184(ins, pc),
        0x889 => parse_arm_2185(ins, pc),
        0x88a => parse_arm_2186(ins, pc),
        0x88b => parse_arm_2187(ins, pc),
        0x88c => parse_arm_2188(ins, pc),
        0x88d => parse_arm_2189(ins, pc),
        0x88e => parse_arm_2190(ins, pc),
        0x88f => parse_arm_2191(ins, pc),
        0x890 => parse_arm_2192(ins, pc),
        0x891 => parse_arm_2193(ins, pc),
        0x892 => parse_arm_2194(ins, pc),
        0x893 => parse_arm_2195(ins, pc),
        0x894 => parse_arm_2196(ins, pc),
        0x895 => parse_arm_2197(ins, pc),
        0x896 => parse_arm_2198(ins, pc),
        0x897 => parse_arm_2199(ins, pc),
        0x898 => parse_arm_2200(ins, pc),
        0x899 => parse_arm_2201(ins, pc),
        0x89a => parse_arm_2202(ins, pc),
        0x89b => parse_arm_2203(ins, pc),
        0x89c => parse_arm_2204(ins, pc),
        0x89d => parse_arm_2205(ins, pc),
        0x89e => parse_arm_2206(ins, pc),
        0x89f => parse_arm_2207(ins, pc),
        0x8a0 => parse_arm_2208(ins, pc),
        0x8a1 => parse_arm_2209(ins, pc),
        0x8a2 => parse_arm_2210(ins, pc),
        0x8a3 => parse_arm_2211(ins, pc),
        0x8a4 => parse_arm_2212(ins, pc),
        0x8a5 => parse_arm_2213(ins, pc),
        0x8a6 => parse_arm_2214(ins, pc),
        0x8a7 => parse_arm_2215(ins, pc),
        0x8a8 => parse_arm_2216(ins, pc),
        0x8a9 => parse_arm_2217(ins, pc),
        0x8aa => parse_arm_2218(ins, pc),
        0x8ab => parse_arm_2219(ins, pc),
        0x8ac => parse_arm_2220(ins, pc),
        0x8ad => parse_arm_2221(ins, pc),
        0x8ae => parse_arm_2222(ins, pc),
        0x8af => parse_arm_2223(ins, pc),
        0x8b0 => parse_arm_2224(ins, pc),
        0x8b1 => parse_arm_2225(ins, pc),
        0x8b2 => parse_arm_2226(ins, pc),
        0x8b3 => parse_arm_2227(ins, pc),
        0x8b4 => parse_arm_2228(ins, pc),
        0x8b5 => parse_arm_2229(ins, pc),
        0x8b6 => parse_arm_2230(ins, pc),
        0x8b7 => parse_arm_2231(ins, pc),
        0x8b8 => parse_arm_2232(ins, pc),
        0x8b9 => parse_arm_2233(ins, pc),
        0x8ba => parse_arm_2234(ins, pc),
        0x8bb => parse_arm_2235(ins, pc),
        0x8bc => parse_arm_2236(ins, pc),
        0x8bd => parse_arm_2237(ins, pc),
        0x8be => parse_arm_2238(ins, pc),
        0x8bf => parse_arm_2239(ins, pc),
        0x8c0 => parse_arm_2240(ins, pc),
        0x8c1 => parse_arm_2241(ins, pc),
        0x8c2 => parse_arm_2242(ins, pc),
        0x8c3 => parse_arm_2243(ins, pc),
        0x8c4 => parse_arm_2244(ins, pc),
        0x8c5 => parse_arm_2245(ins, pc),
        0x8c6 => parse_arm_2246(ins, pc),
        0x8c7 => parse_arm_2247(ins, pc),
        0x8c8 => parse_arm_2248(ins, pc),
        0x8c9 => parse_arm_2249(ins, pc),
        0x8ca => parse_arm_2250(ins, pc),
        0x8cb => parse_arm_2251(ins, pc),
        0x8cc => parse_arm_2252(ins, pc),
        0x8cd => parse_arm_2253(ins, pc),
        0x8ce => parse_arm_2254(ins, pc),
        0x8cf => parse_arm_2255(ins, pc),
        0x8d0 => parse_arm_2256(ins, pc),
        0x8d1 => parse_arm_2257(ins, pc),
        0x8d2 => parse_arm_2258(ins, pc),
        0x8d3 => parse_arm_2259(ins, pc),
        0x8d4 => parse_arm_2260(ins, pc),
        0x8d5 => parse_arm_2261(ins, pc),
        0x8d6 => parse_arm_2262(ins, pc),
        0x8d7 => parse_arm_2263(ins, pc),
        0x8d8 => parse_arm_2264(ins, pc),
        0x8d9 => parse_arm_2265(ins, pc),
        0x8da => parse_arm_2266(ins, pc),
        0x8db => parse_arm_2267(ins, pc),
        0x8dc => parse_arm_2268(ins, pc),
        0x8dd => parse_arm_2269(ins, pc),
        0x8de => parse_arm_2270(ins, pc),
        0x8df => parse_arm_2271(ins, pc),
        0x8e0 => parse_arm_2272(ins, pc),
        0x8e1 => parse_arm_2273(ins, pc),
        0x8e2 => parse_arm_2274(ins, pc),
        0x8e3 => parse_arm_2275(ins, pc),
        0x8e4 => parse_arm_2276(ins, pc),
        0x8e5 => parse_arm_2277(ins, pc),
        0x8e6 => parse_arm_2278(ins, pc),
        0x8e7 => parse_arm_2279(ins, pc),
        0x8e8 => parse_arm_2280(ins, pc),
        0x8e9 => parse_arm_2281(ins, pc),
        0x8ea => parse_arm_2282(ins, pc),
        0x8eb => parse_arm_2283(ins, pc),
        0x8ec => parse_arm_2284(ins, pc),
        0x8ed => parse_arm_2285(ins, pc),
        0x8ee => parse_arm_2286(ins, pc),
        0x8ef => parse_arm_2287(ins, pc),
        0x8f0 => parse_arm_2288(ins, pc),
        0x8f1 => parse_arm_2289(ins, pc),
        0x8f2 => parse_arm_2290(ins, pc),
        0x8f3 => parse_arm_2291(ins, pc),
        0x8f4 => parse_arm_2292(ins, pc),
        0x8f5 => parse_arm_2293(ins, pc),
        0x8f6 => parse_arm_2294(ins, pc),
        0x8f7 => parse_arm_2295(ins, pc),
        0x8f8 => parse_arm_2296(ins, pc),
        0x8f9 => parse_arm_2297(ins, pc),
        0x8fa => parse_arm_2298(ins, pc),
        0x8fb => parse_arm_2299(ins, pc),
        0x8fc => parse_arm_2300(ins, pc),
        0x8fd => parse_arm_2301(ins, pc),
        0x8fe => parse_arm_2302(ins, pc),
        0x8ff => parse_arm_2303(ins, pc),
        0x900 => parse_arm_2304(ins, pc),
        0x901 => parse_arm_2305(ins, pc),
        0x902 => parse_arm_2306(ins, pc),
        0x903 => parse_arm_2307(ins, pc),
        0x904 => parse_arm_2308(ins, pc),
        0x905 => parse_arm_2309(ins, pc),
        0x906 => parse_arm_2310(ins, pc),
        0x907 => parse_arm_2311(ins, pc),
        0x908 => parse_arm_2312(ins, pc),
        0x909 => parse_arm_2313(ins, pc),
        0x90a => parse_arm_2314(ins, pc),
        0x90b => parse_arm_2315(ins, pc),
        0x90c => parse_arm_2316(ins, pc),
        0x90d => parse_arm_2317(ins, pc),
        0x90e => parse_arm_2318(ins, pc),
        0x90f => parse_arm_2319(ins, pc),
        0x910 => parse_arm_2320(ins, pc),
        0x911 => parse_arm_2321(ins, pc),
        0x912 => parse_arm_2322(ins, pc),
        0x913 => parse_arm_2323(ins, pc),
        0x914 => parse_arm_2324(ins, pc),
        0x915 => parse_arm_2325(ins, pc),
        0x916 => parse_arm_2326(ins, pc),
        0x917 => parse_arm_2327(ins, pc),
        0x918 => parse_arm_2328(ins, pc),
        0x919 => parse_arm_2329(ins, pc),
        0x91a => parse_arm_2330(ins, pc),
        0x91b => parse_arm_2331(ins, pc),
        0x91c => parse_arm_2332(ins, pc),
        0x91d => parse_arm_2333(ins, pc),
        0x91e => parse_arm_2334(ins, pc),
        0x91f => parse_arm_2335(ins, pc),
        0x920 => parse_arm_2336(ins, pc),
        0x921 => parse_arm_2337(ins, pc),
        0x922 => parse_arm_2338(ins, pc),
        0x923 => parse_arm_2339(ins, pc),
        0x924 => parse_arm_2340(ins, pc),
        0x925 => parse_arm_2341(ins, pc),
        0x926 => parse_arm_2342(ins, pc),
        0x927 => parse_arm_2343(ins, pc),
        0x928 => parse_arm_2344(ins, pc),
        0x929 => parse_arm_2345(ins, pc),
        0x92a => parse_arm_2346(ins, pc),
        0x92b => parse_arm_2347(ins, pc),
        0x92c => parse_arm_2348(ins, pc),
        0x92d => parse_arm_2349(ins, pc),
        0x92e => parse_arm_2350(ins, pc),
        0x92f => parse_arm_2351(ins, pc),
        0x930 => parse_arm_2352(ins, pc),
        0x931 => parse_arm_2353(ins, pc),
        0x932 => parse_arm_2354(ins, pc),
        0x933 => parse_arm_2355(ins, pc),
        0x934 => parse_arm_2356(ins, pc),
        0x935 => parse_arm_2357(ins, pc),
        0x936 => parse_arm_2358(ins, pc),
        0x937 => parse_arm_2359(ins, pc),
        0x938 => parse_arm_2360(ins, pc),
        0x939 => parse_arm_2361(ins, pc),
        0x93a => parse_arm_2362(ins, pc),
        0x93b => parse_arm_2363(ins, pc),
        0x93c => parse_arm_2364(ins, pc),
        0x93d => parse_arm_2365(ins, pc),
        0x93e => parse_arm_2366(ins, pc),
        0x93f => parse_arm_2367(ins, pc),
        0x940 => parse_arm_2368(ins, pc),
        0x941 => parse_arm_2369(ins, pc),
        0x942 => parse_arm_2370(ins, pc),
        0x943 => parse_arm_2371(ins, pc),
        0x944 => parse_arm_2372(ins, pc),
        0x945 => parse_arm_2373(ins, pc),
        0x946 => parse_arm_2374(ins, pc),
        0x947 => parse_arm_2375(ins, pc),
        0x948 => parse_arm_2376(ins, pc),
        0x949 => parse_arm_2377(ins, pc),
        0x94a => parse_arm_2378(ins, pc),
        0x94b => parse_arm_2379(ins, pc),
        0x94c => parse_arm_2380(ins, pc),
        0x94d => parse_arm_2381(ins, pc),
        0x94e => parse_arm_2382(ins, pc),
        0x94f => parse_arm_2383(ins, pc),
        0x950 => parse_arm_2384(ins, pc),
        0x951 => parse_arm_2385(ins, pc),
        0x952 => parse_arm_2386(ins, pc),
        0x953 => parse_arm_2387(ins, pc),
        0x954 => parse_arm_2388(ins, pc),
        0x955 => parse_arm_2389(ins, pc),
        0x956 => parse_arm_2390(ins, pc),
        0x957 => parse_arm_2391(ins, pc),
        0x958 => parse_arm_2392(ins, pc),
        0x959 => parse_arm_2393(ins, pc),
        0x95a => parse_arm_2394(ins, pc),
        0x95b => parse_arm_2395(ins, pc),
        0x95c => parse_arm_2396(ins, pc),
        0x95d => parse_arm_2397(ins, pc),
        0x95e => parse_arm_2398(ins, pc),
        0x95f => parse_arm_2399(ins, pc),
        0x960 => parse_arm_2400(ins, pc),
        0x961 => parse_arm_2401(ins, pc),
        0x962 => parse_arm_2402(ins, pc),
        0x963 => parse_arm_2403(ins, pc),
        0x964 => parse_arm_2404(ins, pc),
        0x965 => parse_arm_2405(ins, pc),
        0x966 => parse_arm_2406(ins, pc),
        0x967 => parse_arm_2407(ins, pc),
        0x968 => parse_arm_2408(ins, pc),
        0x969 => parse_arm_2409(ins, pc),
        0x96a => parse_arm_2410(ins, pc),
        0x96b => parse_arm_2411(ins, pc),
        0x96c => parse_arm_2412(ins, pc),
        0x96d => parse_arm_2413(ins, pc),
        0x96e => parse_arm_2414(ins, pc),
        0x96f => parse_arm_2415(ins, pc),
        0x970 => parse_arm_2416(ins, pc),
        0x971 => parse_arm_2417(ins, pc),
        0x972 => parse_arm_2418(ins, pc),
        0x973 => parse_arm_2419(ins, pc),
        0x974 => parse_arm_2420(ins, pc),
        0x975 => parse_arm_2421(ins, pc),
        0x976 => parse_arm_2422(ins, pc),
        0x977 => parse_arm_2423(ins, pc),
        0x978 => parse_arm_2424(ins, pc),
        0x979 => parse_arm_2425(ins, pc),
        0x97a => parse_arm_2426(ins, pc),
        0x97b => parse_arm_2427(ins, pc),
        0x97c => parse_arm_2428(ins, pc),
        0x97d => parse_arm_2429(ins, pc),
        0x97e => parse_arm_2430(ins, pc),
        0x97f => parse_arm_2431(ins, pc),
        0x980 => parse_arm_2432(ins, pc),
        0x981 => parse_arm_2433(ins, pc),
        0x982 => parse_arm_2434(ins, pc),
        0x983 => parse_arm_2435(ins, pc),
        0x984 => parse_arm_2436(ins, pc),
        0x985 => parse_arm_2437(ins, pc),
        0x986 => parse_arm_2438(ins, pc),
        0x987 => parse_arm_2439(ins, pc),
        0x988 => parse_arm_2440(ins, pc),
        0x989 => parse_arm_2441(ins, pc),
        0x98a => parse_arm_2442(ins, pc),
        0x98b => parse_arm_2443(ins, pc),
        0x98c => parse_arm_2444(ins, pc),
        0x98d => parse_arm_2445(ins, pc),
        0x98e => parse_arm_2446(ins, pc),
        0x98f => parse_arm_2447(ins, pc),
        0x990 => parse_arm_2448(ins, pc),
        0x991 => parse_arm_2449(ins, pc),
        0x992 => parse_arm_2450(ins, pc),
        0x993 => parse_arm_2451(ins, pc),
        0x994 => parse_arm_2452(ins, pc),
        0x995 => parse_arm_2453(ins, pc),
        0x996 => parse_arm_2454(ins, pc),
        0x997 => parse_arm_2455(ins, pc),
        0x998 => parse_arm_2456(ins, pc),
        0x999 => parse_arm_2457(ins, pc),
        0x99a => parse_arm_2458(ins, pc),
        0x99b => parse_arm_2459(ins, pc),
        0x99c => parse_arm_2460(ins, pc),
        0x99d => parse_arm_2461(ins, pc),
        0x99e => parse_arm_2462(ins, pc),
        0x99f => parse_arm_2463(ins, pc),
        0x9a0 => parse_arm_2464(ins, pc),
        0x9a1 => parse_arm_2465(ins, pc),
        0x9a2 => parse_arm_2466(ins, pc),
        0x9a3 => parse_arm_2467(ins, pc),
        0x9a4 => parse_arm_2468(ins, pc),
        0x9a5 => parse_arm_2469(ins, pc),
        0x9a6 => parse_arm_2470(ins, pc),
        0x9a7 => parse_arm_2471(ins, pc),
        0x9a8 => parse_arm_2472(ins, pc),
        0x9a9 => parse_arm_2473(ins, pc),
        0x9aa => parse_arm_2474(ins, pc),
        0x9ab => parse_arm_2475(ins, pc),
        0x9ac => parse_arm_2476(ins, pc),
        0x9ad => parse_arm_2477(ins, pc),
        0x9ae => parse_arm_2478(ins, pc),
        0x9af => parse_arm_2479(ins, pc),
        0x9b0 => parse_arm_2480(ins, pc),
        0x9b1 => parse_arm_2481(ins, pc),
        0x9b2 => parse_arm_2482(ins, pc),
        0x9b3 => parse_arm_2483(ins, pc),
        0x9b4 => parse_arm_2484(ins, pc),
        0x9b5 => parse_arm_2485(ins, pc),
        0x9b6 => parse_arm_2486(ins, pc),
        0x9b7 => parse_arm_2487(ins, pc),
        0x9b8 => parse_arm_2488(ins, pc),
        0x9b9 => parse_arm_2489(ins, pc),
        0x9ba => parse_arm_2490(ins, pc),
        0x9bb => parse_arm_2491(ins, pc),
        0x9bc => parse_arm_2492(ins, pc),
        0x9bd => parse_arm_2493(ins, pc),
        0x9be => parse_arm_2494(ins, pc),
        0x9bf => parse_arm_2495(ins, pc),
        0x9c0 => parse_arm_2496(ins, pc),
        0x9c1 => parse_arm_2497(ins, pc),
        0x9c2 => parse_arm_2498(ins, pc),
        0x9c3 => parse_arm_2499(ins, pc),
        0x9c4 => parse_arm_2500(ins, pc),
        0x9c5 => parse_arm_2501(ins, pc),
        0x9c6 => parse_arm_2502(ins, pc),
        0x9c7 => parse_arm_2503(ins, pc),
        0x9c8 => parse_arm_2504(ins, pc),
        0x9c9 => parse_arm_2505(ins, pc),
        0x9ca => parse_arm_2506(ins, pc),
        0x9cb => parse_arm_2507(ins, pc),
        0x9cc => parse_arm_2508(ins, pc),
        0x9cd => parse_arm_2509(ins, pc),
        0x9ce => parse_arm_2510(ins, pc),
        0x9cf => parse_arm_2511(ins, pc),
        0x9d0 => parse_arm_2512(ins, pc),
        0x9d1 => parse_arm_2513(ins, pc),
        0x9d2 => parse_arm_2514(ins, pc),
        0x9d3 => parse_arm_2515(ins, pc),
        0x9d4 => parse_arm_2516(ins, pc),
        0x9d5 => parse_arm_2517(ins, pc),
        0x9d6 => parse_arm_2518(ins, pc),
        0x9d7 => parse_arm_2519(ins, pc),
        0x9d8 => parse_arm_2520(ins, pc),
        0x9d9 => parse_arm_2521(ins, pc),
        0x9da => parse_arm_2522(ins, pc),
        0x9db => parse_arm_2523(ins, pc),
        0x9dc => parse_arm_2524(ins, pc),
        0x9dd => parse_arm_2525(ins, pc),
        0x9de => parse_arm_2526(ins, pc),
        0x9df => parse_arm_2527(ins, pc),
        0x9e0 => parse_arm_2528(ins, pc),
        0x9e1 => parse_arm_2529(ins, pc),
        0x9e2 => parse_arm_2530(ins, pc),
        0x9e3 => parse_arm_2531(ins, pc),
        0x9e4 => parse_arm_2532(ins, pc),
        0x9e5 => parse_arm_2533(ins, pc),
        0x9e6 => parse_arm_2534(ins, pc),
        0x9e7 => parse_arm_2535(ins, pc),
        0x9e8 => parse_arm_2536(ins, pc),
        0x9e9 => parse_arm_2537(ins, pc),
        0x9ea => parse_arm_2538(ins, pc),
        0x9eb => parse_arm_2539(ins, pc),
        0x9ec => parse_arm_2540(ins, pc),
        0x9ed => parse_arm_2541(ins, pc),
        0x9ee => parse_arm_2542(ins, pc),
        0x9ef => parse_arm_2543(ins, pc),
        0x9f0 => parse_arm_2544(ins, pc),
        0x9f1 => parse_arm_2545(ins, pc),
        0x9f2 => parse_arm_2546(ins, pc),
        0x9f3 => parse_arm_2547(ins, pc),
        0x9f4 => parse_arm_2548(ins, pc),
        0x9f5 => parse_arm_2549(ins, pc),
        0x9f6 => parse_arm_2550(ins, pc),
        0x9f7 => parse_arm_2551(ins, pc),
        0x9f8 => parse_arm_2552(ins, pc),
        0x9f9 => parse_arm_2553(ins, pc),
        0x9fa => parse_arm_2554(ins, pc),
        0x9fb => parse_arm_2555(ins, pc),
        0x9fc => parse_arm_2556(ins, pc),
        0x9fd => parse_arm_2557(ins, pc),
        0x9fe => parse_arm_2558(ins, pc),
        0x9ff => parse_arm_2559(ins, pc),
        0xa00 => parse_arm_2560(ins, pc),
        0xa01 => parse_arm_2561(ins, pc),
        0xa02 => parse_arm_2562(ins, pc),
        0xa03 => parse_arm_2563(ins, pc),
        0xa04 => parse_arm_2564(ins, pc),
        0xa05 => parse_arm_2565(ins, pc),
        0xa06 => parse_arm_2566(ins, pc),
        0xa07 => parse_arm_2567(ins, pc),
        0xa08 => parse_arm_2568(ins, pc),
        0xa09 => parse_arm_2569(ins, pc),
        0xa0a => parse_arm_2570(ins, pc),
        0xa0b => parse_arm_2571(ins, pc),
        0xa0c => parse_arm_2572(ins, pc),
        0xa0d => parse_arm_2573(ins, pc),
        0xa0e => parse_arm_2574(ins, pc),
        0xa0f => parse_arm_2575(ins, pc),
        0xa10 => parse_arm_2576(ins, pc),
        0xa11 => parse_arm_2577(ins, pc),
        0xa12 => parse_arm_2578(ins, pc),
        0xa13 => parse_arm_2579(ins, pc),
        0xa14 => parse_arm_2580(ins, pc),
        0xa15 => parse_arm_2581(ins, pc),
        0xa16 => parse_arm_2582(ins, pc),
        0xa17 => parse_arm_2583(ins, pc),
        0xa18 => parse_arm_2584(ins, pc),
        0xa19 => parse_arm_2585(ins, pc),
        0xa1a => parse_arm_2586(ins, pc),
        0xa1b => parse_arm_2587(ins, pc),
        0xa1c => parse_arm_2588(ins, pc),
        0xa1d => parse_arm_2589(ins, pc),
        0xa1e => parse_arm_2590(ins, pc),
        0xa1f => parse_arm_2591(ins, pc),
        0xa20 => parse_arm_2592(ins, pc),
        0xa21 => parse_arm_2593(ins, pc),
        0xa22 => parse_arm_2594(ins, pc),
        0xa23 => parse_arm_2595(ins, pc),
        0xa24 => parse_arm_2596(ins, pc),
        0xa25 => parse_arm_2597(ins, pc),
        0xa26 => parse_arm_2598(ins, pc),
        0xa27 => parse_arm_2599(ins, pc),
        0xa28 => parse_arm_2600(ins, pc),
        0xa29 => parse_arm_2601(ins, pc),
        0xa2a => parse_arm_2602(ins, pc),
        0xa2b => parse_arm_2603(ins, pc),
        0xa2c => parse_arm_2604(ins, pc),
        0xa2d => parse_arm_2605(ins, pc),
        0xa2e => parse_arm_2606(ins, pc),
        0xa2f => parse_arm_2607(ins, pc),
        0xa30 => parse_arm_2608(ins, pc),
        0xa31 => parse_arm_2609(ins, pc),
        0xa32 => parse_arm_2610(ins, pc),
        0xa33 => parse_arm_2611(ins, pc),
        0xa34 => parse_arm_2612(ins, pc),
        0xa35 => parse_arm_2613(ins, pc),
        0xa36 => parse_arm_2614(ins, pc),
        0xa37 => parse_arm_2615(ins, pc),
        0xa38 => parse_arm_2616(ins, pc),
        0xa39 => parse_arm_2617(ins, pc),
        0xa3a => parse_arm_2618(ins, pc),
        0xa3b => parse_arm_2619(ins, pc),
        0xa3c => parse_arm_2620(ins, pc),
        0xa3d => parse_arm_2621(ins, pc),
        0xa3e => parse_arm_2622(ins, pc),
        0xa3f => parse_arm_2623(ins, pc),
        0xa40 => parse_arm_2624(ins, pc),
        0xa41 => parse_arm_2625(ins, pc),
        0xa42 => parse_arm_2626(ins, pc),
        0xa43 => parse_arm_2627(ins, pc),
        0xa44 => parse_arm_2628(ins, pc),
        0xa45 => parse_arm_2629(ins, pc),
        0xa46 => parse_arm_2630(ins, pc),
        0xa47 => parse_arm_2631(ins, pc),
        0xa48 => parse_arm_2632(ins, pc),
        0xa49 => parse_arm_2633(ins, pc),
        0xa4a => parse_arm_2634(ins, pc),
        0xa4b => parse_arm_2635(ins, pc),
        0xa4c => parse_arm_2636(ins, pc),
        0xa4d => parse_arm_2637(ins, pc),
        0xa4e => parse_arm_2638(ins, pc),
        0xa4f => parse_arm_2639(ins, pc),
        0xa50 => parse_arm_2640(ins, pc),
        0xa51 => parse_arm_2641(ins, pc),
        0xa52 => parse_arm_2642(ins, pc),
        0xa53 => parse_arm_2643(ins, pc),
        0xa54 => parse_arm_2644(ins, pc),
        0xa55 => parse_arm_2645(ins, pc),
        0xa56 => parse_arm_2646(ins, pc),
        0xa57 => parse_arm_2647(ins, pc),
        0xa58 => parse_arm_2648(ins, pc),
        0xa59 => parse_arm_2649(ins, pc),
        0xa5a => parse_arm_2650(ins, pc),
        0xa5b => parse_arm_2651(ins, pc),
        0xa5c => parse_arm_2652(ins, pc),
        0xa5d => parse_arm_2653(ins, pc),
        0xa5e => parse_arm_2654(ins, pc),
        0xa5f => parse_arm_2655(ins, pc),
        0xa60 => parse_arm_2656(ins, pc),
        0xa61 => parse_arm_2657(ins, pc),
        0xa62 => parse_arm_2658(ins, pc),
        0xa63 => parse_arm_2659(ins, pc),
        0xa64 => parse_arm_2660(ins, pc),
        0xa65 => parse_arm_2661(ins, pc),
        0xa66 => parse_arm_2662(ins, pc),
        0xa67 => parse_arm_2663(ins, pc),
        0xa68 => parse_arm_2664(ins, pc),
        0xa69 => parse_arm_2665(ins, pc),
        0xa6a => parse_arm_2666(ins, pc),
        0xa6b => parse_arm_2667(ins, pc),
        0xa6c => parse_arm_2668(ins, pc),
        0xa6d => parse_arm_2669(ins, pc),
        0xa6e => parse_arm_2670(ins, pc),
        0xa6f => parse_arm_2671(ins, pc),
        0xa70 => parse_arm_2672(ins, pc),
        0xa71 => parse_arm_2673(ins, pc),
        0xa72 => parse_arm_2674(ins, pc),
        0xa73 => parse_arm_2675(ins, pc),
        0xa74 => parse_arm_2676(ins, pc),
        0xa75 => parse_arm_2677(ins, pc),
        0xa76 => parse_arm_2678(ins, pc),
        0xa77 => parse_arm_2679(ins, pc),
        0xa78 => parse_arm_2680(ins, pc),
        0xa79 => parse_arm_2681(ins, pc),
        0xa7a => parse_arm_2682(ins, pc),
        0xa7b => parse_arm_2683(ins, pc),
        0xa7c => parse_arm_2684(ins, pc),
        0xa7d => parse_arm_2685(ins, pc),
        0xa7e => parse_arm_2686(ins, pc),
        0xa7f => parse_arm_2687(ins, pc),
        0xa80 => parse_arm_2688(ins, pc),
        0xa81 => parse_arm_2689(ins, pc),
        0xa82 => parse_arm_2690(ins, pc),
        0xa83 => parse_arm_2691(ins, pc),
        0xa84 => parse_arm_2692(ins, pc),
        0xa85 => parse_arm_2693(ins, pc),
        0xa86 => parse_arm_2694(ins, pc),
        0xa87 => parse_arm_2695(ins, pc),
        0xa88 => parse_arm_2696(ins, pc),
        0xa89 => parse_arm_2697(ins, pc),
        0xa8a => parse_arm_2698(ins, pc),
        0xa8b => parse_arm_2699(ins, pc),
        0xa8c => parse_arm_2700(ins, pc),
        0xa8d => parse_arm_2701(ins, pc),
        0xa8e => parse_arm_2702(ins, pc),
        0xa8f => parse_arm_2703(ins, pc),
        0xa90 => parse_arm_2704(ins, pc),
        0xa91 => parse_arm_2705(ins, pc),
        0xa92 => parse_arm_2706(ins, pc),
        0xa93 => parse_arm_2707(ins, pc),
        0xa94 => parse_arm_2708(ins, pc),
        0xa95 => parse_arm_2709(ins, pc),
        0xa96 => parse_arm_2710(ins, pc),
        0xa97 => parse_arm_2711(ins, pc),
        0xa98 => parse_arm_2712(ins, pc),
        0xa99 => parse_arm_2713(ins, pc),
        0xa9a => parse_arm_2714(ins, pc),
        0xa9b => parse_arm_2715(ins, pc),
        0xa9c => parse_arm_2716(ins, pc),
        0xa9d => parse_arm_2717(ins, pc),
        0xa9e => parse_arm_2718(ins, pc),
        0xa9f => parse_arm_2719(ins, pc),
        0xaa0 => parse_arm_2720(ins, pc),
        0xaa1 => parse_arm_2721(ins, pc),
        0xaa2 => parse_arm_2722(ins, pc),
        0xaa3 => parse_arm_2723(ins, pc),
        0xaa4 => parse_arm_2724(ins, pc),
        0xaa5 => parse_arm_2725(ins, pc),
        0xaa6 => parse_arm_2726(ins, pc),
        0xaa7 => parse_arm_2727(ins, pc),
        0xaa8 => parse_arm_2728(ins, pc),
        0xaa9 => parse_arm_2729(ins, pc),
        0xaaa => parse_arm_2730(ins, pc),
        0xaab => parse_arm_2731(ins, pc),
        0xaac => parse_arm_2732(ins, pc),
        0xaad => parse_arm_2733(ins, pc),
        0xaae => parse_arm_2734(ins, pc),
        0xaaf => parse_arm_2735(ins, pc),
        0xab0 => parse_arm_2736(ins, pc),
        0xab1 => parse_arm_2737(ins, pc),
        0xab2 => parse_arm_2738(ins, pc),
        0xab3 => parse_arm_2739(ins, pc),
        0xab4 => parse_arm_2740(ins, pc),
        0xab5 => parse_arm_2741(ins, pc),
        0xab6 => parse_arm_2742(ins, pc),
        0xab7 => parse_arm_2743(ins, pc),
        0xab8 => parse_arm_2744(ins, pc),
        0xab9 => parse_arm_2745(ins, pc),
        0xaba => parse_arm_2746(ins, pc),
        0xabb => parse_arm_2747(ins, pc),
        0xabc => parse_arm_2748(ins, pc),
        0xabd => parse_arm_2749(ins, pc),
        0xabe => parse_arm_2750(ins, pc),
        0xabf => parse_arm_2751(ins, pc),
        0xac0 => parse_arm_2752(ins, pc),
        0xac1 => parse_arm_2753(ins, pc),
        0xac2 => parse_arm_2754(ins, pc),
        0xac3 => parse_arm_2755(ins, pc),
        0xac4 => parse_arm_2756(ins, pc),
        0xac5 => parse_arm_2757(ins, pc),
        0xac6 => parse_arm_2758(ins, pc),
        0xac7 => parse_arm_2759(ins, pc),
        0xac8 => parse_arm_2760(ins, pc),
        0xac9 => parse_arm_2761(ins, pc),
        0xaca => parse_arm_2762(ins, pc),
        0xacb => parse_arm_2763(ins, pc),
        0xacc => parse_arm_2764(ins, pc),
        0xacd => parse_arm_2765(ins, pc),
        0xace => parse_arm_2766(ins, pc),
        0xacf => parse_arm_2767(ins, pc),
        0xad0 => parse_arm_2768(ins, pc),
        0xad1 => parse_arm_2769(ins, pc),
        0xad2 => parse_arm_2770(ins, pc),
        0xad3 => parse_arm_2771(ins, pc),
        0xad4 => parse_arm_2772(ins, pc),
        0xad5 => parse_arm_2773(ins, pc),
        0xad6 => parse_arm_2774(ins, pc),
        0xad7 => parse_arm_2775(ins, pc),
        0xad8 => parse_arm_2776(ins, pc),
        0xad9 => parse_arm_2777(ins, pc),
        0xada => parse_arm_2778(ins, pc),
        0xadb => parse_arm_2779(ins, pc),
        0xadc => parse_arm_2780(ins, pc),
        0xadd => parse_arm_2781(ins, pc),
        0xade => parse_arm_2782(ins, pc),
        0xadf => parse_arm_2783(ins, pc),
        0xae0 => parse_arm_2784(ins, pc),
        0xae1 => parse_arm_2785(ins, pc),
        0xae2 => parse_arm_2786(ins, pc),
        0xae3 => parse_arm_2787(ins, pc),
        0xae4 => parse_arm_2788(ins, pc),
        0xae5 => parse_arm_2789(ins, pc),
        0xae6 => parse_arm_2790(ins, pc),
        0xae7 => parse_arm_2791(ins, pc),
        0xae8 => parse_arm_2792(ins, pc),
        0xae9 => parse_arm_2793(ins, pc),
        0xaea => parse_arm_2794(ins, pc),
        0xaeb => parse_arm_2795(ins, pc),
        0xaec => parse_arm_2796(ins, pc),
        0xaed => parse_arm_2797(ins, pc),
        0xaee => parse_arm_2798(ins, pc),
        0xaef => parse_arm_2799(ins, pc),
        0xaf0 => parse_arm_2800(ins, pc),
        0xaf1 => parse_arm_2801(ins, pc),
        0xaf2 => parse_arm_2802(ins, pc),
        0xaf3 => parse_arm_2803(ins, pc),
        0xaf4 => parse_arm_2804(ins, pc),
        0xaf5 => parse_arm_2805(ins, pc),
        0xaf6 => parse_arm_2806(ins, pc),
        0xaf7 => parse_arm_2807(ins, pc),
        0xaf8 => parse_arm_2808(ins, pc),
        0xaf9 => parse_arm_2809(ins, pc),
        0xafa => parse_arm_2810(ins, pc),
        0xafb => parse_arm_2811(ins, pc),
        0xafc => parse_arm_2812(ins, pc),
        0xafd => parse_arm_2813(ins, pc),
        0xafe => parse_arm_2814(ins, pc),
        0xaff => parse_arm_2815(ins, pc),
        0xb00 => parse_arm_2816(ins, pc),
        0xb01 => parse_arm_2817(ins, pc),
        0xb02 => parse_arm_2818(ins, pc),
        0xb03 => parse_arm_2819(ins, pc),
        0xb04 => parse_arm_2820(ins, pc),
        0xb05 => parse_arm_2821(ins, pc),
        0xb06 => parse_arm_2822(ins, pc),
        0xb07 => parse_arm_2823(ins, pc),
        0xb08 => parse_arm_2824(ins, pc),
        0xb09 => parse_arm_2825(ins, pc),
        0xb0a => parse_arm_2826(ins, pc),
        0xb0b => parse_arm_2827(ins, pc),
        0xb0c => parse_arm_2828(ins, pc),
        0xb0d => parse_arm_2829(ins, pc),
        0xb0e => parse_arm_2830(ins, pc),
        0xb0f => parse_arm_2831(ins, pc),
        0xb10 => parse_arm_2832(ins, pc),
        0xb11 => parse_arm_2833(ins, pc),
        0xb12 => parse_arm_2834(ins, pc),
        0xb13 => parse_arm_2835(ins, pc),
        0xb14 => parse_arm_2836(ins, pc),
        0xb15 => parse_arm_2837(ins, pc),
        0xb16 => parse_arm_2838(ins, pc),
        0xb17 => parse_arm_2839(ins, pc),
        0xb18 => parse_arm_2840(ins, pc),
        0xb19 => parse_arm_2841(ins, pc),
        0xb1a => parse_arm_2842(ins, pc),
        0xb1b => parse_arm_2843(ins, pc),
        0xb1c => parse_arm_2844(ins, pc),
        0xb1d => parse_arm_2845(ins, pc),
        0xb1e => parse_arm_2846(ins, pc),
        0xb1f => parse_arm_2847(ins, pc),
        0xb20 => parse_arm_2848(ins, pc),
        0xb21 => parse_arm_2849(ins, pc),
        0xb22 => parse_arm_2850(ins, pc),
        0xb23 => parse_arm_2851(ins, pc),
        0xb24 => parse_arm_2852(ins, pc),
        0xb25 => parse_arm_2853(ins, pc),
        0xb26 => parse_arm_2854(ins, pc),
        0xb27 => parse_arm_2855(ins, pc),
        0xb28 => parse_arm_2856(ins, pc),
        0xb29 => parse_arm_2857(ins, pc),
        0xb2a => parse_arm_2858(ins, pc),
        0xb2b => parse_arm_2859(ins, pc),
        0xb2c => parse_arm_2860(ins, pc),
        0xb2d => parse_arm_2861(ins, pc),
        0xb2e => parse_arm_2862(ins, pc),
        0xb2f => parse_arm_2863(ins, pc),
        0xb30 => parse_arm_2864(ins, pc),
        0xb31 => parse_arm_2865(ins, pc),
        0xb32 => parse_arm_2866(ins, pc),
        0xb33 => parse_arm_2867(ins, pc),
        0xb34 => parse_arm_2868(ins, pc),
        0xb35 => parse_arm_2869(ins, pc),
        0xb36 => parse_arm_2870(ins, pc),
        0xb37 => parse_arm_2871(ins, pc),
        0xb38 => parse_arm_2872(ins, pc),
        0xb39 => parse_arm_2873(ins, pc),
        0xb3a => parse_arm_2874(ins, pc),
        0xb3b => parse_arm_2875(ins, pc),
        0xb3c => parse_arm_2876(ins, pc),
        0xb3d => parse_arm_2877(ins, pc),
        0xb3e => parse_arm_2878(ins, pc),
        0xb3f => parse_arm_2879(ins, pc),
        0xb40 => parse_arm_2880(ins, pc),
        0xb41 => parse_arm_2881(ins, pc),
        0xb42 => parse_arm_2882(ins, pc),
        0xb43 => parse_arm_2883(ins, pc),
        0xb44 => parse_arm_2884(ins, pc),
        0xb45 => parse_arm_2885(ins, pc),
        0xb46 => parse_arm_2886(ins, pc),
        0xb47 => parse_arm_2887(ins, pc),
        0xb48 => parse_arm_2888(ins, pc),
        0xb49 => parse_arm_2889(ins, pc),
        0xb4a => parse_arm_2890(ins, pc),
        0xb4b => parse_arm_2891(ins, pc),
        0xb4c => parse_arm_2892(ins, pc),
        0xb4d => parse_arm_2893(ins, pc),
        0xb4e => parse_arm_2894(ins, pc),
        0xb4f => parse_arm_2895(ins, pc),
        0xb50 => parse_arm_2896(ins, pc),
        0xb51 => parse_arm_2897(ins, pc),
        0xb52 => parse_arm_2898(ins, pc),
        0xb53 => parse_arm_2899(ins, pc),
        0xb54 => parse_arm_2900(ins, pc),
        0xb55 => parse_arm_2901(ins, pc),
        0xb56 => parse_arm_2902(ins, pc),
        0xb57 => parse_arm_2903(ins, pc),
        0xb58 => parse_arm_2904(ins, pc),
        0xb59 => parse_arm_2905(ins, pc),
        0xb5a => parse_arm_2906(ins, pc),
        0xb5b => parse_arm_2907(ins, pc),
        0xb5c => parse_arm_2908(ins, pc),
        0xb5d => parse_arm_2909(ins, pc),
        0xb5e => parse_arm_2910(ins, pc),
        0xb5f => parse_arm_2911(ins, pc),
        0xb60 => parse_arm_2912(ins, pc),
        0xb61 => parse_arm_2913(ins, pc),
        0xb62 => parse_arm_2914(ins, pc),
        0xb63 => parse_arm_2915(ins, pc),
        0xb64 => parse_arm_2916(ins, pc),
        0xb65 => parse_arm_2917(ins, pc),
        0xb66 => parse_arm_2918(ins, pc),
        0xb67 => parse_arm_2919(ins, pc),
        0xb68 => parse_arm_2920(ins, pc),
        0xb69 => parse_arm_2921(ins, pc),
        0xb6a => parse_arm_2922(ins, pc),
        0xb6b => parse_arm_2923(ins, pc),
        0xb6c => parse_arm_2924(ins, pc),
        0xb6d => parse_arm_2925(ins, pc),
        0xb6e => parse_arm_2926(ins, pc),
        0xb6f => parse_arm_2927(ins, pc),
        0xb70 => parse_arm_2928(ins, pc),
        0xb71 => parse_arm_2929(ins, pc),
        0xb72 => parse_arm_2930(ins, pc),
        0xb73 => parse_arm_2931(ins, pc),
        0xb74 => parse_arm_2932(ins, pc),
        0xb75 => parse_arm_2933(ins, pc),
        0xb76 => parse_arm_2934(ins, pc),
        0xb77 => parse_arm_2935(ins, pc),
        0xb78 => parse_arm_2936(ins, pc),
        0xb79 => parse_arm_2937(ins, pc),
        0xb7a => parse_arm_2938(ins, pc),
        0xb7b => parse_arm_2939(ins, pc),
        0xb7c => parse_arm_2940(ins, pc),
        0xb7d => parse_arm_2941(ins, pc),
        0xb7e => parse_arm_2942(ins, pc),
        0xb7f => parse_arm_2943(ins, pc),
        0xb80 => parse_arm_2944(ins, pc),
        0xb81 => parse_arm_2945(ins, pc),
        0xb82 => parse_arm_2946(ins, pc),
        0xb83 => parse_arm_2947(ins, pc),
        0xb84 => parse_arm_2948(ins, pc),
        0xb85 => parse_arm_2949(ins, pc),
        0xb86 => parse_arm_2950(ins, pc),
        0xb87 => parse_arm_2951(ins, pc),
        0xb88 => parse_arm_2952(ins, pc),
        0xb89 => parse_arm_2953(ins, pc),
        0xb8a => parse_arm_2954(ins, pc),
        0xb8b => parse_arm_2955(ins, pc),
        0xb8c => parse_arm_2956(ins, pc),
        0xb8d => parse_arm_2957(ins, pc),
        0xb8e => parse_arm_2958(ins, pc),
        0xb8f => parse_arm_2959(ins, pc),
        0xb90 => parse_arm_2960(ins, pc),
        0xb91 => parse_arm_2961(ins, pc),
        0xb92 => parse_arm_2962(ins, pc),
        0xb93 => parse_arm_2963(ins, pc),
        0xb94 => parse_arm_2964(ins, pc),
        0xb95 => parse_arm_2965(ins, pc),
        0xb96 => parse_arm_2966(ins, pc),
        0xb97 => parse_arm_2967(ins, pc),
        0xb98 => parse_arm_2968(ins, pc),
        0xb99 => parse_arm_2969(ins, pc),
        0xb9a => parse_arm_2970(ins, pc),
        0xb9b => parse_arm_2971(ins, pc),
        0xb9c => parse_arm_2972(ins, pc),
        0xb9d => parse_arm_2973(ins, pc),
        0xb9e => parse_arm_2974(ins, pc),
        0xb9f => parse_arm_2975(ins, pc),
        0xba0 => parse_arm_2976(ins, pc),
        0xba1 => parse_arm_2977(ins, pc),
        0xba2 => parse_arm_2978(ins, pc),
        0xba3 => parse_arm_2979(ins, pc),
        0xba4 => parse_arm_2980(ins, pc),
        0xba5 => parse_arm_2981(ins, pc),
        0xba6 => parse_arm_2982(ins, pc),
        0xba7 => parse_arm_2983(ins, pc),
        0xba8 => parse_arm_2984(ins, pc),
        0xba9 => parse_arm_2985(ins, pc),
        0xbaa => parse_arm_2986(ins, pc),
        0xbab => parse_arm_2987(ins, pc),
        0xbac => parse_arm_2988(ins, pc),
        0xbad => parse_arm_2989(ins, pc),
        0xbae => parse_arm_2990(ins, pc),
        0xbaf => parse_arm_2991(ins, pc),
        0xbb0 => parse_arm_2992(ins, pc),
        0xbb1 => parse_arm_2993(ins, pc),
        0xbb2 => parse_arm_2994(ins, pc),
        0xbb3 => parse_arm_2995(ins, pc),
        0xbb4 => parse_arm_2996(ins, pc),
        0xbb5 => parse_arm_2997(ins, pc),
        0xbb6 => parse_arm_2998(ins, pc),
        0xbb7 => parse_arm_2999(ins, pc),
        0xbb8 => parse_arm_3000(ins, pc),
        0xbb9 => parse_arm_3001(ins, pc),
        0xbba => parse_arm_3002(ins, pc),
        0xbbb => parse_arm_3003(ins, pc),
        0xbbc => parse_arm_3004(ins, pc),
        0xbbd => parse_arm_3005(ins, pc),
        0xbbe => parse_arm_3006(ins, pc),
        0xbbf => parse_arm_3007(ins, pc),
        0xbc0 => parse_arm_3008(ins, pc),
        0xbc1 => parse_arm_3009(ins, pc),
        0xbc2 => parse_arm_3010(ins, pc),
        0xbc3 => parse_arm_3011(ins, pc),
        0xbc4 => parse_arm_3012(ins, pc),
        0xbc5 => parse_arm_3013(ins, pc),
        0xbc6 => parse_arm_3014(ins, pc),
        0xbc7 => parse_arm_3015(ins, pc),
        0xbc8 => parse_arm_3016(ins, pc),
        0xbc9 => parse_arm_3017(ins, pc),
        0xbca => parse_arm_3018(ins, pc),
        0xbcb => parse_arm_3019(ins, pc),
        0xbcc => parse_arm_3020(ins, pc),
        0xbcd => parse_arm_3021(ins, pc),
        0xbce => parse_arm_3022(ins, pc),
        0xbcf => parse_arm_3023(ins, pc),
        0xbd0 => parse_arm_3024(ins, pc),
        0xbd1 => parse_arm_3025(ins, pc),
        0xbd2 => parse_arm_3026(ins, pc),
        0xbd3 => parse_arm_3027(ins, pc),
        0xbd4 => parse_arm_3028(ins, pc),
        0xbd5 => parse_arm_3029(ins, pc),
        0xbd6 => parse_arm_3030(ins, pc),
        0xbd7 => parse_arm_3031(ins, pc),
        0xbd8 => parse_arm_3032(ins, pc),
        0xbd9 => parse_arm_3033(ins, pc),
        0xbda => parse_arm_3034(ins, pc),
        0xbdb => parse_arm_3035(ins, pc),
        0xbdc => parse_arm_3036(ins, pc),
        0xbdd => parse_arm_3037(ins, pc),
        0xbde => parse_arm_3038(ins, pc),
        0xbdf => parse_arm_3039(ins, pc),
        0xbe0 => parse_arm_3040(ins, pc),
        0xbe1 => parse_arm_3041(ins, pc),
        0xbe2 => parse_arm_3042(ins, pc),
        0xbe3 => parse_arm_3043(ins, pc),
        0xbe4 => parse_arm_3044(ins, pc),
        0xbe5 => parse_arm_3045(ins, pc),
        0xbe6 => parse_arm_3046(ins, pc),
        0xbe7 => parse_arm_3047(ins, pc),
        0xbe8 => parse_arm_3048(ins, pc),
        0xbe9 => parse_arm_3049(ins, pc),
        0xbea => parse_arm_3050(ins, pc),
        0xbeb => parse_arm_3051(ins, pc),
        0xbec => parse_arm_3052(ins, pc),
        0xbed => parse_arm_3053(ins, pc),
        0xbee => parse_arm_3054(ins, pc),
        0xbef => parse_arm_3055(ins, pc),
        0xbf0 => parse_arm_3056(ins, pc),
        0xbf1 => parse_arm_3057(ins, pc),
        0xbf2 => parse_arm_3058(ins, pc),
        0xbf3 => parse_arm_3059(ins, pc),
        0xbf4 => parse_arm_3060(ins, pc),
        0xbf5 => parse_arm_3061(ins, pc),
        0xbf6 => parse_arm_3062(ins, pc),
        0xbf7 => parse_arm_3063(ins, pc),
        0xbf8 => parse_arm_3064(ins, pc),
        0xbf9 => parse_arm_3065(ins, pc),
        0xbfa => parse_arm_3066(ins, pc),
        0xbfb => parse_arm_3067(ins, pc),
        0xbfc => parse_arm_3068(ins, pc),
        0xbfd => parse_arm_3069(ins, pc),
        0xbfe => parse_arm_3070(ins, pc),
        0xbff => parse_arm_3071(ins, pc),
        0xc00 => parse_arm_3072(ins, pc),
        0xc01 => parse_arm_3073(ins, pc),
        0xc02 => parse_arm_3074(ins, pc),
        0xc03 => parse_arm_3075(ins, pc),
        0xc04 => parse_arm_3076(ins, pc),
        0xc05 => parse_arm_3077(ins, pc),
        0xc06 => parse_arm_3078(ins, pc),
        0xc07 => parse_arm_3079(ins, pc),
        0xc08 => parse_arm_3080(ins, pc),
        0xc09 => parse_arm_3081(ins, pc),
        0xc0a => parse_arm_3082(ins, pc),
        0xc0b => parse_arm_3083(ins, pc),
        0xc0c => parse_arm_3084(ins, pc),
        0xc0d => parse_arm_3085(ins, pc),
        0xc0e => parse_arm_3086(ins, pc),
        0xc0f => parse_arm_3087(ins, pc),
        0xc10 => parse_arm_3088(ins, pc),
        0xc11 => parse_arm_3089(ins, pc),
        0xc12 => parse_arm_3090(ins, pc),
        0xc13 => parse_arm_3091(ins, pc),
        0xc14 => parse_arm_3092(ins, pc),
        0xc15 => parse_arm_3093(ins, pc),
        0xc16 => parse_arm_3094(ins, pc),
        0xc17 => parse_arm_3095(ins, pc),
        0xc18 => parse_arm_3096(ins, pc),
        0xc19 => parse_arm_3097(ins, pc),
        0xc1a => parse_arm_3098(ins, pc),
        0xc1b => parse_arm_3099(ins, pc),
        0xc1c => parse_arm_3100(ins, pc),
        0xc1d => parse_arm_3101(ins, pc),
        0xc1e => parse_arm_3102(ins, pc),
        0xc1f => parse_arm_3103(ins, pc),
        0xc20 => parse_arm_3104(ins, pc),
        0xc21 => parse_arm_3105(ins, pc),
        0xc22 => parse_arm_3106(ins, pc),
        0xc23 => parse_arm_3107(ins, pc),
        0xc24 => parse_arm_3108(ins, pc),
        0xc25 => parse_arm_3109(ins, pc),
        0xc26 => parse_arm_3110(ins, pc),
        0xc27 => parse_arm_3111(ins, pc),
        0xc28 => parse_arm_3112(ins, pc),
        0xc29 => parse_arm_3113(ins, pc),
        0xc2a => parse_arm_3114(ins, pc),
        0xc2b => parse_arm_3115(ins, pc),
        0xc2c => parse_arm_3116(ins, pc),
        0xc2d => parse_arm_3117(ins, pc),
        0xc2e => parse_arm_3118(ins, pc),
        0xc2f => parse_arm_3119(ins, pc),
        0xc30 => parse_arm_3120(ins, pc),
        0xc31 => parse_arm_3121(ins, pc),
        0xc32 => parse_arm_3122(ins, pc),
        0xc33 => parse_arm_3123(ins, pc),
        0xc34 => parse_arm_3124(ins, pc),
        0xc35 => parse_arm_3125(ins, pc),
        0xc36 => parse_arm_3126(ins, pc),
        0xc37 => parse_arm_3127(ins, pc),
        0xc38 => parse_arm_3128(ins, pc),
        0xc39 => parse_arm_3129(ins, pc),
        0xc3a => parse_arm_3130(ins, pc),
        0xc3b => parse_arm_3131(ins, pc),
        0xc3c => parse_arm_3132(ins, pc),
        0xc3d => parse_arm_3133(ins, pc),
        0xc3e => parse_arm_3134(ins, pc),
        0xc3f => parse_arm_3135(ins, pc),
        0xc40 => parse_arm_3136(ins, pc),
        0xc41 => parse_arm_3137(ins, pc),
        0xc42 => parse_arm_3138(ins, pc),
        0xc43 => parse_arm_3139(ins, pc),
        0xc44 => parse_arm_3140(ins, pc),
        0xc45 => parse_arm_3141(ins, pc),
        0xc46 => parse_arm_3142(ins, pc),
        0xc47 => parse_arm_3143(ins, pc),
        0xc48 => parse_arm_3144(ins, pc),
        0xc49 => parse_arm_3145(ins, pc),
        0xc4a => parse_arm_3146(ins, pc),
        0xc4b => parse_arm_3147(ins, pc),
        0xc4c => parse_arm_3148(ins, pc),
        0xc4d => parse_arm_3149(ins, pc),
        0xc4e => parse_arm_3150(ins, pc),
        0xc4f => parse_arm_3151(ins, pc),
        0xc50 => parse_arm_3152(ins, pc),
        0xc51 => parse_arm_3153(ins, pc),
        0xc52 => parse_arm_3154(ins, pc),
        0xc53 => parse_arm_3155(ins, pc),
        0xc54 => parse_arm_3156(ins, pc),
        0xc55 => parse_arm_3157(ins, pc),
        0xc56 => parse_arm_3158(ins, pc),
        0xc57 => parse_arm_3159(ins, pc),
        0xc58 => parse_arm_3160(ins, pc),
        0xc59 => parse_arm_3161(ins, pc),
        0xc5a => parse_arm_3162(ins, pc),
        0xc5b => parse_arm_3163(ins, pc),
        0xc5c => parse_arm_3164(ins, pc),
        0xc5d => parse_arm_3165(ins, pc),
        0xc5e => parse_arm_3166(ins, pc),
        0xc5f => parse_arm_3167(ins, pc),
        0xc60 => parse_arm_3168(ins, pc),
        0xc61 => parse_arm_3169(ins, pc),
        0xc62 => parse_arm_3170(ins, pc),
        0xc63 => parse_arm_3171(ins, pc),
        0xc64 => parse_arm_3172(ins, pc),
        0xc65 => parse_arm_3173(ins, pc),
        0xc66 => parse_arm_3174(ins, pc),
        0xc67 => parse_arm_3175(ins, pc),
        0xc68 => parse_arm_3176(ins, pc),
        0xc69 => parse_arm_3177(ins, pc),
        0xc6a => parse_arm_3178(ins, pc),
        0xc6b => parse_arm_3179(ins, pc),
        0xc6c => parse_arm_3180(ins, pc),
        0xc6d => parse_arm_3181(ins, pc),
        0xc6e => parse_arm_3182(ins, pc),
        0xc6f => parse_arm_3183(ins, pc),
        0xc70 => parse_arm_3184(ins, pc),
        0xc71 => parse_arm_3185(ins, pc),
        0xc72 => parse_arm_3186(ins, pc),
        0xc73 => parse_arm_3187(ins, pc),
        0xc74 => parse_arm_3188(ins, pc),
        0xc75 => parse_arm_3189(ins, pc),
        0xc76 => parse_arm_3190(ins, pc),
        0xc77 => parse_arm_3191(ins, pc),
        0xc78 => parse_arm_3192(ins, pc),
        0xc79 => parse_arm_3193(ins, pc),
        0xc7a => parse_arm_3194(ins, pc),
        0xc7b => parse_arm_3195(ins, pc),
        0xc7c => parse_arm_3196(ins, pc),
        0xc7d => parse_arm_3197(ins, pc),
        0xc7e => parse_arm_3198(ins, pc),
        0xc7f => parse_arm_3199(ins, pc),
        0xc80 => parse_arm_3200(ins, pc),
        0xc81 => parse_arm_3201(ins, pc),
        0xc82 => parse_arm_3202(ins, pc),
        0xc83 => parse_arm_3203(ins, pc),
        0xc84 => parse_arm_3204(ins, pc),
        0xc85 => parse_arm_3205(ins, pc),
        0xc86 => parse_arm_3206(ins, pc),
        0xc87 => parse_arm_3207(ins, pc),
        0xc88 => parse_arm_3208(ins, pc),
        0xc89 => parse_arm_3209(ins, pc),
        0xc8a => parse_arm_3210(ins, pc),
        0xc8b => parse_arm_3211(ins, pc),
        0xc8c => parse_arm_3212(ins, pc),
        0xc8d => parse_arm_3213(ins, pc),
        0xc8e => parse_arm_3214(ins, pc),
        0xc8f => parse_arm_3215(ins, pc),
        0xc90 => parse_arm_3216(ins, pc),
        0xc91 => parse_arm_3217(ins, pc),
        0xc92 => parse_arm_3218(ins, pc),
        0xc93 => parse_arm_3219(ins, pc),
        0xc94 => parse_arm_3220(ins, pc),
        0xc95 => parse_arm_3221(ins, pc),
        0xc96 => parse_arm_3222(ins, pc),
        0xc97 => parse_arm_3223(ins, pc),
        0xc98 => parse_arm_3224(ins, pc),
        0xc99 => parse_arm_3225(ins, pc),
        0xc9a => parse_arm_3226(ins, pc),
        0xc9b => parse_arm_3227(ins, pc),
        0xc9c => parse_arm_3228(ins, pc),
        0xc9d => parse_arm_3229(ins, pc),
        0xc9e => parse_arm_3230(ins, pc),
        0xc9f => parse_arm_3231(ins, pc),
        0xca0 => parse_arm_3232(ins, pc),
        0xca1 => parse_arm_3233(ins, pc),
        0xca2 => parse_arm_3234(ins, pc),
        0xca3 => parse_arm_3235(ins, pc),
        0xca4 => parse_arm_3236(ins, pc),
        0xca5 => parse_arm_3237(ins, pc),
        0xca6 => parse_arm_3238(ins, pc),
        0xca7 => parse_arm_3239(ins, pc),
        0xca8 => parse_arm_3240(ins, pc),
        0xca9 => parse_arm_3241(ins, pc),
        0xcaa => parse_arm_3242(ins, pc),
        0xcab => parse_arm_3243(ins, pc),
        0xcac => parse_arm_3244(ins, pc),
        0xcad => parse_arm_3245(ins, pc),
        0xcae => parse_arm_3246(ins, pc),
        0xcaf => parse_arm_3247(ins, pc),
        0xcb0 => parse_arm_3248(ins, pc),
        0xcb1 => parse_arm_3249(ins, pc),
        0xcb2 => parse_arm_3250(ins, pc),
        0xcb3 => parse_arm_3251(ins, pc),
        0xcb4 => parse_arm_3252(ins, pc),
        0xcb5 => parse_arm_3253(ins, pc),
        0xcb6 => parse_arm_3254(ins, pc),
        0xcb7 => parse_arm_3255(ins, pc),
        0xcb8 => parse_arm_3256(ins, pc),
        0xcb9 => parse_arm_3257(ins, pc),
        0xcba => parse_arm_3258(ins, pc),
        0xcbb => parse_arm_3259(ins, pc),
        0xcbc => parse_arm_3260(ins, pc),
        0xcbd => parse_arm_3261(ins, pc),
        0xcbe => parse_arm_3262(ins, pc),
        0xcbf => parse_arm_3263(ins, pc),
        0xcc0 => parse_arm_3264(ins, pc),
        0xcc1 => parse_arm_3265(ins, pc),
        0xcc2 => parse_arm_3266(ins, pc),
        0xcc3 => parse_arm_3267(ins, pc),
        0xcc4 => parse_arm_3268(ins, pc),
        0xcc5 => parse_arm_3269(ins, pc),
        0xcc6 => parse_arm_3270(ins, pc),
        0xcc7 => parse_arm_3271(ins, pc),
        0xcc8 => parse_arm_3272(ins, pc),
        0xcc9 => parse_arm_3273(ins, pc),
        0xcca => parse_arm_3274(ins, pc),
        0xccb => parse_arm_3275(ins, pc),
        0xccc => parse_arm_3276(ins, pc),
        0xccd => parse_arm_3277(ins, pc),
        0xcce => parse_arm_3278(ins, pc),
        0xccf => parse_arm_3279(ins, pc),
        0xcd0 => parse_arm_3280(ins, pc),
        0xcd1 => parse_arm_3281(ins, pc),
        0xcd2 => parse_arm_3282(ins, pc),
        0xcd3 => parse_arm_3283(ins, pc),
        0xcd4 => parse_arm_3284(ins, pc),
        0xcd5 => parse_arm_3285(ins, pc),
        0xcd6 => parse_arm_3286(ins, pc),
        0xcd7 => parse_arm_3287(ins, pc),
        0xcd8 => parse_arm_3288(ins, pc),
        0xcd9 => parse_arm_3289(ins, pc),
        0xcda => parse_arm_3290(ins, pc),
        0xcdb => parse_arm_3291(ins, pc),
        0xcdc => parse_arm_3292(ins, pc),
        0xcdd => parse_arm_3293(ins, pc),
        0xcde => parse_arm_3294(ins, pc),
        0xcdf => parse_arm_3295(ins, pc),
        0xce0 => parse_arm_3296(ins, pc),
        0xce1 => parse_arm_3297(ins, pc),
        0xce2 => parse_arm_3298(ins, pc),
        0xce3 => parse_arm_3299(ins, pc),
        0xce4 => parse_arm_3300(ins, pc),
        0xce5 => parse_arm_3301(ins, pc),
        0xce6 => parse_arm_3302(ins, pc),
        0xce7 => parse_arm_3303(ins, pc),
        0xce8 => parse_arm_3304(ins, pc),
        0xce9 => parse_arm_3305(ins, pc),
        0xcea => parse_arm_3306(ins, pc),
        0xceb => parse_arm_3307(ins, pc),
        0xcec => parse_arm_3308(ins, pc),
        0xced => parse_arm_3309(ins, pc),
        0xcee => parse_arm_3310(ins, pc),
        0xcef => parse_arm_3311(ins, pc),
        0xcf0 => parse_arm_3312(ins, pc),
        0xcf1 => parse_arm_3313(ins, pc),
        0xcf2 => parse_arm_3314(ins, pc),
        0xcf3 => parse_arm_3315(ins, pc),
        0xcf4 => parse_arm_3316(ins, pc),
        0xcf5 => parse_arm_3317(ins, pc),
        0xcf6 => parse_arm_3318(ins, pc),
        0xcf7 => parse_arm_3319(ins, pc),
        0xcf8 => parse_arm_3320(ins, pc),
        0xcf9 => parse_arm_3321(ins, pc),
        0xcfa => parse_arm_3322(ins, pc),
        0xcfb => parse_arm_3323(ins, pc),
        0xcfc => parse_arm_3324(ins, pc),
        0xcfd => parse_arm_3325(ins, pc),
        0xcfe => parse_arm_3326(ins, pc),
        0xcff => parse_arm_3327(ins, pc),
        0xd00 => parse_arm_3328(ins, pc),
        0xd01 => parse_arm_3329(ins, pc),
        0xd02 => parse_arm_3330(ins, pc),
        0xd03 => parse_arm_3331(ins, pc),
        0xd04 => parse_arm_3332(ins, pc),
        0xd05 => parse_arm_3333(ins, pc),
        0xd06 => parse_arm_3334(ins, pc),
        0xd07 => parse_arm_3335(ins, pc),
        0xd08 => parse_arm_3336(ins, pc),
        0xd09 => parse_arm_3337(ins, pc),
        0xd0a => parse_arm_3338(ins, pc),
        0xd0b => parse_arm_3339(ins, pc),
        0xd0c => parse_arm_3340(ins, pc),
        0xd0d => parse_arm_3341(ins, pc),
        0xd0e => parse_arm_3342(ins, pc),
        0xd0f => parse_arm_3343(ins, pc),
        0xd10 => parse_arm_3344(ins, pc),
        0xd11 => parse_arm_3345(ins, pc),
        0xd12 => parse_arm_3346(ins, pc),
        0xd13 => parse_arm_3347(ins, pc),
        0xd14 => parse_arm_3348(ins, pc),
        0xd15 => parse_arm_3349(ins, pc),
        0xd16 => parse_arm_3350(ins, pc),
        0xd17 => parse_arm_3351(ins, pc),
        0xd18 => parse_arm_3352(ins, pc),
        0xd19 => parse_arm_3353(ins, pc),
        0xd1a => parse_arm_3354(ins, pc),
        0xd1b => parse_arm_3355(ins, pc),
        0xd1c => parse_arm_3356(ins, pc),
        0xd1d => parse_arm_3357(ins, pc),
        0xd1e => parse_arm_3358(ins, pc),
        0xd1f => parse_arm_3359(ins, pc),
        0xd20 => parse_arm_3360(ins, pc),
        0xd21 => parse_arm_3361(ins, pc),
        0xd22 => parse_arm_3362(ins, pc),
        0xd23 => parse_arm_3363(ins, pc),
        0xd24 => parse_arm_3364(ins, pc),
        0xd25 => parse_arm_3365(ins, pc),
        0xd26 => parse_arm_3366(ins, pc),
        0xd27 => parse_arm_3367(ins, pc),
        0xd28 => parse_arm_3368(ins, pc),
        0xd29 => parse_arm_3369(ins, pc),
        0xd2a => parse_arm_3370(ins, pc),
        0xd2b => parse_arm_3371(ins, pc),
        0xd2c => parse_arm_3372(ins, pc),
        0xd2d => parse_arm_3373(ins, pc),
        0xd2e => parse_arm_3374(ins, pc),
        0xd2f => parse_arm_3375(ins, pc),
        0xd30 => parse_arm_3376(ins, pc),
        0xd31 => parse_arm_3377(ins, pc),
        0xd32 => parse_arm_3378(ins, pc),
        0xd33 => parse_arm_3379(ins, pc),
        0xd34 => parse_arm_3380(ins, pc),
        0xd35 => parse_arm_3381(ins, pc),
        0xd36 => parse_arm_3382(ins, pc),
        0xd37 => parse_arm_3383(ins, pc),
        0xd38 => parse_arm_3384(ins, pc),
        0xd39 => parse_arm_3385(ins, pc),
        0xd3a => parse_arm_3386(ins, pc),
        0xd3b => parse_arm_3387(ins, pc),
        0xd3c => parse_arm_3388(ins, pc),
        0xd3d => parse_arm_3389(ins, pc),
        0xd3e => parse_arm_3390(ins, pc),
        0xd3f => parse_arm_3391(ins, pc),
        0xd40 => parse_arm_3392(ins, pc),
        0xd41 => parse_arm_3393(ins, pc),
        0xd42 => parse_arm_3394(ins, pc),
        0xd43 => parse_arm_3395(ins, pc),
        0xd44 => parse_arm_3396(ins, pc),
        0xd45 => parse_arm_3397(ins, pc),
        0xd46 => parse_arm_3398(ins, pc),
        0xd47 => parse_arm_3399(ins, pc),
        0xd48 => parse_arm_3400(ins, pc),
        0xd49 => parse_arm_3401(ins, pc),
        0xd4a => parse_arm_3402(ins, pc),
        0xd4b => parse_arm_3403(ins, pc),
        0xd4c => parse_arm_3404(ins, pc),
        0xd4d => parse_arm_3405(ins, pc),
        0xd4e => parse_arm_3406(ins, pc),
        0xd4f => parse_arm_3407(ins, pc),
        0xd50 => parse_arm_3408(ins, pc),
        0xd51 => parse_arm_3409(ins, pc),
        0xd52 => parse_arm_3410(ins, pc),
        0xd53 => parse_arm_3411(ins, pc),
        0xd54 => parse_arm_3412(ins, pc),
        0xd55 => parse_arm_3413(ins, pc),
        0xd56 => parse_arm_3414(ins, pc),
        0xd57 => parse_arm_3415(ins, pc),
        0xd58 => parse_arm_3416(ins, pc),
        0xd59 => parse_arm_3417(ins, pc),
        0xd5a => parse_arm_3418(ins, pc),
        0xd5b => parse_arm_3419(ins, pc),
        0xd5c => parse_arm_3420(ins, pc),
        0xd5d => parse_arm_3421(ins, pc),
        0xd5e => parse_arm_3422(ins, pc),
        0xd5f => parse_arm_3423(ins, pc),
        0xd60 => parse_arm_3424(ins, pc),
        0xd61 => parse_arm_3425(ins, pc),
        0xd62 => parse_arm_3426(ins, pc),
        0xd63 => parse_arm_3427(ins, pc),
        0xd64 => parse_arm_3428(ins, pc),
        0xd65 => parse_arm_3429(ins, pc),
        0xd66 => parse_arm_3430(ins, pc),
        0xd67 => parse_arm_3431(ins, pc),
        0xd68 => parse_arm_3432(ins, pc),
        0xd69 => parse_arm_3433(ins, pc),
        0xd6a => parse_arm_3434(ins, pc),
        0xd6b => parse_arm_3435(ins, pc),
        0xd6c => parse_arm_3436(ins, pc),
        0xd6d => parse_arm_3437(ins, pc),
        0xd6e => parse_arm_3438(ins, pc),
        0xd6f => parse_arm_3439(ins, pc),
        0xd70 => parse_arm_3440(ins, pc),
        0xd71 => parse_arm_3441(ins, pc),
        0xd72 => parse_arm_3442(ins, pc),
        0xd73 => parse_arm_3443(ins, pc),
        0xd74 => parse_arm_3444(ins, pc),
        0xd75 => parse_arm_3445(ins, pc),
        0xd76 => parse_arm_3446(ins, pc),
        0xd77 => parse_arm_3447(ins, pc),
        0xd78 => parse_arm_3448(ins, pc),
        0xd79 => parse_arm_3449(ins, pc),
        0xd7a => parse_arm_3450(ins, pc),
        0xd7b => parse_arm_3451(ins, pc),
        0xd7c => parse_arm_3452(ins, pc),
        0xd7d => parse_arm_3453(ins, pc),
        0xd7e => parse_arm_3454(ins, pc),
        0xd7f => parse_arm_3455(ins, pc),
        0xd80 => parse_arm_3456(ins, pc),
        0xd81 => parse_arm_3457(ins, pc),
        0xd82 => parse_arm_3458(ins, pc),
        0xd83 => parse_arm_3459(ins, pc),
        0xd84 => parse_arm_3460(ins, pc),
        0xd85 => parse_arm_3461(ins, pc),
        0xd86 => parse_arm_3462(ins, pc),
        0xd87 => parse_arm_3463(ins, pc),
        0xd88 => parse_arm_3464(ins, pc),
        0xd89 => parse_arm_3465(ins, pc),
        0xd8a => parse_arm_3466(ins, pc),
        0xd8b => parse_arm_3467(ins, pc),
        0xd8c => parse_arm_3468(ins, pc),
        0xd8d => parse_arm_3469(ins, pc),
        0xd8e => parse_arm_3470(ins, pc),
        0xd8f => parse_arm_3471(ins, pc),
        0xd90 => parse_arm_3472(ins, pc),
        0xd91 => parse_arm_3473(ins, pc),
        0xd92 => parse_arm_3474(ins, pc),
        0xd93 => parse_arm_3475(ins, pc),
        0xd94 => parse_arm_3476(ins, pc),
        0xd95 => parse_arm_3477(ins, pc),
        0xd96 => parse_arm_3478(ins, pc),
        0xd97 => parse_arm_3479(ins, pc),
        0xd98 => parse_arm_3480(ins, pc),
        0xd99 => parse_arm_3481(ins, pc),
        0xd9a => parse_arm_3482(ins, pc),
        0xd9b => parse_arm_3483(ins, pc),
        0xd9c => parse_arm_3484(ins, pc),
        0xd9d => parse_arm_3485(ins, pc),
        0xd9e => parse_arm_3486(ins, pc),
        0xd9f => parse_arm_3487(ins, pc),
        0xda0 => parse_arm_3488(ins, pc),
        0xda1 => parse_arm_3489(ins, pc),
        0xda2 => parse_arm_3490(ins, pc),
        0xda3 => parse_arm_3491(ins, pc),
        0xda4 => parse_arm_3492(ins, pc),
        0xda5 => parse_arm_3493(ins, pc),
        0xda6 => parse_arm_3494(ins, pc),
        0xda7 => parse_arm_3495(ins, pc),
        0xda8 => parse_arm_3496(ins, pc),
        0xda9 => parse_arm_3497(ins, pc),
        0xdaa => parse_arm_3498(ins, pc),
        0xdab => parse_arm_3499(ins, pc),
        0xdac => parse_arm_3500(ins, pc),
        0xdad => parse_arm_3501(ins, pc),
        0xdae => parse_arm_3502(ins, pc),
        0xdaf => parse_arm_3503(ins, pc),
        0xdb0 => parse_arm_3504(ins, pc),
        0xdb1 => parse_arm_3505(ins, pc),
        0xdb2 => parse_arm_3506(ins, pc),
        0xdb3 => parse_arm_3507(ins, pc),
        0xdb4 => parse_arm_3508(ins, pc),
        0xdb5 => parse_arm_3509(ins, pc),
        0xdb6 => parse_arm_3510(ins, pc),
        0xdb7 => parse_arm_3511(ins, pc),
        0xdb8 => parse_arm_3512(ins, pc),
        0xdb9 => parse_arm_3513(ins, pc),
        0xdba => parse_arm_3514(ins, pc),
        0xdbb => parse_arm_3515(ins, pc),
        0xdbc => parse_arm_3516(ins, pc),
        0xdbd => parse_arm_3517(ins, pc),
        0xdbe => parse_arm_3518(ins, pc),
        0xdbf => parse_arm_3519(ins, pc),
        0xdc0 => parse_arm_3520(ins, pc),
        0xdc1 => parse_arm_3521(ins, pc),
        0xdc2 => parse_arm_3522(ins, pc),
        0xdc3 => parse_arm_3523(ins, pc),
        0xdc4 => parse_arm_3524(ins, pc),
        0xdc5 => parse_arm_3525(ins, pc),
        0xdc6 => parse_arm_3526(ins, pc),
        0xdc7 => parse_arm_3527(ins, pc),
        0xdc8 => parse_arm_3528(ins, pc),
        0xdc9 => parse_arm_3529(ins, pc),
        0xdca => parse_arm_3530(ins, pc),
        0xdcb => parse_arm_3531(ins, pc),
        0xdcc => parse_arm_3532(ins, pc),
        0xdcd => parse_arm_3533(ins, pc),
        0xdce => parse_arm_3534(ins, pc),
        0xdcf => parse_arm_3535(ins, pc),
        0xdd0 => parse_arm_3536(ins, pc),
        0xdd1 => parse_arm_3537(ins, pc),
        0xdd2 => parse_arm_3538(ins, pc),
        0xdd3 => parse_arm_3539(ins, pc),
        0xdd4 => parse_arm_3540(ins, pc),
        0xdd5 => parse_arm_3541(ins, pc),
        0xdd6 => parse_arm_3542(ins, pc),
        0xdd7 => parse_arm_3543(ins, pc),
        0xdd8 => parse_arm_3544(ins, pc),
        0xdd9 => parse_arm_3545(ins, pc),
        0xdda => parse_arm_3546(ins, pc),
        0xddb => parse_arm_3547(ins, pc),
        0xddc => parse_arm_3548(ins, pc),
        0xddd => parse_arm_3549(ins, pc),
        0xdde => parse_arm_3550(ins, pc),
        0xddf => parse_arm_3551(ins, pc),
        0xde0 => parse_arm_3552(ins, pc),
        0xde1 => parse_arm_3553(ins, pc),
        0xde2 => parse_arm_3554(ins, pc),
        0xde3 => parse_arm_3555(ins, pc),
        0xde4 => parse_arm_3556(ins, pc),
        0xde5 => parse_arm_3557(ins, pc),
        0xde6 => parse_arm_3558(ins, pc),
        0xde7 => parse_arm_3559(ins, pc),
        0xde8 => parse_arm_3560(ins, pc),
        0xde9 => parse_arm_3561(ins, pc),
        0xdea => parse_arm_3562(ins, pc),
        0xdeb => parse_arm_3563(ins, pc),
        0xdec => parse_arm_3564(ins, pc),
        0xded => parse_arm_3565(ins, pc),
        0xdee => parse_arm_3566(ins, pc),
        0xdef => parse_arm_3567(ins, pc),
        0xdf0 => parse_arm_3568(ins, pc),
        0xdf1 => parse_arm_3569(ins, pc),
        0xdf2 => parse_arm_3570(ins, pc),
        0xdf3 => parse_arm_3571(ins, pc),
        0xdf4 => parse_arm_3572(ins, pc),
        0xdf5 => parse_arm_3573(ins, pc),
        0xdf6 => parse_arm_3574(ins, pc),
        0xdf7 => parse_arm_3575(ins, pc),
        0xdf8 => parse_arm_3576(ins, pc),
        0xdf9 => parse_arm_3577(ins, pc),
        0xdfa => parse_arm_3578(ins, pc),
        0xdfb => parse_arm_3579(ins, pc),
        0xdfc => parse_arm_3580(ins, pc),
        0xdfd => parse_arm_3581(ins, pc),
        0xdfe => parse_arm_3582(ins, pc),
        0xdff => parse_arm_3583(ins, pc),
        0xe00 => parse_arm_3584(ins, pc),
        0xe01 => parse_arm_3585(ins, pc),
        0xe02 => parse_arm_3586(ins, pc),
        0xe03 => parse_arm_3587(ins, pc),
        0xe04 => parse_arm_3588(ins, pc),
        0xe05 => parse_arm_3589(ins, pc),
        0xe06 => parse_arm_3590(ins, pc),
        0xe07 => parse_arm_3591(ins, pc),
        0xe08 => parse_arm_3592(ins, pc),
        0xe09 => parse_arm_3593(ins, pc),
        0xe0a => parse_arm_3594(ins, pc),
        0xe0b => parse_arm_3595(ins, pc),
        0xe0c => parse_arm_3596(ins, pc),
        0xe0d => parse_arm_3597(ins, pc),
        0xe0e => parse_arm_3598(ins, pc),
        0xe0f => parse_arm_3599(ins, pc),
        0xe10 => parse_arm_3600(ins, pc),
        0xe11 => parse_arm_3601(ins, pc),
        0xe12 => parse_arm_3602(ins, pc),
        0xe13 => parse_arm_3603(ins, pc),
        0xe14 => parse_arm_3604(ins, pc),
        0xe15 => parse_arm_3605(ins, pc),
        0xe16 => parse_arm_3606(ins, pc),
        0xe17 => parse_arm_3607(ins, pc),
        0xe18 => parse_arm_3608(ins, pc),
        0xe19 => parse_arm_3609(ins, pc),
        0xe1a => parse_arm_3610(ins, pc),
        0xe1b => parse_arm_3611(ins, pc),
        0xe1c => parse_arm_3612(ins, pc),
        0xe1d => parse_arm_3613(ins, pc),
        0xe1e => parse_arm_3614(ins, pc),
        0xe1f => parse_arm_3615(ins, pc),
        0xe20 => parse_arm_3616(ins, pc),
        0xe21 => parse_arm_3617(ins, pc),
        0xe22 => parse_arm_3618(ins, pc),
        0xe23 => parse_arm_3619(ins, pc),
        0xe24 => parse_arm_3620(ins, pc),
        0xe25 => parse_arm_3621(ins, pc),
        0xe26 => parse_arm_3622(ins, pc),
        0xe27 => parse_arm_3623(ins, pc),
        0xe28 => parse_arm_3624(ins, pc),
        0xe29 => parse_arm_3625(ins, pc),
        0xe2a => parse_arm_3626(ins, pc),
        0xe2b => parse_arm_3627(ins, pc),
        0xe2c => parse_arm_3628(ins, pc),
        0xe2d => parse_arm_3629(ins, pc),
        0xe2e => parse_arm_3630(ins, pc),
        0xe2f => parse_arm_3631(ins, pc),
        0xe30 => parse_arm_3632(ins, pc),
        0xe31 => parse_arm_3633(ins, pc),
        0xe32 => parse_arm_3634(ins, pc),
        0xe33 => parse_arm_3635(ins, pc),
        0xe34 => parse_arm_3636(ins, pc),
        0xe35 => parse_arm_3637(ins, pc),
        0xe36 => parse_arm_3638(ins, pc),
        0xe37 => parse_arm_3639(ins, pc),
        0xe38 => parse_arm_3640(ins, pc),
        0xe39 => parse_arm_3641(ins, pc),
        0xe3a => parse_arm_3642(ins, pc),
        0xe3b => parse_arm_3643(ins, pc),
        0xe3c => parse_arm_3644(ins, pc),
        0xe3d => parse_arm_3645(ins, pc),
        0xe3e => parse_arm_3646(ins, pc),
        0xe3f => parse_arm_3647(ins, pc),
        0xe40 => parse_arm_3648(ins, pc),
        0xe41 => parse_arm_3649(ins, pc),
        0xe42 => parse_arm_3650(ins, pc),
        0xe43 => parse_arm_3651(ins, pc),
        0xe44 => parse_arm_3652(ins, pc),
        0xe45 => parse_arm_3653(ins, pc),
        0xe46 => parse_arm_3654(ins, pc),
        0xe47 => parse_arm_3655(ins, pc),
        0xe48 => parse_arm_3656(ins, pc),
        0xe49 => parse_arm_3657(ins, pc),
        0xe4a => parse_arm_3658(ins, pc),
        0xe4b => parse_arm_3659(ins, pc),
        0xe4c => parse_arm_3660(ins, pc),
        0xe4d => parse_arm_3661(ins, pc),
        0xe4e => parse_arm_3662(ins, pc),
        0xe4f => parse_arm_3663(ins, pc),
        0xe50 => parse_arm_3664(ins, pc),
        0xe51 => parse_arm_3665(ins, pc),
        0xe52 => parse_arm_3666(ins, pc),
        0xe53 => parse_arm_3667(ins, pc),
        0xe54 => parse_arm_3668(ins, pc),
        0xe55 => parse_arm_3669(ins, pc),
        0xe56 => parse_arm_3670(ins, pc),
        0xe57 => parse_arm_3671(ins, pc),
        0xe58 => parse_arm_3672(ins, pc),
        0xe59 => parse_arm_3673(ins, pc),
        0xe5a => parse_arm_3674(ins, pc),
        0xe5b => parse_arm_3675(ins, pc),
        0xe5c => parse_arm_3676(ins, pc),
        0xe5d => parse_arm_3677(ins, pc),
        0xe5e => parse_arm_3678(ins, pc),
        0xe5f => parse_arm_3679(ins, pc),
        0xe60 => parse_arm_3680(ins, pc),
        0xe61 => parse_arm_3681(ins, pc),
        0xe62 => parse_arm_3682(ins, pc),
        0xe63 => parse_arm_3683(ins, pc),
        0xe64 => parse_arm_3684(ins, pc),
        0xe65 => parse_arm_3685(ins, pc),
        0xe66 => parse_arm_3686(ins, pc),
        0xe67 => parse_arm_3687(ins, pc),
        0xe68 => parse_arm_3688(ins, pc),
        0xe69 => parse_arm_3689(ins, pc),
        0xe6a => parse_arm_3690(ins, pc),
        0xe6b => parse_arm_3691(ins, pc),
        0xe6c => parse_arm_3692(ins, pc),
        0xe6d => parse_arm_3693(ins, pc),
        0xe6e => parse_arm_3694(ins, pc),
        0xe6f => parse_arm_3695(ins, pc),
        0xe70 => parse_arm_3696(ins, pc),
        0xe71 => parse_arm_3697(ins, pc),
        0xe72 => parse_arm_3698(ins, pc),
        0xe73 => parse_arm_3699(ins, pc),
        0xe74 => parse_arm_3700(ins, pc),
        0xe75 => parse_arm_3701(ins, pc),
        0xe76 => parse_arm_3702(ins, pc),
        0xe77 => parse_arm_3703(ins, pc),
        0xe78 => parse_arm_3704(ins, pc),
        0xe79 => parse_arm_3705(ins, pc),
        0xe7a => parse_arm_3706(ins, pc),
        0xe7b => parse_arm_3707(ins, pc),
        0xe7c => parse_arm_3708(ins, pc),
        0xe7d => parse_arm_3709(ins, pc),
        0xe7e => parse_arm_3710(ins, pc),
        0xe7f => parse_arm_3711(ins, pc),
        0xe80 => parse_arm_3712(ins, pc),
        0xe81 => parse_arm_3713(ins, pc),
        0xe82 => parse_arm_3714(ins, pc),
        0xe83 => parse_arm_3715(ins, pc),
        0xe84 => parse_arm_3716(ins, pc),
        0xe85 => parse_arm_3717(ins, pc),
        0xe86 => parse_arm_3718(ins, pc),
        0xe87 => parse_arm_3719(ins, pc),
        0xe88 => parse_arm_3720(ins, pc),
        0xe89 => parse_arm_3721(ins, pc),
        0xe8a => parse_arm_3722(ins, pc),
        0xe8b => parse_arm_3723(ins, pc),
        0xe8c => parse_arm_3724(ins, pc),
        0xe8d => parse_arm_3725(ins, pc),
        0xe8e => parse_arm_3726(ins, pc),
        0xe8f => parse_arm_3727(ins, pc),
        0xe90 => parse_arm_3728(ins, pc),
        0xe91 => parse_arm_3729(ins, pc),
        0xe92 => parse_arm_3730(ins, pc),
        0xe93 => parse_arm_3731(ins, pc),
        0xe94 => parse_arm_3732(ins, pc),
        0xe95 => parse_arm_3733(ins, pc),
        0xe96 => parse_arm_3734(ins, pc),
        0xe97 => parse_arm_3735(ins, pc),
        0xe98 => parse_arm_3736(ins, pc),
        0xe99 => parse_arm_3737(ins, pc),
        0xe9a => parse_arm_3738(ins, pc),
        0xe9b => parse_arm_3739(ins, pc),
        0xe9c => parse_arm_3740(ins, pc),
        0xe9d => parse_arm_3741(ins, pc),
        0xe9e => parse_arm_3742(ins, pc),
        0xe9f => parse_arm_3743(ins, pc),
        0xea0 => parse_arm_3744(ins, pc),
        0xea1 => parse_arm_3745(ins, pc),
        0xea2 => parse_arm_3746(ins, pc),
        0xea3 => parse_arm_3747(ins, pc),
        0xea4 => parse_arm_3748(ins, pc),
        0xea5 => parse_arm_3749(ins, pc),
        0xea6 => parse_arm_3750(ins, pc),
        0xea7 => parse_arm_3751(ins, pc),
        0xea8 => parse_arm_3752(ins, pc),
        0xea9 => parse_arm_3753(ins, pc),
        0xeaa => parse_arm_3754(ins, pc),
        0xeab => parse_arm_3755(ins, pc),
        0xeac => parse_arm_3756(ins, pc),
        0xead => parse_arm_3757(ins, pc),
        0xeae => parse_arm_3758(ins, pc),
        0xeaf => parse_arm_3759(ins, pc),
        0xeb0 => parse_arm_3760(ins, pc),
        0xeb1 => parse_arm_3761(ins, pc),
        0xeb2 => parse_arm_3762(ins, pc),
        0xeb3 => parse_arm_3763(ins, pc),
        0xeb4 => parse_arm_3764(ins, pc),
        0xeb5 => parse_arm_3765(ins, pc),
        0xeb6 => parse_arm_3766(ins, pc),
        0xeb7 => parse_arm_3767(ins, pc),
        0xeb8 => parse_arm_3768(ins, pc),
        0xeb9 => parse_arm_3769(ins, pc),
        0xeba => parse_arm_3770(ins, pc),
        0xebb => parse_arm_3771(ins, pc),
        0xebc => parse_arm_3772(ins, pc),
        0xebd => parse_arm_3773(ins, pc),
        0xebe => parse_arm_3774(ins, pc),
        0xebf => parse_arm_3775(ins, pc),
        0xec0 => parse_arm_3776(ins, pc),
        0xec1 => parse_arm_3777(ins, pc),
        0xec2 => parse_arm_3778(ins, pc),
        0xec3 => parse_arm_3779(ins, pc),
        0xec4 => parse_arm_3780(ins, pc),
        0xec5 => parse_arm_3781(ins, pc),
        0xec6 => parse_arm_3782(ins, pc),
        0xec7 => parse_arm_3783(ins, pc),
        0xec8 => parse_arm_3784(ins, pc),
        0xec9 => parse_arm_3785(ins, pc),
        0xeca => parse_arm_3786(ins, pc),
        0xecb => parse_arm_3787(ins, pc),
        0xecc => parse_arm_3788(ins, pc),
        0xecd => parse_arm_3789(ins, pc),
        0xece => parse_arm_3790(ins, pc),
        0xecf => parse_arm_3791(ins, pc),
        0xed0 => parse_arm_3792(ins, pc),
        0xed1 => parse_arm_3793(ins, pc),
        0xed2 => parse_arm_3794(ins, pc),
        0xed3 => parse_arm_3795(ins, pc),
        0xed4 => parse_arm_3796(ins, pc),
        0xed5 => parse_arm_3797(ins, pc),
        0xed6 => parse_arm_3798(ins, pc),
        0xed7 => parse_arm_3799(ins, pc),
        0xed8 => parse_arm_3800(ins, pc),
        0xed9 => parse_arm_3801(ins, pc),
        0xeda => parse_arm_3802(ins, pc),
        0xedb => parse_arm_3803(ins, pc),
        0xedc => parse_arm_3804(ins, pc),
        0xedd => parse_arm_3805(ins, pc),
        0xede => parse_arm_3806(ins, pc),
        0xedf => parse_arm_3807(ins, pc),
        0xee0 => parse_arm_3808(ins, pc),
        0xee1 => parse_arm_3809(ins, pc),
        0xee2 => parse_arm_3810(ins, pc),
        0xee3 => parse_arm_3811(ins, pc),
        0xee4 => parse_arm_3812(ins, pc),
        0xee5 => parse_arm_3813(ins, pc),
        0xee6 => parse_arm_3814(ins, pc),
        0xee7 => parse_arm_3815(ins, pc),
        0xee8 => parse_arm_3816(ins, pc),
        0xee9 => parse_arm_3817(ins, pc),
        0xeea => parse_arm_3818(ins, pc),
        0xeeb => parse_arm_3819(ins, pc),
        0xeec => parse_arm_3820(ins, pc),
        0xeed => parse_arm_3821(ins, pc),
        0xeee => parse_arm_3822(ins, pc),
        0xeef => parse_arm_3823(ins, pc),
        0xef0 => parse_arm_3824(ins, pc),
        0xef1 => parse_arm_3825(ins, pc),
        0xef2 => parse_arm_3826(ins, pc),
        0xef3 => parse_arm_3827(ins, pc),
        0xef4 => parse_arm_3828(ins, pc),
        0xef5 => parse_arm_3829(ins, pc),
        0xef6 => parse_arm_3830(ins, pc),
        0xef7 => parse_arm_3831(ins, pc),
        0xef8 => parse_arm_3832(ins, pc),
        0xef9 => parse_arm_3833(ins, pc),
        0xefa => parse_arm_3834(ins, pc),
        0xefb => parse_arm_3835(ins, pc),
        0xefc => parse_arm_3836(ins, pc),
        0xefd => parse_arm_3837(ins, pc),
        0xefe => parse_arm_3838(ins, pc),
        0xeff => parse_arm_3839(ins, pc),
        0xf00 => parse_arm_3840(ins, pc),
        0xf01 => parse_arm_3841(ins, pc),
        0xf02 => parse_arm_3842(ins, pc),
        0xf03 => parse_arm_3843(ins, pc),
        0xf04 => parse_arm_3844(ins, pc),
        0xf05 => parse_arm_3845(ins, pc),
        0xf06 => parse_arm_3846(ins, pc),
        0xf07 => parse_arm_3847(ins, pc),
        0xf08 => parse_arm_3848(ins, pc),
        0xf09 => parse_arm_3849(ins, pc),
        0xf0a => parse_arm_3850(ins, pc),
        0xf0b => parse_arm_3851(ins, pc),
        0xf0c => parse_arm_3852(ins, pc),
        0xf0d => parse_arm_3853(ins, pc),
        0xf0e => parse_arm_3854(ins, pc),
        0xf0f => parse_arm_3855(ins, pc),
        0xf10 => parse_arm_3856(ins, pc),
        0xf11 => parse_arm_3857(ins, pc),
        0xf12 => parse_arm_3858(ins, pc),
        0xf13 => parse_arm_3859(ins, pc),
        0xf14 => parse_arm_3860(ins, pc),
        0xf15 => parse_arm_3861(ins, pc),
        0xf16 => parse_arm_3862(ins, pc),
        0xf17 => parse_arm_3863(ins, pc),
        0xf18 => parse_arm_3864(ins, pc),
        0xf19 => parse_arm_3865(ins, pc),
        0xf1a => parse_arm_3866(ins, pc),
        0xf1b => parse_arm_3867(ins, pc),
        0xf1c => parse_arm_3868(ins, pc),
        0xf1d => parse_arm_3869(ins, pc),
        0xf1e => parse_arm_3870(ins, pc),
        0xf1f => parse_arm_3871(ins, pc),
        0xf20 => parse_arm_3872(ins, pc),
        0xf21 => parse_arm_3873(ins, pc),
        0xf22 => parse_arm_3874(ins, pc),
        0xf23 => parse_arm_3875(ins, pc),
        0xf24 => parse_arm_3876(ins, pc),
        0xf25 => parse_arm_3877(ins, pc),
        0xf26 => parse_arm_3878(ins, pc),
        0xf27 => parse_arm_3879(ins, pc),
        0xf28 => parse_arm_3880(ins, pc),
        0xf29 => parse_arm_3881(ins, pc),
        0xf2a => parse_arm_3882(ins, pc),
        0xf2b => parse_arm_3883(ins, pc),
        0xf2c => parse_arm_3884(ins, pc),
        0xf2d => parse_arm_3885(ins, pc),
        0xf2e => parse_arm_3886(ins, pc),
        0xf2f => parse_arm_3887(ins, pc),
        0xf30 => parse_arm_3888(ins, pc),
        0xf31 => parse_arm_3889(ins, pc),
        0xf32 => parse_arm_3890(ins, pc),
        0xf33 => parse_arm_3891(ins, pc),
        0xf34 => parse_arm_3892(ins, pc),
        0xf35 => parse_arm_3893(ins, pc),
        0xf36 => parse_arm_3894(ins, pc),
        0xf37 => parse_arm_3895(ins, pc),
        0xf38 => parse_arm_3896(ins, pc),
        0xf39 => parse_arm_3897(ins, pc),
        0xf3a => parse_arm_3898(ins, pc),
        0xf3b => parse_arm_3899(ins, pc),
        0xf3c => parse_arm_3900(ins, pc),
        0xf3d => parse_arm_3901(ins, pc),
        0xf3e => parse_arm_3902(ins, pc),
        0xf3f => parse_arm_3903(ins, pc),
        0xf40 => parse_arm_3904(ins, pc),
        0xf41 => parse_arm_3905(ins, pc),
        0xf42 => parse_arm_3906(ins, pc),
        0xf43 => parse_arm_3907(ins, pc),
        0xf44 => parse_arm_3908(ins, pc),
        0xf45 => parse_arm_3909(ins, pc),
        0xf46 => parse_arm_3910(ins, pc),
        0xf47 => parse_arm_3911(ins, pc),
        0xf48 => parse_arm_3912(ins, pc),
        0xf49 => parse_arm_3913(ins, pc),
        0xf4a => parse_arm_3914(ins, pc),
        0xf4b => parse_arm_3915(ins, pc),
        0xf4c => parse_arm_3916(ins, pc),
        0xf4d => parse_arm_3917(ins, pc),
        0xf4e => parse_arm_3918(ins, pc),
        0xf4f => parse_arm_3919(ins, pc),
        0xf50 => parse_arm_3920(ins, pc),
        0xf51 => parse_arm_3921(ins, pc),
        0xf52 => parse_arm_3922(ins, pc),
        0xf53 => parse_arm_3923(ins, pc),
        0xf54 => parse_arm_3924(ins, pc),
        0xf55 => parse_arm_3925(ins, pc),
        0xf56 => parse_arm_3926(ins, pc),
        0xf57 => parse_arm_3927(ins, pc),
        0xf58 => parse_arm_3928(ins, pc),
        0xf59 => parse_arm_3929(ins, pc),
        0xf5a => parse_arm_3930(ins, pc),
        0xf5b => parse_arm_3931(ins, pc),
        0xf5c => parse_arm_3932(ins, pc),
        0xf5d => parse_arm_3933(ins, pc),
        0xf5e => parse_arm_3934(ins, pc),
        0xf5f => parse_arm_3935(ins, pc),
        0xf60 => parse_arm_3936(ins, pc),
        0xf61 => parse_arm_3937(ins, pc),
        0xf62 => parse_arm_3938(ins, pc),
        0xf63 => parse_arm_3939(ins, pc),
        0xf64 => parse_arm_3940(ins, pc),
        0xf65 => parse_arm_3941(ins, pc),
        0xf66 => parse_arm_3942(ins, pc),
        0xf67 => parse_arm_3943(ins, pc),
        0xf68 => parse_arm_3944(ins, pc),
        0xf69 => parse_arm_3945(ins, pc),
        0xf6a => parse_arm_3946(ins, pc),
        0xf6b => parse_arm_3947(ins, pc),
        0xf6c => parse_arm_3948(ins, pc),
        0xf6d => parse_arm_3949(ins, pc),
        0xf6e => parse_arm_3950(ins, pc),
        0xf6f => parse_arm_3951(ins, pc),
        0xf70 => parse_arm_3952(ins, pc),
        0xf71 => parse_arm_3953(ins, pc),
        0xf72 => parse_arm_3954(ins, pc),
        0xf73 => parse_arm_3955(ins, pc),
        0xf74 => parse_arm_3956(ins, pc),
        0xf75 => parse_arm_3957(ins, pc),
        0xf76 => parse_arm_3958(ins, pc),
        0xf77 => parse_arm_3959(ins, pc),
        0xf78 => parse_arm_3960(ins, pc),
        0xf79 => parse_arm_3961(ins, pc),
        0xf7a => parse_arm_3962(ins, pc),
        0xf7b => parse_arm_3963(ins, pc),
        0xf7c => parse_arm_3964(ins, pc),
        0xf7d => parse_arm_3965(ins, pc),
        0xf7e => parse_arm_3966(ins, pc),
        0xf7f => parse_arm_3967(ins, pc),
        0xf80 => parse_arm_3968(ins, pc),
        0xf81 => parse_arm_3969(ins, pc),
        0xf82 => parse_arm_3970(ins, pc),
        0xf83 => parse_arm_3971(ins, pc),
        0xf84 => parse_arm_3972(ins, pc),
        0xf85 => parse_arm_3973(ins, pc),
        0xf86 => parse_arm_3974(ins, pc),
        0xf87 => parse_arm_3975(ins, pc),
        0xf88 => parse_arm_3976(ins, pc),
        0xf89 => parse_arm_3977(ins, pc),
        0xf8a => parse_arm_3978(ins, pc),
        0xf8b => parse_arm_3979(ins, pc),
        0xf8c => parse_arm_3980(ins, pc),
        0xf8d => parse_arm_3981(ins, pc),
        0xf8e => parse_arm_3982(ins, pc),
        0xf8f => parse_arm_3983(ins, pc),
        0xf90 => parse_arm_3984(ins, pc),
        0xf91 => parse_arm_3985(ins, pc),
        0xf92 => parse_arm_3986(ins, pc),
        0xf93 => parse_arm_3987(ins, pc),
        0xf94 => parse_arm_3988(ins, pc),
        0xf95 => parse_arm_3989(ins, pc),
        0xf96 => parse_arm_3990(ins, pc),
        0xf97 => parse_arm_3991(ins, pc),
        0xf98 => parse_arm_3992(ins, pc),
        0xf99 => parse_arm_3993(ins, pc),
        0xf9a => parse_arm_3994(ins, pc),
        0xf9b => parse_arm_3995(ins, pc),
        0xf9c => parse_arm_3996(ins, pc),
        0xf9d => parse_arm_3997(ins, pc),
        0xf9e => parse_arm_3998(ins, pc),
        0xf9f => parse_arm_3999(ins, pc),
        0xfa0 => parse_arm_4000(ins, pc),
        0xfa1 => parse_arm_4001(ins, pc),
        0xfa2 => parse_arm_4002(ins, pc),
        0xfa3 => parse_arm_4003(ins, pc),
        0xfa4 => parse_arm_4004(ins, pc),
        0xfa5 => parse_arm_4005(ins, pc),
        0xfa6 => parse_arm_4006(ins, pc),
        0xfa7 => parse_arm_4007(ins, pc),
        0xfa8 => parse_arm_4008(ins, pc),
        0xfa9 => parse_arm_4009(ins, pc),
        0xfaa => parse_arm_4010(ins, pc),
        0xfab => parse_arm_4011(ins, pc),
        0xfac => parse_arm_4012(ins, pc),
        0xfad => parse_arm_4013(ins, pc),
        0xfae => parse_arm_4014(ins, pc),
        0xfaf => parse_arm_4015(ins, pc),
        0xfb0 => parse_arm_4016(ins, pc),
        0xfb1 => parse_arm_4017(ins, pc),
        0xfb2 => parse_arm_4018(ins, pc),
        0xfb3 => parse_arm_4019(ins, pc),
        0xfb4 => parse_arm_4020(ins, pc),
        0xfb5 => parse_arm_4021(ins, pc),
        0xfb6 => parse_arm_4022(ins, pc),
        0xfb7 => parse_arm_4023(ins, pc),
        0xfb8 => parse_arm_4024(ins, pc),
        0xfb9 => parse_arm_4025(ins, pc),
        0xfba => parse_arm_4026(ins, pc),
        0xfbb => parse_arm_4027(ins, pc),
        0xfbc => parse_arm_4028(ins, pc),
        0xfbd => parse_arm_4029(ins, pc),
        0xfbe => parse_arm_4030(ins, pc),
        0xfbf => parse_arm_4031(ins, pc),
        0xfc0 => parse_arm_4032(ins, pc),
        0xfc1 => parse_arm_4033(ins, pc),
        0xfc2 => parse_arm_4034(ins, pc),
        0xfc3 => parse_arm_4035(ins, pc),
        0xfc4 => parse_arm_4036(ins, pc),
        0xfc5 => parse_arm_4037(ins, pc),
        0xfc6 => parse_arm_4038(ins, pc),
        0xfc7 => parse_arm_4039(ins, pc),
        0xfc8 => parse_arm_4040(ins, pc),
        0xfc9 => parse_arm_4041(ins, pc),
        0xfca => parse_arm_4042(ins, pc),
        0xfcb => parse_arm_4043(ins, pc),
        0xfcc => parse_arm_4044(ins, pc),
        0xfcd => parse_arm_4045(ins, pc),
        0xfce => parse_arm_4046(ins, pc),
        0xfcf => parse_arm_4047(ins, pc),
        0xfd0 => parse_arm_4048(ins, pc),
        0xfd1 => parse_arm_4049(ins, pc),
        0xfd2 => parse_arm_4050(ins, pc),
        0xfd3 => parse_arm_4051(ins, pc),
        0xfd4 => parse_arm_4052(ins, pc),
        0xfd5 => parse_arm_4053(ins, pc),
        0xfd6 => parse_arm_4054(ins, pc),
        0xfd7 => parse_arm_4055(ins, pc),
        0xfd8 => parse_arm_4056(ins, pc),
        0xfd9 => parse_arm_4057(ins, pc),
        0xfda => parse_arm_4058(ins, pc),
        0xfdb => parse_arm_4059(ins, pc),
        0xfdc => parse_arm_4060(ins, pc),
        0xfdd => parse_arm_4061(ins, pc),
        0xfde => parse_arm_4062(ins, pc),
        0xfdf => parse_arm_4063(ins, pc),
        0xfe0 => parse_arm_4064(ins, pc),
        0xfe1 => parse_arm_4065(ins, pc),
        0xfe2 => parse_arm_4066(ins, pc),
        0xfe3 => parse_arm_4067(ins, pc),
        0xfe4 => parse_arm_4068(ins, pc),
        0xfe5 => parse_arm_4069(ins, pc),
        0xfe6 => parse_arm_4070(ins, pc),
        0xfe7 => parse_arm_4071(ins, pc),
        0xfe8 => parse_arm_4072(ins, pc),
        0xfe9 => parse_arm_4073(ins, pc),
        0xfea => parse_arm_4074(ins, pc),
        0xfeb => parse_arm_4075(ins, pc),
        0xfec => parse_arm_4076(ins, pc),
        0xfed => parse_arm_4077(ins, pc),
        0xfee => parse_arm_4078(ins, pc),
        0xfef => parse_arm_4079(ins, pc),
        0xff0 => parse_arm_4080(ins, pc),
        0xff1 => parse_arm_4081(ins, pc),
        0xff2 => parse_arm_4082(ins, pc),
        0xff3 => parse_arm_4083(ins, pc),
        0xff4 => parse_arm_4084(ins, pc),
        0xff5 => parse_arm_4085(ins, pc),
        0xff6 => parse_arm_4086(ins, pc),
        0xff7 => parse_arm_4087(ins, pc),
        0xff8 => parse_arm_4088(ins, pc),
        0xff9 => parse_arm_4089(ins, pc),
        0xffa => parse_arm_4090(ins, pc),
        0xffb => parse_arm_4091(ins, pc),
        0xffc => parse_arm_4092(ins, pc),
        0xffd => parse_arm_4093(ins, pc),
        0xffe => parse_arm_4094(ins, pc),
        0xfff => parse_arm_4095(ins, pc),
        0x1000 => parse_arm_4096(ins, pc),
        0x1001 => parse_arm_4097(ins, pc),
        0x1002 => parse_arm_4098(ins, pc),
        0x1003 => parse_arm_4099(ins, pc),
        0x1004 => parse_arm_4100(ins, pc),
        0x1005 => parse_arm_4101(ins, pc),
        0x1006 => parse_arm_4102(ins, pc),
        0x1007 => parse_arm_4103(ins, pc),
        0x1008 => parse_arm_4104(ins, pc),
        0x1009 => parse_arm_4105(ins, pc),
        0x100a => parse_arm_4106(ins, pc),
        0x100b => parse_arm_4107(ins, pc),
        0x100c => parse_arm_4108(ins, pc),
        0x100d => parse_arm_4109(ins, pc),
        0x100e => parse_arm_4110(ins, pc),
        0x100f => parse_arm_4111(ins, pc),
        0x1010 => parse_arm_4112(ins, pc),
        0x1011 => parse_arm_4113(ins, pc),
        0x1012 => parse_arm_4114(ins, pc),
        0x1013 => parse_arm_4115(ins, pc),
        0x1014 => parse_arm_4116(ins, pc),
        0x1015 => parse_arm_4117(ins, pc),
        0x1016 => parse_arm_4118(ins, pc),
        0x1017 => parse_arm_4119(ins, pc),
        0x1018 => parse_arm_4120(ins, pc),
        0x1019 => parse_arm_4121(ins, pc),
        0x101a => parse_arm_4122(ins, pc),
        0x101b => parse_arm_4123(ins, pc),
        0x101c => parse_arm_4124(ins, pc),
        0x101d => parse_arm_4125(ins, pc),
        0x101e => parse_arm_4126(ins, pc),
        0x101f => parse_arm_4127(ins, pc),
        0x1020 => parse_arm_4128(ins, pc),
        0x1021 => parse_arm_4129(ins, pc),
        0x1022 => parse_arm_4130(ins, pc),
        0x1023 => parse_arm_4131(ins, pc),
        0x1024 => parse_arm_4132(ins, pc),
        0x1025 => parse_arm_4133(ins, pc),
        0x1026 => parse_arm_4134(ins, pc),
        0x1027 => parse_arm_4135(ins, pc),
        0x1028 => parse_arm_4136(ins, pc),
        0x1029 => parse_arm_4137(ins, pc),
        0x102a => parse_arm_4138(ins, pc),
        0x102b => parse_arm_4139(ins, pc),
        0x102c => parse_arm_4140(ins, pc),
        0x102d => parse_arm_4141(ins, pc),
        0x102e => parse_arm_4142(ins, pc),
        0x102f => parse_arm_4143(ins, pc),
        0x1030 => parse_arm_4144(ins, pc),
        0x1031 => parse_arm_4145(ins, pc),
        0x1032 => parse_arm_4146(ins, pc),
        0x1033 => parse_arm_4147(ins, pc),
        0x1034 => parse_arm_4148(ins, pc),
        0x1035 => parse_arm_4149(ins, pc),
        0x1036 => parse_arm_4150(ins, pc),
        0x1037 => parse_arm_4151(ins, pc),
        0x1038 => parse_arm_4152(ins, pc),
        0x1039 => parse_arm_4153(ins, pc),
        0x103a => parse_arm_4154(ins, pc),
        0x103b => parse_arm_4155(ins, pc),
        0x103c => parse_arm_4156(ins, pc),
        0x103d => parse_arm_4157(ins, pc),
        0x103e => parse_arm_4158(ins, pc),
        0x103f => parse_arm_4159(ins, pc),
        0x1040 => parse_arm_4160(ins, pc),
        0x1041 => parse_arm_4161(ins, pc),
        0x1042 => parse_arm_4162(ins, pc),
        0x1043 => parse_arm_4163(ins, pc),
        0x1044 => parse_arm_4164(ins, pc),
        0x1045 => parse_arm_4165(ins, pc),
        0x1046 => parse_arm_4166(ins, pc),
        0x1047 => parse_arm_4167(ins, pc),
        0x1048 => parse_arm_4168(ins, pc),
        0x1049 => parse_arm_4169(ins, pc),
        0x104a => parse_arm_4170(ins, pc),
        0x104b => parse_arm_4171(ins, pc),
        0x104c => parse_arm_4172(ins, pc),
        0x104d => parse_arm_4173(ins, pc),
        0x104e => parse_arm_4174(ins, pc),
        0x104f => parse_arm_4175(ins, pc),
        0x1050 => parse_arm_4176(ins, pc),
        0x1051 => parse_arm_4177(ins, pc),
        0x1052 => parse_arm_4178(ins, pc),
        0x1053 => parse_arm_4179(ins, pc),
        0x1054 => parse_arm_4180(ins, pc),
        0x1055 => parse_arm_4181(ins, pc),
        0x1056 => parse_arm_4182(ins, pc),
        0x1057 => parse_arm_4183(ins, pc),
        0x1058 => parse_arm_4184(ins, pc),
        0x1059 => parse_arm_4185(ins, pc),
        0x105a => parse_arm_4186(ins, pc),
        0x105b => parse_arm_4187(ins, pc),
        0x105c => parse_arm_4188(ins, pc),
        0x105d => parse_arm_4189(ins, pc),
        0x105e => parse_arm_4190(ins, pc),
        0x105f => parse_arm_4191(ins, pc),
        0x1060 => parse_arm_4192(ins, pc),
        0x1061 => parse_arm_4193(ins, pc),
        0x1062 => parse_arm_4194(ins, pc),
        0x1063 => parse_arm_4195(ins, pc),
        0x1064 => parse_arm_4196(ins, pc),
        0x1065 => parse_arm_4197(ins, pc),
        0x1066 => parse_arm_4198(ins, pc),
        0x1067 => parse_arm_4199(ins, pc),
        0x1068 => parse_arm_4200(ins, pc),
        0x1069 => parse_arm_4201(ins, pc),
        0x106a => parse_arm_4202(ins, pc),
        0x106b => parse_arm_4203(ins, pc),
        0x106c => parse_arm_4204(ins, pc),
        0x106d => parse_arm_4205(ins, pc),
        0x106e => parse_arm_4206(ins, pc),
        0x106f => parse_arm_4207(ins, pc),
        0x1070 => parse_arm_4208(ins, pc),
        0x1071 => parse_arm_4209(ins, pc),
        0x1072 => parse_arm_4210(ins, pc),
        0x1073 => parse_arm_4211(ins, pc),
        0x1074 => parse_arm_4212(ins, pc),
        0x1075 => parse_arm_4213(ins, pc),
        0x1076 => parse_arm_4214(ins, pc),
        0x1077 => parse_arm_4215(ins, pc),
        0x1078 => parse_arm_4216(ins, pc),
        0x1079 => parse_arm_4217(ins, pc),
        0x107a => parse_arm_4218(ins, pc),
        0x107b => parse_arm_4219(ins, pc),
        0x107c => parse_arm_4220(ins, pc),
        0x107d => parse_arm_4221(ins, pc),
        0x107e => parse_arm_4222(ins, pc),
        0x107f => parse_arm_4223(ins, pc),
        0x1080 => parse_arm_4224(ins, pc),
        0x1081 => parse_arm_4225(ins, pc),
        0x1082 => parse_arm_4226(ins, pc),
        0x1083 => parse_arm_4227(ins, pc),
        0x1084 => parse_arm_4228(ins, pc),
        0x1085 => parse_arm_4229(ins, pc),
        0x1086 => parse_arm_4230(ins, pc),
        0x1087 => parse_arm_4231(ins, pc),
        0x1088 => parse_arm_4232(ins, pc),
        0x1089 => parse_arm_4233(ins, pc),
        0x108a => parse_arm_4234(ins, pc),
        0x108b => parse_arm_4235(ins, pc),
        0x108c => parse_arm_4236(ins, pc),
        0x108d => parse_arm_4237(ins, pc),
        0x108e => parse_arm_4238(ins, pc),
        0x108f => parse_arm_4239(ins, pc),
        0x1090 => parse_arm_4240(ins, pc),
        0x1091 => parse_arm_4241(ins, pc),
        0x1092 => parse_arm_4242(ins, pc),
        0x1093 => parse_arm_4243(ins, pc),
        0x1094 => parse_arm_4244(ins, pc),
        0x1095 => parse_arm_4245(ins, pc),
        0x1096 => parse_arm_4246(ins, pc),
        0x1097 => parse_arm_4247(ins, pc),
        0x1098 => parse_arm_4248(ins, pc),
        0x1099 => parse_arm_4249(ins, pc),
        0x109a => parse_arm_4250(ins, pc),
        0x109b => parse_arm_4251(ins, pc),
        0x109c => parse_arm_4252(ins, pc),
        0x109d => parse_arm_4253(ins, pc),
        0x109e => parse_arm_4254(ins, pc),
        0x109f => parse_arm_4255(ins, pc),
        0x10a0 => parse_arm_4256(ins, pc),
        0x10a1 => parse_arm_4257(ins, pc),
        0x10a2 => parse_arm_4258(ins, pc),
        0x10a3 => parse_arm_4259(ins, pc),
        0x10a4 => parse_arm_4260(ins, pc),
        0x10a5 => parse_arm_4261(ins, pc),
        0x10a6 => parse_arm_4262(ins, pc),
        0x10a7 => parse_arm_4263(ins, pc),
        0x10a8 => parse_arm_4264(ins, pc),
        0x10a9 => parse_arm_4265(ins, pc),
        0x10aa => parse_arm_4266(ins, pc),
        0x10ab => parse_arm_4267(ins, pc),
        0x10ac => parse_arm_4268(ins, pc),
        0x10ad => parse_arm_4269(ins, pc),
        0x10ae => parse_arm_4270(ins, pc),
        0x10af => parse_arm_4271(ins, pc),
        0x10b0 => parse_arm_4272(ins, pc),
        0x10b1 => parse_arm_4273(ins, pc),
        0x10b2 => parse_arm_4274(ins, pc),
        0x10b3 => parse_arm_4275(ins, pc),
        0x10b4 => parse_arm_4276(ins, pc),
        0x10b5 => parse_arm_4277(ins, pc),
        0x10b6 => parse_arm_4278(ins, pc),
        0x10b7 => parse_arm_4279(ins, pc),
        0x10b8 => parse_arm_4280(ins, pc),
        0x10b9 => parse_arm_4281(ins, pc),
        0x10ba => parse_arm_4282(ins, pc),
        0x10bb => parse_arm_4283(ins, pc),
        0x10bc => parse_arm_4284(ins, pc),
        0x10bd => parse_arm_4285(ins, pc),
        0x10be => parse_arm_4286(ins, pc),
        0x10bf => parse_arm_4287(ins, pc),
        0x10c0 => parse_arm_4288(ins, pc),
        0x10c1 => parse_arm_4289(ins, pc),
        0x10c2 => parse_arm_4290(ins, pc),
        0x10c3 => parse_arm_4291(ins, pc),
        0x10c4 => parse_arm_4292(ins, pc),
        0x10c5 => parse_arm_4293(ins, pc),
        0x10c6 => parse_arm_4294(ins, pc),
        0x10c7 => parse_arm_4295(ins, pc),
        0x10c8 => parse_arm_4296(ins, pc),
        0x10c9 => parse_arm_4297(ins, pc),
        0x10ca => parse_arm_4298(ins, pc),
        0x10cb => parse_arm_4299(ins, pc),
        0x10cc => parse_arm_4300(ins, pc),
        0x10cd => parse_arm_4301(ins, pc),
        0x10ce => parse_arm_4302(ins, pc),
        0x10cf => parse_arm_4303(ins, pc),
        0x10d0 => parse_arm_4304(ins, pc),
        0x10d1 => parse_arm_4305(ins, pc),
        0x10d2 => parse_arm_4306(ins, pc),
        0x10d3 => parse_arm_4307(ins, pc),
        0x10d4 => parse_arm_4308(ins, pc),
        0x10d5 => parse_arm_4309(ins, pc),
        0x10d6 => parse_arm_4310(ins, pc),
        0x10d7 => parse_arm_4311(ins, pc),
        0x10d8 => parse_arm_4312(ins, pc),
        0x10d9 => parse_arm_4313(ins, pc),
        0x10da => parse_arm_4314(ins, pc),
        0x10db => parse_arm_4315(ins, pc),
        0x10dc => parse_arm_4316(ins, pc),
        0x10dd => parse_arm_4317(ins, pc),
        0x10de => parse_arm_4318(ins, pc),
        0x10df => parse_arm_4319(ins, pc),
        0x10e0 => parse_arm_4320(ins, pc),
        0x10e1 => parse_arm_4321(ins, pc),
        0x10e2 => parse_arm_4322(ins, pc),
        0x10e3 => parse_arm_4323(ins, pc),
        0x10e4 => parse_arm_4324(ins, pc),
        0x10e5 => parse_arm_4325(ins, pc),
        0x10e6 => parse_arm_4326(ins, pc),
        0x10e7 => parse_arm_4327(ins, pc),
        0x10e8 => parse_arm_4328(ins, pc),
        0x10e9 => parse_arm_4329(ins, pc),
        0x10ea => parse_arm_4330(ins, pc),
        0x10eb => parse_arm_4331(ins, pc),
        0x10ec => parse_arm_4332(ins, pc),
        0x10ed => parse_arm_4333(ins, pc),
        0x10ee => parse_arm_4334(ins, pc),
        0x10ef => parse_arm_4335(ins, pc),
        0x10f0 => parse_arm_4336(ins, pc),
        0x10f1 => parse_arm_4337(ins, pc),
        0x10f2 => parse_arm_4338(ins, pc),
        0x10f3 => parse_arm_4339(ins, pc),
        0x10f4 => parse_arm_4340(ins, pc),
        0x10f5 => parse_arm_4341(ins, pc),
        0x10f6 => parse_arm_4342(ins, pc),
        0x10f7 => parse_arm_4343(ins, pc),
        0x10f8 => parse_arm_4344(ins, pc),
        0x10f9 => parse_arm_4345(ins, pc),
        0x10fa => parse_arm_4346(ins, pc),
        0x10fb => parse_arm_4347(ins, pc),
        0x10fc => parse_arm_4348(ins, pc),
        0x10fd => parse_arm_4349(ins, pc),
        0x10fe => parse_arm_4350(ins, pc),
        0x10ff => parse_arm_4351(ins, pc),
        0x1100 => parse_arm_4352(ins, pc),
        0x1101 => parse_arm_4353(ins, pc),
        0x1102 => parse_arm_4354(ins, pc),
        0x1103 => parse_arm_4355(ins, pc),
        0x1104 => parse_arm_4356(ins, pc),
        0x1105 => parse_arm_4357(ins, pc),
        0x1106 => parse_arm_4358(ins, pc),
        0x1107 => parse_arm_4359(ins, pc),
        0x1108 => parse_arm_4360(ins, pc),
        0x1109 => parse_arm_4361(ins, pc),
        0x110a => parse_arm_4362(ins, pc),
        0x110b => parse_arm_4363(ins, pc),
        0x110c => parse_arm_4364(ins, pc),
        0x110d => parse_arm_4365(ins, pc),
        0x110e => parse_arm_4366(ins, pc),
        0x110f => parse_arm_4367(ins, pc),
        0x1110 => parse_arm_4368(ins, pc),
        0x1111 => parse_arm_4369(ins, pc),
        0x1112 => parse_arm_4370(ins, pc),
        0x1113 => parse_arm_4371(ins, pc),
        0x1114 => parse_arm_4372(ins, pc),
        0x1115 => parse_arm_4373(ins, pc),
        0x1116 => parse_arm_4374(ins, pc),
        0x1117 => parse_arm_4375(ins, pc),
        0x1118 => parse_arm_4376(ins, pc),
        0x1119 => parse_arm_4377(ins, pc),
        0x111a => parse_arm_4378(ins, pc),
        0x111b => parse_arm_4379(ins, pc),
        0x111c => parse_arm_4380(ins, pc),
        0x111d => parse_arm_4381(ins, pc),
        0x111e => parse_arm_4382(ins, pc),
        0x111f => parse_arm_4383(ins, pc),
        0x1120 => parse_arm_4384(ins, pc),
        0x1121 => parse_arm_4385(ins, pc),
        0x1122 => parse_arm_4386(ins, pc),
        0x1123 => parse_arm_4387(ins, pc),
        0x1124 => parse_arm_4388(ins, pc),
        0x1125 => parse_arm_4389(ins, pc),
        0x1126 => parse_arm_4390(ins, pc),
        0x1127 => parse_arm_4391(ins, pc),
        0x1128 => parse_arm_4392(ins, pc),
        0x1129 => parse_arm_4393(ins, pc),
        0x112a => parse_arm_4394(ins, pc),
        0x112b => parse_arm_4395(ins, pc),
        0x112c => parse_arm_4396(ins, pc),
        0x112d => parse_arm_4397(ins, pc),
        0x112e => parse_arm_4398(ins, pc),
        0x112f => parse_arm_4399(ins, pc),
        0x1130 => parse_arm_4400(ins, pc),
        0x1131 => parse_arm_4401(ins, pc),
        0x1132 => parse_arm_4402(ins, pc),
        0x1133 => parse_arm_4403(ins, pc),
        0x1134 => parse_arm_4404(ins, pc),
        0x1135 => parse_arm_4405(ins, pc),
        0x1136 => parse_arm_4406(ins, pc),
        0x1137 => parse_arm_4407(ins, pc),
        0x1138 => parse_arm_4408(ins, pc),
        0x1139 => parse_arm_4409(ins, pc),
        0x113a => parse_arm_4410(ins, pc),
        0x113b => parse_arm_4411(ins, pc),
        0x113c => parse_arm_4412(ins, pc),
        0x113d => parse_arm_4413(ins, pc),
        0x113e => parse_arm_4414(ins, pc),
        0x113f => parse_arm_4415(ins, pc),
        0x1140 => parse_arm_4416(ins, pc),
        0x1141 => parse_arm_4417(ins, pc),
        0x1142 => parse_arm_4418(ins, pc),
        0x1143 => parse_arm_4419(ins, pc),
        0x1144 => parse_arm_4420(ins, pc),
        0x1145 => parse_arm_4421(ins, pc),
        0x1146 => parse_arm_4422(ins, pc),
        0x1147 => parse_arm_4423(ins, pc),
        0x1148 => parse_arm_4424(ins, pc),
        0x1149 => parse_arm_4425(ins, pc),
        0x114a => parse_arm_4426(ins, pc),
        0x114b => parse_arm_4427(ins, pc),
        0x114c => parse_arm_4428(ins, pc),
        0x114d => parse_arm_4429(ins, pc),
        0x114e => parse_arm_4430(ins, pc),
        0x114f => parse_arm_4431(ins, pc),
        0x1150 => parse_arm_4432(ins, pc),
        0x1151 => parse_arm_4433(ins, pc),
        0x1152 => parse_arm_4434(ins, pc),
        0x1153 => parse_arm_4435(ins, pc),
        0x1154 => parse_arm_4436(ins, pc),
        0x1155 => parse_arm_4437(ins, pc),
        0x1156 => parse_arm_4438(ins, pc),
        0x1157 => parse_arm_4439(ins, pc),
        0x1158 => parse_arm_4440(ins, pc),
        0x1159 => parse_arm_4441(ins, pc),
        0x115a => parse_arm_4442(ins, pc),
        0x115b => parse_arm_4443(ins, pc),
        0x115c => parse_arm_4444(ins, pc),
        0x115d => parse_arm_4445(ins, pc),
        0x115e => parse_arm_4446(ins, pc),
        0x115f => parse_arm_4447(ins, pc),
        0x1160 => parse_arm_4448(ins, pc),
        0x1161 => parse_arm_4449(ins, pc),
        0x1162 => parse_arm_4450(ins, pc),
        0x1163 => parse_arm_4451(ins, pc),
        0x1164 => parse_arm_4452(ins, pc),
        0x1165 => parse_arm_4453(ins, pc),
        0x1166 => parse_arm_4454(ins, pc),
        0x1167 => parse_arm_4455(ins, pc),
        0x1168 => parse_arm_4456(ins, pc),
        0x1169 => parse_arm_4457(ins, pc),
        0x116a => parse_arm_4458(ins, pc),
        0x116b => parse_arm_4459(ins, pc),
        0x116c => parse_arm_4460(ins, pc),
        0x116d => parse_arm_4461(ins, pc),
        0x116e => parse_arm_4462(ins, pc),
        0x116f => parse_arm_4463(ins, pc),
        0x1170 => parse_arm_4464(ins, pc),
        0x1171 => parse_arm_4465(ins, pc),
        0x1172 => parse_arm_4466(ins, pc),
        0x1173 => parse_arm_4467(ins, pc),
        0x1174 => parse_arm_4468(ins, pc),
        0x1175 => parse_arm_4469(ins, pc),
        0x1176 => parse_arm_4470(ins, pc),
        0x1177 => parse_arm_4471(ins, pc),
        0x1178 => parse_arm_4472(ins, pc),
        0x1179 => parse_arm_4473(ins, pc),
        0x117a => parse_arm_4474(ins, pc),
        0x117b => parse_arm_4475(ins, pc),
        0x117c => parse_arm_4476(ins, pc),
        0x117d => parse_arm_4477(ins, pc),
        0x117e => parse_arm_4478(ins, pc),
        0x117f => parse_arm_4479(ins, pc),
        0x1180 => parse_arm_4480(ins, pc),
        0x1181 => parse_arm_4481(ins, pc),
        0x1182 => parse_arm_4482(ins, pc),
        0x1183 => parse_arm_4483(ins, pc),
        0x1184 => parse_arm_4484(ins, pc),
        0x1185 => parse_arm_4485(ins, pc),
        0x1186 => parse_arm_4486(ins, pc),
        0x1187 => parse_arm_4487(ins, pc),
        0x1188 => parse_arm_4488(ins, pc),
        0x1189 => parse_arm_4489(ins, pc),
        0x118a => parse_arm_4490(ins, pc),
        0x118b => parse_arm_4491(ins, pc),
        0x118c => parse_arm_4492(ins, pc),
        0x118d => parse_arm_4493(ins, pc),
        0x118e => parse_arm_4494(ins, pc),
        0x118f => parse_arm_4495(ins, pc),
        0x1190 => parse_arm_4496(ins, pc),
        0x1191 => parse_arm_4497(ins, pc),
        0x1192 => parse_arm_4498(ins, pc),
        0x1193 => parse_arm_4499(ins, pc),
        0x1194 => parse_arm_4500(ins, pc),
        0x1195 => parse_arm_4501(ins, pc),
        0x1196 => parse_arm_4502(ins, pc),
        0x1197 => parse_arm_4503(ins, pc),
        0x1198 => parse_arm_4504(ins, pc),
        0x1199 => parse_arm_4505(ins, pc),
        0x119a => parse_arm_4506(ins, pc),
        0x119b => parse_arm_4507(ins, pc),
        0x119c => parse_arm_4508(ins, pc),
        0x119d => parse_arm_4509(ins, pc),
        0x119e => parse_arm_4510(ins, pc),
        0x119f => parse_arm_4511(ins, pc),
        0x11a0 => parse_arm_4512(ins, pc),
        0x11a1 => parse_arm_4513(ins, pc),
        0x11a2 => parse_arm_4514(ins, pc),
        0x11a3 => parse_arm_4515(ins, pc),
        0x11a4 => parse_arm_4516(ins, pc),
        0x11a5 => parse_arm_4517(ins, pc),
        0x11a6 => parse_arm_4518(ins, pc),
        0x11a7 => parse_arm_4519(ins, pc),
        0x11a8 => parse_arm_4520(ins, pc),
        0x11a9 => parse_arm_4521(ins, pc),
        0x11aa => parse_arm_4522(ins, pc),
        0x11ab => parse_arm_4523(ins, pc),
        0x11ac => parse_arm_4524(ins, pc),
        0x11ad => parse_arm_4525(ins, pc),
        0x11ae => parse_arm_4526(ins, pc),
        0x11af => parse_arm_4527(ins, pc),
        0x11b0 => parse_arm_4528(ins, pc),
        0x11b1 => parse_arm_4529(ins, pc),
        0x11b2 => parse_arm_4530(ins, pc),
        0x11b3 => parse_arm_4531(ins, pc),
        0x11b4 => parse_arm_4532(ins, pc),
        0x11b5 => parse_arm_4533(ins, pc),
        0x11b6 => parse_arm_4534(ins, pc),
        0x11b7 => parse_arm_4535(ins, pc),
        0x11b8 => parse_arm_4536(ins, pc),
        0x11b9 => parse_arm_4537(ins, pc),
        0x11ba => parse_arm_4538(ins, pc),
        0x11bb => parse_arm_4539(ins, pc),
        0x11bc => parse_arm_4540(ins, pc),
        0x11bd => parse_arm_4541(ins, pc),
        0x11be => parse_arm_4542(ins, pc),
        0x11bf => parse_arm_4543(ins, pc),
        0x11c0 => parse_arm_4544(ins, pc),
        0x11c1 => parse_arm_4545(ins, pc),
        0x11c2 => parse_arm_4546(ins, pc),
        0x11c3 => parse_arm_4547(ins, pc),
        0x11c4 => parse_arm_4548(ins, pc),
        0x11c5 => parse_arm_4549(ins, pc),
        0x11c6 => parse_arm_4550(ins, pc),
        0x11c7 => parse_arm_4551(ins, pc),
        0x11c8 => parse_arm_4552(ins, pc),
        0x11c9 => parse_arm_4553(ins, pc),
        0x11ca => parse_arm_4554(ins, pc),
        0x11cb => parse_arm_4555(ins, pc),
        0x11cc => parse_arm_4556(ins, pc),
        0x11cd => parse_arm_4557(ins, pc),
        0x11ce => parse_arm_4558(ins, pc),
        0x11cf => parse_arm_4559(ins, pc),
        0x11d0 => parse_arm_4560(ins, pc),
        0x11d1 => parse_arm_4561(ins, pc),
        0x11d2 => parse_arm_4562(ins, pc),
        0x11d3 => parse_arm_4563(ins, pc),
        0x11d4 => parse_arm_4564(ins, pc),
        0x11d5 => parse_arm_4565(ins, pc),
        0x11d6 => parse_arm_4566(ins, pc),
        0x11d7 => parse_arm_4567(ins, pc),
        0x11d8 => parse_arm_4568(ins, pc),
        0x11d9 => parse_arm_4569(ins, pc),
        0x11da => parse_arm_4570(ins, pc),
        0x11db => parse_arm_4571(ins, pc),
        0x11dc => parse_arm_4572(ins, pc),
        0x11dd => parse_arm_4573(ins, pc),
        0x11de => parse_arm_4574(ins, pc),
        0x11df => parse_arm_4575(ins, pc),
        0x11e0 => parse_arm_4576(ins, pc),
        0x11e1 => parse_arm_4577(ins, pc),
        0x11e2 => parse_arm_4578(ins, pc),
        0x11e3 => parse_arm_4579(ins, pc),
        0x11e4 => parse_arm_4580(ins, pc),
        0x11e5 => parse_arm_4581(ins, pc),
        0x11e6 => parse_arm_4582(ins, pc),
        0x11e7 => parse_arm_4583(ins, pc),
        0x11e8 => parse_arm_4584(ins, pc),
        0x11e9 => parse_arm_4585(ins, pc),
        0x11ea => parse_arm_4586(ins, pc),
        0x11eb => parse_arm_4587(ins, pc),
        0x11ec => parse_arm_4588(ins, pc),
        0x11ed => parse_arm_4589(ins, pc),
        0x11ee => parse_arm_4590(ins, pc),
        0x11ef => parse_arm_4591(ins, pc),
        0x11f0 => parse_arm_4592(ins, pc),
        0x11f1 => parse_arm_4593(ins, pc),
        0x11f2 => parse_arm_4594(ins, pc),
        0x11f3 => parse_arm_4595(ins, pc),
        0x11f4 => parse_arm_4596(ins, pc),
        0x11f5 => parse_arm_4597(ins, pc),
        0x11f6 => parse_arm_4598(ins, pc),
        0x11f7 => parse_arm_4599(ins, pc),
        0x11f8 => parse_arm_4600(ins, pc),
        0x11f9 => parse_arm_4601(ins, pc),
        0x11fa => parse_arm_4602(ins, pc),
        0x11fb => parse_arm_4603(ins, pc),
        0x11fc => parse_arm_4604(ins, pc),
        0x11fd => parse_arm_4605(ins, pc),
        0x11fe => parse_arm_4606(ins, pc),
        0x11ff => parse_arm_4607(ins, pc),
        0x1200 => parse_arm_4608(ins, pc),
        0x1201 => parse_arm_4609(ins, pc),
        0x1202 => parse_arm_4610(ins, pc),
        0x1203 => parse_arm_4611(ins, pc),
        0x1204 => parse_arm_4612(ins, pc),
        0x1205 => parse_arm_4613(ins, pc),
        0x1206 => parse_arm_4614(ins, pc),
        0x1207 => parse_arm_4615(ins, pc),
        0x1208 => parse_arm_4616(ins, pc),
        0x1209 => parse_arm_4617(ins, pc),
        0x120a => parse_arm_4618(ins, pc),
        0x120b => parse_arm_4619(ins, pc),
        0x120c => parse_arm_4620(ins, pc),
        0x120d => parse_arm_4621(ins, pc),
        0x120e => parse_arm_4622(ins, pc),
        0x120f => parse_arm_4623(ins, pc),
        0x1210 => parse_arm_4624(ins, pc),
        0x1211 => parse_arm_4625(ins, pc),
        0x1212 => parse_arm_4626(ins, pc),
        0x1213 => parse_arm_4627(ins, pc),
        0x1214 => parse_arm_4628(ins, pc),
        0x1215 => parse_arm_4629(ins, pc),
        0x1216 => parse_arm_4630(ins, pc),
        0x1217 => parse_arm_4631(ins, pc),
        0x1218 => parse_arm_4632(ins, pc),
        0x1219 => parse_arm_4633(ins, pc),
        0x121a => parse_arm_4634(ins, pc),
        0x121b => parse_arm_4635(ins, pc),
        0x121c => parse_arm_4636(ins, pc),
        0x121d => parse_arm_4637(ins, pc),
        0x121e => parse_arm_4638(ins, pc),
        0x121f => parse_arm_4639(ins, pc),
        0x1220 => parse_arm_4640(ins, pc),
        0x1221 => parse_arm_4641(ins, pc),
        0x1222 => parse_arm_4642(ins, pc),
        0x1223 => parse_arm_4643(ins, pc),
        0x1224 => parse_arm_4644(ins, pc),
        0x1225 => parse_arm_4645(ins, pc),
        0x1226 => parse_arm_4646(ins, pc),
        0x1227 => parse_arm_4647(ins, pc),
        0x1228 => parse_arm_4648(ins, pc),
        0x1229 => parse_arm_4649(ins, pc),
        0x122a => parse_arm_4650(ins, pc),
        0x122b => parse_arm_4651(ins, pc),
        0x122c => parse_arm_4652(ins, pc),
        0x122d => parse_arm_4653(ins, pc),
        0x122e => parse_arm_4654(ins, pc),
        0x122f => parse_arm_4655(ins, pc),
        0x1230 => parse_arm_4656(ins, pc),
        0x1231 => parse_arm_4657(ins, pc),
        0x1232 => parse_arm_4658(ins, pc),
        0x1233 => parse_arm_4659(ins, pc),
        0x1234 => parse_arm_4660(ins, pc),
        0x1235 => parse_arm_4661(ins, pc),
        0x1236 => parse_arm_4662(ins, pc),
        0x1237 => parse_arm_4663(ins, pc),
        0x1238 => parse_arm_4664(ins, pc),
        0x1239 => parse_arm_4665(ins, pc),
        0x123a => parse_arm_4666(ins, pc),
        0x123b => parse_arm_4667(ins, pc),
        0x123c => parse_arm_4668(ins, pc),
        0x123d => parse_arm_4669(ins, pc),
        0x123e => parse_arm_4670(ins, pc),
        0x123f => parse_arm_4671(ins, pc),
        0x1240 => parse_arm_4672(ins, pc),
        0x1241 => parse_arm_4673(ins, pc),
        0x1242 => parse_arm_4674(ins, pc),
        0x1243 => parse_arm_4675(ins, pc),
        0x1244 => parse_arm_4676(ins, pc),
        0x1245 => parse_arm_4677(ins, pc),
        0x1246 => parse_arm_4678(ins, pc),
        0x1247 => parse_arm_4679(ins, pc),
        0x1248 => parse_arm_4680(ins, pc),
        0x1249 => parse_arm_4681(ins, pc),
        0x124a => parse_arm_4682(ins, pc),
        0x124b => parse_arm_4683(ins, pc),
        0x124c => parse_arm_4684(ins, pc),
        0x124d => parse_arm_4685(ins, pc),
        0x124e => parse_arm_4686(ins, pc),
        0x124f => parse_arm_4687(ins, pc),
        0x1250 => parse_arm_4688(ins, pc),
        0x1251 => parse_arm_4689(ins, pc),
        0x1252 => parse_arm_4690(ins, pc),
        0x1253 => parse_arm_4691(ins, pc),
        0x1254 => parse_arm_4692(ins, pc),
        0x1255 => parse_arm_4693(ins, pc),
        0x1256 => parse_arm_4694(ins, pc),
        0x1257 => parse_arm_4695(ins, pc),
        0x1258 => parse_arm_4696(ins, pc),
        0x1259 => parse_arm_4697(ins, pc),
        0x125a => parse_arm_4698(ins, pc),
        0x125b => parse_arm_4699(ins, pc),
        0x125c => parse_arm_4700(ins, pc),
        0x125d => parse_arm_4701(ins, pc),
        0x125e => parse_arm_4702(ins, pc),
        0x125f => parse_arm_4703(ins, pc),
        0x1260 => parse_arm_4704(ins, pc),
        0x1261 => parse_arm_4705(ins, pc),
        0x1262 => parse_arm_4706(ins, pc),
        0x1263 => parse_arm_4707(ins, pc),
        0x1264 => parse_arm_4708(ins, pc),
        0x1265 => parse_arm_4709(ins, pc),
        0x1266 => parse_arm_4710(ins, pc),
        0x1267 => parse_arm_4711(ins, pc),
        0x1268 => parse_arm_4712(ins, pc),
        0x1269 => parse_arm_4713(ins, pc),
        0x126a => parse_arm_4714(ins, pc),
        0x126b => parse_arm_4715(ins, pc),
        0x126c => parse_arm_4716(ins, pc),
        0x126d => parse_arm_4717(ins, pc),
        0x126e => parse_arm_4718(ins, pc),
        0x126f => parse_arm_4719(ins, pc),
        0x1270 => parse_arm_4720(ins, pc),
        0x1271 => parse_arm_4721(ins, pc),
        0x1272 => parse_arm_4722(ins, pc),
        0x1273 => parse_arm_4723(ins, pc),
        0x1274 => parse_arm_4724(ins, pc),
        0x1275 => parse_arm_4725(ins, pc),
        0x1276 => parse_arm_4726(ins, pc),
        0x1277 => parse_arm_4727(ins, pc),
        0x1278 => parse_arm_4728(ins, pc),
        0x1279 => parse_arm_4729(ins, pc),
        0x127a => parse_arm_4730(ins, pc),
        0x127b => parse_arm_4731(ins, pc),
        0x127c => parse_arm_4732(ins, pc),
        0x127d => parse_arm_4733(ins, pc),
        0x127e => parse_arm_4734(ins, pc),
        0x127f => parse_arm_4735(ins, pc),
        0x1280 => parse_arm_4736(ins, pc),
        0x1281 => parse_arm_4737(ins, pc),
        0x1282 => parse_arm_4738(ins, pc),
        0x1283 => parse_arm_4739(ins, pc),
        0x1284 => parse_arm_4740(ins, pc),
        0x1285 => parse_arm_4741(ins, pc),
        0x1286 => parse_arm_4742(ins, pc),
        0x1287 => parse_arm_4743(ins, pc),
        0x1288 => parse_arm_4744(ins, pc),
        0x1289 => parse_arm_4745(ins, pc),
        0x128a => parse_arm_4746(ins, pc),
        0x128b => parse_arm_4747(ins, pc),
        0x128c => parse_arm_4748(ins, pc),
        0x128d => parse_arm_4749(ins, pc),
        0x128e => parse_arm_4750(ins, pc),
        0x128f => parse_arm_4751(ins, pc),
        0x1290 => parse_arm_4752(ins, pc),
        0x1291 => parse_arm_4753(ins, pc),
        0x1292 => parse_arm_4754(ins, pc),
        0x1293 => parse_arm_4755(ins, pc),
        0x1294 => parse_arm_4756(ins, pc),
        0x1295 => parse_arm_4757(ins, pc),
        0x1296 => parse_arm_4758(ins, pc),
        0x1297 => parse_arm_4759(ins, pc),
        0x1298 => parse_arm_4760(ins, pc),
        0x1299 => parse_arm_4761(ins, pc),
        0x129a => parse_arm_4762(ins, pc),
        0x129b => parse_arm_4763(ins, pc),
        0x129c => parse_arm_4764(ins, pc),
        0x129d => parse_arm_4765(ins, pc),
        0x129e => parse_arm_4766(ins, pc),
        0x129f => parse_arm_4767(ins, pc),
        0x12a0 => parse_arm_4768(ins, pc),
        0x12a1 => parse_arm_4769(ins, pc),
        0x12a2 => parse_arm_4770(ins, pc),
        0x12a3 => parse_arm_4771(ins, pc),
        0x12a4 => parse_arm_4772(ins, pc),
        0x12a5 => parse_arm_4773(ins, pc),
        0x12a6 => parse_arm_4774(ins, pc),
        0x12a7 => parse_arm_4775(ins, pc),
        0x12a8 => parse_arm_4776(ins, pc),
        0x12a9 => parse_arm_4777(ins, pc),
        0x12aa => parse_arm_4778(ins, pc),
        0x12ab => parse_arm_4779(ins, pc),
        0x12ac => parse_arm_4780(ins, pc),
        0x12ad => parse_arm_4781(ins, pc),
        0x12ae => parse_arm_4782(ins, pc),
        0x12af => parse_arm_4783(ins, pc),
        0x12b0 => parse_arm_4784(ins, pc),
        0x12b1 => parse_arm_4785(ins, pc),
        0x12b2 => parse_arm_4786(ins, pc),
        0x12b3 => parse_arm_4787(ins, pc),
        0x12b4 => parse_arm_4788(ins, pc),
        0x12b5 => parse_arm_4789(ins, pc),
        0x12b6 => parse_arm_4790(ins, pc),
        0x12b7 => parse_arm_4791(ins, pc),
        0x12b8 => parse_arm_4792(ins, pc),
        0x12b9 => parse_arm_4793(ins, pc),
        0x12ba => parse_arm_4794(ins, pc),
        0x12bb => parse_arm_4795(ins, pc),
        0x12bc => parse_arm_4796(ins, pc),
        0x12bd => parse_arm_4797(ins, pc),
        0x12be => parse_arm_4798(ins, pc),
        0x12bf => parse_arm_4799(ins, pc),
        0x12c0 => parse_arm_4800(ins, pc),
        0x12c1 => parse_arm_4801(ins, pc),
        0x12c2 => parse_arm_4802(ins, pc),
        0x12c3 => parse_arm_4803(ins, pc),
        0x12c4 => parse_arm_4804(ins, pc),
        0x12c5 => parse_arm_4805(ins, pc),
        0x12c6 => parse_arm_4806(ins, pc),
        0x12c7 => parse_arm_4807(ins, pc),
        0x12c8 => parse_arm_4808(ins, pc),
        0x12c9 => parse_arm_4809(ins, pc),
        0x12ca => parse_arm_4810(ins, pc),
        0x12cb => parse_arm_4811(ins, pc),
        0x12cc => parse_arm_4812(ins, pc),
        0x12cd => parse_arm_4813(ins, pc),
        0x12ce => parse_arm_4814(ins, pc),
        0x12cf => parse_arm_4815(ins, pc),
        0x12d0 => parse_arm_4816(ins, pc),
        0x12d1 => parse_arm_4817(ins, pc),
        0x12d2 => parse_arm_4818(ins, pc),
        0x12d3 => parse_arm_4819(ins, pc),
        0x12d4 => parse_arm_4820(ins, pc),
        0x12d5 => parse_arm_4821(ins, pc),
        0x12d6 => parse_arm_4822(ins, pc),
        0x12d7 => parse_arm_4823(ins, pc),
        0x12d8 => parse_arm_4824(ins, pc),
        0x12d9 => parse_arm_4825(ins, pc),
        0x12da => parse_arm_4826(ins, pc),
        0x12db => parse_arm_4827(ins, pc),
        0x12dc => parse_arm_4828(ins, pc),
        0x12dd => parse_arm_4829(ins, pc),
        0x12de => parse_arm_4830(ins, pc),
        0x12df => parse_arm_4831(ins, pc),
        0x12e0 => parse_arm_4832(ins, pc),
        0x12e1 => parse_arm_4833(ins, pc),
        0x12e2 => parse_arm_4834(ins, pc),
        0x12e3 => parse_arm_4835(ins, pc),
        0x12e4 => parse_arm_4836(ins, pc),
        0x12e5 => parse_arm_4837(ins, pc),
        0x12e6 => parse_arm_4838(ins, pc),
        0x12e7 => parse_arm_4839(ins, pc),
        0x12e8 => parse_arm_4840(ins, pc),
        0x12e9 => parse_arm_4841(ins, pc),
        0x12ea => parse_arm_4842(ins, pc),
        0x12eb => parse_arm_4843(ins, pc),
        0x12ec => parse_arm_4844(ins, pc),
        0x12ed => parse_arm_4845(ins, pc),
        0x12ee => parse_arm_4846(ins, pc),
        0x12ef => parse_arm_4847(ins, pc),
        0x12f0 => parse_arm_4848(ins, pc),
        0x12f1 => parse_arm_4849(ins, pc),
        0x12f2 => parse_arm_4850(ins, pc),
        0x12f3 => parse_arm_4851(ins, pc),
        0x12f4 => parse_arm_4852(ins, pc),
        0x12f5 => parse_arm_4853(ins, pc),
        0x12f6 => parse_arm_4854(ins, pc),
        0x12f7 => parse_arm_4855(ins, pc),
        0x12f8 => parse_arm_4856(ins, pc),
        0x12f9 => parse_arm_4857(ins, pc),
        0x12fa => parse_arm_4858(ins, pc),
        0x12fb => parse_arm_4859(ins, pc),
        0x12fc => parse_arm_4860(ins, pc),
        0x12fd => parse_arm_4861(ins, pc),
        0x12fe => parse_arm_4862(ins, pc),
        0x12ff => parse_arm_4863(ins, pc),
        0x1300 => parse_arm_4864(ins, pc),
        0x1301 => parse_arm_4865(ins, pc),
        0x1302 => parse_arm_4866(ins, pc),
        0x1303 => parse_arm_4867(ins, pc),
        0x1304 => parse_arm_4868(ins, pc),
        0x1305 => parse_arm_4869(ins, pc),
        0x1306 => parse_arm_4870(ins, pc),
        0x1307 => parse_arm_4871(ins, pc),
        0x1308 => parse_arm_4872(ins, pc),
        0x1309 => parse_arm_4873(ins, pc),
        0x130a => parse_arm_4874(ins, pc),
        0x130b => parse_arm_4875(ins, pc),
        0x130c => parse_arm_4876(ins, pc),
        0x130d => parse_arm_4877(ins, pc),
        0x130e => parse_arm_4878(ins, pc),
        0x130f => parse_arm_4879(ins, pc),
        0x1310 => parse_arm_4880(ins, pc),
        0x1311 => parse_arm_4881(ins, pc),
        0x1312 => parse_arm_4882(ins, pc),
        0x1313 => parse_arm_4883(ins, pc),
        0x1314 => parse_arm_4884(ins, pc),
        0x1315 => parse_arm_4885(ins, pc),
        0x1316 => parse_arm_4886(ins, pc),
        0x1317 => parse_arm_4887(ins, pc),
        0x1318 => parse_arm_4888(ins, pc),
        0x1319 => parse_arm_4889(ins, pc),
        0x131a => parse_arm_4890(ins, pc),
        0x131b => parse_arm_4891(ins, pc),
        0x131c => parse_arm_4892(ins, pc),
        0x131d => parse_arm_4893(ins, pc),
        0x131e => parse_arm_4894(ins, pc),
        0x131f => parse_arm_4895(ins, pc),
        0x1320 => parse_arm_4896(ins, pc),
        0x1321 => parse_arm_4897(ins, pc),
        0x1322 => parse_arm_4898(ins, pc),
        0x1323 => parse_arm_4899(ins, pc),
        0x1324 => parse_arm_4900(ins, pc),
        0x1325 => parse_arm_4901(ins, pc),
        0x1326 => parse_arm_4902(ins, pc),
        0x1327 => parse_arm_4903(ins, pc),
        0x1328 => parse_arm_4904(ins, pc),
        0x1329 => parse_arm_4905(ins, pc),
        0x132a => parse_arm_4906(ins, pc),
        0x132b => parse_arm_4907(ins, pc),
        0x132c => parse_arm_4908(ins, pc),
        0x132d => parse_arm_4909(ins, pc),
        0x132e => parse_arm_4910(ins, pc),
        0x132f => parse_arm_4911(ins, pc),
        0x1330 => parse_arm_4912(ins, pc),
        0x1331 => parse_arm_4913(ins, pc),
        0x1332 => parse_arm_4914(ins, pc),
        0x1333 => parse_arm_4915(ins, pc),
        0x1334 => parse_arm_4916(ins, pc),
        0x1335 => parse_arm_4917(ins, pc),
        0x1336 => parse_arm_4918(ins, pc),
        0x1337 => parse_arm_4919(ins, pc),
        0x1338 => parse_arm_4920(ins, pc),
        0x1339 => parse_arm_4921(ins, pc),
        0x133a => parse_arm_4922(ins, pc),
        0x133b => parse_arm_4923(ins, pc),
        0x133c => parse_arm_4924(ins, pc),
        0x133d => parse_arm_4925(ins, pc),
        0x133e => parse_arm_4926(ins, pc),
        0x133f => parse_arm_4927(ins, pc),
        0x1340 => parse_arm_4928(ins, pc),
        0x1341 => parse_arm_4929(ins, pc),
        0x1342 => parse_arm_4930(ins, pc),
        0x1343 => parse_arm_4931(ins, pc),
        0x1344 => parse_arm_4932(ins, pc),
        0x1345 => parse_arm_4933(ins, pc),
        0x1346 => parse_arm_4934(ins, pc),
        0x1347 => parse_arm_4935(ins, pc),
        0x1348 => parse_arm_4936(ins, pc),
        0x1349 => parse_arm_4937(ins, pc),
        0x134a => parse_arm_4938(ins, pc),
        0x134b => parse_arm_4939(ins, pc),
        0x134c => parse_arm_4940(ins, pc),
        0x134d => parse_arm_4941(ins, pc),
        0x134e => parse_arm_4942(ins, pc),
        0x134f => parse_arm_4943(ins, pc),
        0x1350 => parse_arm_4944(ins, pc),
        0x1351 => parse_arm_4945(ins, pc),
        0x1352 => parse_arm_4946(ins, pc),
        0x1353 => parse_arm_4947(ins, pc),
        0x1354 => parse_arm_4948(ins, pc),
        0x1355 => parse_arm_4949(ins, pc),
        0x1356 => parse_arm_4950(ins, pc),
        0x1357 => parse_arm_4951(ins, pc),
        0x1358 => parse_arm_4952(ins, pc),
        0x1359 => parse_arm_4953(ins, pc),
        0x135a => parse_arm_4954(ins, pc),
        0x135b => parse_arm_4955(ins, pc),
        0x135c => parse_arm_4956(ins, pc),
        0x135d => parse_arm_4957(ins, pc),
        0x135e => parse_arm_4958(ins, pc),
        0x135f => parse_arm_4959(ins, pc),
        0x1360 => parse_arm_4960(ins, pc),
        0x1361 => parse_arm_4961(ins, pc),
        0x1362 => parse_arm_4962(ins, pc),
        0x1363 => parse_arm_4963(ins, pc),
        0x1364 => parse_arm_4964(ins, pc),
        0x1365 => parse_arm_4965(ins, pc),
        0x1366 => parse_arm_4966(ins, pc),
        0x1367 => parse_arm_4967(ins, pc),
        0x1368 => parse_arm_4968(ins, pc),
        0x1369 => parse_arm_4969(ins, pc),
        0x136a => parse_arm_4970(ins, pc),
        0x136b => parse_arm_4971(ins, pc),
        0x136c => parse_arm_4972(ins, pc),
        0x136d => parse_arm_4973(ins, pc),
        0x136e => parse_arm_4974(ins, pc),
        0x136f => parse_arm_4975(ins, pc),
        0x1370 => parse_arm_4976(ins, pc),
        0x1371 => parse_arm_4977(ins, pc),
        0x1372 => parse_arm_4978(ins, pc),
        0x1373 => parse_arm_4979(ins, pc),
        0x1374 => parse_arm_4980(ins, pc),
        0x1375 => parse_arm_4981(ins, pc),
        0x1376 => parse_arm_4982(ins, pc),
        0x1377 => parse_arm_4983(ins, pc),
        0x1378 => parse_arm_4984(ins, pc),
        0x1379 => parse_arm_4985(ins, pc),
        0x137a => parse_arm_4986(ins, pc),
        0x137b => parse_arm_4987(ins, pc),
        0x137c => parse_arm_4988(ins, pc),
        0x137d => parse_arm_4989(ins, pc),
        0x137e => parse_arm_4990(ins, pc),
        0x137f => parse_arm_4991(ins, pc),
        0x1380 => parse_arm_4992(ins, pc),
        0x1381 => parse_arm_4993(ins, pc),
        0x1382 => parse_arm_4994(ins, pc),
        0x1383 => parse_arm_4995(ins, pc),
        0x1384 => parse_arm_4996(ins, pc),
        0x1385 => parse_arm_4997(ins, pc),
        0x1386 => parse_arm_4998(ins, pc),
        0x1387 => parse_arm_4999(ins, pc),
        0x1388 => parse_arm_5000(ins, pc),
        0x1389 => parse_arm_5001(ins, pc),
        0x138a => parse_arm_5002(ins, pc),
        0x138b => parse_arm_5003(ins, pc),
        0x138c => parse_arm_5004(ins, pc),
        0x138d => parse_arm_5005(ins, pc),
        0x138e => parse_arm_5006(ins, pc),
        0x138f => parse_arm_5007(ins, pc),
        0x1390 => parse_arm_5008(ins, pc),
        0x1391 => parse_arm_5009(ins, pc),
        0x1392 => parse_arm_5010(ins, pc),
        0x1393 => parse_arm_5011(ins, pc),
        0x1394 => parse_arm_5012(ins, pc),
        0x1395 => parse_arm_5013(ins, pc),
        0x1396 => parse_arm_5014(ins, pc),
        0x1397 => parse_arm_5015(ins, pc),
        0x1398 => parse_arm_5016(ins, pc),
        0x1399 => parse_arm_5017(ins, pc),
        0x139a => parse_arm_5018(ins, pc),
        0x139b => parse_arm_5019(ins, pc),
        0x139c => parse_arm_5020(ins, pc),
        0x139d => parse_arm_5021(ins, pc),
        0x139e => parse_arm_5022(ins, pc),
        0x139f => parse_arm_5023(ins, pc),
        0x13a0 => parse_arm_5024(ins, pc),
        0x13a1 => parse_arm_5025(ins, pc),
        0x13a2 => parse_arm_5026(ins, pc),
        0x13a3 => parse_arm_5027(ins, pc),
        0x13a4 => parse_arm_5028(ins, pc),
        0x13a5 => parse_arm_5029(ins, pc),
        0x13a6 => parse_arm_5030(ins, pc),
        0x13a7 => parse_arm_5031(ins, pc),
        0x13a8 => parse_arm_5032(ins, pc),
        0x13a9 => parse_arm_5033(ins, pc),
        0x13aa => parse_arm_5034(ins, pc),
        0x13ab => parse_arm_5035(ins, pc),
        0x13ac => parse_arm_5036(ins, pc),
        0x13ad => parse_arm_5037(ins, pc),
        0x13ae => parse_arm_5038(ins, pc),
        0x13af => parse_arm_5039(ins, pc),
        0x13b0 => parse_arm_5040(ins, pc),
        0x13b1 => parse_arm_5041(ins, pc),
        0x13b2 => parse_arm_5042(ins, pc),
        0x13b3 => parse_arm_5043(ins, pc),
        0x13b4 => parse_arm_5044(ins, pc),
        0x13b5 => parse_arm_5045(ins, pc),
        0x13b6 => parse_arm_5046(ins, pc),
        0x13b7 => parse_arm_5047(ins, pc),
        0x13b8 => parse_arm_5048(ins, pc),
        0x13b9 => parse_arm_5049(ins, pc),
        0x13ba => parse_arm_5050(ins, pc),
        0x13bb => parse_arm_5051(ins, pc),
        0x13bc => parse_arm_5052(ins, pc),
        0x13bd => parse_arm_5053(ins, pc),
        0x13be => parse_arm_5054(ins, pc),
        0x13bf => parse_arm_5055(ins, pc),
        0x13c0 => parse_arm_5056(ins, pc),
        0x13c1 => parse_arm_5057(ins, pc),
        0x13c2 => parse_arm_5058(ins, pc),
        0x13c3 => parse_arm_5059(ins, pc),
        0x13c4 => parse_arm_5060(ins, pc),
        0x13c5 => parse_arm_5061(ins, pc),
        0x13c6 => parse_arm_5062(ins, pc),
        0x13c7 => parse_arm_5063(ins, pc),
        0x13c8 => parse_arm_5064(ins, pc),
        0x13c9 => parse_arm_5065(ins, pc),
        0x13ca => parse_arm_5066(ins, pc),
        0x13cb => parse_arm_5067(ins, pc),
        0x13cc => parse_arm_5068(ins, pc),
        0x13cd => parse_arm_5069(ins, pc),
        0x13ce => parse_arm_5070(ins, pc),
        0x13cf => parse_arm_5071(ins, pc),
        0x13d0 => parse_arm_5072(ins, pc),
        0x13d1 => parse_arm_5073(ins, pc),
        0x13d2 => parse_arm_5074(ins, pc),
        0x13d3 => parse_arm_5075(ins, pc),
        0x13d4 => parse_arm_5076(ins, pc),
        0x13d5 => parse_arm_5077(ins, pc),
        0x13d6 => parse_arm_5078(ins, pc),
        0x13d7 => parse_arm_5079(ins, pc),
        0x13d8 => parse_arm_5080(ins, pc),
        0x13d9 => parse_arm_5081(ins, pc),
        0x13da => parse_arm_5082(ins, pc),
        0x13db => parse_arm_5083(ins, pc),
        0x13dc => parse_arm_5084(ins, pc),
        0x13dd => parse_arm_5085(ins, pc),
        0x13de => parse_arm_5086(ins, pc),
        0x13df => parse_arm_5087(ins, pc),
        0x13e0 => parse_arm_5088(ins, pc),
        0x13e1 => parse_arm_5089(ins, pc),
        0x13e2 => parse_arm_5090(ins, pc),
        0x13e3 => parse_arm_5091(ins, pc),
        0x13e4 => parse_arm_5092(ins, pc),
        0x13e5 => parse_arm_5093(ins, pc),
        0x13e6 => parse_arm_5094(ins, pc),
        0x13e7 => parse_arm_5095(ins, pc),
        0x13e8 => parse_arm_5096(ins, pc),
        0x13e9 => parse_arm_5097(ins, pc),
        0x13ea => parse_arm_5098(ins, pc),
        0x13eb => parse_arm_5099(ins, pc),
        0x13ec => parse_arm_5100(ins, pc),
        0x13ed => parse_arm_5101(ins, pc),
        0x13ee => parse_arm_5102(ins, pc),
        0x13ef => parse_arm_5103(ins, pc),
        0x13f0 => parse_arm_5104(ins, pc),
        0x13f1 => parse_arm_5105(ins, pc),
        0x13f2 => parse_arm_5106(ins, pc),
        0x13f3 => parse_arm_5107(ins, pc),
        0x13f4 => parse_arm_5108(ins, pc),
        0x13f5 => parse_arm_5109(ins, pc),
        0x13f6 => parse_arm_5110(ins, pc),
        0x13f7 => parse_arm_5111(ins, pc),
        0x13f8 => parse_arm_5112(ins, pc),
        0x13f9 => parse_arm_5113(ins, pc),
        0x13fa => parse_arm_5114(ins, pc),
        0x13fb => parse_arm_5115(ins, pc),
        0x13fc => parse_arm_5116(ins, pc),
        0x13fd => parse_arm_5117(ins, pc),
        0x13fe => parse_arm_5118(ins, pc),
        0x13ff => parse_arm_5119(ins, pc),
        0x1400 => parse_arm_5120(ins, pc),
        0x1401 => parse_arm_5121(ins, pc),
        0x1402 => parse_arm_5122(ins, pc),
        0x1403 => parse_arm_5123(ins, pc),
        0x1404 => parse_arm_5124(ins, pc),
        0x1405 => parse_arm_5125(ins, pc),
        0x1406 => parse_arm_5126(ins, pc),
        0x1407 => parse_arm_5127(ins, pc),
        0x1408 => parse_arm_5128(ins, pc),
        0x1409 => parse_arm_5129(ins, pc),
        0x140a => parse_arm_5130(ins, pc),
        0x140b => parse_arm_5131(ins, pc),
        0x140c => parse_arm_5132(ins, pc),
        0x140d => parse_arm_5133(ins, pc),
        0x140e => parse_arm_5134(ins, pc),
        0x140f => parse_arm_5135(ins, pc),
        0x1410 => parse_arm_5136(ins, pc),
        0x1411 => parse_arm_5137(ins, pc),
        0x1412 => parse_arm_5138(ins, pc),
        0x1413 => parse_arm_5139(ins, pc),
        0x1414 => parse_arm_5140(ins, pc),
        0x1415 => parse_arm_5141(ins, pc),
        0x1416 => parse_arm_5142(ins, pc),
        0x1417 => parse_arm_5143(ins, pc),
        0x1418 => parse_arm_5144(ins, pc),
        0x1419 => parse_arm_5145(ins, pc),
        0x141a => parse_arm_5146(ins, pc),
        0x141b => parse_arm_5147(ins, pc),
        0x141c => parse_arm_5148(ins, pc),
        0x141d => parse_arm_5149(ins, pc),
        0x141e => parse_arm_5150(ins, pc),
        0x141f => parse_arm_5151(ins, pc),
        0x1420 => parse_arm_5152(ins, pc),
        0x1421 => parse_arm_5153(ins, pc),
        0x1422 => parse_arm_5154(ins, pc),
        0x1423 => parse_arm_5155(ins, pc),
        0x1424 => parse_arm_5156(ins, pc),
        0x1425 => parse_arm_5157(ins, pc),
        0x1426 => parse_arm_5158(ins, pc),
        0x1427 => parse_arm_5159(ins, pc),
        0x1428 => parse_arm_5160(ins, pc),
        0x1429 => parse_arm_5161(ins, pc),
        0x142a => parse_arm_5162(ins, pc),
        0x142b => parse_arm_5163(ins, pc),
        0x142c => parse_arm_5164(ins, pc),
        0x142d => parse_arm_5165(ins, pc),
        0x142e => parse_arm_5166(ins, pc),
        0x142f => parse_arm_5167(ins, pc),
        0x1430 => parse_arm_5168(ins, pc),
        0x1431 => parse_arm_5169(ins, pc),
        0x1432 => parse_arm_5170(ins, pc),
        0x1433 => parse_arm_5171(ins, pc),
        0x1434 => parse_arm_5172(ins, pc),
        0x1435 => parse_arm_5173(ins, pc),
        0x1436 => parse_arm_5174(ins, pc),
        0x1437 => parse_arm_5175(ins, pc),
        0x1438 => parse_arm_5176(ins, pc),
        0x1439 => parse_arm_5177(ins, pc),
        0x143a => parse_arm_5178(ins, pc),
        0x143b => parse_arm_5179(ins, pc),
        0x143c => parse_arm_5180(ins, pc),
        0x143d => parse_arm_5181(ins, pc),
        0x143e => parse_arm_5182(ins, pc),
        0x143f => parse_arm_5183(ins, pc),
        0x1440 => parse_arm_5184(ins, pc),
        0x1441 => parse_arm_5185(ins, pc),
        0x1442 => parse_arm_5186(ins, pc),
        0x1443 => parse_arm_5187(ins, pc),
        0x1444 => parse_arm_5188(ins, pc),
        0x1445 => parse_arm_5189(ins, pc),
        0x1446 => parse_arm_5190(ins, pc),
        0x1447 => parse_arm_5191(ins, pc),
        0x1448 => parse_arm_5192(ins, pc),
        0x1449 => parse_arm_5193(ins, pc),
        0x144a => parse_arm_5194(ins, pc),
        0x144b => parse_arm_5195(ins, pc),
        0x144c => parse_arm_5196(ins, pc),
        0x144d => parse_arm_5197(ins, pc),
        0x144e => parse_arm_5198(ins, pc),
        0x144f => parse_arm_5199(ins, pc),
        0x1450 => parse_arm_5200(ins, pc),
        0x1451 => parse_arm_5201(ins, pc),
        0x1452 => parse_arm_5202(ins, pc),
        0x1453 => parse_arm_5203(ins, pc),
        0x1454 => parse_arm_5204(ins, pc),
        0x1455 => parse_arm_5205(ins, pc),
        0x1456 => parse_arm_5206(ins, pc),
        0x1457 => parse_arm_5207(ins, pc),
        0x1458 => parse_arm_5208(ins, pc),
        0x1459 => parse_arm_5209(ins, pc),
        0x145a => parse_arm_5210(ins, pc),
        0x145b => parse_arm_5211(ins, pc),
        0x145c => parse_arm_5212(ins, pc),
        0x145d => parse_arm_5213(ins, pc),
        0x145e => parse_arm_5214(ins, pc),
        0x145f => parse_arm_5215(ins, pc),
        0x1460 => parse_arm_5216(ins, pc),
        0x1461 => parse_arm_5217(ins, pc),
        0x1462 => parse_arm_5218(ins, pc),
        0x1463 => parse_arm_5219(ins, pc),
        0x1464 => parse_arm_5220(ins, pc),
        0x1465 => parse_arm_5221(ins, pc),
        0x1466 => parse_arm_5222(ins, pc),
        0x1467 => parse_arm_5223(ins, pc),
        0x1468 => parse_arm_5224(ins, pc),
        0x1469 => parse_arm_5225(ins, pc),
        0x146a => parse_arm_5226(ins, pc),
        0x146b => parse_arm_5227(ins, pc),
        0x146c => parse_arm_5228(ins, pc),
        0x146d => parse_arm_5229(ins, pc),
        0x146e => parse_arm_5230(ins, pc),
        0x146f => parse_arm_5231(ins, pc),
        0x1470 => parse_arm_5232(ins, pc),
        0x1471 => parse_arm_5233(ins, pc),
        0x1472 => parse_arm_5234(ins, pc),
        0x1473 => parse_arm_5235(ins, pc),
        0x1474 => parse_arm_5236(ins, pc),
        0x1475 => parse_arm_5237(ins, pc),
        0x1476 => parse_arm_5238(ins, pc),
        0x1477 => parse_arm_5239(ins, pc),
        0x1478 => parse_arm_5240(ins, pc),
        0x1479 => parse_arm_5241(ins, pc),
        0x147a => parse_arm_5242(ins, pc),
        0x147b => parse_arm_5243(ins, pc),
        0x147c => parse_arm_5244(ins, pc),
        0x147d => parse_arm_5245(ins, pc),
        0x147e => parse_arm_5246(ins, pc),
        0x147f => parse_arm_5247(ins, pc),
        0x1480 => parse_arm_5248(ins, pc),
        0x1481 => parse_arm_5249(ins, pc),
        0x1482 => parse_arm_5250(ins, pc),
        0x1483 => parse_arm_5251(ins, pc),
        0x1484 => parse_arm_5252(ins, pc),
        0x1485 => parse_arm_5253(ins, pc),
        0x1486 => parse_arm_5254(ins, pc),
        0x1487 => parse_arm_5255(ins, pc),
        0x1488 => parse_arm_5256(ins, pc),
        0x1489 => parse_arm_5257(ins, pc),
        0x148a => parse_arm_5258(ins, pc),
        0x148b => parse_arm_5259(ins, pc),
        0x148c => parse_arm_5260(ins, pc),
        0x148d => parse_arm_5261(ins, pc),
        0x148e => parse_arm_5262(ins, pc),
        0x148f => parse_arm_5263(ins, pc),
        0x1490 => parse_arm_5264(ins, pc),
        0x1491 => parse_arm_5265(ins, pc),
        0x1492 => parse_arm_5266(ins, pc),
        0x1493 => parse_arm_5267(ins, pc),
        0x1494 => parse_arm_5268(ins, pc),
        0x1495 => parse_arm_5269(ins, pc),
        0x1496 => parse_arm_5270(ins, pc),
        0x1497 => parse_arm_5271(ins, pc),
        0x1498 => parse_arm_5272(ins, pc),
        0x1499 => parse_arm_5273(ins, pc),
        0x149a => parse_arm_5274(ins, pc),
        0x149b => parse_arm_5275(ins, pc),
        0x149c => parse_arm_5276(ins, pc),
        0x149d => parse_arm_5277(ins, pc),
        0x149e => parse_arm_5278(ins, pc),
        0x149f => parse_arm_5279(ins, pc),
        0x14a0 => parse_arm_5280(ins, pc),
        0x14a1 => parse_arm_5281(ins, pc),
        0x14a2 => parse_arm_5282(ins, pc),
        0x14a3 => parse_arm_5283(ins, pc),
        0x14a4 => parse_arm_5284(ins, pc),
        0x14a5 => parse_arm_5285(ins, pc),
        0x14a6 => parse_arm_5286(ins, pc),
        0x14a7 => parse_arm_5287(ins, pc),
        0x14a8 => parse_arm_5288(ins, pc),
        0x14a9 => parse_arm_5289(ins, pc),
        0x14aa => parse_arm_5290(ins, pc),
        0x14ab => parse_arm_5291(ins, pc),
        0x14ac => parse_arm_5292(ins, pc),
        0x14ad => parse_arm_5293(ins, pc),
        0x14ae => parse_arm_5294(ins, pc),
        0x14af => parse_arm_5295(ins, pc),
        0x14b0 => parse_arm_5296(ins, pc),
        0x14b1 => parse_arm_5297(ins, pc),
        0x14b2 => parse_arm_5298(ins, pc),
        0x14b3 => parse_arm_5299(ins, pc),
        0x14b4 => parse_arm_5300(ins, pc),
        0x14b5 => parse_arm_5301(ins, pc),
        0x14b6 => parse_arm_5302(ins, pc),
        0x14b7 => parse_arm_5303(ins, pc),
        0x14b8 => parse_arm_5304(ins, pc),
        0x14b9 => parse_arm_5305(ins, pc),
        0x14ba => parse_arm_5306(ins, pc),
        0x14bb => parse_arm_5307(ins, pc),
        0x14bc => parse_arm_5308(ins, pc),
        0x14bd => parse_arm_5309(ins, pc),
        0x14be => parse_arm_5310(ins, pc),
        0x14bf => parse_arm_5311(ins, pc),
        0x14c0 => parse_arm_5312(ins, pc),
        0x14c1 => parse_arm_5313(ins, pc),
        0x14c2 => parse_arm_5314(ins, pc),
        0x14c3 => parse_arm_5315(ins, pc),
        0x14c4 => parse_arm_5316(ins, pc),
        0x14c5 => parse_arm_5317(ins, pc),
        0x14c6 => parse_arm_5318(ins, pc),
        0x14c7 => parse_arm_5319(ins, pc),
        0x14c8 => parse_arm_5320(ins, pc),
        0x14c9 => parse_arm_5321(ins, pc),
        0x14ca => parse_arm_5322(ins, pc),
        0x14cb => parse_arm_5323(ins, pc),
        0x14cc => parse_arm_5324(ins, pc),
        0x14cd => parse_arm_5325(ins, pc),
        0x14ce => parse_arm_5326(ins, pc),
        0x14cf => parse_arm_5327(ins, pc),
        0x14d0 => parse_arm_5328(ins, pc),
        0x14d1 => parse_arm_5329(ins, pc),
        0x14d2 => parse_arm_5330(ins, pc),
        0x14d3 => parse_arm_5331(ins, pc),
        0x14d4 => parse_arm_5332(ins, pc),
        0x14d5 => parse_arm_5333(ins, pc),
        0x14d6 => parse_arm_5334(ins, pc),
        0x14d7 => parse_arm_5335(ins, pc),
        0x14d8 => parse_arm_5336(ins, pc),
        0x14d9 => parse_arm_5337(ins, pc),
        0x14da => parse_arm_5338(ins, pc),
        0x14db => parse_arm_5339(ins, pc),
        0x14dc => parse_arm_5340(ins, pc),
        0x14dd => parse_arm_5341(ins, pc),
        0x14de => parse_arm_5342(ins, pc),
        0x14df => parse_arm_5343(ins, pc),
        0x14e0 => parse_arm_5344(ins, pc),
        0x14e1 => parse_arm_5345(ins, pc),
        0x14e2 => parse_arm_5346(ins, pc),
        0x14e3 => parse_arm_5347(ins, pc),
        0x14e4 => parse_arm_5348(ins, pc),
        0x14e5 => parse_arm_5349(ins, pc),
        0x14e6 => parse_arm_5350(ins, pc),
        0x14e7 => parse_arm_5351(ins, pc),
        0x14e8 => parse_arm_5352(ins, pc),
        0x14e9 => parse_arm_5353(ins, pc),
        0x14ea => parse_arm_5354(ins, pc),
        0x14eb => parse_arm_5355(ins, pc),
        0x14ec => parse_arm_5356(ins, pc),
        0x14ed => parse_arm_5357(ins, pc),
        0x14ee => parse_arm_5358(ins, pc),
        0x14ef => parse_arm_5359(ins, pc),
        0x14f0 => parse_arm_5360(ins, pc),
        0x14f1 => parse_arm_5361(ins, pc),
        0x14f2 => parse_arm_5362(ins, pc),
        0x14f3 => parse_arm_5363(ins, pc),
        0x14f4 => parse_arm_5364(ins, pc),
        0x14f5 => parse_arm_5365(ins, pc),
        0x14f6 => parse_arm_5366(ins, pc),
        0x14f7 => parse_arm_5367(ins, pc),
        0x14f8 => parse_arm_5368(ins, pc),
        0x14f9 => parse_arm_5369(ins, pc),
        0x14fa => parse_arm_5370(ins, pc),
        0x14fb => parse_arm_5371(ins, pc),
        0x14fc => parse_arm_5372(ins, pc),
        0x14fd => parse_arm_5373(ins, pc),
        0x14fe => parse_arm_5374(ins, pc),
        0x14ff => parse_arm_5375(ins, pc),
        0x1500 => parse_arm_5376(ins, pc),
        0x1501 => parse_arm_5377(ins, pc),
        0x1502 => parse_arm_5378(ins, pc),
        0x1503 => parse_arm_5379(ins, pc),
        0x1504 => parse_arm_5380(ins, pc),
        0x1505 => parse_arm_5381(ins, pc),
        0x1506 => parse_arm_5382(ins, pc),
        0x1507 => parse_arm_5383(ins, pc),
        0x1508 => parse_arm_5384(ins, pc),
        0x1509 => parse_arm_5385(ins, pc),
        0x150a => parse_arm_5386(ins, pc),
        0x150b => parse_arm_5387(ins, pc),
        0x150c => parse_arm_5388(ins, pc),
        0x150d => parse_arm_5389(ins, pc),
        0x150e => parse_arm_5390(ins, pc),
        0x150f => parse_arm_5391(ins, pc),
        0x1510 => parse_arm_5392(ins, pc),
        0x1511 => parse_arm_5393(ins, pc),
        0x1512 => parse_arm_5394(ins, pc),
        0x1513 => parse_arm_5395(ins, pc),
        0x1514 => parse_arm_5396(ins, pc),
        0x1515 => parse_arm_5397(ins, pc),
        0x1516 => parse_arm_5398(ins, pc),
        0x1517 => parse_arm_5399(ins, pc),
        0x1518 => parse_arm_5400(ins, pc),
        0x1519 => parse_arm_5401(ins, pc),
        0x151a => parse_arm_5402(ins, pc),
        0x151b => parse_arm_5403(ins, pc),
        0x151c => parse_arm_5404(ins, pc),
        0x151d => parse_arm_5405(ins, pc),
        0x151e => parse_arm_5406(ins, pc),
        0x151f => parse_arm_5407(ins, pc),
        0x1520 => parse_arm_5408(ins, pc),
        0x1521 => parse_arm_5409(ins, pc),
        0x1522 => parse_arm_5410(ins, pc),
        0x1523 => parse_arm_5411(ins, pc),
        0x1524 => parse_arm_5412(ins, pc),
        0x1525 => parse_arm_5413(ins, pc),
        0x1526 => parse_arm_5414(ins, pc),
        0x1527 => parse_arm_5415(ins, pc),
        0x1528 => parse_arm_5416(ins, pc),
        0x1529 => parse_arm_5417(ins, pc),
        0x152a => parse_arm_5418(ins, pc),
        0x152b => parse_arm_5419(ins, pc),
        0x152c => parse_arm_5420(ins, pc),
        0x152d => parse_arm_5421(ins, pc),
        0x152e => parse_arm_5422(ins, pc),
        0x152f => parse_arm_5423(ins, pc),
        0x1530 => parse_arm_5424(ins, pc),
        0x1531 => parse_arm_5425(ins, pc),
        0x1532 => parse_arm_5426(ins, pc),
        0x1533 => parse_arm_5427(ins, pc),
        0x1534 => parse_arm_5428(ins, pc),
        0x1535 => parse_arm_5429(ins, pc),
        0x1536 => parse_arm_5430(ins, pc),
        0x1537 => parse_arm_5431(ins, pc),
        0x1538 => parse_arm_5432(ins, pc),
        0x1539 => parse_arm_5433(ins, pc),
        0x153a => parse_arm_5434(ins, pc),
        0x153b => parse_arm_5435(ins, pc),
        0x153c => parse_arm_5436(ins, pc),
        0x153d => parse_arm_5437(ins, pc),
        0x153e => parse_arm_5438(ins, pc),
        0x153f => parse_arm_5439(ins, pc),
        0x1540 => parse_arm_5440(ins, pc),
        0x1541 => parse_arm_5441(ins, pc),
        0x1542 => parse_arm_5442(ins, pc),
        0x1543 => parse_arm_5443(ins, pc),
        0x1544 => parse_arm_5444(ins, pc),
        0x1545 => parse_arm_5445(ins, pc),
        0x1546 => parse_arm_5446(ins, pc),
        0x1547 => parse_arm_5447(ins, pc),
        0x1548 => parse_arm_5448(ins, pc),
        0x1549 => parse_arm_5449(ins, pc),
        0x154a => parse_arm_5450(ins, pc),
        0x154b => parse_arm_5451(ins, pc),
        0x154c => parse_arm_5452(ins, pc),
        0x154d => parse_arm_5453(ins, pc),
        0x154e => parse_arm_5454(ins, pc),
        0x154f => parse_arm_5455(ins, pc),
        0x1550 => parse_arm_5456(ins, pc),
        0x1551 => parse_arm_5457(ins, pc),
        0x1552 => parse_arm_5458(ins, pc),
        0x1553 => parse_arm_5459(ins, pc),
        0x1554 => parse_arm_5460(ins, pc),
        0x1555 => parse_arm_5461(ins, pc),
        0x1556 => parse_arm_5462(ins, pc),
        0x1557 => parse_arm_5463(ins, pc),
        0x1558 => parse_arm_5464(ins, pc),
        0x1559 => parse_arm_5465(ins, pc),
        0x155a => parse_arm_5466(ins, pc),
        0x155b => parse_arm_5467(ins, pc),
        0x155c => parse_arm_5468(ins, pc),
        0x155d => parse_arm_5469(ins, pc),
        0x155e => parse_arm_5470(ins, pc),
        0x155f => parse_arm_5471(ins, pc),
        0x1560 => parse_arm_5472(ins, pc),
        0x1561 => parse_arm_5473(ins, pc),
        0x1562 => parse_arm_5474(ins, pc),
        0x1563 => parse_arm_5475(ins, pc),
        0x1564 => parse_arm_5476(ins, pc),
        0x1565 => parse_arm_5477(ins, pc),
        0x1566 => parse_arm_5478(ins, pc),
        0x1567 => parse_arm_5479(ins, pc),
        0x1568 => parse_arm_5480(ins, pc),
        0x1569 => parse_arm_5481(ins, pc),
        0x156a => parse_arm_5482(ins, pc),
        0x156b => parse_arm_5483(ins, pc),
        0x156c => parse_arm_5484(ins, pc),
        0x156d => parse_arm_5485(ins, pc),
        0x156e => parse_arm_5486(ins, pc),
        0x156f => parse_arm_5487(ins, pc),
        0x1570 => parse_arm_5488(ins, pc),
        0x1571 => parse_arm_5489(ins, pc),
        0x1572 => parse_arm_5490(ins, pc),
        0x1573 => parse_arm_5491(ins, pc),
        0x1574 => parse_arm_5492(ins, pc),
        0x1575 => parse_arm_5493(ins, pc),
        0x1576 => parse_arm_5494(ins, pc),
        0x1577 => parse_arm_5495(ins, pc),
        0x1578 => parse_arm_5496(ins, pc),
        0x1579 => parse_arm_5497(ins, pc),
        0x157a => parse_arm_5498(ins, pc),
        0x157b => parse_arm_5499(ins, pc),
        0x157c => parse_arm_5500(ins, pc),
        0x157d => parse_arm_5501(ins, pc),
        0x157e => parse_arm_5502(ins, pc),
        0x157f => parse_arm_5503(ins, pc),
        0x1580 => parse_arm_5504(ins, pc),
        0x1581 => parse_arm_5505(ins, pc),
        0x1582 => parse_arm_5506(ins, pc),
        0x1583 => parse_arm_5507(ins, pc),
        0x1584 => parse_arm_5508(ins, pc),
        0x1585 => parse_arm_5509(ins, pc),
        0x1586 => parse_arm_5510(ins, pc),
        0x1587 => parse_arm_5511(ins, pc),
        0x1588 => parse_arm_5512(ins, pc),
        0x1589 => parse_arm_5513(ins, pc),
        0x158a => parse_arm_5514(ins, pc),
        0x158b => parse_arm_5515(ins, pc),
        0x158c => parse_arm_5516(ins, pc),
        0x158d => parse_arm_5517(ins, pc),
        0x158e => parse_arm_5518(ins, pc),
        0x158f => parse_arm_5519(ins, pc),
        0x1590 => parse_arm_5520(ins, pc),
        0x1591 => parse_arm_5521(ins, pc),
        0x1592 => parse_arm_5522(ins, pc),
        0x1593 => parse_arm_5523(ins, pc),
        0x1594 => parse_arm_5524(ins, pc),
        0x1595 => parse_arm_5525(ins, pc),
        0x1596 => parse_arm_5526(ins, pc),
        0x1597 => parse_arm_5527(ins, pc),
        0x1598 => parse_arm_5528(ins, pc),
        0x1599 => parse_arm_5529(ins, pc),
        0x159a => parse_arm_5530(ins, pc),
        0x159b => parse_arm_5531(ins, pc),
        0x159c => parse_arm_5532(ins, pc),
        0x159d => parse_arm_5533(ins, pc),
        0x159e => parse_arm_5534(ins, pc),
        0x159f => parse_arm_5535(ins, pc),
        0x15a0 => parse_arm_5536(ins, pc),
        0x15a1 => parse_arm_5537(ins, pc),
        0x15a2 => parse_arm_5538(ins, pc),
        0x15a3 => parse_arm_5539(ins, pc),
        0x15a4 => parse_arm_5540(ins, pc),
        0x15a5 => parse_arm_5541(ins, pc),
        0x15a6 => parse_arm_5542(ins, pc),
        0x15a7 => parse_arm_5543(ins, pc),
        0x15a8 => parse_arm_5544(ins, pc),
        0x15a9 => parse_arm_5545(ins, pc),
        0x15aa => parse_arm_5546(ins, pc),
        0x15ab => parse_arm_5547(ins, pc),
        0x15ac => parse_arm_5548(ins, pc),
        0x15ad => parse_arm_5549(ins, pc),
        0x15ae => parse_arm_5550(ins, pc),
        0x15af => parse_arm_5551(ins, pc),
        0x15b0 => parse_arm_5552(ins, pc),
        0x15b1 => parse_arm_5553(ins, pc),
        0x15b2 => parse_arm_5554(ins, pc),
        0x15b3 => parse_arm_5555(ins, pc),
        0x15b4 => parse_arm_5556(ins, pc),
        0x15b5 => parse_arm_5557(ins, pc),
        0x15b6 => parse_arm_5558(ins, pc),
        0x15b7 => parse_arm_5559(ins, pc),
        0x15b8 => parse_arm_5560(ins, pc),
        0x15b9 => parse_arm_5561(ins, pc),
        0x15ba => parse_arm_5562(ins, pc),
        0x15bb => parse_arm_5563(ins, pc),
        0x15bc => parse_arm_5564(ins, pc),
        0x15bd => parse_arm_5565(ins, pc),
        0x15be => parse_arm_5566(ins, pc),
        0x15bf => parse_arm_5567(ins, pc),
        0x15c0 => parse_arm_5568(ins, pc),
        0x15c1 => parse_arm_5569(ins, pc),
        0x15c2 => parse_arm_5570(ins, pc),
        0x15c3 => parse_arm_5571(ins, pc),
        0x15c4 => parse_arm_5572(ins, pc),
        0x15c5 => parse_arm_5573(ins, pc),
        0x15c6 => parse_arm_5574(ins, pc),
        0x15c7 => parse_arm_5575(ins, pc),
        0x15c8 => parse_arm_5576(ins, pc),
        0x15c9 => parse_arm_5577(ins, pc),
        0x15ca => parse_arm_5578(ins, pc),
        0x15cb => parse_arm_5579(ins, pc),
        0x15cc => parse_arm_5580(ins, pc),
        0x15cd => parse_arm_5581(ins, pc),
        0x15ce => parse_arm_5582(ins, pc),
        0x15cf => parse_arm_5583(ins, pc),
        0x15d0 => parse_arm_5584(ins, pc),
        0x15d1 => parse_arm_5585(ins, pc),
        0x15d2 => parse_arm_5586(ins, pc),
        0x15d3 => parse_arm_5587(ins, pc),
        0x15d4 => parse_arm_5588(ins, pc),
        0x15d5 => parse_arm_5589(ins, pc),
        0x15d6 => parse_arm_5590(ins, pc),
        0x15d7 => parse_arm_5591(ins, pc),
        0x15d8 => parse_arm_5592(ins, pc),
        0x15d9 => parse_arm_5593(ins, pc),
        0x15da => parse_arm_5594(ins, pc),
        0x15db => parse_arm_5595(ins, pc),
        0x15dc => parse_arm_5596(ins, pc),
        0x15dd => parse_arm_5597(ins, pc),
        0x15de => parse_arm_5598(ins, pc),
        0x15df => parse_arm_5599(ins, pc),
        0x15e0 => parse_arm_5600(ins, pc),
        0x15e1 => parse_arm_5601(ins, pc),
        0x15e2 => parse_arm_5602(ins, pc),
        0x15e3 => parse_arm_5603(ins, pc),
        0x15e4 => parse_arm_5604(ins, pc),
        0x15e5 => parse_arm_5605(ins, pc),
        0x15e6 => parse_arm_5606(ins, pc),
        0x15e7 => parse_arm_5607(ins, pc),
        0x15e8 => parse_arm_5608(ins, pc),
        0x15e9 => parse_arm_5609(ins, pc),
        0x15ea => parse_arm_5610(ins, pc),
        0x15eb => parse_arm_5611(ins, pc),
        0x15ec => parse_arm_5612(ins, pc),
        0x15ed => parse_arm_5613(ins, pc),
        0x15ee => parse_arm_5614(ins, pc),
        0x15ef => parse_arm_5615(ins, pc),
        0x15f0 => parse_arm_5616(ins, pc),
        0x15f1 => parse_arm_5617(ins, pc),
        0x15f2 => parse_arm_5618(ins, pc),
        0x15f3 => parse_arm_5619(ins, pc),
        0x15f4 => parse_arm_5620(ins, pc),
        0x15f5 => parse_arm_5621(ins, pc),
        0x15f6 => parse_arm_5622(ins, pc),
        0x15f7 => parse_arm_5623(ins, pc),
        0x15f8 => parse_arm_5624(ins, pc),
        0x15f9 => parse_arm_5625(ins, pc),
        0x15fa => parse_arm_5626(ins, pc),
        0x15fb => parse_arm_5627(ins, pc),
        0x15fc => parse_arm_5628(ins, pc),
        0x15fd => parse_arm_5629(ins, pc),
        0x15fe => parse_arm_5630(ins, pc),
        0x15ff => parse_arm_5631(ins, pc),
        0x1600 => parse_arm_5632(ins, pc),
        0x1601 => parse_arm_5633(ins, pc),
        0x1602 => parse_arm_5634(ins, pc),
        0x1603 => parse_arm_5635(ins, pc),
        0x1604 => parse_arm_5636(ins, pc),
        0x1605 => parse_arm_5637(ins, pc),
        0x1606 => parse_arm_5638(ins, pc),
        0x1607 => parse_arm_5639(ins, pc),
        0x1608 => parse_arm_5640(ins, pc),
        0x1609 => parse_arm_5641(ins, pc),
        0x160a => parse_arm_5642(ins, pc),
        0x160b => parse_arm_5643(ins, pc),
        0x160c => parse_arm_5644(ins, pc),
        0x160d => parse_arm_5645(ins, pc),
        0x160e => parse_arm_5646(ins, pc),
        0x160f => parse_arm_5647(ins, pc),
        0x1610 => parse_arm_5648(ins, pc),
        0x1611 => parse_arm_5649(ins, pc),
        0x1612 => parse_arm_5650(ins, pc),
        0x1613 => parse_arm_5651(ins, pc),
        0x1614 => parse_arm_5652(ins, pc),
        0x1615 => parse_arm_5653(ins, pc),
        0x1616 => parse_arm_5654(ins, pc),
        0x1617 => parse_arm_5655(ins, pc),
        0x1618 => parse_arm_5656(ins, pc),
        0x1619 => parse_arm_5657(ins, pc),
        0x161a => parse_arm_5658(ins, pc),
        0x161b => parse_arm_5659(ins, pc),
        0x161c => parse_arm_5660(ins, pc),
        0x161d => parse_arm_5661(ins, pc),
        0x161e => parse_arm_5662(ins, pc),
        0x161f => parse_arm_5663(ins, pc),
        0x1620 => parse_arm_5664(ins, pc),
        0x1621 => parse_arm_5665(ins, pc),
        0x1622 => parse_arm_5666(ins, pc),
        0x1623 => parse_arm_5667(ins, pc),
        0x1624 => parse_arm_5668(ins, pc),
        0x1625 => parse_arm_5669(ins, pc),
        0x1626 => parse_arm_5670(ins, pc),
        0x1627 => parse_arm_5671(ins, pc),
        0x1628 => parse_arm_5672(ins, pc),
        0x1629 => parse_arm_5673(ins, pc),
        0x162a => parse_arm_5674(ins, pc),
        0x162b => parse_arm_5675(ins, pc),
        0x162c => parse_arm_5676(ins, pc),
        0x162d => parse_arm_5677(ins, pc),
        0x162e => parse_arm_5678(ins, pc),
        0x162f => parse_arm_5679(ins, pc),
        0x1630 => parse_arm_5680(ins, pc),
        0x1631 => parse_arm_5681(ins, pc),
        0x1632 => parse_arm_5682(ins, pc),
        0x1633 => parse_arm_5683(ins, pc),
        0x1634 => parse_arm_5684(ins, pc),
        0x1635 => parse_arm_5685(ins, pc),
        0x1636 => parse_arm_5686(ins, pc),
        0x1637 => parse_arm_5687(ins, pc),
        0x1638 => parse_arm_5688(ins, pc),
        0x1639 => parse_arm_5689(ins, pc),
        0x163a => parse_arm_5690(ins, pc),
        0x163b => parse_arm_5691(ins, pc),
        0x163c => parse_arm_5692(ins, pc),
        0x163d => parse_arm_5693(ins, pc),
        0x163e => parse_arm_5694(ins, pc),
        0x163f => parse_arm_5695(ins, pc),
        0x1640 => parse_arm_5696(ins, pc),
        0x1641 => parse_arm_5697(ins, pc),
        0x1642 => parse_arm_5698(ins, pc),
        0x1643 => parse_arm_5699(ins, pc),
        0x1644 => parse_arm_5700(ins, pc),
        0x1645 => parse_arm_5701(ins, pc),
        0x1646 => parse_arm_5702(ins, pc),
        0x1647 => parse_arm_5703(ins, pc),
        0x1648 => parse_arm_5704(ins, pc),
        0x1649 => parse_arm_5705(ins, pc),
        0x164a => parse_arm_5706(ins, pc),
        0x164b => parse_arm_5707(ins, pc),
        0x164c => parse_arm_5708(ins, pc),
        0x164d => parse_arm_5709(ins, pc),
        0x164e => parse_arm_5710(ins, pc),
        0x164f => parse_arm_5711(ins, pc),
        0x1650 => parse_arm_5712(ins, pc),
        0x1651 => parse_arm_5713(ins, pc),
        0x1652 => parse_arm_5714(ins, pc),
        0x1653 => parse_arm_5715(ins, pc),
        0x1654 => parse_arm_5716(ins, pc),
        0x1655 => parse_arm_5717(ins, pc),
        0x1656 => parse_arm_5718(ins, pc),
        0x1657 => parse_arm_5719(ins, pc),
        0x1658 => parse_arm_5720(ins, pc),
        0x1659 => parse_arm_5721(ins, pc),
        0x165a => parse_arm_5722(ins, pc),
        0x165b => parse_arm_5723(ins, pc),
        0x165c => parse_arm_5724(ins, pc),
        0x165d => parse_arm_5725(ins, pc),
        0x165e => parse_arm_5726(ins, pc),
        0x165f => parse_arm_5727(ins, pc),
        0x1660 => parse_arm_5728(ins, pc),
        0x1661 => parse_arm_5729(ins, pc),
        0x1662 => parse_arm_5730(ins, pc),
        0x1663 => parse_arm_5731(ins, pc),
        0x1664 => parse_arm_5732(ins, pc),
        0x1665 => parse_arm_5733(ins, pc),
        0x1666 => parse_arm_5734(ins, pc),
        0x1667 => parse_arm_5735(ins, pc),
        0x1668 => parse_arm_5736(ins, pc),
        0x1669 => parse_arm_5737(ins, pc),
        0x166a => parse_arm_5738(ins, pc),
        0x166b => parse_arm_5739(ins, pc),
        0x166c => parse_arm_5740(ins, pc),
        0x166d => parse_arm_5741(ins, pc),
        0x166e => parse_arm_5742(ins, pc),
        0x166f => parse_arm_5743(ins, pc),
        0x1670 => parse_arm_5744(ins, pc),
        0x1671 => parse_arm_5745(ins, pc),
        0x1672 => parse_arm_5746(ins, pc),
        0x1673 => parse_arm_5747(ins, pc),
        0x1674 => parse_arm_5748(ins, pc),
        0x1675 => parse_arm_5749(ins, pc),
        0x1676 => parse_arm_5750(ins, pc),
        0x1677 => parse_arm_5751(ins, pc),
        0x1678 => parse_arm_5752(ins, pc),
        0x1679 => parse_arm_5753(ins, pc),
        0x167a => parse_arm_5754(ins, pc),
        0x167b => parse_arm_5755(ins, pc),
        0x167c => parse_arm_5756(ins, pc),
        0x167d => parse_arm_5757(ins, pc),
        0x167e => parse_arm_5758(ins, pc),
        0x167f => parse_arm_5759(ins, pc),
        0x1680 => parse_arm_5760(ins, pc),
        0x1681 => parse_arm_5761(ins, pc),
        0x1682 => parse_arm_5762(ins, pc),
        0x1683 => parse_arm_5763(ins, pc),
        0x1684 => parse_arm_5764(ins, pc),
        0x1685 => parse_arm_5765(ins, pc),
        0x1686 => parse_arm_5766(ins, pc),
        0x1687 => parse_arm_5767(ins, pc),
        0x1688 => parse_arm_5768(ins, pc),
        0x1689 => parse_arm_5769(ins, pc),
        0x168a => parse_arm_5770(ins, pc),
        0x168b => parse_arm_5771(ins, pc),
        0x168c => parse_arm_5772(ins, pc),
        0x168d => parse_arm_5773(ins, pc),
        0x168e => parse_arm_5774(ins, pc),
        0x168f => parse_arm_5775(ins, pc),
        0x1690 => parse_arm_5776(ins, pc),
        0x1691 => parse_arm_5777(ins, pc),
        0x1692 => parse_arm_5778(ins, pc),
        0x1693 => parse_arm_5779(ins, pc),
        0x1694 => parse_arm_5780(ins, pc),
        0x1695 => parse_arm_5781(ins, pc),
        0x1696 => parse_arm_5782(ins, pc),
        0x1697 => parse_arm_5783(ins, pc),
        0x1698 => parse_arm_5784(ins, pc),
        0x1699 => parse_arm_5785(ins, pc),
        0x169a => parse_arm_5786(ins, pc),
        0x169b => parse_arm_5787(ins, pc),
        0x169c => parse_arm_5788(ins, pc),
        0x169d => parse_arm_5789(ins, pc),
        0x169e => parse_arm_5790(ins, pc),
        0x169f => parse_arm_5791(ins, pc),
        0x16a0 => parse_arm_5792(ins, pc),
        0x16a1 => parse_arm_5793(ins, pc),
        0x16a2 => parse_arm_5794(ins, pc),
        0x16a3 => parse_arm_5795(ins, pc),
        0x16a4 => parse_arm_5796(ins, pc),
        0x16a5 => parse_arm_5797(ins, pc),
        0x16a6 => parse_arm_5798(ins, pc),
        0x16a7 => parse_arm_5799(ins, pc),
        0x16a8 => parse_arm_5800(ins, pc),
        0x16a9 => parse_arm_5801(ins, pc),
        0x16aa => parse_arm_5802(ins, pc),
        0x16ab => parse_arm_5803(ins, pc),
        0x16ac => parse_arm_5804(ins, pc),
        0x16ad => parse_arm_5805(ins, pc),
        0x16ae => parse_arm_5806(ins, pc),
        0x16af => parse_arm_5807(ins, pc),
        0x16b0 => parse_arm_5808(ins, pc),
        0x16b1 => parse_arm_5809(ins, pc),
        0x16b2 => parse_arm_5810(ins, pc),
        0x16b3 => parse_arm_5811(ins, pc),
        0x16b4 => parse_arm_5812(ins, pc),
        0x16b5 => parse_arm_5813(ins, pc),
        0x16b6 => parse_arm_5814(ins, pc),
        0x16b7 => parse_arm_5815(ins, pc),
        0x16b8 => parse_arm_5816(ins, pc),
        0x16b9 => parse_arm_5817(ins, pc),
        0x16ba => parse_arm_5818(ins, pc),
        0x16bb => parse_arm_5819(ins, pc),
        0x16bc => parse_arm_5820(ins, pc),
        0x16bd => parse_arm_5821(ins, pc),
        0x16be => parse_arm_5822(ins, pc),
        0x16bf => parse_arm_5823(ins, pc),
        0x16c0 => parse_arm_5824(ins, pc),
        0x16c1 => parse_arm_5825(ins, pc),
        0x16c2 => parse_arm_5826(ins, pc),
        0x16c3 => parse_arm_5827(ins, pc),
        0x16c4 => parse_arm_5828(ins, pc),
        0x16c5 => parse_arm_5829(ins, pc),
        0x16c6 => parse_arm_5830(ins, pc),
        0x16c7 => parse_arm_5831(ins, pc),
        0x16c8 => parse_arm_5832(ins, pc),
        0x16c9 => parse_arm_5833(ins, pc),
        0x16ca => parse_arm_5834(ins, pc),
        0x16cb => parse_arm_5835(ins, pc),
        0x16cc => parse_arm_5836(ins, pc),
        0x16cd => parse_arm_5837(ins, pc),
        0x16ce => parse_arm_5838(ins, pc),
        0x16cf => parse_arm_5839(ins, pc),
        0x16d0 => parse_arm_5840(ins, pc),
        0x16d1 => parse_arm_5841(ins, pc),
        0x16d2 => parse_arm_5842(ins, pc),
        0x16d3 => parse_arm_5843(ins, pc),
        0x16d4 => parse_arm_5844(ins, pc),
        0x16d5 => parse_arm_5845(ins, pc),
        0x16d6 => parse_arm_5846(ins, pc),
        0x16d7 => parse_arm_5847(ins, pc),
        0x16d8 => parse_arm_5848(ins, pc),
        0x16d9 => parse_arm_5849(ins, pc),
        0x16da => parse_arm_5850(ins, pc),
        0x16db => parse_arm_5851(ins, pc),
        0x16dc => parse_arm_5852(ins, pc),
        0x16dd => parse_arm_5853(ins, pc),
        0x16de => parse_arm_5854(ins, pc),
        0x16df => parse_arm_5855(ins, pc),
        0x16e0 => parse_arm_5856(ins, pc),
        0x16e1 => parse_arm_5857(ins, pc),
        0x16e2 => parse_arm_5858(ins, pc),
        0x16e3 => parse_arm_5859(ins, pc),
        0x16e4 => parse_arm_5860(ins, pc),
        0x16e5 => parse_arm_5861(ins, pc),
        0x16e6 => parse_arm_5862(ins, pc),
        0x16e7 => parse_arm_5863(ins, pc),
        0x16e8 => parse_arm_5864(ins, pc),
        0x16e9 => parse_arm_5865(ins, pc),
        0x16ea => parse_arm_5866(ins, pc),
        0x16eb => parse_arm_5867(ins, pc),
        0x16ec => parse_arm_5868(ins, pc),
        0x16ed => parse_arm_5869(ins, pc),
        0x16ee => parse_arm_5870(ins, pc),
        0x16ef => parse_arm_5871(ins, pc),
        0x16f0 => parse_arm_5872(ins, pc),
        0x16f1 => parse_arm_5873(ins, pc),
        0x16f2 => parse_arm_5874(ins, pc),
        0x16f3 => parse_arm_5875(ins, pc),
        0x16f4 => parse_arm_5876(ins, pc),
        0x16f5 => parse_arm_5877(ins, pc),
        0x16f6 => parse_arm_5878(ins, pc),
        0x16f7 => parse_arm_5879(ins, pc),
        0x16f8 => parse_arm_5880(ins, pc),
        0x16f9 => parse_arm_5881(ins, pc),
        0x16fa => parse_arm_5882(ins, pc),
        0x16fb => parse_arm_5883(ins, pc),
        0x16fc => parse_arm_5884(ins, pc),
        0x16fd => parse_arm_5885(ins, pc),
        0x16fe => parse_arm_5886(ins, pc),
        0x16ff => parse_arm_5887(ins, pc),
        0x1700 => parse_arm_5888(ins, pc),
        0x1701 => parse_arm_5889(ins, pc),
        0x1702 => parse_arm_5890(ins, pc),
        0x1703 => parse_arm_5891(ins, pc),
        0x1704 => parse_arm_5892(ins, pc),
        0x1705 => parse_arm_5893(ins, pc),
        0x1706 => parse_arm_5894(ins, pc),
        0x1707 => parse_arm_5895(ins, pc),
        0x1708 => parse_arm_5896(ins, pc),
        0x1709 => parse_arm_5897(ins, pc),
        0x170a => parse_arm_5898(ins, pc),
        0x170b => parse_arm_5899(ins, pc),
        0x170c => parse_arm_5900(ins, pc),
        0x170d => parse_arm_5901(ins, pc),
        0x170e => parse_arm_5902(ins, pc),
        0x170f => parse_arm_5903(ins, pc),
        0x1710 => parse_arm_5904(ins, pc),
        0x1711 => parse_arm_5905(ins, pc),
        0x1712 => parse_arm_5906(ins, pc),
        0x1713 => parse_arm_5907(ins, pc),
        0x1714 => parse_arm_5908(ins, pc),
        0x1715 => parse_arm_5909(ins, pc),
        0x1716 => parse_arm_5910(ins, pc),
        0x1717 => parse_arm_5911(ins, pc),
        0x1718 => parse_arm_5912(ins, pc),
        0x1719 => parse_arm_5913(ins, pc),
        0x171a => parse_arm_5914(ins, pc),
        0x171b => parse_arm_5915(ins, pc),
        0x171c => parse_arm_5916(ins, pc),
        0x171d => parse_arm_5917(ins, pc),
        0x171e => parse_arm_5918(ins, pc),
        0x171f => parse_arm_5919(ins, pc),
        0x1720 => parse_arm_5920(ins, pc),
        0x1721 => parse_arm_5921(ins, pc),
        0x1722 => parse_arm_5922(ins, pc),
        0x1723 => parse_arm_5923(ins, pc),
        0x1724 => parse_arm_5924(ins, pc),
        0x1725 => parse_arm_5925(ins, pc),
        0x1726 => parse_arm_5926(ins, pc),
        0x1727 => parse_arm_5927(ins, pc),
        0x1728 => parse_arm_5928(ins, pc),
        0x1729 => parse_arm_5929(ins, pc),
        0x172a => parse_arm_5930(ins, pc),
        0x172b => parse_arm_5931(ins, pc),
        0x172c => parse_arm_5932(ins, pc),
        0x172d => parse_arm_5933(ins, pc),
        0x172e => parse_arm_5934(ins, pc),
        0x172f => parse_arm_5935(ins, pc),
        0x1730 => parse_arm_5936(ins, pc),
        0x1731 => parse_arm_5937(ins, pc),
        0x1732 => parse_arm_5938(ins, pc),
        0x1733 => parse_arm_5939(ins, pc),
        0x1734 => parse_arm_5940(ins, pc),
        0x1735 => parse_arm_5941(ins, pc),
        0x1736 => parse_arm_5942(ins, pc),
        0x1737 => parse_arm_5943(ins, pc),
        0x1738 => parse_arm_5944(ins, pc),
        0x1739 => parse_arm_5945(ins, pc),
        0x173a => parse_arm_5946(ins, pc),
        0x173b => parse_arm_5947(ins, pc),
        0x173c => parse_arm_5948(ins, pc),
        0x173d => parse_arm_5949(ins, pc),
        0x173e => parse_arm_5950(ins, pc),
        0x173f => parse_arm_5951(ins, pc),
        0x1740 => parse_arm_5952(ins, pc),
        0x1741 => parse_arm_5953(ins, pc),
        0x1742 => parse_arm_5954(ins, pc),
        0x1743 => parse_arm_5955(ins, pc),
        0x1744 => parse_arm_5956(ins, pc),
        0x1745 => parse_arm_5957(ins, pc),
        0x1746 => parse_arm_5958(ins, pc),
        0x1747 => parse_arm_5959(ins, pc),
        0x1748 => parse_arm_5960(ins, pc),
        0x1749 => parse_arm_5961(ins, pc),
        0x174a => parse_arm_5962(ins, pc),
        0x174b => parse_arm_5963(ins, pc),
        0x174c => parse_arm_5964(ins, pc),
        0x174d => parse_arm_5965(ins, pc),
        0x174e => parse_arm_5966(ins, pc),
        0x174f => parse_arm_5967(ins, pc),
        0x1750 => parse_arm_5968(ins, pc),
        0x1751 => parse_arm_5969(ins, pc),
        0x1752 => parse_arm_5970(ins, pc),
        0x1753 => parse_arm_5971(ins, pc),
        0x1754 => parse_arm_5972(ins, pc),
        0x1755 => parse_arm_5973(ins, pc),
        0x1756 => parse_arm_5974(ins, pc),
        0x1757 => parse_arm_5975(ins, pc),
        0x1758 => parse_arm_5976(ins, pc),
        0x1759 => parse_arm_5977(ins, pc),
        0x175a => parse_arm_5978(ins, pc),
        0x175b => parse_arm_5979(ins, pc),
        0x175c => parse_arm_5980(ins, pc),
        0x175d => parse_arm_5981(ins, pc),
        0x175e => parse_arm_5982(ins, pc),
        0x175f => parse_arm_5983(ins, pc),
        0x1760 => parse_arm_5984(ins, pc),
        0x1761 => parse_arm_5985(ins, pc),
        0x1762 => parse_arm_5986(ins, pc),
        0x1763 => parse_arm_5987(ins, pc),
        0x1764 => parse_arm_5988(ins, pc),
        0x1765 => parse_arm_5989(ins, pc),
        0x1766 => parse_arm_5990(ins, pc),
        0x1767 => parse_arm_5991(ins, pc),
        0x1768 => parse_arm_5992(ins, pc),
        0x1769 => parse_arm_5993(ins, pc),
        0x176a => parse_arm_5994(ins, pc),
        0x176b => parse_arm_5995(ins, pc),
        0x176c => parse_arm_5996(ins, pc),
        0x176d => parse_arm_5997(ins, pc),
        0x176e => parse_arm_5998(ins, pc),
        0x176f => parse_arm_5999(ins, pc),
        0x1770 => parse_arm_6000(ins, pc),
        0x1771 => parse_arm_6001(ins, pc),
        0x1772 => parse_arm_6002(ins, pc),
        0x1773 => parse_arm_6003(ins, pc),
        0x1774 => parse_arm_6004(ins, pc),
        0x1775 => parse_arm_6005(ins, pc),
        0x1776 => parse_arm_6006(ins, pc),
        0x1777 => parse_arm_6007(ins, pc),
        0x1778 => parse_arm_6008(ins, pc),
        0x1779 => parse_arm_6009(ins, pc),
        0x177a => parse_arm_6010(ins, pc),
        0x177b => parse_arm_6011(ins, pc),
        0x177c => parse_arm_6012(ins, pc),
        0x177d => parse_arm_6013(ins, pc),
        0x177e => parse_arm_6014(ins, pc),
        0x177f => parse_arm_6015(ins, pc),
        0x1780 => parse_arm_6016(ins, pc),
        0x1781 => parse_arm_6017(ins, pc),
        0x1782 => parse_arm_6018(ins, pc),
        0x1783 => parse_arm_6019(ins, pc),
        0x1784 => parse_arm_6020(ins, pc),
        0x1785 => parse_arm_6021(ins, pc),
        0x1786 => parse_arm_6022(ins, pc),
        0x1787 => parse_arm_6023(ins, pc),
        0x1788 => parse_arm_6024(ins, pc),
        0x1789 => parse_arm_6025(ins, pc),
        0x178a => parse_arm_6026(ins, pc),
        0x178b => parse_arm_6027(ins, pc),
        0x178c => parse_arm_6028(ins, pc),
        0x178d => parse_arm_6029(ins, pc),
        0x178e => parse_arm_6030(ins, pc),
        0x178f => parse_arm_6031(ins, pc),
        0x1790 => parse_arm_6032(ins, pc),
        0x1791 => parse_arm_6033(ins, pc),
        0x1792 => parse_arm_6034(ins, pc),
        0x1793 => parse_arm_6035(ins, pc),
        0x1794 => parse_arm_6036(ins, pc),
        0x1795 => parse_arm_6037(ins, pc),
        0x1796 => parse_arm_6038(ins, pc),
        0x1797 => parse_arm_6039(ins, pc),
        0x1798 => parse_arm_6040(ins, pc),
        0x1799 => parse_arm_6041(ins, pc),
        0x179a => parse_arm_6042(ins, pc),
        0x179b => parse_arm_6043(ins, pc),
        0x179c => parse_arm_6044(ins, pc),
        0x179d => parse_arm_6045(ins, pc),
        0x179e => parse_arm_6046(ins, pc),
        0x179f => parse_arm_6047(ins, pc),
        0x17a0 => parse_arm_6048(ins, pc),
        0x17a1 => parse_arm_6049(ins, pc),
        0x17a2 => parse_arm_6050(ins, pc),
        0x17a3 => parse_arm_6051(ins, pc),
        0x17a4 => parse_arm_6052(ins, pc),
        0x17a5 => parse_arm_6053(ins, pc),
        0x17a6 => parse_arm_6054(ins, pc),
        0x17a7 => parse_arm_6055(ins, pc),
        0x17a8 => parse_arm_6056(ins, pc),
        0x17a9 => parse_arm_6057(ins, pc),
        0x17aa => parse_arm_6058(ins, pc),
        0x17ab => parse_arm_6059(ins, pc),
        0x17ac => parse_arm_6060(ins, pc),
        0x17ad => parse_arm_6061(ins, pc),
        0x17ae => parse_arm_6062(ins, pc),
        0x17af => parse_arm_6063(ins, pc),
        0x17b0 => parse_arm_6064(ins, pc),
        0x17b1 => parse_arm_6065(ins, pc),
        0x17b2 => parse_arm_6066(ins, pc),
        0x17b3 => parse_arm_6067(ins, pc),
        0x17b4 => parse_arm_6068(ins, pc),
        0x17b5 => parse_arm_6069(ins, pc),
        0x17b6 => parse_arm_6070(ins, pc),
        0x17b7 => parse_arm_6071(ins, pc),
        0x17b8 => parse_arm_6072(ins, pc),
        0x17b9 => parse_arm_6073(ins, pc),
        0x17ba => parse_arm_6074(ins, pc),
        0x17bb => parse_arm_6075(ins, pc),
        0x17bc => parse_arm_6076(ins, pc),
        0x17bd => parse_arm_6077(ins, pc),
        0x17be => parse_arm_6078(ins, pc),
        0x17bf => parse_arm_6079(ins, pc),
        0x17c0 => parse_arm_6080(ins, pc),
        0x17c1 => parse_arm_6081(ins, pc),
        0x17c2 => parse_arm_6082(ins, pc),
        0x17c3 => parse_arm_6083(ins, pc),
        0x17c4 => parse_arm_6084(ins, pc),
        0x17c5 => parse_arm_6085(ins, pc),
        0x17c6 => parse_arm_6086(ins, pc),
        0x17c7 => parse_arm_6087(ins, pc),
        0x17c8 => parse_arm_6088(ins, pc),
        0x17c9 => parse_arm_6089(ins, pc),
        0x17ca => parse_arm_6090(ins, pc),
        0x17cb => parse_arm_6091(ins, pc),
        0x17cc => parse_arm_6092(ins, pc),
        0x17cd => parse_arm_6093(ins, pc),
        0x17ce => parse_arm_6094(ins, pc),
        0x17cf => parse_arm_6095(ins, pc),
        0x17d0 => parse_arm_6096(ins, pc),
        0x17d1 => parse_arm_6097(ins, pc),
        0x17d2 => parse_arm_6098(ins, pc),
        0x17d3 => parse_arm_6099(ins, pc),
        0x17d4 => parse_arm_6100(ins, pc),
        0x17d5 => parse_arm_6101(ins, pc),
        0x17d6 => parse_arm_6102(ins, pc),
        0x17d7 => parse_arm_6103(ins, pc),
        0x17d8 => parse_arm_6104(ins, pc),
        0x17d9 => parse_arm_6105(ins, pc),
        0x17da => parse_arm_6106(ins, pc),
        0x17db => parse_arm_6107(ins, pc),
        0x17dc => parse_arm_6108(ins, pc),
        0x17dd => parse_arm_6109(ins, pc),
        0x17de => parse_arm_6110(ins, pc),
        0x17df => parse_arm_6111(ins, pc),
        0x17e0 => parse_arm_6112(ins, pc),
        0x17e1 => parse_arm_6113(ins, pc),
        0x17e2 => parse_arm_6114(ins, pc),
        0x17e3 => parse_arm_6115(ins, pc),
        0x17e4 => parse_arm_6116(ins, pc),
        0x17e5 => parse_arm_6117(ins, pc),
        0x17e6 => parse_arm_6118(ins, pc),
        0x17e7 => parse_arm_6119(ins, pc),
        0x17e8 => parse_arm_6120(ins, pc),
        0x17e9 => parse_arm_6121(ins, pc),
        0x17ea => parse_arm_6122(ins, pc),
        0x17eb => parse_arm_6123(ins, pc),
        0x17ec => parse_arm_6124(ins, pc),
        0x17ed => parse_arm_6125(ins, pc),
        0x17ee => parse_arm_6126(ins, pc),
        0x17ef => parse_arm_6127(ins, pc),
        0x17f0 => parse_arm_6128(ins, pc),
        0x17f1 => parse_arm_6129(ins, pc),
        0x17f2 => parse_arm_6130(ins, pc),
        0x17f3 => parse_arm_6131(ins, pc),
        0x17f4 => parse_arm_6132(ins, pc),
        0x17f5 => parse_arm_6133(ins, pc),
        0x17f6 => parse_arm_6134(ins, pc),
        0x17f7 => parse_arm_6135(ins, pc),
        0x17f8 => parse_arm_6136(ins, pc),
        0x17f9 => parse_arm_6137(ins, pc),
        0x17fa => parse_arm_6138(ins, pc),
        0x17fb => parse_arm_6139(ins, pc),
        0x17fc => parse_arm_6140(ins, pc),
        0x17fd => parse_arm_6141(ins, pc),
        0x17fe => parse_arm_6142(ins, pc),
        0x17ff => parse_arm_6143(ins, pc),
        0x1800 => parse_arm_6144(ins, pc),
        0x1801 => parse_arm_6145(ins, pc),
        0x1802 => parse_arm_6146(ins, pc),
        0x1803 => parse_arm_6147(ins, pc),
        0x1804 => parse_arm_6148(ins, pc),
        0x1805 => parse_arm_6149(ins, pc),
        0x1806 => parse_arm_6150(ins, pc),
        0x1807 => parse_arm_6151(ins, pc),
        0x1808 => parse_arm_6152(ins, pc),
        0x1809 => parse_arm_6153(ins, pc),
        0x180a => parse_arm_6154(ins, pc),
        0x180b => parse_arm_6155(ins, pc),
        0x180c => parse_arm_6156(ins, pc),
        0x180d => parse_arm_6157(ins, pc),
        0x180e => parse_arm_6158(ins, pc),
        0x180f => parse_arm_6159(ins, pc),
        0x1810 => parse_arm_6160(ins, pc),
        0x1811 => parse_arm_6161(ins, pc),
        0x1812 => parse_arm_6162(ins, pc),
        0x1813 => parse_arm_6163(ins, pc),
        0x1814 => parse_arm_6164(ins, pc),
        0x1815 => parse_arm_6165(ins, pc),
        0x1816 => parse_arm_6166(ins, pc),
        0x1817 => parse_arm_6167(ins, pc),
        0x1818 => parse_arm_6168(ins, pc),
        0x1819 => parse_arm_6169(ins, pc),
        0x181a => parse_arm_6170(ins, pc),
        0x181b => parse_arm_6171(ins, pc),
        0x181c => parse_arm_6172(ins, pc),
        0x181d => parse_arm_6173(ins, pc),
        0x181e => parse_arm_6174(ins, pc),
        0x181f => parse_arm_6175(ins, pc),
        0x1820 => parse_arm_6176(ins, pc),
        0x1821 => parse_arm_6177(ins, pc),
        0x1822 => parse_arm_6178(ins, pc),
        0x1823 => parse_arm_6179(ins, pc),
        0x1824 => parse_arm_6180(ins, pc),
        0x1825 => parse_arm_6181(ins, pc),
        0x1826 => parse_arm_6182(ins, pc),
        0x1827 => parse_arm_6183(ins, pc),
        0x1828 => parse_arm_6184(ins, pc),
        0x1829 => parse_arm_6185(ins, pc),
        0x182a => parse_arm_6186(ins, pc),
        0x182b => parse_arm_6187(ins, pc),
        0x182c => parse_arm_6188(ins, pc),
        0x182d => parse_arm_6189(ins, pc),
        0x182e => parse_arm_6190(ins, pc),
        0x182f => parse_arm_6191(ins, pc),
        0x1830 => parse_arm_6192(ins, pc),
        0x1831 => parse_arm_6193(ins, pc),
        0x1832 => parse_arm_6194(ins, pc),
        0x1833 => parse_arm_6195(ins, pc),
        0x1834 => parse_arm_6196(ins, pc),
        0x1835 => parse_arm_6197(ins, pc),
        0x1836 => parse_arm_6198(ins, pc),
        0x1837 => parse_arm_6199(ins, pc),
        0x1838 => parse_arm_6200(ins, pc),
        0x1839 => parse_arm_6201(ins, pc),
        0x183a => parse_arm_6202(ins, pc),
        0x183b => parse_arm_6203(ins, pc),
        0x183c => parse_arm_6204(ins, pc),
        0x183d => parse_arm_6205(ins, pc),
        0x183e => parse_arm_6206(ins, pc),
        0x183f => parse_arm_6207(ins, pc),
        0x1840 => parse_arm_6208(ins, pc),
        0x1841 => parse_arm_6209(ins, pc),
        0x1842 => parse_arm_6210(ins, pc),
        0x1843 => parse_arm_6211(ins, pc),
        0x1844 => parse_arm_6212(ins, pc),
        0x1845 => parse_arm_6213(ins, pc),
        0x1846 => parse_arm_6214(ins, pc),
        0x1847 => parse_arm_6215(ins, pc),
        0x1848 => parse_arm_6216(ins, pc),
        0x1849 => parse_arm_6217(ins, pc),
        0x184a => parse_arm_6218(ins, pc),
        0x184b => parse_arm_6219(ins, pc),
        0x184c => parse_arm_6220(ins, pc),
        0x184d => parse_arm_6221(ins, pc),
        0x184e => parse_arm_6222(ins, pc),
        0x184f => parse_arm_6223(ins, pc),
        0x1850 => parse_arm_6224(ins, pc),
        0x1851 => parse_arm_6225(ins, pc),
        0x1852 => parse_arm_6226(ins, pc),
        0x1853 => parse_arm_6227(ins, pc),
        0x1854 => parse_arm_6228(ins, pc),
        0x1855 => parse_arm_6229(ins, pc),
        0x1856 => parse_arm_6230(ins, pc),
        0x1857 => parse_arm_6231(ins, pc),
        0x1858 => parse_arm_6232(ins, pc),
        0x1859 => parse_arm_6233(ins, pc),
        0x185a => parse_arm_6234(ins, pc),
        0x185b => parse_arm_6235(ins, pc),
        0x185c => parse_arm_6236(ins, pc),
        0x185d => parse_arm_6237(ins, pc),
        0x185e => parse_arm_6238(ins, pc),
        0x185f => parse_arm_6239(ins, pc),
        0x1860 => parse_arm_6240(ins, pc),
        0x1861 => parse_arm_6241(ins, pc),
        0x1862 => parse_arm_6242(ins, pc),
        0x1863 => parse_arm_6243(ins, pc),
        0x1864 => parse_arm_6244(ins, pc),
        0x1865 => parse_arm_6245(ins, pc),
        0x1866 => parse_arm_6246(ins, pc),
        0x1867 => parse_arm_6247(ins, pc),
        0x1868 => parse_arm_6248(ins, pc),
        0x1869 => parse_arm_6249(ins, pc),
        0x186a => parse_arm_6250(ins, pc),
        0x186b => parse_arm_6251(ins, pc),
        0x186c => parse_arm_6252(ins, pc),
        0x186d => parse_arm_6253(ins, pc),
        0x186e => parse_arm_6254(ins, pc),
        0x186f => parse_arm_6255(ins, pc),
        0x1870 => parse_arm_6256(ins, pc),
        0x1871 => parse_arm_6257(ins, pc),
        0x1872 => parse_arm_6258(ins, pc),
        0x1873 => parse_arm_6259(ins, pc),
        0x1874 => parse_arm_6260(ins, pc),
        0x1875 => parse_arm_6261(ins, pc),
        0x1876 => parse_arm_6262(ins, pc),
        0x1877 => parse_arm_6263(ins, pc),
        0x1878 => parse_arm_6264(ins, pc),
        0x1879 => parse_arm_6265(ins, pc),
        0x187a => parse_arm_6266(ins, pc),
        0x187b => parse_arm_6267(ins, pc),
        0x187c => parse_arm_6268(ins, pc),
        0x187d => parse_arm_6269(ins, pc),
        0x187e => parse_arm_6270(ins, pc),
        0x187f => parse_arm_6271(ins, pc),
        0x1880 => parse_arm_6272(ins, pc),
        0x1881 => parse_arm_6273(ins, pc),
        0x1882 => parse_arm_6274(ins, pc),
        0x1883 => parse_arm_6275(ins, pc),
        0x1884 => parse_arm_6276(ins, pc),
        0x1885 => parse_arm_6277(ins, pc),
        0x1886 => parse_arm_6278(ins, pc),
        0x1887 => parse_arm_6279(ins, pc),
        0x1888 => parse_arm_6280(ins, pc),
        0x1889 => parse_arm_6281(ins, pc),
        0x188a => parse_arm_6282(ins, pc),
        0x188b => parse_arm_6283(ins, pc),
        0x188c => parse_arm_6284(ins, pc),
        0x188d => parse_arm_6285(ins, pc),
        0x188e => parse_arm_6286(ins, pc),
        0x188f => parse_arm_6287(ins, pc),
        0x1890 => parse_arm_6288(ins, pc),
        0x1891 => parse_arm_6289(ins, pc),
        0x1892 => parse_arm_6290(ins, pc),
        0x1893 => parse_arm_6291(ins, pc),
        0x1894 => parse_arm_6292(ins, pc),
        0x1895 => parse_arm_6293(ins, pc),
        0x1896 => parse_arm_6294(ins, pc),
        0x1897 => parse_arm_6295(ins, pc),
        0x1898 => parse_arm_6296(ins, pc),
        0x1899 => parse_arm_6297(ins, pc),
        0x189a => parse_arm_6298(ins, pc),
        0x189b => parse_arm_6299(ins, pc),
        0x189c => parse_arm_6300(ins, pc),
        0x189d => parse_arm_6301(ins, pc),
        0x189e => parse_arm_6302(ins, pc),
        0x189f => parse_arm_6303(ins, pc),
        0x18a0 => parse_arm_6304(ins, pc),
        0x18a1 => parse_arm_6305(ins, pc),
        0x18a2 => parse_arm_6306(ins, pc),
        0x18a3 => parse_arm_6307(ins, pc),
        0x18a4 => parse_arm_6308(ins, pc),
        0x18a5 => parse_arm_6309(ins, pc),
        0x18a6 => parse_arm_6310(ins, pc),
        0x18a7 => parse_arm_6311(ins, pc),
        0x18a8 => parse_arm_6312(ins, pc),
        0x18a9 => parse_arm_6313(ins, pc),
        0x18aa => parse_arm_6314(ins, pc),
        0x18ab => parse_arm_6315(ins, pc),
        0x18ac => parse_arm_6316(ins, pc),
        0x18ad => parse_arm_6317(ins, pc),
        0x18ae => parse_arm_6318(ins, pc),
        0x18af => parse_arm_6319(ins, pc),
        0x18b0 => parse_arm_6320(ins, pc),
        0x18b1 => parse_arm_6321(ins, pc),
        0x18b2 => parse_arm_6322(ins, pc),
        0x18b3 => parse_arm_6323(ins, pc),
        0x18b4 => parse_arm_6324(ins, pc),
        0x18b5 => parse_arm_6325(ins, pc),
        0x18b6 => parse_arm_6326(ins, pc),
        0x18b7 => parse_arm_6327(ins, pc),
        0x18b8 => parse_arm_6328(ins, pc),
        0x18b9 => parse_arm_6329(ins, pc),
        0x18ba => parse_arm_6330(ins, pc),
        0x18bb => parse_arm_6331(ins, pc),
        0x18bc => parse_arm_6332(ins, pc),
        0x18bd => parse_arm_6333(ins, pc),
        0x18be => parse_arm_6334(ins, pc),
        0x18bf => parse_arm_6335(ins, pc),
        0x18c0 => parse_arm_6336(ins, pc),
        0x18c1 => parse_arm_6337(ins, pc),
        0x18c2 => parse_arm_6338(ins, pc),
        0x18c3 => parse_arm_6339(ins, pc),
        0x18c4 => parse_arm_6340(ins, pc),
        0x18c5 => parse_arm_6341(ins, pc),
        0x18c6 => parse_arm_6342(ins, pc),
        0x18c7 => parse_arm_6343(ins, pc),
        0x18c8 => parse_arm_6344(ins, pc),
        0x18c9 => parse_arm_6345(ins, pc),
        0x18ca => parse_arm_6346(ins, pc),
        0x18cb => parse_arm_6347(ins, pc),
        0x18cc => parse_arm_6348(ins, pc),
        0x18cd => parse_arm_6349(ins, pc),
        0x18ce => parse_arm_6350(ins, pc),
        0x18cf => parse_arm_6351(ins, pc),
        0x18d0 => parse_arm_6352(ins, pc),
        0x18d1 => parse_arm_6353(ins, pc),
        0x18d2 => parse_arm_6354(ins, pc),
        0x18d3 => parse_arm_6355(ins, pc),
        0x18d4 => parse_arm_6356(ins, pc),
        0x18d5 => parse_arm_6357(ins, pc),
        0x18d6 => parse_arm_6358(ins, pc),
        0x18d7 => parse_arm_6359(ins, pc),
        0x18d8 => parse_arm_6360(ins, pc),
        0x18d9 => parse_arm_6361(ins, pc),
        0x18da => parse_arm_6362(ins, pc),
        0x18db => parse_arm_6363(ins, pc),
        0x18dc => parse_arm_6364(ins, pc),
        0x18dd => parse_arm_6365(ins, pc),
        0x18de => parse_arm_6366(ins, pc),
        0x18df => parse_arm_6367(ins, pc),
        0x18e0 => parse_arm_6368(ins, pc),
        0x18e1 => parse_arm_6369(ins, pc),
        0x18e2 => parse_arm_6370(ins, pc),
        0x18e3 => parse_arm_6371(ins, pc),
        0x18e4 => parse_arm_6372(ins, pc),
        0x18e5 => parse_arm_6373(ins, pc),
        0x18e6 => parse_arm_6374(ins, pc),
        0x18e7 => parse_arm_6375(ins, pc),
        0x18e8 => parse_arm_6376(ins, pc),
        0x18e9 => parse_arm_6377(ins, pc),
        0x18ea => parse_arm_6378(ins, pc),
        0x18eb => parse_arm_6379(ins, pc),
        0x18ec => parse_arm_6380(ins, pc),
        0x18ed => parse_arm_6381(ins, pc),
        0x18ee => parse_arm_6382(ins, pc),
        0x18ef => parse_arm_6383(ins, pc),
        0x18f0 => parse_arm_6384(ins, pc),
        0x18f1 => parse_arm_6385(ins, pc),
        0x18f2 => parse_arm_6386(ins, pc),
        0x18f3 => parse_arm_6387(ins, pc),
        0x18f4 => parse_arm_6388(ins, pc),
        0x18f5 => parse_arm_6389(ins, pc),
        0x18f6 => parse_arm_6390(ins, pc),
        0x18f7 => parse_arm_6391(ins, pc),
        0x18f8 => parse_arm_6392(ins, pc),
        0x18f9 => parse_arm_6393(ins, pc),
        0x18fa => parse_arm_6394(ins, pc),
        0x18fb => parse_arm_6395(ins, pc),
        0x18fc => parse_arm_6396(ins, pc),
        0x18fd => parse_arm_6397(ins, pc),
        0x18fe => parse_arm_6398(ins, pc),
        0x18ff => parse_arm_6399(ins, pc),
        0x1900 => parse_arm_6400(ins, pc),
        0x1901 => parse_arm_6401(ins, pc),
        0x1902 => parse_arm_6402(ins, pc),
        0x1903 => parse_arm_6403(ins, pc),
        0x1904 => parse_arm_6404(ins, pc),
        0x1905 => parse_arm_6405(ins, pc),
        0x1906 => parse_arm_6406(ins, pc),
        0x1907 => parse_arm_6407(ins, pc),
        0x1908 => parse_arm_6408(ins, pc),
        0x1909 => parse_arm_6409(ins, pc),
        0x190a => parse_arm_6410(ins, pc),
        0x190b => parse_arm_6411(ins, pc),
        0x190c => parse_arm_6412(ins, pc),
        0x190d => parse_arm_6413(ins, pc),
        0x190e => parse_arm_6414(ins, pc),
        0x190f => parse_arm_6415(ins, pc),
        0x1910 => parse_arm_6416(ins, pc),
        0x1911 => parse_arm_6417(ins, pc),
        0x1912 => parse_arm_6418(ins, pc),
        0x1913 => parse_arm_6419(ins, pc),
        0x1914 => parse_arm_6420(ins, pc),
        0x1915 => parse_arm_6421(ins, pc),
        0x1916 => parse_arm_6422(ins, pc),
        0x1917 => parse_arm_6423(ins, pc),
        0x1918 => parse_arm_6424(ins, pc),
        0x1919 => parse_arm_6425(ins, pc),
        0x191a => parse_arm_6426(ins, pc),
        0x191b => parse_arm_6427(ins, pc),
        0x191c => parse_arm_6428(ins, pc),
        0x191d => parse_arm_6429(ins, pc),
        0x191e => parse_arm_6430(ins, pc),
        0x191f => parse_arm_6431(ins, pc),
        0x1920 => parse_arm_6432(ins, pc),
        0x1921 => parse_arm_6433(ins, pc),
        0x1922 => parse_arm_6434(ins, pc),
        0x1923 => parse_arm_6435(ins, pc),
        0x1924 => parse_arm_6436(ins, pc),
        0x1925 => parse_arm_6437(ins, pc),
        0x1926 => parse_arm_6438(ins, pc),
        0x1927 => parse_arm_6439(ins, pc),
        0x1928 => parse_arm_6440(ins, pc),
        0x1929 => parse_arm_6441(ins, pc),
        0x192a => parse_arm_6442(ins, pc),
        0x192b => parse_arm_6443(ins, pc),
        0x192c => parse_arm_6444(ins, pc),
        0x192d => parse_arm_6445(ins, pc),
        0x192e => parse_arm_6446(ins, pc),
        0x192f => parse_arm_6447(ins, pc),
        0x1930 => parse_arm_6448(ins, pc),
        0x1931 => parse_arm_6449(ins, pc),
        0x1932 => parse_arm_6450(ins, pc),
        0x1933 => parse_arm_6451(ins, pc),
        0x1934 => parse_arm_6452(ins, pc),
        0x1935 => parse_arm_6453(ins, pc),
        0x1936 => parse_arm_6454(ins, pc),
        0x1937 => parse_arm_6455(ins, pc),
        0x1938 => parse_arm_6456(ins, pc),
        0x1939 => parse_arm_6457(ins, pc),
        0x193a => parse_arm_6458(ins, pc),
        0x193b => parse_arm_6459(ins, pc),
        0x193c => parse_arm_6460(ins, pc),
        0x193d => parse_arm_6461(ins, pc),
        0x193e => parse_arm_6462(ins, pc),
        0x193f => parse_arm_6463(ins, pc),
        0x1940 => parse_arm_6464(ins, pc),
        0x1941 => parse_arm_6465(ins, pc),
        0x1942 => parse_arm_6466(ins, pc),
        0x1943 => parse_arm_6467(ins, pc),
        0x1944 => parse_arm_6468(ins, pc),
        0x1945 => parse_arm_6469(ins, pc),
        0x1946 => parse_arm_6470(ins, pc),
        0x1947 => parse_arm_6471(ins, pc),
        0x1948 => parse_arm_6472(ins, pc),
        0x1949 => parse_arm_6473(ins, pc),
        0x194a => parse_arm_6474(ins, pc),
        0x194b => parse_arm_6475(ins, pc),
        0x194c => parse_arm_6476(ins, pc),
        0x194d => parse_arm_6477(ins, pc),
        0x194e => parse_arm_6478(ins, pc),
        0x194f => parse_arm_6479(ins, pc),
        0x1950 => parse_arm_6480(ins, pc),
        0x1951 => parse_arm_6481(ins, pc),
        0x1952 => parse_arm_6482(ins, pc),
        0x1953 => parse_arm_6483(ins, pc),
        0x1954 => parse_arm_6484(ins, pc),
        0x1955 => parse_arm_6485(ins, pc),
        0x1956 => parse_arm_6486(ins, pc),
        0x1957 => parse_arm_6487(ins, pc),
        0x1958 => parse_arm_6488(ins, pc),
        0x1959 => parse_arm_6489(ins, pc),
        0x195a => parse_arm_6490(ins, pc),
        0x195b => parse_arm_6491(ins, pc),
        0x195c => parse_arm_6492(ins, pc),
        0x195d => parse_arm_6493(ins, pc),
        0x195e => parse_arm_6494(ins, pc),
        0x195f => parse_arm_6495(ins, pc),
        0x1960 => parse_arm_6496(ins, pc),
        0x1961 => parse_arm_6497(ins, pc),
        0x1962 => parse_arm_6498(ins, pc),
        0x1963 => parse_arm_6499(ins, pc),
        0x1964 => parse_arm_6500(ins, pc),
        0x1965 => parse_arm_6501(ins, pc),
        0x1966 => parse_arm_6502(ins, pc),
        0x1967 => parse_arm_6503(ins, pc),
        0x1968 => parse_arm_6504(ins, pc),
        0x1969 => parse_arm_6505(ins, pc),
        0x196a => parse_arm_6506(ins, pc),
        0x196b => parse_arm_6507(ins, pc),
        0x196c => parse_arm_6508(ins, pc),
        0x196d => parse_arm_6509(ins, pc),
        0x196e => parse_arm_6510(ins, pc),
        0x196f => parse_arm_6511(ins, pc),
        0x1970 => parse_arm_6512(ins, pc),
        0x1971 => parse_arm_6513(ins, pc),
        0x1972 => parse_arm_6514(ins, pc),
        0x1973 => parse_arm_6515(ins, pc),
        0x1974 => parse_arm_6516(ins, pc),
        0x1975 => parse_arm_6517(ins, pc),
        0x1976 => parse_arm_6518(ins, pc),
        0x1977 => parse_arm_6519(ins, pc),
        0x1978 => parse_arm_6520(ins, pc),
        0x1979 => parse_arm_6521(ins, pc),
        0x197a => parse_arm_6522(ins, pc),
        0x197b => parse_arm_6523(ins, pc),
        0x197c => parse_arm_6524(ins, pc),
        0x197d => parse_arm_6525(ins, pc),
        0x197e => parse_arm_6526(ins, pc),
        0x197f => parse_arm_6527(ins, pc),
        0x1980 => parse_arm_6528(ins, pc),
        0x1981 => parse_arm_6529(ins, pc),
        0x1982 => parse_arm_6530(ins, pc),
        0x1983 => parse_arm_6531(ins, pc),
        0x1984 => parse_arm_6532(ins, pc),
        0x1985 => parse_arm_6533(ins, pc),
        0x1986 => parse_arm_6534(ins, pc),
        0x1987 => parse_arm_6535(ins, pc),
        0x1988 => parse_arm_6536(ins, pc),
        0x1989 => parse_arm_6537(ins, pc),
        0x198a => parse_arm_6538(ins, pc),
        0x198b => parse_arm_6539(ins, pc),
        0x198c => parse_arm_6540(ins, pc),
        0x198d => parse_arm_6541(ins, pc),
        0x198e => parse_arm_6542(ins, pc),
        0x198f => parse_arm_6543(ins, pc),
        0x1990 => parse_arm_6544(ins, pc),
        0x1991 => parse_arm_6545(ins, pc),
        0x1992 => parse_arm_6546(ins, pc),
        0x1993 => parse_arm_6547(ins, pc),
        0x1994 => parse_arm_6548(ins, pc),
        0x1995 => parse_arm_6549(ins, pc),
        0x1996 => parse_arm_6550(ins, pc),
        0x1997 => parse_arm_6551(ins, pc),
        0x1998 => parse_arm_6552(ins, pc),
        0x1999 => parse_arm_6553(ins, pc),
        0x199a => parse_arm_6554(ins, pc),
        0x199b => parse_arm_6555(ins, pc),
        0x199c => parse_arm_6556(ins, pc),
        0x199d => parse_arm_6557(ins, pc),
        0x199e => parse_arm_6558(ins, pc),
        0x199f => parse_arm_6559(ins, pc),
        0x19a0 => parse_arm_6560(ins, pc),
        0x19a1 => parse_arm_6561(ins, pc),
        0x19a2 => parse_arm_6562(ins, pc),
        0x19a3 => parse_arm_6563(ins, pc),
        0x19a4 => parse_arm_6564(ins, pc),
        0x19a5 => parse_arm_6565(ins, pc),
        0x19a6 => parse_arm_6566(ins, pc),
        0x19a7 => parse_arm_6567(ins, pc),
        0x19a8 => parse_arm_6568(ins, pc),
        0x19a9 => parse_arm_6569(ins, pc),
        0x19aa => parse_arm_6570(ins, pc),
        0x19ab => parse_arm_6571(ins, pc),
        0x19ac => parse_arm_6572(ins, pc),
        0x19ad => parse_arm_6573(ins, pc),
        0x19ae => parse_arm_6574(ins, pc),
        0x19af => parse_arm_6575(ins, pc),
        0x19b0 => parse_arm_6576(ins, pc),
        0x19b1 => parse_arm_6577(ins, pc),
        0x19b2 => parse_arm_6578(ins, pc),
        0x19b3 => parse_arm_6579(ins, pc),
        0x19b4 => parse_arm_6580(ins, pc),
        0x19b5 => parse_arm_6581(ins, pc),
        0x19b6 => parse_arm_6582(ins, pc),
        0x19b7 => parse_arm_6583(ins, pc),
        0x19b8 => parse_arm_6584(ins, pc),
        0x19b9 => parse_arm_6585(ins, pc),
        0x19ba => parse_arm_6586(ins, pc),
        0x19bb => parse_arm_6587(ins, pc),
        0x19bc => parse_arm_6588(ins, pc),
        0x19bd => parse_arm_6589(ins, pc),
        0x19be => parse_arm_6590(ins, pc),
        0x19bf => parse_arm_6591(ins, pc),
        0x19c0 => parse_arm_6592(ins, pc),
        0x19c1 => parse_arm_6593(ins, pc),
        0x19c2 => parse_arm_6594(ins, pc),
        0x19c3 => parse_arm_6595(ins, pc),
        0x19c4 => parse_arm_6596(ins, pc),
        0x19c5 => parse_arm_6597(ins, pc),
        0x19c6 => parse_arm_6598(ins, pc),
        0x19c7 => parse_arm_6599(ins, pc),
        0x19c8 => parse_arm_6600(ins, pc),
        0x19c9 => parse_arm_6601(ins, pc),
        0x19ca => parse_arm_6602(ins, pc),
        0x19cb => parse_arm_6603(ins, pc),
        0x19cc => parse_arm_6604(ins, pc),
        0x19cd => parse_arm_6605(ins, pc),
        0x19ce => parse_arm_6606(ins, pc),
        0x19cf => parse_arm_6607(ins, pc),
        0x19d0 => parse_arm_6608(ins, pc),
        0x19d1 => parse_arm_6609(ins, pc),
        0x19d2 => parse_arm_6610(ins, pc),
        0x19d3 => parse_arm_6611(ins, pc),
        0x19d4 => parse_arm_6612(ins, pc),
        0x19d5 => parse_arm_6613(ins, pc),
        0x19d6 => parse_arm_6614(ins, pc),
        0x19d7 => parse_arm_6615(ins, pc),
        0x19d8 => parse_arm_6616(ins, pc),
        0x19d9 => parse_arm_6617(ins, pc),
        0x19da => parse_arm_6618(ins, pc),
        0x19db => parse_arm_6619(ins, pc),
        0x19dc => parse_arm_6620(ins, pc),
        0x19dd => parse_arm_6621(ins, pc),
        0x19de => parse_arm_6622(ins, pc),
        0x19df => parse_arm_6623(ins, pc),
        0x19e0 => parse_arm_6624(ins, pc),
        0x19e1 => parse_arm_6625(ins, pc),
        0x19e2 => parse_arm_6626(ins, pc),
        0x19e3 => parse_arm_6627(ins, pc),
        0x19e4 => parse_arm_6628(ins, pc),
        0x19e5 => parse_arm_6629(ins, pc),
        0x19e6 => parse_arm_6630(ins, pc),
        0x19e7 => parse_arm_6631(ins, pc),
        0x19e8 => parse_arm_6632(ins, pc),
        0x19e9 => parse_arm_6633(ins, pc),
        0x19ea => parse_arm_6634(ins, pc),
        0x19eb => parse_arm_6635(ins, pc),
        0x19ec => parse_arm_6636(ins, pc),
        0x19ed => parse_arm_6637(ins, pc),
        0x19ee => parse_arm_6638(ins, pc),
        0x19ef => parse_arm_6639(ins, pc),
        0x19f0 => parse_arm_6640(ins, pc),
        0x19f1 => parse_arm_6641(ins, pc),
        0x19f2 => parse_arm_6642(ins, pc),
        0x19f3 => parse_arm_6643(ins, pc),
        0x19f4 => parse_arm_6644(ins, pc),
        0x19f5 => parse_arm_6645(ins, pc),
        0x19f6 => parse_arm_6646(ins, pc),
        0x19f7 => parse_arm_6647(ins, pc),
        0x19f8 => parse_arm_6648(ins, pc),
        0x19f9 => parse_arm_6649(ins, pc),
        0x19fa => parse_arm_6650(ins, pc),
        0x19fb => parse_arm_6651(ins, pc),
        0x19fc => parse_arm_6652(ins, pc),
        0x19fd => parse_arm_6653(ins, pc),
        0x19fe => parse_arm_6654(ins, pc),
        0x19ff => parse_arm_6655(ins, pc),
        0x1a00 => parse_arm_6656(ins, pc),
        0x1a01 => parse_arm_6657(ins, pc),
        0x1a02 => parse_arm_6658(ins, pc),
        0x1a03 => parse_arm_6659(ins, pc),
        0x1a04 => parse_arm_6660(ins, pc),
        0x1a05 => parse_arm_6661(ins, pc),
        0x1a06 => parse_arm_6662(ins, pc),
        0x1a07 => parse_arm_6663(ins, pc),
        0x1a08 => parse_arm_6664(ins, pc),
        0x1a09 => parse_arm_6665(ins, pc),
        0x1a0a => parse_arm_6666(ins, pc),
        0x1a0b => parse_arm_6667(ins, pc),
        0x1a0c => parse_arm_6668(ins, pc),
        0x1a0d => parse_arm_6669(ins, pc),
        0x1a0e => parse_arm_6670(ins, pc),
        0x1a0f => parse_arm_6671(ins, pc),
        0x1a10 => parse_arm_6672(ins, pc),
        0x1a11 => parse_arm_6673(ins, pc),
        0x1a12 => parse_arm_6674(ins, pc),
        0x1a13 => parse_arm_6675(ins, pc),
        0x1a14 => parse_arm_6676(ins, pc),
        0x1a15 => parse_arm_6677(ins, pc),
        0x1a16 => parse_arm_6678(ins, pc),
        0x1a17 => parse_arm_6679(ins, pc),
        0x1a18 => parse_arm_6680(ins, pc),
        0x1a19 => parse_arm_6681(ins, pc),
        0x1a1a => parse_arm_6682(ins, pc),
        0x1a1b => parse_arm_6683(ins, pc),
        0x1a1c => parse_arm_6684(ins, pc),
        0x1a1d => parse_arm_6685(ins, pc),
        0x1a1e => parse_arm_6686(ins, pc),
        0x1a1f => parse_arm_6687(ins, pc),
        0x1a20 => parse_arm_6688(ins, pc),
        0x1a21 => parse_arm_6689(ins, pc),
        0x1a22 => parse_arm_6690(ins, pc),
        0x1a23 => parse_arm_6691(ins, pc),
        0x1a24 => parse_arm_6692(ins, pc),
        0x1a25 => parse_arm_6693(ins, pc),
        0x1a26 => parse_arm_6694(ins, pc),
        0x1a27 => parse_arm_6695(ins, pc),
        0x1a28 => parse_arm_6696(ins, pc),
        0x1a29 => parse_arm_6697(ins, pc),
        0x1a2a => parse_arm_6698(ins, pc),
        0x1a2b => parse_arm_6699(ins, pc),
        0x1a2c => parse_arm_6700(ins, pc),
        0x1a2d => parse_arm_6701(ins, pc),
        0x1a2e => parse_arm_6702(ins, pc),
        0x1a2f => parse_arm_6703(ins, pc),
        0x1a30 => parse_arm_6704(ins, pc),
        0x1a31 => parse_arm_6705(ins, pc),
        0x1a32 => parse_arm_6706(ins, pc),
        0x1a33 => parse_arm_6707(ins, pc),
        0x1a34 => parse_arm_6708(ins, pc),
        0x1a35 => parse_arm_6709(ins, pc),
        0x1a36 => parse_arm_6710(ins, pc),
        0x1a37 => parse_arm_6711(ins, pc),
        0x1a38 => parse_arm_6712(ins, pc),
        0x1a39 => parse_arm_6713(ins, pc),
        0x1a3a => parse_arm_6714(ins, pc),
        0x1a3b => parse_arm_6715(ins, pc),
        0x1a3c => parse_arm_6716(ins, pc),
        0x1a3d => parse_arm_6717(ins, pc),
        0x1a3e => parse_arm_6718(ins, pc),
        0x1a3f => parse_arm_6719(ins, pc),
        0x1a40 => parse_arm_6720(ins, pc),
        0x1a41 => parse_arm_6721(ins, pc),
        0x1a42 => parse_arm_6722(ins, pc),
        0x1a43 => parse_arm_6723(ins, pc),
        0x1a44 => parse_arm_6724(ins, pc),
        0x1a45 => parse_arm_6725(ins, pc),
        0x1a46 => parse_arm_6726(ins, pc),
        0x1a47 => parse_arm_6727(ins, pc),
        0x1a48 => parse_arm_6728(ins, pc),
        0x1a49 => parse_arm_6729(ins, pc),
        0x1a4a => parse_arm_6730(ins, pc),
        0x1a4b => parse_arm_6731(ins, pc),
        0x1a4c => parse_arm_6732(ins, pc),
        0x1a4d => parse_arm_6733(ins, pc),
        0x1a4e => parse_arm_6734(ins, pc),
        0x1a4f => parse_arm_6735(ins, pc),
        0x1a50 => parse_arm_6736(ins, pc),
        0x1a51 => parse_arm_6737(ins, pc),
        0x1a52 => parse_arm_6738(ins, pc),
        0x1a53 => parse_arm_6739(ins, pc),
        0x1a54 => parse_arm_6740(ins, pc),
        0x1a55 => parse_arm_6741(ins, pc),
        0x1a56 => parse_arm_6742(ins, pc),
        0x1a57 => parse_arm_6743(ins, pc),
        0x1a58 => parse_arm_6744(ins, pc),
        0x1a59 => parse_arm_6745(ins, pc),
        0x1a5a => parse_arm_6746(ins, pc),
        0x1a5b => parse_arm_6747(ins, pc),
        0x1a5c => parse_arm_6748(ins, pc),
        0x1a5d => parse_arm_6749(ins, pc),
        0x1a5e => parse_arm_6750(ins, pc),
        0x1a5f => parse_arm_6751(ins, pc),
        0x1a60 => parse_arm_6752(ins, pc),
        0x1a61 => parse_arm_6753(ins, pc),
        0x1a62 => parse_arm_6754(ins, pc),
        0x1a63 => parse_arm_6755(ins, pc),
        0x1a64 => parse_arm_6756(ins, pc),
        0x1a65 => parse_arm_6757(ins, pc),
        0x1a66 => parse_arm_6758(ins, pc),
        0x1a67 => parse_arm_6759(ins, pc),
        0x1a68 => parse_arm_6760(ins, pc),
        0x1a69 => parse_arm_6761(ins, pc),
        0x1a6a => parse_arm_6762(ins, pc),
        0x1a6b => parse_arm_6763(ins, pc),
        0x1a6c => parse_arm_6764(ins, pc),
        0x1a6d => parse_arm_6765(ins, pc),
        0x1a6e => parse_arm_6766(ins, pc),
        0x1a6f => parse_arm_6767(ins, pc),
        0x1a70 => parse_arm_6768(ins, pc),
        0x1a71 => parse_arm_6769(ins, pc),
        0x1a72 => parse_arm_6770(ins, pc),
        0x1a73 => parse_arm_6771(ins, pc),
        0x1a74 => parse_arm_6772(ins, pc),
        0x1a75 => parse_arm_6773(ins, pc),
        0x1a76 => parse_arm_6774(ins, pc),
        0x1a77 => parse_arm_6775(ins, pc),
        0x1a78 => parse_arm_6776(ins, pc),
        0x1a79 => parse_arm_6777(ins, pc),
        0x1a7a => parse_arm_6778(ins, pc),
        0x1a7b => parse_arm_6779(ins, pc),
        0x1a7c => parse_arm_6780(ins, pc),
        0x1a7d => parse_arm_6781(ins, pc),
        0x1a7e => parse_arm_6782(ins, pc),
        0x1a7f => parse_arm_6783(ins, pc),
        0x1a80 => parse_arm_6784(ins, pc),
        0x1a81 => parse_arm_6785(ins, pc),
        0x1a82 => parse_arm_6786(ins, pc),
        0x1a83 => parse_arm_6787(ins, pc),
        0x1a84 => parse_arm_6788(ins, pc),
        0x1a85 => parse_arm_6789(ins, pc),
        0x1a86 => parse_arm_6790(ins, pc),
        0x1a87 => parse_arm_6791(ins, pc),
        0x1a88 => parse_arm_6792(ins, pc),
        0x1a89 => parse_arm_6793(ins, pc),
        0x1a8a => parse_arm_6794(ins, pc),
        0x1a8b => parse_arm_6795(ins, pc),
        0x1a8c => parse_arm_6796(ins, pc),
        0x1a8d => parse_arm_6797(ins, pc),
        0x1a8e => parse_arm_6798(ins, pc),
        0x1a8f => parse_arm_6799(ins, pc),
        0x1a90 => parse_arm_6800(ins, pc),
        0x1a91 => parse_arm_6801(ins, pc),
        0x1a92 => parse_arm_6802(ins, pc),
        0x1a93 => parse_arm_6803(ins, pc),
        0x1a94 => parse_arm_6804(ins, pc),
        0x1a95 => parse_arm_6805(ins, pc),
        0x1a96 => parse_arm_6806(ins, pc),
        0x1a97 => parse_arm_6807(ins, pc),
        0x1a98 => parse_arm_6808(ins, pc),
        0x1a99 => parse_arm_6809(ins, pc),
        0x1a9a => parse_arm_6810(ins, pc),
        0x1a9b => parse_arm_6811(ins, pc),
        0x1a9c => parse_arm_6812(ins, pc),
        0x1a9d => parse_arm_6813(ins, pc),
        0x1a9e => parse_arm_6814(ins, pc),
        0x1a9f => parse_arm_6815(ins, pc),
        0x1aa0 => parse_arm_6816(ins, pc),
        0x1aa1 => parse_arm_6817(ins, pc),
        0x1aa2 => parse_arm_6818(ins, pc),
        0x1aa3 => parse_arm_6819(ins, pc),
        0x1aa4 => parse_arm_6820(ins, pc),
        0x1aa5 => parse_arm_6821(ins, pc),
        0x1aa6 => parse_arm_6822(ins, pc),
        0x1aa7 => parse_arm_6823(ins, pc),
        0x1aa8 => parse_arm_6824(ins, pc),
        0x1aa9 => parse_arm_6825(ins, pc),
        0x1aaa => parse_arm_6826(ins, pc),
        0x1aab => parse_arm_6827(ins, pc),
        0x1aac => parse_arm_6828(ins, pc),
        0x1aad => parse_arm_6829(ins, pc),
        0x1aae => parse_arm_6830(ins, pc),
        0x1aaf => parse_arm_6831(ins, pc),
        0x1ab0 => parse_arm_6832(ins, pc),
        0x1ab1 => parse_arm_6833(ins, pc),
        0x1ab2 => parse_arm_6834(ins, pc),
        0x1ab3 => parse_arm_6835(ins, pc),
        0x1ab4 => parse_arm_6836(ins, pc),
        0x1ab5 => parse_arm_6837(ins, pc),
        0x1ab6 => parse_arm_6838(ins, pc),
        0x1ab7 => parse_arm_6839(ins, pc),
        0x1ab8 => parse_arm_6840(ins, pc),
        0x1ab9 => parse_arm_6841(ins, pc),
        0x1aba => parse_arm_6842(ins, pc),
        0x1abb => parse_arm_6843(ins, pc),
        0x1abc => parse_arm_6844(ins, pc),
        0x1abd => parse_arm_6845(ins, pc),
        0x1abe => parse_arm_6846(ins, pc),
        0x1abf => parse_arm_6847(ins, pc),
        0x1ac0 => parse_arm_6848(ins, pc),
        0x1ac1 => parse_arm_6849(ins, pc),
        0x1ac2 => parse_arm_6850(ins, pc),
        0x1ac3 => parse_arm_6851(ins, pc),
        0x1ac4 => parse_arm_6852(ins, pc),
        0x1ac5 => parse_arm_6853(ins, pc),
        0x1ac6 => parse_arm_6854(ins, pc),
        0x1ac7 => parse_arm_6855(ins, pc),
        0x1ac8 => parse_arm_6856(ins, pc),
        0x1ac9 => parse_arm_6857(ins, pc),
        0x1aca => parse_arm_6858(ins, pc),
        0x1acb => parse_arm_6859(ins, pc),
        0x1acc => parse_arm_6860(ins, pc),
        0x1acd => parse_arm_6861(ins, pc),
        0x1ace => parse_arm_6862(ins, pc),
        0x1acf => parse_arm_6863(ins, pc),
        0x1ad0 => parse_arm_6864(ins, pc),
        0x1ad1 => parse_arm_6865(ins, pc),
        0x1ad2 => parse_arm_6866(ins, pc),
        0x1ad3 => parse_arm_6867(ins, pc),
        0x1ad4 => parse_arm_6868(ins, pc),
        0x1ad5 => parse_arm_6869(ins, pc),
        0x1ad6 => parse_arm_6870(ins, pc),
        0x1ad7 => parse_arm_6871(ins, pc),
        0x1ad8 => parse_arm_6872(ins, pc),
        0x1ad9 => parse_arm_6873(ins, pc),
        0x1ada => parse_arm_6874(ins, pc),
        0x1adb => parse_arm_6875(ins, pc),
        0x1adc => parse_arm_6876(ins, pc),
        0x1add => parse_arm_6877(ins, pc),
        0x1ade => parse_arm_6878(ins, pc),
        0x1adf => parse_arm_6879(ins, pc),
        0x1ae0 => parse_arm_6880(ins, pc),
        0x1ae1 => parse_arm_6881(ins, pc),
        0x1ae2 => parse_arm_6882(ins, pc),
        0x1ae3 => parse_arm_6883(ins, pc),
        0x1ae4 => parse_arm_6884(ins, pc),
        0x1ae5 => parse_arm_6885(ins, pc),
        0x1ae6 => parse_arm_6886(ins, pc),
        0x1ae7 => parse_arm_6887(ins, pc),
        0x1ae8 => parse_arm_6888(ins, pc),
        0x1ae9 => parse_arm_6889(ins, pc),
        0x1aea => parse_arm_6890(ins, pc),
        0x1aeb => parse_arm_6891(ins, pc),
        0x1aec => parse_arm_6892(ins, pc),
        0x1aed => parse_arm_6893(ins, pc),
        0x1aee => parse_arm_6894(ins, pc),
        0x1aef => parse_arm_6895(ins, pc),
        0x1af0 => parse_arm_6896(ins, pc),
        0x1af1 => parse_arm_6897(ins, pc),
        0x1af2 => parse_arm_6898(ins, pc),
        0x1af3 => parse_arm_6899(ins, pc),
        0x1af4 => parse_arm_6900(ins, pc),
        0x1af5 => parse_arm_6901(ins, pc),
        0x1af6 => parse_arm_6902(ins, pc),
        0x1af7 => parse_arm_6903(ins, pc),
        0x1af8 => parse_arm_6904(ins, pc),
        0x1af9 => parse_arm_6905(ins, pc),
        0x1afa => parse_arm_6906(ins, pc),
        0x1afb => parse_arm_6907(ins, pc),
        0x1afc => parse_arm_6908(ins, pc),
        0x1afd => parse_arm_6909(ins, pc),
        0x1afe => parse_arm_6910(ins, pc),
        0x1aff => parse_arm_6911(ins, pc),
        0x1b00 => parse_arm_6912(ins, pc),
        0x1b01 => parse_arm_6913(ins, pc),
        0x1b02 => parse_arm_6914(ins, pc),
        0x1b03 => parse_arm_6915(ins, pc),
        0x1b04 => parse_arm_6916(ins, pc),
        0x1b05 => parse_arm_6917(ins, pc),
        0x1b06 => parse_arm_6918(ins, pc),
        0x1b07 => parse_arm_6919(ins, pc),
        0x1b08 => parse_arm_6920(ins, pc),
        0x1b09 => parse_arm_6921(ins, pc),
        0x1b0a => parse_arm_6922(ins, pc),
        0x1b0b => parse_arm_6923(ins, pc),
        0x1b0c => parse_arm_6924(ins, pc),
        0x1b0d => parse_arm_6925(ins, pc),
        0x1b0e => parse_arm_6926(ins, pc),
        0x1b0f => parse_arm_6927(ins, pc),
        0x1b10 => parse_arm_6928(ins, pc),
        0x1b11 => parse_arm_6929(ins, pc),
        0x1b12 => parse_arm_6930(ins, pc),
        0x1b13 => parse_arm_6931(ins, pc),
        0x1b14 => parse_arm_6932(ins, pc),
        0x1b15 => parse_arm_6933(ins, pc),
        0x1b16 => parse_arm_6934(ins, pc),
        0x1b17 => parse_arm_6935(ins, pc),
        0x1b18 => parse_arm_6936(ins, pc),
        0x1b19 => parse_arm_6937(ins, pc),
        0x1b1a => parse_arm_6938(ins, pc),
        0x1b1b => parse_arm_6939(ins, pc),
        0x1b1c => parse_arm_6940(ins, pc),
        0x1b1d => parse_arm_6941(ins, pc),
        0x1b1e => parse_arm_6942(ins, pc),
        0x1b1f => parse_arm_6943(ins, pc),
        0x1b20 => parse_arm_6944(ins, pc),
        0x1b21 => parse_arm_6945(ins, pc),
        0x1b22 => parse_arm_6946(ins, pc),
        0x1b23 => parse_arm_6947(ins, pc),
        0x1b24 => parse_arm_6948(ins, pc),
        0x1b25 => parse_arm_6949(ins, pc),
        0x1b26 => parse_arm_6950(ins, pc),
        0x1b27 => parse_arm_6951(ins, pc),
        0x1b28 => parse_arm_6952(ins, pc),
        0x1b29 => parse_arm_6953(ins, pc),
        0x1b2a => parse_arm_6954(ins, pc),
        0x1b2b => parse_arm_6955(ins, pc),
        0x1b2c => parse_arm_6956(ins, pc),
        0x1b2d => parse_arm_6957(ins, pc),
        0x1b2e => parse_arm_6958(ins, pc),
        0x1b2f => parse_arm_6959(ins, pc),
        0x1b30 => parse_arm_6960(ins, pc),
        0x1b31 => parse_arm_6961(ins, pc),
        0x1b32 => parse_arm_6962(ins, pc),
        0x1b33 => parse_arm_6963(ins, pc),
        0x1b34 => parse_arm_6964(ins, pc),
        0x1b35 => parse_arm_6965(ins, pc),
        0x1b36 => parse_arm_6966(ins, pc),
        0x1b37 => parse_arm_6967(ins, pc),
        0x1b38 => parse_arm_6968(ins, pc),
        0x1b39 => parse_arm_6969(ins, pc),
        0x1b3a => parse_arm_6970(ins, pc),
        0x1b3b => parse_arm_6971(ins, pc),
        0x1b3c => parse_arm_6972(ins, pc),
        0x1b3d => parse_arm_6973(ins, pc),
        0x1b3e => parse_arm_6974(ins, pc),
        0x1b3f => parse_arm_6975(ins, pc),
        0x1b40 => parse_arm_6976(ins, pc),
        0x1b41 => parse_arm_6977(ins, pc),
        0x1b42 => parse_arm_6978(ins, pc),
        0x1b43 => parse_arm_6979(ins, pc),
        0x1b44 => parse_arm_6980(ins, pc),
        0x1b45 => parse_arm_6981(ins, pc),
        0x1b46 => parse_arm_6982(ins, pc),
        0x1b47 => parse_arm_6983(ins, pc),
        0x1b48 => parse_arm_6984(ins, pc),
        0x1b49 => parse_arm_6985(ins, pc),
        0x1b4a => parse_arm_6986(ins, pc),
        0x1b4b => parse_arm_6987(ins, pc),
        0x1b4c => parse_arm_6988(ins, pc),
        0x1b4d => parse_arm_6989(ins, pc),
        0x1b4e => parse_arm_6990(ins, pc),
        0x1b4f => parse_arm_6991(ins, pc),
        0x1b50 => parse_arm_6992(ins, pc),
        0x1b51 => parse_arm_6993(ins, pc),
        0x1b52 => parse_arm_6994(ins, pc),
        0x1b53 => parse_arm_6995(ins, pc),
        0x1b54 => parse_arm_6996(ins, pc),
        0x1b55 => parse_arm_6997(ins, pc),
        0x1b56 => parse_arm_6998(ins, pc),
        0x1b57 => parse_arm_6999(ins, pc),
        0x1b58 => parse_arm_7000(ins, pc),
        0x1b59 => parse_arm_7001(ins, pc),
        0x1b5a => parse_arm_7002(ins, pc),
        0x1b5b => parse_arm_7003(ins, pc),
        0x1b5c => parse_arm_7004(ins, pc),
        0x1b5d => parse_arm_7005(ins, pc),
        0x1b5e => parse_arm_7006(ins, pc),
        0x1b5f => parse_arm_7007(ins, pc),
        0x1b60 => parse_arm_7008(ins, pc),
        0x1b61 => parse_arm_7009(ins, pc),
        0x1b62 => parse_arm_7010(ins, pc),
        0x1b63 => parse_arm_7011(ins, pc),
        0x1b64 => parse_arm_7012(ins, pc),
        0x1b65 => parse_arm_7013(ins, pc),
        0x1b66 => parse_arm_7014(ins, pc),
        0x1b67 => parse_arm_7015(ins, pc),
        0x1b68 => parse_arm_7016(ins, pc),
        0x1b69 => parse_arm_7017(ins, pc),
        0x1b6a => parse_arm_7018(ins, pc),
        0x1b6b => parse_arm_7019(ins, pc),
        0x1b6c => parse_arm_7020(ins, pc),
        0x1b6d => parse_arm_7021(ins, pc),
        0x1b6e => parse_arm_7022(ins, pc),
        0x1b6f => parse_arm_7023(ins, pc),
        0x1b70 => parse_arm_7024(ins, pc),
        0x1b71 => parse_arm_7025(ins, pc),
        0x1b72 => parse_arm_7026(ins, pc),
        0x1b73 => parse_arm_7027(ins, pc),
        0x1b74 => parse_arm_7028(ins, pc),
        0x1b75 => parse_arm_7029(ins, pc),
        0x1b76 => parse_arm_7030(ins, pc),
        0x1b77 => parse_arm_7031(ins, pc),
        0x1b78 => parse_arm_7032(ins, pc),
        0x1b79 => parse_arm_7033(ins, pc),
        0x1b7a => parse_arm_7034(ins, pc),
        0x1b7b => parse_arm_7035(ins, pc),
        0x1b7c => parse_arm_7036(ins, pc),
        0x1b7d => parse_arm_7037(ins, pc),
        0x1b7e => parse_arm_7038(ins, pc),
        0x1b7f => parse_arm_7039(ins, pc),
        0x1b80 => parse_arm_7040(ins, pc),
        0x1b81 => parse_arm_7041(ins, pc),
        0x1b82 => parse_arm_7042(ins, pc),
        0x1b83 => parse_arm_7043(ins, pc),
        0x1b84 => parse_arm_7044(ins, pc),
        0x1b85 => parse_arm_7045(ins, pc),
        0x1b86 => parse_arm_7046(ins, pc),
        0x1b87 => parse_arm_7047(ins, pc),
        0x1b88 => parse_arm_7048(ins, pc),
        0x1b89 => parse_arm_7049(ins, pc),
        0x1b8a => parse_arm_7050(ins, pc),
        0x1b8b => parse_arm_7051(ins, pc),
        0x1b8c => parse_arm_7052(ins, pc),
        0x1b8d => parse_arm_7053(ins, pc),
        0x1b8e => parse_arm_7054(ins, pc),
        0x1b8f => parse_arm_7055(ins, pc),
        0x1b90 => parse_arm_7056(ins, pc),
        0x1b91 => parse_arm_7057(ins, pc),
        0x1b92 => parse_arm_7058(ins, pc),
        0x1b93 => parse_arm_7059(ins, pc),
        0x1b94 => parse_arm_7060(ins, pc),
        0x1b95 => parse_arm_7061(ins, pc),
        0x1b96 => parse_arm_7062(ins, pc),
        0x1b97 => parse_arm_7063(ins, pc),
        0x1b98 => parse_arm_7064(ins, pc),
        0x1b99 => parse_arm_7065(ins, pc),
        0x1b9a => parse_arm_7066(ins, pc),
        0x1b9b => parse_arm_7067(ins, pc),
        0x1b9c => parse_arm_7068(ins, pc),
        0x1b9d => parse_arm_7069(ins, pc),
        0x1b9e => parse_arm_7070(ins, pc),
        0x1b9f => parse_arm_7071(ins, pc),
        0x1ba0 => parse_arm_7072(ins, pc),
        0x1ba1 => parse_arm_7073(ins, pc),
        0x1ba2 => parse_arm_7074(ins, pc),
        0x1ba3 => parse_arm_7075(ins, pc),
        0x1ba4 => parse_arm_7076(ins, pc),
        0x1ba5 => parse_arm_7077(ins, pc),
        0x1ba6 => parse_arm_7078(ins, pc),
        0x1ba7 => parse_arm_7079(ins, pc),
        0x1ba8 => parse_arm_7080(ins, pc),
        0x1ba9 => parse_arm_7081(ins, pc),
        0x1baa => parse_arm_7082(ins, pc),
        0x1bab => parse_arm_7083(ins, pc),
        0x1bac => parse_arm_7084(ins, pc),
        0x1bad => parse_arm_7085(ins, pc),
        0x1bae => parse_arm_7086(ins, pc),
        0x1baf => parse_arm_7087(ins, pc),
        0x1bb0 => parse_arm_7088(ins, pc),
        0x1bb1 => parse_arm_7089(ins, pc),
        0x1bb2 => parse_arm_7090(ins, pc),
        0x1bb3 => parse_arm_7091(ins, pc),
        0x1bb4 => parse_arm_7092(ins, pc),
        0x1bb5 => parse_arm_7093(ins, pc),
        0x1bb6 => parse_arm_7094(ins, pc),
        0x1bb7 => parse_arm_7095(ins, pc),
        0x1bb8 => parse_arm_7096(ins, pc),
        0x1bb9 => parse_arm_7097(ins, pc),
        0x1bba => parse_arm_7098(ins, pc),
        0x1bbb => parse_arm_7099(ins, pc),
        0x1bbc => parse_arm_7100(ins, pc),
        0x1bbd => parse_arm_7101(ins, pc),
        0x1bbe => parse_arm_7102(ins, pc),
        0x1bbf => parse_arm_7103(ins, pc),
        0x1bc0 => parse_arm_7104(ins, pc),
        0x1bc1 => parse_arm_7105(ins, pc),
        0x1bc2 => parse_arm_7106(ins, pc),
        0x1bc3 => parse_arm_7107(ins, pc),
        0x1bc4 => parse_arm_7108(ins, pc),
        0x1bc5 => parse_arm_7109(ins, pc),
        0x1bc6 => parse_arm_7110(ins, pc),
        0x1bc7 => parse_arm_7111(ins, pc),
        0x1bc8 => parse_arm_7112(ins, pc),
        0x1bc9 => parse_arm_7113(ins, pc),
        0x1bca => parse_arm_7114(ins, pc),
        0x1bcb => parse_arm_7115(ins, pc),
        0x1bcc => parse_arm_7116(ins, pc),
        0x1bcd => parse_arm_7117(ins, pc),
        0x1bce => parse_arm_7118(ins, pc),
        0x1bcf => parse_arm_7119(ins, pc),
        0x1bd0 => parse_arm_7120(ins, pc),
        0x1bd1 => parse_arm_7121(ins, pc),
        0x1bd2 => parse_arm_7122(ins, pc),
        0x1bd3 => parse_arm_7123(ins, pc),
        0x1bd4 => parse_arm_7124(ins, pc),
        0x1bd5 => parse_arm_7125(ins, pc),
        0x1bd6 => parse_arm_7126(ins, pc),
        0x1bd7 => parse_arm_7127(ins, pc),
        0x1bd8 => parse_arm_7128(ins, pc),
        0x1bd9 => parse_arm_7129(ins, pc),
        0x1bda => parse_arm_7130(ins, pc),
        0x1bdb => parse_arm_7131(ins, pc),
        0x1bdc => parse_arm_7132(ins, pc),
        0x1bdd => parse_arm_7133(ins, pc),
        0x1bde => parse_arm_7134(ins, pc),
        0x1bdf => parse_arm_7135(ins, pc),
        0x1be0 => parse_arm_7136(ins, pc),
        0x1be1 => parse_arm_7137(ins, pc),
        0x1be2 => parse_arm_7138(ins, pc),
        0x1be3 => parse_arm_7139(ins, pc),
        0x1be4 => parse_arm_7140(ins, pc),
        0x1be5 => parse_arm_7141(ins, pc),
        0x1be6 => parse_arm_7142(ins, pc),
        0x1be7 => parse_arm_7143(ins, pc),
        0x1be8 => parse_arm_7144(ins, pc),
        0x1be9 => parse_arm_7145(ins, pc),
        0x1bea => parse_arm_7146(ins, pc),
        0x1beb => parse_arm_7147(ins, pc),
        0x1bec => parse_arm_7148(ins, pc),
        0x1bed => parse_arm_7149(ins, pc),
        0x1bee => parse_arm_7150(ins, pc),
        0x1bef => parse_arm_7151(ins, pc),
        0x1bf0 => parse_arm_7152(ins, pc),
        0x1bf1 => parse_arm_7153(ins, pc),
        0x1bf2 => parse_arm_7154(ins, pc),
        0x1bf3 => parse_arm_7155(ins, pc),
        0x1bf4 => parse_arm_7156(ins, pc),
        0x1bf5 => parse_arm_7157(ins, pc),
        0x1bf6 => parse_arm_7158(ins, pc),
        0x1bf7 => parse_arm_7159(ins, pc),
        0x1bf8 => parse_arm_7160(ins, pc),
        0x1bf9 => parse_arm_7161(ins, pc),
        0x1bfa => parse_arm_7162(ins, pc),
        0x1bfb => parse_arm_7163(ins, pc),
        0x1bfc => parse_arm_7164(ins, pc),
        0x1bfd => parse_arm_7165(ins, pc),
        0x1bfe => parse_arm_7166(ins, pc),
        0x1bff => parse_arm_7167(ins, pc),
        0x1c00 => parse_arm_7168(ins, pc),
        0x1c01 => parse_arm_7169(ins, pc),
        0x1c02 => parse_arm_7170(ins, pc),
        0x1c03 => parse_arm_7171(ins, pc),
        0x1c04 => parse_arm_7172(ins, pc),
        0x1c05 => parse_arm_7173(ins, pc),
        0x1c06 => parse_arm_7174(ins, pc),
        0x1c07 => parse_arm_7175(ins, pc),
        0x1c08 => parse_arm_7176(ins, pc),
        0x1c09 => parse_arm_7177(ins, pc),
        0x1c0a => parse_arm_7178(ins, pc),
        0x1c0b => parse_arm_7179(ins, pc),
        0x1c0c => parse_arm_7180(ins, pc),
        0x1c0d => parse_arm_7181(ins, pc),
        0x1c0e => parse_arm_7182(ins, pc),
        0x1c0f => parse_arm_7183(ins, pc),
        0x1c10 => parse_arm_7184(ins, pc),
        0x1c11 => parse_arm_7185(ins, pc),
        0x1c12 => parse_arm_7186(ins, pc),
        0x1c13 => parse_arm_7187(ins, pc),
        0x1c14 => parse_arm_7188(ins, pc),
        0x1c15 => parse_arm_7189(ins, pc),
        0x1c16 => parse_arm_7190(ins, pc),
        0x1c17 => parse_arm_7191(ins, pc),
        0x1c18 => parse_arm_7192(ins, pc),
        0x1c19 => parse_arm_7193(ins, pc),
        0x1c1a => parse_arm_7194(ins, pc),
        0x1c1b => parse_arm_7195(ins, pc),
        0x1c1c => parse_arm_7196(ins, pc),
        0x1c1d => parse_arm_7197(ins, pc),
        0x1c1e => parse_arm_7198(ins, pc),
        0x1c1f => parse_arm_7199(ins, pc),
        0x1c20 => parse_arm_7200(ins, pc),
        0x1c21 => parse_arm_7201(ins, pc),
        0x1c22 => parse_arm_7202(ins, pc),
        0x1c23 => parse_arm_7203(ins, pc),
        0x1c24 => parse_arm_7204(ins, pc),
        0x1c25 => parse_arm_7205(ins, pc),
        0x1c26 => parse_arm_7206(ins, pc),
        0x1c27 => parse_arm_7207(ins, pc),
        0x1c28 => parse_arm_7208(ins, pc),
        0x1c29 => parse_arm_7209(ins, pc),
        0x1c2a => parse_arm_7210(ins, pc),
        0x1c2b => parse_arm_7211(ins, pc),
        0x1c2c => parse_arm_7212(ins, pc),
        0x1c2d => parse_arm_7213(ins, pc),
        0x1c2e => parse_arm_7214(ins, pc),
        0x1c2f => parse_arm_7215(ins, pc),
        0x1c30 => parse_arm_7216(ins, pc),
        0x1c31 => parse_arm_7217(ins, pc),
        0x1c32 => parse_arm_7218(ins, pc),
        0x1c33 => parse_arm_7219(ins, pc),
        0x1c34 => parse_arm_7220(ins, pc),
        0x1c35 => parse_arm_7221(ins, pc),
        0x1c36 => parse_arm_7222(ins, pc),
        0x1c37 => parse_arm_7223(ins, pc),
        0x1c38 => parse_arm_7224(ins, pc),
        0x1c39 => parse_arm_7225(ins, pc),
        0x1c3a => parse_arm_7226(ins, pc),
        0x1c3b => parse_arm_7227(ins, pc),
        0x1c3c => parse_arm_7228(ins, pc),
        0x1c3d => parse_arm_7229(ins, pc),
        0x1c3e => parse_arm_7230(ins, pc),
        0x1c3f => parse_arm_7231(ins, pc),
        0x1c40 => parse_arm_7232(ins, pc),
        0x1c41 => parse_arm_7233(ins, pc),
        0x1c42 => parse_arm_7234(ins, pc),
        0x1c43 => parse_arm_7235(ins, pc),
        0x1c44 => parse_arm_7236(ins, pc),
        0x1c45 => parse_arm_7237(ins, pc),
        0x1c46 => parse_arm_7238(ins, pc),
        0x1c47 => parse_arm_7239(ins, pc),
        0x1c48 => parse_arm_7240(ins, pc),
        0x1c49 => parse_arm_7241(ins, pc),
        0x1c4a => parse_arm_7242(ins, pc),
        0x1c4b => parse_arm_7243(ins, pc),
        0x1c4c => parse_arm_7244(ins, pc),
        0x1c4d => parse_arm_7245(ins, pc),
        0x1c4e => parse_arm_7246(ins, pc),
        0x1c4f => parse_arm_7247(ins, pc),
        0x1c50 => parse_arm_7248(ins, pc),
        0x1c51 => parse_arm_7249(ins, pc),
        0x1c52 => parse_arm_7250(ins, pc),
        0x1c53 => parse_arm_7251(ins, pc),
        0x1c54 => parse_arm_7252(ins, pc),
        0x1c55 => parse_arm_7253(ins, pc),
        0x1c56 => parse_arm_7254(ins, pc),
        0x1c57 => parse_arm_7255(ins, pc),
        0x1c58 => parse_arm_7256(ins, pc),
        0x1c59 => parse_arm_7257(ins, pc),
        0x1c5a => parse_arm_7258(ins, pc),
        0x1c5b => parse_arm_7259(ins, pc),
        0x1c5c => parse_arm_7260(ins, pc),
        0x1c5d => parse_arm_7261(ins, pc),
        0x1c5e => parse_arm_7262(ins, pc),
        0x1c5f => parse_arm_7263(ins, pc),
        0x1c60 => parse_arm_7264(ins, pc),
        0x1c61 => parse_arm_7265(ins, pc),
        0x1c62 => parse_arm_7266(ins, pc),
        0x1c63 => parse_arm_7267(ins, pc),
        0x1c64 => parse_arm_7268(ins, pc),
        0x1c65 => parse_arm_7269(ins, pc),
        0x1c66 => parse_arm_7270(ins, pc),
        0x1c67 => parse_arm_7271(ins, pc),
        0x1c68 => parse_arm_7272(ins, pc),
        0x1c69 => parse_arm_7273(ins, pc),
        0x1c6a => parse_arm_7274(ins, pc),
        0x1c6b => parse_arm_7275(ins, pc),
        0x1c6c => parse_arm_7276(ins, pc),
        0x1c6d => parse_arm_7277(ins, pc),
        0x1c6e => parse_arm_7278(ins, pc),
        0x1c6f => parse_arm_7279(ins, pc),
        0x1c70 => parse_arm_7280(ins, pc),
        0x1c71 => parse_arm_7281(ins, pc),
        0x1c72 => parse_arm_7282(ins, pc),
        0x1c73 => parse_arm_7283(ins, pc),
        0x1c74 => parse_arm_7284(ins, pc),
        0x1c75 => parse_arm_7285(ins, pc),
        0x1c76 => parse_arm_7286(ins, pc),
        0x1c77 => parse_arm_7287(ins, pc),
        0x1c78 => parse_arm_7288(ins, pc),
        0x1c79 => parse_arm_7289(ins, pc),
        0x1c7a => parse_arm_7290(ins, pc),
        0x1c7b => parse_arm_7291(ins, pc),
        0x1c7c => parse_arm_7292(ins, pc),
        0x1c7d => parse_arm_7293(ins, pc),
        0x1c7e => parse_arm_7294(ins, pc),
        0x1c7f => parse_arm_7295(ins, pc),
        0x1c80 => parse_arm_7296(ins, pc),
        0x1c81 => parse_arm_7297(ins, pc),
        0x1c82 => parse_arm_7298(ins, pc),
        0x1c83 => parse_arm_7299(ins, pc),
        0x1c84 => parse_arm_7300(ins, pc),
        0x1c85 => parse_arm_7301(ins, pc),
        0x1c86 => parse_arm_7302(ins, pc),
        0x1c87 => parse_arm_7303(ins, pc),
        0x1c88 => parse_arm_7304(ins, pc),
        0x1c89 => parse_arm_7305(ins, pc),
        0x1c8a => parse_arm_7306(ins, pc),
        0x1c8b => parse_arm_7307(ins, pc),
        0x1c8c => parse_arm_7308(ins, pc),
        0x1c8d => parse_arm_7309(ins, pc),
        0x1c8e => parse_arm_7310(ins, pc),
        0x1c8f => parse_arm_7311(ins, pc),
        0x1c90 => parse_arm_7312(ins, pc),
        0x1c91 => parse_arm_7313(ins, pc),
        0x1c92 => parse_arm_7314(ins, pc),
        0x1c93 => parse_arm_7315(ins, pc),
        0x1c94 => parse_arm_7316(ins, pc),
        0x1c95 => parse_arm_7317(ins, pc),
        0x1c96 => parse_arm_7318(ins, pc),
        0x1c97 => parse_arm_7319(ins, pc),
        0x1c98 => parse_arm_7320(ins, pc),
        0x1c99 => parse_arm_7321(ins, pc),
        0x1c9a => parse_arm_7322(ins, pc),
        0x1c9b => parse_arm_7323(ins, pc),
        0x1c9c => parse_arm_7324(ins, pc),
        0x1c9d => parse_arm_7325(ins, pc),
        0x1c9e => parse_arm_7326(ins, pc),
        0x1c9f => parse_arm_7327(ins, pc),
        0x1ca0 => parse_arm_7328(ins, pc),
        0x1ca1 => parse_arm_7329(ins, pc),
        0x1ca2 => parse_arm_7330(ins, pc),
        0x1ca3 => parse_arm_7331(ins, pc),
        0x1ca4 => parse_arm_7332(ins, pc),
        0x1ca5 => parse_arm_7333(ins, pc),
        0x1ca6 => parse_arm_7334(ins, pc),
        0x1ca7 => parse_arm_7335(ins, pc),
        0x1ca8 => parse_arm_7336(ins, pc),
        0x1ca9 => parse_arm_7337(ins, pc),
        0x1caa => parse_arm_7338(ins, pc),
        0x1cab => parse_arm_7339(ins, pc),
        0x1cac => parse_arm_7340(ins, pc),
        0x1cad => parse_arm_7341(ins, pc),
        0x1cae => parse_arm_7342(ins, pc),
        0x1caf => parse_arm_7343(ins, pc),
        0x1cb0 => parse_arm_7344(ins, pc),
        0x1cb1 => parse_arm_7345(ins, pc),
        0x1cb2 => parse_arm_7346(ins, pc),
        0x1cb3 => parse_arm_7347(ins, pc),
        0x1cb4 => parse_arm_7348(ins, pc),
        0x1cb5 => parse_arm_7349(ins, pc),
        0x1cb6 => parse_arm_7350(ins, pc),
        0x1cb7 => parse_arm_7351(ins, pc),
        0x1cb8 => parse_arm_7352(ins, pc),
        0x1cb9 => parse_arm_7353(ins, pc),
        0x1cba => parse_arm_7354(ins, pc),
        0x1cbb => parse_arm_7355(ins, pc),
        0x1cbc => parse_arm_7356(ins, pc),
        0x1cbd => parse_arm_7357(ins, pc),
        0x1cbe => parse_arm_7358(ins, pc),
        0x1cbf => parse_arm_7359(ins, pc),
        0x1cc0 => parse_arm_7360(ins, pc),
        0x1cc1 => parse_arm_7361(ins, pc),
        0x1cc2 => parse_arm_7362(ins, pc),
        0x1cc3 => parse_arm_7363(ins, pc),
        0x1cc4 => parse_arm_7364(ins, pc),
        0x1cc5 => parse_arm_7365(ins, pc),
        0x1cc6 => parse_arm_7366(ins, pc),
        0x1cc7 => parse_arm_7367(ins, pc),
        0x1cc8 => parse_arm_7368(ins, pc),
        0x1cc9 => parse_arm_7369(ins, pc),
        0x1cca => parse_arm_7370(ins, pc),
        0x1ccb => parse_arm_7371(ins, pc),
        0x1ccc => parse_arm_7372(ins, pc),
        0x1ccd => parse_arm_7373(ins, pc),
        0x1cce => parse_arm_7374(ins, pc),
        0x1ccf => parse_arm_7375(ins, pc),
        0x1cd0 => parse_arm_7376(ins, pc),
        0x1cd1 => parse_arm_7377(ins, pc),
        0x1cd2 => parse_arm_7378(ins, pc),
        0x1cd3 => parse_arm_7379(ins, pc),
        0x1cd4 => parse_arm_7380(ins, pc),
        0x1cd5 => parse_arm_7381(ins, pc),
        0x1cd6 => parse_arm_7382(ins, pc),
        0x1cd7 => parse_arm_7383(ins, pc),
        0x1cd8 => parse_arm_7384(ins, pc),
        0x1cd9 => parse_arm_7385(ins, pc),
        0x1cda => parse_arm_7386(ins, pc),
        0x1cdb => parse_arm_7387(ins, pc),
        0x1cdc => parse_arm_7388(ins, pc),
        0x1cdd => parse_arm_7389(ins, pc),
        0x1cde => parse_arm_7390(ins, pc),
        0x1cdf => parse_arm_7391(ins, pc),
        0x1ce0 => parse_arm_7392(ins, pc),
        0x1ce1 => parse_arm_7393(ins, pc),
        0x1ce2 => parse_arm_7394(ins, pc),
        0x1ce3 => parse_arm_7395(ins, pc),
        0x1ce4 => parse_arm_7396(ins, pc),
        0x1ce5 => parse_arm_7397(ins, pc),
        0x1ce6 => parse_arm_7398(ins, pc),
        0x1ce7 => parse_arm_7399(ins, pc),
        0x1ce8 => parse_arm_7400(ins, pc),
        0x1ce9 => parse_arm_7401(ins, pc),
        0x1cea => parse_arm_7402(ins, pc),
        0x1ceb => parse_arm_7403(ins, pc),
        0x1cec => parse_arm_7404(ins, pc),
        0x1ced => parse_arm_7405(ins, pc),
        0x1cee => parse_arm_7406(ins, pc),
        0x1cef => parse_arm_7407(ins, pc),
        0x1cf0 => parse_arm_7408(ins, pc),
        0x1cf1 => parse_arm_7409(ins, pc),
        0x1cf2 => parse_arm_7410(ins, pc),
        0x1cf3 => parse_arm_7411(ins, pc),
        0x1cf4 => parse_arm_7412(ins, pc),
        0x1cf5 => parse_arm_7413(ins, pc),
        0x1cf6 => parse_arm_7414(ins, pc),
        0x1cf7 => parse_arm_7415(ins, pc),
        0x1cf8 => parse_arm_7416(ins, pc),
        0x1cf9 => parse_arm_7417(ins, pc),
        0x1cfa => parse_arm_7418(ins, pc),
        0x1cfb => parse_arm_7419(ins, pc),
        0x1cfc => parse_arm_7420(ins, pc),
        0x1cfd => parse_arm_7421(ins, pc),
        0x1cfe => parse_arm_7422(ins, pc),
        0x1cff => parse_arm_7423(ins, pc),
        0x1d00 => parse_arm_7424(ins, pc),
        0x1d01 => parse_arm_7425(ins, pc),
        0x1d02 => parse_arm_7426(ins, pc),
        0x1d03 => parse_arm_7427(ins, pc),
        0x1d04 => parse_arm_7428(ins, pc),
        0x1d05 => parse_arm_7429(ins, pc),
        0x1d06 => parse_arm_7430(ins, pc),
        0x1d07 => parse_arm_7431(ins, pc),
        0x1d08 => parse_arm_7432(ins, pc),
        0x1d09 => parse_arm_7433(ins, pc),
        0x1d0a => parse_arm_7434(ins, pc),
        0x1d0b => parse_arm_7435(ins, pc),
        0x1d0c => parse_arm_7436(ins, pc),
        0x1d0d => parse_arm_7437(ins, pc),
        0x1d0e => parse_arm_7438(ins, pc),
        0x1d0f => parse_arm_7439(ins, pc),
        0x1d10 => parse_arm_7440(ins, pc),
        0x1d11 => parse_arm_7441(ins, pc),
        0x1d12 => parse_arm_7442(ins, pc),
        0x1d13 => parse_arm_7443(ins, pc),
        0x1d14 => parse_arm_7444(ins, pc),
        0x1d15 => parse_arm_7445(ins, pc),
        0x1d16 => parse_arm_7446(ins, pc),
        0x1d17 => parse_arm_7447(ins, pc),
        0x1d18 => parse_arm_7448(ins, pc),
        0x1d19 => parse_arm_7449(ins, pc),
        0x1d1a => parse_arm_7450(ins, pc),
        0x1d1b => parse_arm_7451(ins, pc),
        0x1d1c => parse_arm_7452(ins, pc),
        0x1d1d => parse_arm_7453(ins, pc),
        0x1d1e => parse_arm_7454(ins, pc),
        0x1d1f => parse_arm_7455(ins, pc),
        0x1d20 => parse_arm_7456(ins, pc),
        0x1d21 => parse_arm_7457(ins, pc),
        0x1d22 => parse_arm_7458(ins, pc),
        0x1d23 => parse_arm_7459(ins, pc),
        0x1d24 => parse_arm_7460(ins, pc),
        0x1d25 => parse_arm_7461(ins, pc),
        0x1d26 => parse_arm_7462(ins, pc),
        0x1d27 => parse_arm_7463(ins, pc),
        0x1d28 => parse_arm_7464(ins, pc),
        0x1d29 => parse_arm_7465(ins, pc),
        0x1d2a => parse_arm_7466(ins, pc),
        0x1d2b => parse_arm_7467(ins, pc),
        0x1d2c => parse_arm_7468(ins, pc),
        0x1d2d => parse_arm_7469(ins, pc),
        0x1d2e => parse_arm_7470(ins, pc),
        0x1d2f => parse_arm_7471(ins, pc),
        0x1d30 => parse_arm_7472(ins, pc),
        0x1d31 => parse_arm_7473(ins, pc),
        0x1d32 => parse_arm_7474(ins, pc),
        0x1d33 => parse_arm_7475(ins, pc),
        0x1d34 => parse_arm_7476(ins, pc),
        0x1d35 => parse_arm_7477(ins, pc),
        0x1d36 => parse_arm_7478(ins, pc),
        0x1d37 => parse_arm_7479(ins, pc),
        0x1d38 => parse_arm_7480(ins, pc),
        0x1d39 => parse_arm_7481(ins, pc),
        0x1d3a => parse_arm_7482(ins, pc),
        0x1d3b => parse_arm_7483(ins, pc),
        0x1d3c => parse_arm_7484(ins, pc),
        0x1d3d => parse_arm_7485(ins, pc),
        0x1d3e => parse_arm_7486(ins, pc),
        0x1d3f => parse_arm_7487(ins, pc),
        0x1d40 => parse_arm_7488(ins, pc),
        0x1d41 => parse_arm_7489(ins, pc),
        0x1d42 => parse_arm_7490(ins, pc),
        0x1d43 => parse_arm_7491(ins, pc),
        0x1d44 => parse_arm_7492(ins, pc),
        0x1d45 => parse_arm_7493(ins, pc),
        0x1d46 => parse_arm_7494(ins, pc),
        0x1d47 => parse_arm_7495(ins, pc),
        0x1d48 => parse_arm_7496(ins, pc),
        0x1d49 => parse_arm_7497(ins, pc),
        0x1d4a => parse_arm_7498(ins, pc),
        0x1d4b => parse_arm_7499(ins, pc),
        0x1d4c => parse_arm_7500(ins, pc),
        0x1d4d => parse_arm_7501(ins, pc),
        0x1d4e => parse_arm_7502(ins, pc),
        0x1d4f => parse_arm_7503(ins, pc),
        0x1d50 => parse_arm_7504(ins, pc),
        0x1d51 => parse_arm_7505(ins, pc),
        0x1d52 => parse_arm_7506(ins, pc),
        0x1d53 => parse_arm_7507(ins, pc),
        0x1d54 => parse_arm_7508(ins, pc),
        0x1d55 => parse_arm_7509(ins, pc),
        0x1d56 => parse_arm_7510(ins, pc),
        0x1d57 => parse_arm_7511(ins, pc),
        0x1d58 => parse_arm_7512(ins, pc),
        0x1d59 => parse_arm_7513(ins, pc),
        0x1d5a => parse_arm_7514(ins, pc),
        0x1d5b => parse_arm_7515(ins, pc),
        0x1d5c => parse_arm_7516(ins, pc),
        0x1d5d => parse_arm_7517(ins, pc),
        0x1d5e => parse_arm_7518(ins, pc),
        0x1d5f => parse_arm_7519(ins, pc),
        0x1d60 => parse_arm_7520(ins, pc),
        0x1d61 => parse_arm_7521(ins, pc),
        0x1d62 => parse_arm_7522(ins, pc),
        0x1d63 => parse_arm_7523(ins, pc),
        0x1d64 => parse_arm_7524(ins, pc),
        0x1d65 => parse_arm_7525(ins, pc),
        0x1d66 => parse_arm_7526(ins, pc),
        0x1d67 => parse_arm_7527(ins, pc),
        0x1d68 => parse_arm_7528(ins, pc),
        0x1d69 => parse_arm_7529(ins, pc),
        0x1d6a => parse_arm_7530(ins, pc),
        0x1d6b => parse_arm_7531(ins, pc),
        0x1d6c => parse_arm_7532(ins, pc),
        0x1d6d => parse_arm_7533(ins, pc),
        0x1d6e => parse_arm_7534(ins, pc),
        0x1d6f => parse_arm_7535(ins, pc),
        0x1d70 => parse_arm_7536(ins, pc),
        0x1d71 => parse_arm_7537(ins, pc),
        0x1d72 => parse_arm_7538(ins, pc),
        0x1d73 => parse_arm_7539(ins, pc),
        0x1d74 => parse_arm_7540(ins, pc),
        0x1d75 => parse_arm_7541(ins, pc),
        0x1d76 => parse_arm_7542(ins, pc),
        0x1d77 => parse_arm_7543(ins, pc),
        0x1d78 => parse_arm_7544(ins, pc),
        0x1d79 => parse_arm_7545(ins, pc),
        0x1d7a => parse_arm_7546(ins, pc),
        0x1d7b => parse_arm_7547(ins, pc),
        0x1d7c => parse_arm_7548(ins, pc),
        0x1d7d => parse_arm_7549(ins, pc),
        0x1d7e => parse_arm_7550(ins, pc),
        0x1d7f => parse_arm_7551(ins, pc),
        0x1d80 => parse_arm_7552(ins, pc),
        0x1d81 => parse_arm_7553(ins, pc),
        0x1d82 => parse_arm_7554(ins, pc),
        0x1d83 => parse_arm_7555(ins, pc),
        0x1d84 => parse_arm_7556(ins, pc),
        0x1d85 => parse_arm_7557(ins, pc),
        0x1d86 => parse_arm_7558(ins, pc),
        0x1d87 => parse_arm_7559(ins, pc),
        0x1d88 => parse_arm_7560(ins, pc),
        0x1d89 => parse_arm_7561(ins, pc),
        0x1d8a => parse_arm_7562(ins, pc),
        0x1d8b => parse_arm_7563(ins, pc),
        0x1d8c => parse_arm_7564(ins, pc),
        0x1d8d => parse_arm_7565(ins, pc),
        0x1d8e => parse_arm_7566(ins, pc),
        0x1d8f => parse_arm_7567(ins, pc),
        0x1d90 => parse_arm_7568(ins, pc),
        0x1d91 => parse_arm_7569(ins, pc),
        0x1d92 => parse_arm_7570(ins, pc),
        0x1d93 => parse_arm_7571(ins, pc),
        0x1d94 => parse_arm_7572(ins, pc),
        0x1d95 => parse_arm_7573(ins, pc),
        0x1d96 => parse_arm_7574(ins, pc),
        0x1d97 => parse_arm_7575(ins, pc),
        0x1d98 => parse_arm_7576(ins, pc),
        0x1d99 => parse_arm_7577(ins, pc),
        0x1d9a => parse_arm_7578(ins, pc),
        0x1d9b => parse_arm_7579(ins, pc),
        0x1d9c => parse_arm_7580(ins, pc),
        0x1d9d => parse_arm_7581(ins, pc),
        0x1d9e => parse_arm_7582(ins, pc),
        0x1d9f => parse_arm_7583(ins, pc),
        0x1da0 => parse_arm_7584(ins, pc),
        0x1da1 => parse_arm_7585(ins, pc),
        0x1da2 => parse_arm_7586(ins, pc),
        0x1da3 => parse_arm_7587(ins, pc),
        0x1da4 => parse_arm_7588(ins, pc),
        0x1da5 => parse_arm_7589(ins, pc),
        0x1da6 => parse_arm_7590(ins, pc),
        0x1da7 => parse_arm_7591(ins, pc),
        0x1da8 => parse_arm_7592(ins, pc),
        0x1da9 => parse_arm_7593(ins, pc),
        0x1daa => parse_arm_7594(ins, pc),
        0x1dab => parse_arm_7595(ins, pc),
        0x1dac => parse_arm_7596(ins, pc),
        0x1dad => parse_arm_7597(ins, pc),
        0x1dae => parse_arm_7598(ins, pc),
        0x1daf => parse_arm_7599(ins, pc),
        0x1db0 => parse_arm_7600(ins, pc),
        0x1db1 => parse_arm_7601(ins, pc),
        0x1db2 => parse_arm_7602(ins, pc),
        0x1db3 => parse_arm_7603(ins, pc),
        0x1db4 => parse_arm_7604(ins, pc),
        0x1db5 => parse_arm_7605(ins, pc),
        0x1db6 => parse_arm_7606(ins, pc),
        0x1db7 => parse_arm_7607(ins, pc),
        0x1db8 => parse_arm_7608(ins, pc),
        0x1db9 => parse_arm_7609(ins, pc),
        0x1dba => parse_arm_7610(ins, pc),
        0x1dbb => parse_arm_7611(ins, pc),
        0x1dbc => parse_arm_7612(ins, pc),
        0x1dbd => parse_arm_7613(ins, pc),
        0x1dbe => parse_arm_7614(ins, pc),
        0x1dbf => parse_arm_7615(ins, pc),
        0x1dc0 => parse_arm_7616(ins, pc),
        0x1dc1 => parse_arm_7617(ins, pc),
        0x1dc2 => parse_arm_7618(ins, pc),
        0x1dc3 => parse_arm_7619(ins, pc),
        0x1dc4 => parse_arm_7620(ins, pc),
        0x1dc5 => parse_arm_7621(ins, pc),
        0x1dc6 => parse_arm_7622(ins, pc),
        0x1dc7 => parse_arm_7623(ins, pc),
        0x1dc8 => parse_arm_7624(ins, pc),
        0x1dc9 => parse_arm_7625(ins, pc),
        0x1dca => parse_arm_7626(ins, pc),
        0x1dcb => parse_arm_7627(ins, pc),
        0x1dcc => parse_arm_7628(ins, pc),
        0x1dcd => parse_arm_7629(ins, pc),
        0x1dce => parse_arm_7630(ins, pc),
        0x1dcf => parse_arm_7631(ins, pc),
        0x1dd0 => parse_arm_7632(ins, pc),
        0x1dd1 => parse_arm_7633(ins, pc),
        0x1dd2 => parse_arm_7634(ins, pc),
        0x1dd3 => parse_arm_7635(ins, pc),
        0x1dd4 => parse_arm_7636(ins, pc),
        0x1dd5 => parse_arm_7637(ins, pc),
        0x1dd6 => parse_arm_7638(ins, pc),
        0x1dd7 => parse_arm_7639(ins, pc),
        0x1dd8 => parse_arm_7640(ins, pc),
        0x1dd9 => parse_arm_7641(ins, pc),
        0x1dda => parse_arm_7642(ins, pc),
        0x1ddb => parse_arm_7643(ins, pc),
        0x1ddc => parse_arm_7644(ins, pc),
        0x1ddd => parse_arm_7645(ins, pc),
        0x1dde => parse_arm_7646(ins, pc),
        0x1ddf => parse_arm_7647(ins, pc),
        0x1de0 => parse_arm_7648(ins, pc),
        0x1de1 => parse_arm_7649(ins, pc),
        0x1de2 => parse_arm_7650(ins, pc),
        0x1de3 => parse_arm_7651(ins, pc),
        0x1de4 => parse_arm_7652(ins, pc),
        0x1de5 => parse_arm_7653(ins, pc),
        0x1de6 => parse_arm_7654(ins, pc),
        0x1de7 => parse_arm_7655(ins, pc),
        0x1de8 => parse_arm_7656(ins, pc),
        0x1de9 => parse_arm_7657(ins, pc),
        0x1dea => parse_arm_7658(ins, pc),
        0x1deb => parse_arm_7659(ins, pc),
        0x1dec => parse_arm_7660(ins, pc),
        0x1ded => parse_arm_7661(ins, pc),
        0x1dee => parse_arm_7662(ins, pc),
        0x1def => parse_arm_7663(ins, pc),
        0x1df0 => parse_arm_7664(ins, pc),
        0x1df1 => parse_arm_7665(ins, pc),
        0x1df2 => parse_arm_7666(ins, pc),
        0x1df3 => parse_arm_7667(ins, pc),
        0x1df4 => parse_arm_7668(ins, pc),
        0x1df5 => parse_arm_7669(ins, pc),
        0x1df6 => parse_arm_7670(ins, pc),
        0x1df7 => parse_arm_7671(ins, pc),
        0x1df8 => parse_arm_7672(ins, pc),
        0x1df9 => parse_arm_7673(ins, pc),
        0x1dfa => parse_arm_7674(ins, pc),
        0x1dfb => parse_arm_7675(ins, pc),
        0x1dfc => parse_arm_7676(ins, pc),
        0x1dfd => parse_arm_7677(ins, pc),
        0x1dfe => parse_arm_7678(ins, pc),
        0x1dff => parse_arm_7679(ins, pc),
        0x1e00 => parse_arm_7680(ins, pc),
        0x1e01 => parse_arm_7681(ins, pc),
        0x1e02 => parse_arm_7682(ins, pc),
        0x1e03 => parse_arm_7683(ins, pc),
        0x1e04 => parse_arm_7684(ins, pc),
        0x1e05 => parse_arm_7685(ins, pc),
        0x1e06 => parse_arm_7686(ins, pc),
        0x1e07 => parse_arm_7687(ins, pc),
        0x1e08 => parse_arm_7688(ins, pc),
        0x1e09 => parse_arm_7689(ins, pc),
        0x1e0a => parse_arm_7690(ins, pc),
        0x1e0b => parse_arm_7691(ins, pc),
        0x1e0c => parse_arm_7692(ins, pc),
        0x1e0d => parse_arm_7693(ins, pc),
        0x1e0e => parse_arm_7694(ins, pc),
        0x1e0f => parse_arm_7695(ins, pc),
        0x1e10 => parse_arm_7696(ins, pc),
        0x1e11 => parse_arm_7697(ins, pc),
        0x1e12 => parse_arm_7698(ins, pc),
        0x1e13 => parse_arm_7699(ins, pc),
        0x1e14 => parse_arm_7700(ins, pc),
        0x1e15 => parse_arm_7701(ins, pc),
        0x1e16 => parse_arm_7702(ins, pc),
        0x1e17 => parse_arm_7703(ins, pc),
        0x1e18 => parse_arm_7704(ins, pc),
        0x1e19 => parse_arm_7705(ins, pc),
        0x1e1a => parse_arm_7706(ins, pc),
        0x1e1b => parse_arm_7707(ins, pc),
        0x1e1c => parse_arm_7708(ins, pc),
        0x1e1d => parse_arm_7709(ins, pc),
        0x1e1e => parse_arm_7710(ins, pc),
        0x1e1f => parse_arm_7711(ins, pc),
        0x1e20 => parse_arm_7712(ins, pc),
        0x1e21 => parse_arm_7713(ins, pc),
        0x1e22 => parse_arm_7714(ins, pc),
        0x1e23 => parse_arm_7715(ins, pc),
        0x1e24 => parse_arm_7716(ins, pc),
        0x1e25 => parse_arm_7717(ins, pc),
        0x1e26 => parse_arm_7718(ins, pc),
        0x1e27 => parse_arm_7719(ins, pc),
        0x1e28 => parse_arm_7720(ins, pc),
        0x1e29 => parse_arm_7721(ins, pc),
        0x1e2a => parse_arm_7722(ins, pc),
        0x1e2b => parse_arm_7723(ins, pc),
        0x1e2c => parse_arm_7724(ins, pc),
        0x1e2d => parse_arm_7725(ins, pc),
        0x1e2e => parse_arm_7726(ins, pc),
        0x1e2f => parse_arm_7727(ins, pc),
        0x1e30 => parse_arm_7728(ins, pc),
        0x1e31 => parse_arm_7729(ins, pc),
        0x1e32 => parse_arm_7730(ins, pc),
        0x1e33 => parse_arm_7731(ins, pc),
        0x1e34 => parse_arm_7732(ins, pc),
        0x1e35 => parse_arm_7733(ins, pc),
        0x1e36 => parse_arm_7734(ins, pc),
        0x1e37 => parse_arm_7735(ins, pc),
        0x1e38 => parse_arm_7736(ins, pc),
        0x1e39 => parse_arm_7737(ins, pc),
        0x1e3a => parse_arm_7738(ins, pc),
        0x1e3b => parse_arm_7739(ins, pc),
        0x1e3c => parse_arm_7740(ins, pc),
        0x1e3d => parse_arm_7741(ins, pc),
        0x1e3e => parse_arm_7742(ins, pc),
        0x1e3f => parse_arm_7743(ins, pc),
        0x1e40 => parse_arm_7744(ins, pc),
        0x1e41 => parse_arm_7745(ins, pc),
        0x1e42 => parse_arm_7746(ins, pc),
        0x1e43 => parse_arm_7747(ins, pc),
        0x1e44 => parse_arm_7748(ins, pc),
        0x1e45 => parse_arm_7749(ins, pc),
        0x1e46 => parse_arm_7750(ins, pc),
        0x1e47 => parse_arm_7751(ins, pc),
        0x1e48 => parse_arm_7752(ins, pc),
        0x1e49 => parse_arm_7753(ins, pc),
        0x1e4a => parse_arm_7754(ins, pc),
        0x1e4b => parse_arm_7755(ins, pc),
        0x1e4c => parse_arm_7756(ins, pc),
        0x1e4d => parse_arm_7757(ins, pc),
        0x1e4e => parse_arm_7758(ins, pc),
        0x1e4f => parse_arm_7759(ins, pc),
        0x1e50 => parse_arm_7760(ins, pc),
        0x1e51 => parse_arm_7761(ins, pc),
        0x1e52 => parse_arm_7762(ins, pc),
        0x1e53 => parse_arm_7763(ins, pc),
        0x1e54 => parse_arm_7764(ins, pc),
        0x1e55 => parse_arm_7765(ins, pc),
        0x1e56 => parse_arm_7766(ins, pc),
        0x1e57 => parse_arm_7767(ins, pc),
        0x1e58 => parse_arm_7768(ins, pc),
        0x1e59 => parse_arm_7769(ins, pc),
        0x1e5a => parse_arm_7770(ins, pc),
        0x1e5b => parse_arm_7771(ins, pc),
        0x1e5c => parse_arm_7772(ins, pc),
        0x1e5d => parse_arm_7773(ins, pc),
        0x1e5e => parse_arm_7774(ins, pc),
        0x1e5f => parse_arm_7775(ins, pc),
        0x1e60 => parse_arm_7776(ins, pc),
        0x1e61 => parse_arm_7777(ins, pc),
        0x1e62 => parse_arm_7778(ins, pc),
        0x1e63 => parse_arm_7779(ins, pc),
        0x1e64 => parse_arm_7780(ins, pc),
        0x1e65 => parse_arm_7781(ins, pc),
        0x1e66 => parse_arm_7782(ins, pc),
        0x1e67 => parse_arm_7783(ins, pc),
        0x1e68 => parse_arm_7784(ins, pc),
        0x1e69 => parse_arm_7785(ins, pc),
        0x1e6a => parse_arm_7786(ins, pc),
        0x1e6b => parse_arm_7787(ins, pc),
        0x1e6c => parse_arm_7788(ins, pc),
        0x1e6d => parse_arm_7789(ins, pc),
        0x1e6e => parse_arm_7790(ins, pc),
        0x1e6f => parse_arm_7791(ins, pc),
        0x1e70 => parse_arm_7792(ins, pc),
        0x1e71 => parse_arm_7793(ins, pc),
        0x1e72 => parse_arm_7794(ins, pc),
        0x1e73 => parse_arm_7795(ins, pc),
        0x1e74 => parse_arm_7796(ins, pc),
        0x1e75 => parse_arm_7797(ins, pc),
        0x1e76 => parse_arm_7798(ins, pc),
        0x1e77 => parse_arm_7799(ins, pc),
        0x1e78 => parse_arm_7800(ins, pc),
        0x1e79 => parse_arm_7801(ins, pc),
        0x1e7a => parse_arm_7802(ins, pc),
        0x1e7b => parse_arm_7803(ins, pc),
        0x1e7c => parse_arm_7804(ins, pc),
        0x1e7d => parse_arm_7805(ins, pc),
        0x1e7e => parse_arm_7806(ins, pc),
        0x1e7f => parse_arm_7807(ins, pc),
        0x1e80 => parse_arm_7808(ins, pc),
        0x1e81 => parse_arm_7809(ins, pc),
        0x1e82 => parse_arm_7810(ins, pc),
        0x1e83 => parse_arm_7811(ins, pc),
        0x1e84 => parse_arm_7812(ins, pc),
        0x1e85 => parse_arm_7813(ins, pc),
        0x1e86 => parse_arm_7814(ins, pc),
        0x1e87 => parse_arm_7815(ins, pc),
        0x1e88 => parse_arm_7816(ins, pc),
        0x1e89 => parse_arm_7817(ins, pc),
        0x1e8a => parse_arm_7818(ins, pc),
        0x1e8b => parse_arm_7819(ins, pc),
        0x1e8c => parse_arm_7820(ins, pc),
        0x1e8d => parse_arm_7821(ins, pc),
        0x1e8e => parse_arm_7822(ins, pc),
        0x1e8f => parse_arm_7823(ins, pc),
        0x1e90 => parse_arm_7824(ins, pc),
        0x1e91 => parse_arm_7825(ins, pc),
        0x1e92 => parse_arm_7826(ins, pc),
        0x1e93 => parse_arm_7827(ins, pc),
        0x1e94 => parse_arm_7828(ins, pc),
        0x1e95 => parse_arm_7829(ins, pc),
        0x1e96 => parse_arm_7830(ins, pc),
        0x1e97 => parse_arm_7831(ins, pc),
        0x1e98 => parse_arm_7832(ins, pc),
        0x1e99 => parse_arm_7833(ins, pc),
        0x1e9a => parse_arm_7834(ins, pc),
        0x1e9b => parse_arm_7835(ins, pc),
        0x1e9c => parse_arm_7836(ins, pc),
        0x1e9d => parse_arm_7837(ins, pc),
        0x1e9e => parse_arm_7838(ins, pc),
        0x1e9f => parse_arm_7839(ins, pc),
        0x1ea0 => parse_arm_7840(ins, pc),
        0x1ea1 => parse_arm_7841(ins, pc),
        0x1ea2 => parse_arm_7842(ins, pc),
        0x1ea3 => parse_arm_7843(ins, pc),
        0x1ea4 => parse_arm_7844(ins, pc),
        0x1ea5 => parse_arm_7845(ins, pc),
        0x1ea6 => parse_arm_7846(ins, pc),
        0x1ea7 => parse_arm_7847(ins, pc),
        0x1ea8 => parse_arm_7848(ins, pc),
        0x1ea9 => parse_arm_7849(ins, pc),
        0x1eaa => parse_arm_7850(ins, pc),
        0x1eab => parse_arm_7851(ins, pc),
        0x1eac => parse_arm_7852(ins, pc),
        0x1ead => parse_arm_7853(ins, pc),
        0x1eae => parse_arm_7854(ins, pc),
        0x1eaf => parse_arm_7855(ins, pc),
        0x1eb0 => parse_arm_7856(ins, pc),
        0x1eb1 => parse_arm_7857(ins, pc),
        0x1eb2 => parse_arm_7858(ins, pc),
        0x1eb3 => parse_arm_7859(ins, pc),
        0x1eb4 => parse_arm_7860(ins, pc),
        0x1eb5 => parse_arm_7861(ins, pc),
        0x1eb6 => parse_arm_7862(ins, pc),
        0x1eb7 => parse_arm_7863(ins, pc),
        0x1eb8 => parse_arm_7864(ins, pc),
        0x1eb9 => parse_arm_7865(ins, pc),
        0x1eba => parse_arm_7866(ins, pc),
        0x1ebb => parse_arm_7867(ins, pc),
        0x1ebc => parse_arm_7868(ins, pc),
        0x1ebd => parse_arm_7869(ins, pc),
        0x1ebe => parse_arm_7870(ins, pc),
        0x1ebf => parse_arm_7871(ins, pc),
        0x1ec0 => parse_arm_7872(ins, pc),
        0x1ec1 => parse_arm_7873(ins, pc),
        0x1ec2 => parse_arm_7874(ins, pc),
        0x1ec3 => parse_arm_7875(ins, pc),
        0x1ec4 => parse_arm_7876(ins, pc),
        0x1ec5 => parse_arm_7877(ins, pc),
        0x1ec6 => parse_arm_7878(ins, pc),
        0x1ec7 => parse_arm_7879(ins, pc),
        0x1ec8 => parse_arm_7880(ins, pc),
        0x1ec9 => parse_arm_7881(ins, pc),
        0x1eca => parse_arm_7882(ins, pc),
        0x1ecb => parse_arm_7883(ins, pc),
        0x1ecc => parse_arm_7884(ins, pc),
        0x1ecd => parse_arm_7885(ins, pc),
        0x1ece => parse_arm_7886(ins, pc),
        0x1ecf => parse_arm_7887(ins, pc),
        0x1ed0 => parse_arm_7888(ins, pc),
        0x1ed1 => parse_arm_7889(ins, pc),
        0x1ed2 => parse_arm_7890(ins, pc),
        0x1ed3 => parse_arm_7891(ins, pc),
        0x1ed4 => parse_arm_7892(ins, pc),
        0x1ed5 => parse_arm_7893(ins, pc),
        0x1ed6 => parse_arm_7894(ins, pc),
        0x1ed7 => parse_arm_7895(ins, pc),
        0x1ed8 => parse_arm_7896(ins, pc),
        0x1ed9 => parse_arm_7897(ins, pc),
        0x1eda => parse_arm_7898(ins, pc),
        0x1edb => parse_arm_7899(ins, pc),
        0x1edc => parse_arm_7900(ins, pc),
        0x1edd => parse_arm_7901(ins, pc),
        0x1ede => parse_arm_7902(ins, pc),
        0x1edf => parse_arm_7903(ins, pc),
        0x1ee0 => parse_arm_7904(ins, pc),
        0x1ee1 => parse_arm_7905(ins, pc),
        0x1ee2 => parse_arm_7906(ins, pc),
        0x1ee3 => parse_arm_7907(ins, pc),
        0x1ee4 => parse_arm_7908(ins, pc),
        0x1ee5 => parse_arm_7909(ins, pc),
        0x1ee6 => parse_arm_7910(ins, pc),
        0x1ee7 => parse_arm_7911(ins, pc),
        0x1ee8 => parse_arm_7912(ins, pc),
        0x1ee9 => parse_arm_7913(ins, pc),
        0x1eea => parse_arm_7914(ins, pc),
        0x1eeb => parse_arm_7915(ins, pc),
        0x1eec => parse_arm_7916(ins, pc),
        0x1eed => parse_arm_7917(ins, pc),
        0x1eee => parse_arm_7918(ins, pc),
        0x1eef => parse_arm_7919(ins, pc),
        0x1ef0 => parse_arm_7920(ins, pc),
        0x1ef1 => parse_arm_7921(ins, pc),
        0x1ef2 => parse_arm_7922(ins, pc),
        0x1ef3 => parse_arm_7923(ins, pc),
        0x1ef4 => parse_arm_7924(ins, pc),
        0x1ef5 => parse_arm_7925(ins, pc),
        0x1ef6 => parse_arm_7926(ins, pc),
        0x1ef7 => parse_arm_7927(ins, pc),
        0x1ef8 => parse_arm_7928(ins, pc),
        0x1ef9 => parse_arm_7929(ins, pc),
        0x1efa => parse_arm_7930(ins, pc),
        0x1efb => parse_arm_7931(ins, pc),
        0x1efc => parse_arm_7932(ins, pc),
        0x1efd => parse_arm_7933(ins, pc),
        0x1efe => parse_arm_7934(ins, pc),
        0x1eff => parse_arm_7935(ins, pc),
        0x1f00 => parse_arm_7936(ins, pc),
        0x1f01 => parse_arm_7937(ins, pc),
        0x1f02 => parse_arm_7938(ins, pc),
        0x1f03 => parse_arm_7939(ins, pc),
        0x1f04 => parse_arm_7940(ins, pc),
        0x1f05 => parse_arm_7941(ins, pc),
        0x1f06 => parse_arm_7942(ins, pc),
        0x1f07 => parse_arm_7943(ins, pc),
        0x1f08 => parse_arm_7944(ins, pc),
        0x1f09 => parse_arm_7945(ins, pc),
        0x1f0a => parse_arm_7946(ins, pc),
        0x1f0b => parse_arm_7947(ins, pc),
        0x1f0c => parse_arm_7948(ins, pc),
        0x1f0d => parse_arm_7949(ins, pc),
        0x1f0e => parse_arm_7950(ins, pc),
        0x1f0f => parse_arm_7951(ins, pc),
        0x1f10 => parse_arm_7952(ins, pc),
        0x1f11 => parse_arm_7953(ins, pc),
        0x1f12 => parse_arm_7954(ins, pc),
        0x1f13 => parse_arm_7955(ins, pc),
        0x1f14 => parse_arm_7956(ins, pc),
        0x1f15 => parse_arm_7957(ins, pc),
        0x1f16 => parse_arm_7958(ins, pc),
        0x1f17 => parse_arm_7959(ins, pc),
        0x1f18 => parse_arm_7960(ins, pc),
        0x1f19 => parse_arm_7961(ins, pc),
        0x1f1a => parse_arm_7962(ins, pc),
        0x1f1b => parse_arm_7963(ins, pc),
        0x1f1c => parse_arm_7964(ins, pc),
        0x1f1d => parse_arm_7965(ins, pc),
        0x1f1e => parse_arm_7966(ins, pc),
        0x1f1f => parse_arm_7967(ins, pc),
        0x1f20 => parse_arm_7968(ins, pc),
        0x1f21 => parse_arm_7969(ins, pc),
        0x1f22 => parse_arm_7970(ins, pc),
        0x1f23 => parse_arm_7971(ins, pc),
        0x1f24 => parse_arm_7972(ins, pc),
        0x1f25 => parse_arm_7973(ins, pc),
        0x1f26 => parse_arm_7974(ins, pc),
        0x1f27 => parse_arm_7975(ins, pc),
        0x1f28 => parse_arm_7976(ins, pc),
        0x1f29 => parse_arm_7977(ins, pc),
        0x1f2a => parse_arm_7978(ins, pc),
        0x1f2b => parse_arm_7979(ins, pc),
        0x1f2c => parse_arm_7980(ins, pc),
        0x1f2d => parse_arm_7981(ins, pc),
        0x1f2e => parse_arm_7982(ins, pc),
        0x1f2f => parse_arm_7983(ins, pc),
        0x1f30 => parse_arm_7984(ins, pc),
        0x1f31 => parse_arm_7985(ins, pc),
        0x1f32 => parse_arm_7986(ins, pc),
        0x1f33 => parse_arm_7987(ins, pc),
        0x1f34 => parse_arm_7988(ins, pc),
        0x1f35 => parse_arm_7989(ins, pc),
        0x1f36 => parse_arm_7990(ins, pc),
        0x1f37 => parse_arm_7991(ins, pc),
        0x1f38 => parse_arm_7992(ins, pc),
        0x1f39 => parse_arm_7993(ins, pc),
        0x1f3a => parse_arm_7994(ins, pc),
        0x1f3b => parse_arm_7995(ins, pc),
        0x1f3c => parse_arm_7996(ins, pc),
        0x1f3d => parse_arm_7997(ins, pc),
        0x1f3e => parse_arm_7998(ins, pc),
        0x1f3f => parse_arm_7999(ins, pc),
        0x1f40 => parse_arm_8000(ins, pc),
        0x1f41 => parse_arm_8001(ins, pc),
        0x1f42 => parse_arm_8002(ins, pc),
        0x1f43 => parse_arm_8003(ins, pc),
        0x1f44 => parse_arm_8004(ins, pc),
        0x1f45 => parse_arm_8005(ins, pc),
        0x1f46 => parse_arm_8006(ins, pc),
        0x1f47 => parse_arm_8007(ins, pc),
        0x1f48 => parse_arm_8008(ins, pc),
        0x1f49 => parse_arm_8009(ins, pc),
        0x1f4a => parse_arm_8010(ins, pc),
        0x1f4b => parse_arm_8011(ins, pc),
        0x1f4c => parse_arm_8012(ins, pc),
        0x1f4d => parse_arm_8013(ins, pc),
        0x1f4e => parse_arm_8014(ins, pc),
        0x1f4f => parse_arm_8015(ins, pc),
        0x1f50 => parse_arm_8016(ins, pc),
        0x1f51 => parse_arm_8017(ins, pc),
        0x1f52 => parse_arm_8018(ins, pc),
        0x1f53 => parse_arm_8019(ins, pc),
        0x1f54 => parse_arm_8020(ins, pc),
        0x1f55 => parse_arm_8021(ins, pc),
        0x1f56 => parse_arm_8022(ins, pc),
        0x1f57 => parse_arm_8023(ins, pc),
        0x1f58 => parse_arm_8024(ins, pc),
        0x1f59 => parse_arm_8025(ins, pc),
        0x1f5a => parse_arm_8026(ins, pc),
        0x1f5b => parse_arm_8027(ins, pc),
        0x1f5c => parse_arm_8028(ins, pc),
        0x1f5d => parse_arm_8029(ins, pc),
        0x1f5e => parse_arm_8030(ins, pc),
        0x1f5f => parse_arm_8031(ins, pc),
        0x1f60 => parse_arm_8032(ins, pc),
        0x1f61 => parse_arm_8033(ins, pc),
        0x1f62 => parse_arm_8034(ins, pc),
        0x1f63 => parse_arm_8035(ins, pc),
        0x1f64 => parse_arm_8036(ins, pc),
        0x1f65 => parse_arm_8037(ins, pc),
        0x1f66 => parse_arm_8038(ins, pc),
        0x1f67 => parse_arm_8039(ins, pc),
        0x1f68 => parse_arm_8040(ins, pc),
        0x1f69 => parse_arm_8041(ins, pc),
        0x1f6a => parse_arm_8042(ins, pc),
        0x1f6b => parse_arm_8043(ins, pc),
        0x1f6c => parse_arm_8044(ins, pc),
        0x1f6d => parse_arm_8045(ins, pc),
        0x1f6e => parse_arm_8046(ins, pc),
        0x1f6f => parse_arm_8047(ins, pc),
        0x1f70 => parse_arm_8048(ins, pc),
        0x1f71 => parse_arm_8049(ins, pc),
        0x1f72 => parse_arm_8050(ins, pc),
        0x1f73 => parse_arm_8051(ins, pc),
        0x1f74 => parse_arm_8052(ins, pc),
        0x1f75 => parse_arm_8053(ins, pc),
        0x1f76 => parse_arm_8054(ins, pc),
        0x1f77 => parse_arm_8055(ins, pc),
        0x1f78 => parse_arm_8056(ins, pc),
        0x1f79 => parse_arm_8057(ins, pc),
        0x1f7a => parse_arm_8058(ins, pc),
        0x1f7b => parse_arm_8059(ins, pc),
        0x1f7c => parse_arm_8060(ins, pc),
        0x1f7d => parse_arm_8061(ins, pc),
        0x1f7e => parse_arm_8062(ins, pc),
        0x1f7f => parse_arm_8063(ins, pc),
        0x1f80 => parse_arm_8064(ins, pc),
        0x1f81 => parse_arm_8065(ins, pc),
        0x1f82 => parse_arm_8066(ins, pc),
        0x1f83 => parse_arm_8067(ins, pc),
        0x1f84 => parse_arm_8068(ins, pc),
        0x1f85 => parse_arm_8069(ins, pc),
        0x1f86 => parse_arm_8070(ins, pc),
        0x1f87 => parse_arm_8071(ins, pc),
        0x1f88 => parse_arm_8072(ins, pc),
        0x1f89 => parse_arm_8073(ins, pc),
        0x1f8a => parse_arm_8074(ins, pc),
        0x1f8b => parse_arm_8075(ins, pc),
        0x1f8c => parse_arm_8076(ins, pc),
        0x1f8d => parse_arm_8077(ins, pc),
        0x1f8e => parse_arm_8078(ins, pc),
        0x1f8f => parse_arm_8079(ins, pc),
        0x1f90 => parse_arm_8080(ins, pc),
        0x1f91 => parse_arm_8081(ins, pc),
        0x1f92 => parse_arm_8082(ins, pc),
        0x1f93 => parse_arm_8083(ins, pc),
        0x1f94 => parse_arm_8084(ins, pc),
        0x1f95 => parse_arm_8085(ins, pc),
        0x1f96 => parse_arm_8086(ins, pc),
        0x1f97 => parse_arm_8087(ins, pc),
        0x1f98 => parse_arm_8088(ins, pc),
        0x1f99 => parse_arm_8089(ins, pc),
        0x1f9a => parse_arm_8090(ins, pc),
        0x1f9b => parse_arm_8091(ins, pc),
        0x1f9c => parse_arm_8092(ins, pc),
        0x1f9d => parse_arm_8093(ins, pc),
        0x1f9e => parse_arm_8094(ins, pc),
        0x1f9f => parse_arm_8095(ins, pc),
        0x1fa0 => parse_arm_8096(ins, pc),
        0x1fa1 => parse_arm_8097(ins, pc),
        0x1fa2 => parse_arm_8098(ins, pc),
        0x1fa3 => parse_arm_8099(ins, pc),
        0x1fa4 => parse_arm_8100(ins, pc),
        0x1fa5 => parse_arm_8101(ins, pc),
        0x1fa6 => parse_arm_8102(ins, pc),
        0x1fa7 => parse_arm_8103(ins, pc),
        0x1fa8 => parse_arm_8104(ins, pc),
        0x1fa9 => parse_arm_8105(ins, pc),
        0x1faa => parse_arm_8106(ins, pc),
        0x1fab => parse_arm_8107(ins, pc),
        0x1fac => parse_arm_8108(ins, pc),
        0x1fad => parse_arm_8109(ins, pc),
        0x1fae => parse_arm_8110(ins, pc),
        0x1faf => parse_arm_8111(ins, pc),
        0x1fb0 => parse_arm_8112(ins, pc),
        0x1fb1 => parse_arm_8113(ins, pc),
        0x1fb2 => parse_arm_8114(ins, pc),
        0x1fb3 => parse_arm_8115(ins, pc),
        0x1fb4 => parse_arm_8116(ins, pc),
        0x1fb5 => parse_arm_8117(ins, pc),
        0x1fb6 => parse_arm_8118(ins, pc),
        0x1fb7 => parse_arm_8119(ins, pc),
        0x1fb8 => parse_arm_8120(ins, pc),
        0x1fb9 => parse_arm_8121(ins, pc),
        0x1fba => parse_arm_8122(ins, pc),
        0x1fbb => parse_arm_8123(ins, pc),
        0x1fbc => parse_arm_8124(ins, pc),
        0x1fbd => parse_arm_8125(ins, pc),
        0x1fbe => parse_arm_8126(ins, pc),
        0x1fbf => parse_arm_8127(ins, pc),
        0x1fc0 => parse_arm_8128(ins, pc),
        0x1fc1 => parse_arm_8129(ins, pc),
        0x1fc2 => parse_arm_8130(ins, pc),
        0x1fc3 => parse_arm_8131(ins, pc),
        0x1fc4 => parse_arm_8132(ins, pc),
        0x1fc5 => parse_arm_8133(ins, pc),
        0x1fc6 => parse_arm_8134(ins, pc),
        0x1fc7 => parse_arm_8135(ins, pc),
        0x1fc8 => parse_arm_8136(ins, pc),
        0x1fc9 => parse_arm_8137(ins, pc),
        0x1fca => parse_arm_8138(ins, pc),
        0x1fcb => parse_arm_8139(ins, pc),
        0x1fcc => parse_arm_8140(ins, pc),
        0x1fcd => parse_arm_8141(ins, pc),
        0x1fce => parse_arm_8142(ins, pc),
        0x1fcf => parse_arm_8143(ins, pc),
        0x1fd0 => parse_arm_8144(ins, pc),
        0x1fd1 => parse_arm_8145(ins, pc),
        0x1fd2 => parse_arm_8146(ins, pc),
        0x1fd3 => parse_arm_8147(ins, pc),
        0x1fd4 => parse_arm_8148(ins, pc),
        0x1fd5 => parse_arm_8149(ins, pc),
        0x1fd6 => parse_arm_8150(ins, pc),
        0x1fd7 => parse_arm_8151(ins, pc),
        0x1fd8 => parse_arm_8152(ins, pc),
        0x1fd9 => parse_arm_8153(ins, pc),
        0x1fda => parse_arm_8154(ins, pc),
        0x1fdb => parse_arm_8155(ins, pc),
        0x1fdc => parse_arm_8156(ins, pc),
        0x1fdd => parse_arm_8157(ins, pc),
        0x1fde => parse_arm_8158(ins, pc),
        0x1fdf => parse_arm_8159(ins, pc),
        0x1fe0 => parse_arm_8160(ins, pc),
        0x1fe1 => parse_arm_8161(ins, pc),
        0x1fe2 => parse_arm_8162(ins, pc),
        0x1fe3 => parse_arm_8163(ins, pc),
        0x1fe4 => parse_arm_8164(ins, pc),
        0x1fe5 => parse_arm_8165(ins, pc),
        0x1fe6 => parse_arm_8166(ins, pc),
        0x1fe7 => parse_arm_8167(ins, pc),
        0x1fe8 => parse_arm_8168(ins, pc),
        0x1fe9 => parse_arm_8169(ins, pc),
        0x1fea => parse_arm_8170(ins, pc),
        0x1feb => parse_arm_8171(ins, pc),
        0x1fec => parse_arm_8172(ins, pc),
        0x1fed => parse_arm_8173(ins, pc),
        0x1fee => parse_arm_8174(ins, pc),
        0x1fef => parse_arm_8175(ins, pc),
        0x1ff0 => parse_arm_8176(ins, pc),
        0x1ff1 => parse_arm_8177(ins, pc),
        0x1ff2 => parse_arm_8178(ins, pc),
        0x1ff3 => parse_arm_8179(ins, pc),
        0x1ff4 => parse_arm_8180(ins, pc),
        0x1ff5 => parse_arm_8181(ins, pc),
        0x1ff6 => parse_arm_8182(ins, pc),
        0x1ff7 => parse_arm_8183(ins, pc),
        0x1ff8 => parse_arm_8184(ins, pc),
        0x1ff9 => parse_arm_8185(ins, pc),
        0x1ffa => parse_arm_8186(ins, pc),
        0x1ffb => parse_arm_8187(ins, pc),
        0x1ffc => parse_arm_8188(ins, pc),
        0x1ffd => parse_arm_8189(ins, pc),
        0x1ffe => parse_arm_8190(ins, pc),
        0x1fff => parse_arm_8191(ins, pc),
        0x2000 => parse_arm_8192(ins, pc),
        0x2001 => parse_arm_8193(ins, pc),
        0x2002 => parse_arm_8194(ins, pc),
        0x2003 => parse_arm_8195(ins, pc),
        0x2004 => parse_arm_8196(ins, pc),
        0x2005 => parse_arm_8197(ins, pc),
        0x2006 => parse_arm_8198(ins, pc),
        0x2007 => parse_arm_8199(ins, pc),
        0x2008 => parse_arm_8200(ins, pc),
        0x2009 => parse_arm_8201(ins, pc),
        0x200a => parse_arm_8202(ins, pc),
        0x200b => parse_arm_8203(ins, pc),
        0x200c => parse_arm_8204(ins, pc),
        0x200d => parse_arm_8205(ins, pc),
        0x200e => parse_arm_8206(ins, pc),
        0x200f => parse_arm_8207(ins, pc),
        0x2010 => parse_arm_8208(ins, pc),
        0x2011 => parse_arm_8209(ins, pc),
        0x2012 => parse_arm_8210(ins, pc),
        0x2013 => parse_arm_8211(ins, pc),
        0x2014 => parse_arm_8212(ins, pc),
        0x2015 => parse_arm_8213(ins, pc),
        0x2016 => parse_arm_8214(ins, pc),
        0x2017 => parse_arm_8215(ins, pc),
        0x2018 => parse_arm_8216(ins, pc),
        0x2019 => parse_arm_8217(ins, pc),
        0x201a => parse_arm_8218(ins, pc),
        0x201b => parse_arm_8219(ins, pc),
        0x201c => parse_arm_8220(ins, pc),
        0x201d => parse_arm_8221(ins, pc),
        0x201e => parse_arm_8222(ins, pc),
        0x201f => parse_arm_8223(ins, pc),
        0x2020 => parse_arm_8224(ins, pc),
        0x2021 => parse_arm_8225(ins, pc),
        0x2022 => parse_arm_8226(ins, pc),
        0x2023 => parse_arm_8227(ins, pc),
        0x2024 => parse_arm_8228(ins, pc),
        0x2025 => parse_arm_8229(ins, pc),
        0x2026 => parse_arm_8230(ins, pc),
        0x2027 => parse_arm_8231(ins, pc),
        0x2028 => parse_arm_8232(ins, pc),
        0x2029 => parse_arm_8233(ins, pc),
        0x202a => parse_arm_8234(ins, pc),
        0x202b => parse_arm_8235(ins, pc),
        0x202c => parse_arm_8236(ins, pc),
        0x202d => parse_arm_8237(ins, pc),
        0x202e => parse_arm_8238(ins, pc),
        0x202f => parse_arm_8239(ins, pc),
        0x2030 => parse_arm_8240(ins, pc),
        0x2031 => parse_arm_8241(ins, pc),
        0x2032 => parse_arm_8242(ins, pc),
        0x2033 => parse_arm_8243(ins, pc),
        0x2034 => parse_arm_8244(ins, pc),
        0x2035 => parse_arm_8245(ins, pc),
        0x2036 => parse_arm_8246(ins, pc),
        0x2037 => parse_arm_8247(ins, pc),
        0x2038 => parse_arm_8248(ins, pc),
        0x2039 => parse_arm_8249(ins, pc),
        0x203a => parse_arm_8250(ins, pc),
        0x203b => parse_arm_8251(ins, pc),
        0x203c => parse_arm_8252(ins, pc),
        0x203d => parse_arm_8253(ins, pc),
        0x203e => parse_arm_8254(ins, pc),
        0x203f => parse_arm_8255(ins, pc),
        0x2040 => parse_arm_8256(ins, pc),
        0x2041 => parse_arm_8257(ins, pc),
        0x2042 => parse_arm_8258(ins, pc),
        0x2043 => parse_arm_8259(ins, pc),
        0x2044 => parse_arm_8260(ins, pc),
        0x2045 => parse_arm_8261(ins, pc),
        0x2046 => parse_arm_8262(ins, pc),
        0x2047 => parse_arm_8263(ins, pc),
        0x2048 => parse_arm_8264(ins, pc),
        0x2049 => parse_arm_8265(ins, pc),
        0x204a => parse_arm_8266(ins, pc),
        0x204b => parse_arm_8267(ins, pc),
        0x204c => parse_arm_8268(ins, pc),
        0x204d => parse_arm_8269(ins, pc),
        0x204e => parse_arm_8270(ins, pc),
        0x204f => parse_arm_8271(ins, pc),
        0x2050 => parse_arm_8272(ins, pc),
        0x2051 => parse_arm_8273(ins, pc),
        0x2052 => parse_arm_8274(ins, pc),
        0x2053 => parse_arm_8275(ins, pc),
        0x2054 => parse_arm_8276(ins, pc),
        0x2055 => parse_arm_8277(ins, pc),
        0x2056 => parse_arm_8278(ins, pc),
        0x2057 => parse_arm_8279(ins, pc),
        0x2058 => parse_arm_8280(ins, pc),
        0x2059 => parse_arm_8281(ins, pc),
        0x205a => parse_arm_8282(ins, pc),
        0x205b => parse_arm_8283(ins, pc),
        0x205c => parse_arm_8284(ins, pc),
        0x205d => parse_arm_8285(ins, pc),
        0x205e => parse_arm_8286(ins, pc),
        0x205f => parse_arm_8287(ins, pc),
        0x2060 => parse_arm_8288(ins, pc),
        0x2061 => parse_arm_8289(ins, pc),
        0x2062 => parse_arm_8290(ins, pc),
        0x2063 => parse_arm_8291(ins, pc),
        0x2064 => parse_arm_8292(ins, pc),
        0x2065 => parse_arm_8293(ins, pc),
        0x2066 => parse_arm_8294(ins, pc),
        0x2067 => parse_arm_8295(ins, pc),
        0x2068 => parse_arm_8296(ins, pc),
        0x2069 => parse_arm_8297(ins, pc),
        0x206a => parse_arm_8298(ins, pc),
        0x206b => parse_arm_8299(ins, pc),
        0x206c => parse_arm_8300(ins, pc),
        0x206d => parse_arm_8301(ins, pc),
        0x206e => parse_arm_8302(ins, pc),
        0x206f => parse_arm_8303(ins, pc),
        0x2070 => parse_arm_8304(ins, pc),
        0x2071 => parse_arm_8305(ins, pc),
        0x2072 => parse_arm_8306(ins, pc),
        0x2073 => parse_arm_8307(ins, pc),
        0x2074 => parse_arm_8308(ins, pc),
        0x2075 => parse_arm_8309(ins, pc),
        0x2076 => parse_arm_8310(ins, pc),
        0x2077 => parse_arm_8311(ins, pc),
        0x2078 => parse_arm_8312(ins, pc),
        0x2079 => parse_arm_8313(ins, pc),
        0x207a => parse_arm_8314(ins, pc),
        0x207b => parse_arm_8315(ins, pc),
        0x207c => parse_arm_8316(ins, pc),
        0x207d => parse_arm_8317(ins, pc),
        0x207e => parse_arm_8318(ins, pc),
        0x207f => parse_arm_8319(ins, pc),
        0x2080 => parse_arm_8320(ins, pc),
        0x2081 => parse_arm_8321(ins, pc),
        0x2082 => parse_arm_8322(ins, pc),
        0x2083 => parse_arm_8323(ins, pc),
        0x2084 => parse_arm_8324(ins, pc),
        0x2085 => parse_arm_8325(ins, pc),
        0x2086 => parse_arm_8326(ins, pc),
        0x2087 => parse_arm_8327(ins, pc),
        0x2088 => parse_arm_8328(ins, pc),
        0x2089 => parse_arm_8329(ins, pc),
        0x208a => parse_arm_8330(ins, pc),
        0x208b => parse_arm_8331(ins, pc),
        0x208c => parse_arm_8332(ins, pc),
        0x208d => parse_arm_8333(ins, pc),
        0x208e => parse_arm_8334(ins, pc),
        0x208f => parse_arm_8335(ins, pc),
        0x2090 => parse_arm_8336(ins, pc),
        0x2091 => parse_arm_8337(ins, pc),
        0x2092 => parse_arm_8338(ins, pc),
        0x2093 => parse_arm_8339(ins, pc),
        0x2094 => parse_arm_8340(ins, pc),
        0x2095 => parse_arm_8341(ins, pc),
        0x2096 => parse_arm_8342(ins, pc),
        0x2097 => parse_arm_8343(ins, pc),
        0x2098 => parse_arm_8344(ins, pc),
        0x2099 => parse_arm_8345(ins, pc),
        0x209a => parse_arm_8346(ins, pc),
        0x209b => parse_arm_8347(ins, pc),
        0x209c => parse_arm_8348(ins, pc),
        0x209d => parse_arm_8349(ins, pc),
        0x209e => parse_arm_8350(ins, pc),
        0x209f => parse_arm_8351(ins, pc),
        0x20a0 => parse_arm_8352(ins, pc),
        0x20a1 => parse_arm_8353(ins, pc),
        0x20a2 => parse_arm_8354(ins, pc),
        0x20a3 => parse_arm_8355(ins, pc),
        0x20a4 => parse_arm_8356(ins, pc),
        0x20a5 => parse_arm_8357(ins, pc),
        0x20a6 => parse_arm_8358(ins, pc),
        0x20a7 => parse_arm_8359(ins, pc),
        0x20a8 => parse_arm_8360(ins, pc),
        0x20a9 => parse_arm_8361(ins, pc),
        0x20aa => parse_arm_8362(ins, pc),
        0x20ab => parse_arm_8363(ins, pc),
        0x20ac => parse_arm_8364(ins, pc),
        0x20ad => parse_arm_8365(ins, pc),
        0x20ae => parse_arm_8366(ins, pc),
        0x20af => parse_arm_8367(ins, pc),
        0x20b0 => parse_arm_8368(ins, pc),
        0x20b1 => parse_arm_8369(ins, pc),
        0x20b2 => parse_arm_8370(ins, pc),
        0x20b3 => parse_arm_8371(ins, pc),
        0x20b4 => parse_arm_8372(ins, pc),
        0x20b5 => parse_arm_8373(ins, pc),
        0x20b6 => parse_arm_8374(ins, pc),
        0x20b7 => parse_arm_8375(ins, pc),
        0x20b8 => parse_arm_8376(ins, pc),
        0x20b9 => parse_arm_8377(ins, pc),
        0x20ba => parse_arm_8378(ins, pc),
        0x20bb => parse_arm_8379(ins, pc),
        0x20bc => parse_arm_8380(ins, pc),
        0x20bd => parse_arm_8381(ins, pc),
        0x20be => parse_arm_8382(ins, pc),
        0x20bf => parse_arm_8383(ins, pc),
        0x20c0 => parse_arm_8384(ins, pc),
        0x20c1 => parse_arm_8385(ins, pc),
        0x20c2 => parse_arm_8386(ins, pc),
        0x20c3 => parse_arm_8387(ins, pc),
        0x20c4 => parse_arm_8388(ins, pc),
        0x20c5 => parse_arm_8389(ins, pc),
        0x20c6 => parse_arm_8390(ins, pc),
        0x20c7 => parse_arm_8391(ins, pc),
        0x20c8 => parse_arm_8392(ins, pc),
        0x20c9 => parse_arm_8393(ins, pc),
        0x20ca => parse_arm_8394(ins, pc),
        0x20cb => parse_arm_8395(ins, pc),
        0x20cc => parse_arm_8396(ins, pc),
        0x20cd => parse_arm_8397(ins, pc),
        0x20ce => parse_arm_8398(ins, pc),
        0x20cf => parse_arm_8399(ins, pc),
        0x20d0 => parse_arm_8400(ins, pc),
        0x20d1 => parse_arm_8401(ins, pc),
        0x20d2 => parse_arm_8402(ins, pc),
        0x20d3 => parse_arm_8403(ins, pc),
        0x20d4 => parse_arm_8404(ins, pc),
        0x20d5 => parse_arm_8405(ins, pc),
        0x20d6 => parse_arm_8406(ins, pc),
        0x20d7 => parse_arm_8407(ins, pc),
        0x20d8 => parse_arm_8408(ins, pc),
        0x20d9 => parse_arm_8409(ins, pc),
        0x20da => parse_arm_8410(ins, pc),
        0x20db => parse_arm_8411(ins, pc),
        0x20dc => parse_arm_8412(ins, pc),
        0x20dd => parse_arm_8413(ins, pc),
        0x20de => parse_arm_8414(ins, pc),
        0x20df => parse_arm_8415(ins, pc),
        0x20e0 => parse_arm_8416(ins, pc),
        0x20e1 => parse_arm_8417(ins, pc),
        0x20e2 => parse_arm_8418(ins, pc),
        0x20e3 => parse_arm_8419(ins, pc),
        0x20e4 => parse_arm_8420(ins, pc),
        0x20e5 => parse_arm_8421(ins, pc),
        0x20e6 => parse_arm_8422(ins, pc),
        0x20e7 => parse_arm_8423(ins, pc),
        0x20e8 => parse_arm_8424(ins, pc),
        0x20e9 => parse_arm_8425(ins, pc),
        0x20ea => parse_arm_8426(ins, pc),
        0x20eb => parse_arm_8427(ins, pc),
        0x20ec => parse_arm_8428(ins, pc),
        0x20ed => parse_arm_8429(ins, pc),
        0x20ee => parse_arm_8430(ins, pc),
        0x20ef => parse_arm_8431(ins, pc),
        0x20f0 => parse_arm_8432(ins, pc),
        0x20f1 => parse_arm_8433(ins, pc),
        0x20f2 => parse_arm_8434(ins, pc),
        0x20f3 => parse_arm_8435(ins, pc),
        0x20f4 => parse_arm_8436(ins, pc),
        0x20f5 => parse_arm_8437(ins, pc),
        0x20f6 => parse_arm_8438(ins, pc),
        0x20f7 => parse_arm_8439(ins, pc),
        0x20f8 => parse_arm_8440(ins, pc),
        0x20f9 => parse_arm_8441(ins, pc),
        0x20fa => parse_arm_8442(ins, pc),
        0x20fb => parse_arm_8443(ins, pc),
        0x20fc => parse_arm_8444(ins, pc),
        0x20fd => parse_arm_8445(ins, pc),
        0x20fe => parse_arm_8446(ins, pc),
        0x20ff => parse_arm_8447(ins, pc),
        0x2100 => parse_arm_8448(ins, pc),
        0x2101 => parse_arm_8449(ins, pc),
        0x2102 => parse_arm_8450(ins, pc),
        0x2103 => parse_arm_8451(ins, pc),
        0x2104 => parse_arm_8452(ins, pc),
        0x2105 => parse_arm_8453(ins, pc),
        0x2106 => parse_arm_8454(ins, pc),
        0x2107 => parse_arm_8455(ins, pc),
        0x2108 => parse_arm_8456(ins, pc),
        0x2109 => parse_arm_8457(ins, pc),
        0x210a => parse_arm_8458(ins, pc),
        0x210b => parse_arm_8459(ins, pc),
        0x210c => parse_arm_8460(ins, pc),
        0x210d => parse_arm_8461(ins, pc),
        0x210e => parse_arm_8462(ins, pc),
        0x210f => parse_arm_8463(ins, pc),
        0x2110 => parse_arm_8464(ins, pc),
        0x2111 => parse_arm_8465(ins, pc),
        0x2112 => parse_arm_8466(ins, pc),
        0x2113 => parse_arm_8467(ins, pc),
        0x2114 => parse_arm_8468(ins, pc),
        0x2115 => parse_arm_8469(ins, pc),
        0x2116 => parse_arm_8470(ins, pc),
        0x2117 => parse_arm_8471(ins, pc),
        0x2118 => parse_arm_8472(ins, pc),
        0x2119 => parse_arm_8473(ins, pc),
        0x211a => parse_arm_8474(ins, pc),
        0x211b => parse_arm_8475(ins, pc),
        0x211c => parse_arm_8476(ins, pc),
        0x211d => parse_arm_8477(ins, pc),
        0x211e => parse_arm_8478(ins, pc),
        0x211f => parse_arm_8479(ins, pc),
        0x2120 => parse_arm_8480(ins, pc),
        0x2121 => parse_arm_8481(ins, pc),
        0x2122 => parse_arm_8482(ins, pc),
        0x2123 => parse_arm_8483(ins, pc),
        0x2124 => parse_arm_8484(ins, pc),
        0x2125 => parse_arm_8485(ins, pc),
        0x2126 => parse_arm_8486(ins, pc),
        0x2127 => parse_arm_8487(ins, pc),
        0x2128 => parse_arm_8488(ins, pc),
        0x2129 => parse_arm_8489(ins, pc),
        0x212a => parse_arm_8490(ins, pc),
        0x212b => parse_arm_8491(ins, pc),
        0x212c => parse_arm_8492(ins, pc),
        0x212d => parse_arm_8493(ins, pc),
        0x212e => parse_arm_8494(ins, pc),
        0x212f => parse_arm_8495(ins, pc),
        0x2130 => parse_arm_8496(ins, pc),
        0x2131 => parse_arm_8497(ins, pc),
        0x2132 => parse_arm_8498(ins, pc),
        0x2133 => parse_arm_8499(ins, pc),
        0x2134 => parse_arm_8500(ins, pc),
        0x2135 => parse_arm_8501(ins, pc),
        0x2136 => parse_arm_8502(ins, pc),
        0x2137 => parse_arm_8503(ins, pc),
        0x2138 => parse_arm_8504(ins, pc),
        0x2139 => parse_arm_8505(ins, pc),
        0x213a => parse_arm_8506(ins, pc),
        0x213b => parse_arm_8507(ins, pc),
        0x213c => parse_arm_8508(ins, pc),
        0x213d => parse_arm_8509(ins, pc),
        0x213e => parse_arm_8510(ins, pc),
        0x213f => parse_arm_8511(ins, pc),
        0x2140 => parse_arm_8512(ins, pc),
        0x2141 => parse_arm_8513(ins, pc),
        0x2142 => parse_arm_8514(ins, pc),
        0x2143 => parse_arm_8515(ins, pc),
        0x2144 => parse_arm_8516(ins, pc),
        0x2145 => parse_arm_8517(ins, pc),
        0x2146 => parse_arm_8518(ins, pc),
        0x2147 => parse_arm_8519(ins, pc),
        0x2148 => parse_arm_8520(ins, pc),
        0x2149 => parse_arm_8521(ins, pc),
        0x214a => parse_arm_8522(ins, pc),
        0x214b => parse_arm_8523(ins, pc),
        0x214c => parse_arm_8524(ins, pc),
        0x214d => parse_arm_8525(ins, pc),
        0x214e => parse_arm_8526(ins, pc),
        0x214f => parse_arm_8527(ins, pc),
        0x2150 => parse_arm_8528(ins, pc),
        0x2151 => parse_arm_8529(ins, pc),
        0x2152 => parse_arm_8530(ins, pc),
        0x2153 => parse_arm_8531(ins, pc),
        0x2154 => parse_arm_8532(ins, pc),
        0x2155 => parse_arm_8533(ins, pc),
        0x2156 => parse_arm_8534(ins, pc),
        0x2157 => parse_arm_8535(ins, pc),
        0x2158 => parse_arm_8536(ins, pc),
        0x2159 => parse_arm_8537(ins, pc),
        0x215a => parse_arm_8538(ins, pc),
        0x215b => parse_arm_8539(ins, pc),
        0x215c => parse_arm_8540(ins, pc),
        0x215d => parse_arm_8541(ins, pc),
        0x215e => parse_arm_8542(ins, pc),
        0x215f => parse_arm_8543(ins, pc),
        0x2160 => parse_arm_8544(ins, pc),
        0x2161 => parse_arm_8545(ins, pc),
        0x2162 => parse_arm_8546(ins, pc),
        0x2163 => parse_arm_8547(ins, pc),
        0x2164 => parse_arm_8548(ins, pc),
        0x2165 => parse_arm_8549(ins, pc),
        0x2166 => parse_arm_8550(ins, pc),
        0x2167 => parse_arm_8551(ins, pc),
        0x2168 => parse_arm_8552(ins, pc),
        0x2169 => parse_arm_8553(ins, pc),
        0x216a => parse_arm_8554(ins, pc),
        0x216b => parse_arm_8555(ins, pc),
        0x216c => parse_arm_8556(ins, pc),
        0x216d => parse_arm_8557(ins, pc),
        0x216e => parse_arm_8558(ins, pc),
        0x216f => parse_arm_8559(ins, pc),
        0x2170 => parse_arm_8560(ins, pc),
        0x2171 => parse_arm_8561(ins, pc),
        0x2172 => parse_arm_8562(ins, pc),
        0x2173 => parse_arm_8563(ins, pc),
        0x2174 => parse_arm_8564(ins, pc),
        0x2175 => parse_arm_8565(ins, pc),
        0x2176 => parse_arm_8566(ins, pc),
        0x2177 => parse_arm_8567(ins, pc),
        0x2178 => parse_arm_8568(ins, pc),
        0x2179 => parse_arm_8569(ins, pc),
        0x217a => parse_arm_8570(ins, pc),
        0x217b => parse_arm_8571(ins, pc),
        0x217c => parse_arm_8572(ins, pc),
        0x217d => parse_arm_8573(ins, pc),
        0x217e => parse_arm_8574(ins, pc),
        0x217f => parse_arm_8575(ins, pc),
        0x2180 => parse_arm_8576(ins, pc),
        0x2181 => parse_arm_8577(ins, pc),
        0x2182 => parse_arm_8578(ins, pc),
        0x2183 => parse_arm_8579(ins, pc),
        0x2184 => parse_arm_8580(ins, pc),
        0x2185 => parse_arm_8581(ins, pc),
        0x2186 => parse_arm_8582(ins, pc),
        0x2187 => parse_arm_8583(ins, pc),
        0x2188 => parse_arm_8584(ins, pc),
        0x2189 => parse_arm_8585(ins, pc),
        0x218a => parse_arm_8586(ins, pc),
        0x218b => parse_arm_8587(ins, pc),
        0x218c => parse_arm_8588(ins, pc),
        0x218d => parse_arm_8589(ins, pc),
        0x218e => parse_arm_8590(ins, pc),
        0x218f => parse_arm_8591(ins, pc),
        0x2190 => parse_arm_8592(ins, pc),
        0x2191 => parse_arm_8593(ins, pc),
        0x2192 => parse_arm_8594(ins, pc),
        0x2193 => parse_arm_8595(ins, pc),
        0x2194 => parse_arm_8596(ins, pc),
        0x2195 => parse_arm_8597(ins, pc),
        0x2196 => parse_arm_8598(ins, pc),
        0x2197 => parse_arm_8599(ins, pc),
        0x2198 => parse_arm_8600(ins, pc),
        0x2199 => parse_arm_8601(ins, pc),
        0x219a => parse_arm_8602(ins, pc),
        0x219b => parse_arm_8603(ins, pc),
        0x219c => parse_arm_8604(ins, pc),
        0x219d => parse_arm_8605(ins, pc),
        0x219e => parse_arm_8606(ins, pc),
        0x219f => parse_arm_8607(ins, pc),
        0x21a0 => parse_arm_8608(ins, pc),
        0x21a1 => parse_arm_8609(ins, pc),
        0x21a2 => parse_arm_8610(ins, pc),
        0x21a3 => parse_arm_8611(ins, pc),
        0x21a4 => parse_arm_8612(ins, pc),
        0x21a5 => parse_arm_8613(ins, pc),
        0x21a6 => parse_arm_8614(ins, pc),
        0x21a7 => parse_arm_8615(ins, pc),
        0x21a8 => parse_arm_8616(ins, pc),
        0x21a9 => parse_arm_8617(ins, pc),
        0x21aa => parse_arm_8618(ins, pc),
        0x21ab => parse_arm_8619(ins, pc),
        0x21ac => parse_arm_8620(ins, pc),
        0x21ad => parse_arm_8621(ins, pc),
        0x21ae => parse_arm_8622(ins, pc),
        0x21af => parse_arm_8623(ins, pc),
        0x21b0 => parse_arm_8624(ins, pc),
        0x21b1 => parse_arm_8625(ins, pc),
        0x21b2 => parse_arm_8626(ins, pc),
        0x21b3 => parse_arm_8627(ins, pc),
        0x21b4 => parse_arm_8628(ins, pc),
        0x21b5 => parse_arm_8629(ins, pc),
        0x21b6 => parse_arm_8630(ins, pc),
        0x21b7 => parse_arm_8631(ins, pc),
        0x21b8 => parse_arm_8632(ins, pc),
        0x21b9 => parse_arm_8633(ins, pc),
        0x21ba => parse_arm_8634(ins, pc),
        0x21bb => parse_arm_8635(ins, pc),
        0x21bc => parse_arm_8636(ins, pc),
        0x21bd => parse_arm_8637(ins, pc),
        0x21be => parse_arm_8638(ins, pc),
        0x21bf => parse_arm_8639(ins, pc),
        0x21c0 => parse_arm_8640(ins, pc),
        0x21c1 => parse_arm_8641(ins, pc),
        0x21c2 => parse_arm_8642(ins, pc),
        0x21c3 => parse_arm_8643(ins, pc),
        0x21c4 => parse_arm_8644(ins, pc),
        0x21c5 => parse_arm_8645(ins, pc),
        0x21c6 => parse_arm_8646(ins, pc),
        0x21c7 => parse_arm_8647(ins, pc),
        0x21c8 => parse_arm_8648(ins, pc),
        0x21c9 => parse_arm_8649(ins, pc),
        0x21ca => parse_arm_8650(ins, pc),
        0x21cb => parse_arm_8651(ins, pc),
        0x21cc => parse_arm_8652(ins, pc),
        0x21cd => parse_arm_8653(ins, pc),
        0x21ce => parse_arm_8654(ins, pc),
        0x21cf => parse_arm_8655(ins, pc),
        0x21d0 => parse_arm_8656(ins, pc),
        0x21d1 => parse_arm_8657(ins, pc),
        0x21d2 => parse_arm_8658(ins, pc),
        0x21d3 => parse_arm_8659(ins, pc),
        0x21d4 => parse_arm_8660(ins, pc),
        0x21d5 => parse_arm_8661(ins, pc),
        0x21d6 => parse_arm_8662(ins, pc),
        0x21d7 => parse_arm_8663(ins, pc),
        0x21d8 => parse_arm_8664(ins, pc),
        0x21d9 => parse_arm_8665(ins, pc),
        0x21da => parse_arm_8666(ins, pc),
        0x21db => parse_arm_8667(ins, pc),
        0x21dc => parse_arm_8668(ins, pc),
        0x21dd => parse_arm_8669(ins, pc),
        0x21de => parse_arm_8670(ins, pc),
        0x21df => parse_arm_8671(ins, pc),
        0x21e0 => parse_arm_8672(ins, pc),
        0x21e1 => parse_arm_8673(ins, pc),
        0x21e2 => parse_arm_8674(ins, pc),
        0x21e3 => parse_arm_8675(ins, pc),
        0x21e4 => parse_arm_8676(ins, pc),
        0x21e5 => parse_arm_8677(ins, pc),
        0x21e6 => parse_arm_8678(ins, pc),
        0x21e7 => parse_arm_8679(ins, pc),
        0x21e8 => parse_arm_8680(ins, pc),
        0x21e9 => parse_arm_8681(ins, pc),
        0x21ea => parse_arm_8682(ins, pc),
        0x21eb => parse_arm_8683(ins, pc),
        0x21ec => parse_arm_8684(ins, pc),
        0x21ed => parse_arm_8685(ins, pc),
        0x21ee => parse_arm_8686(ins, pc),
        0x21ef => parse_arm_8687(ins, pc),
        0x21f0 => parse_arm_8688(ins, pc),
        0x21f1 => parse_arm_8689(ins, pc),
        0x21f2 => parse_arm_8690(ins, pc),
        0x21f3 => parse_arm_8691(ins, pc),
        0x21f4 => parse_arm_8692(ins, pc),
        0x21f5 => parse_arm_8693(ins, pc),
        0x21f6 => parse_arm_8694(ins, pc),
        0x21f7 => parse_arm_8695(ins, pc),
        0x21f8 => parse_arm_8696(ins, pc),
        0x21f9 => parse_arm_8697(ins, pc),
        0x21fa => parse_arm_8698(ins, pc),
        0x21fb => parse_arm_8699(ins, pc),
        0x21fc => parse_arm_8700(ins, pc),
        0x21fd => parse_arm_8701(ins, pc),
        0x21fe => parse_arm_8702(ins, pc),
        0x21ff => parse_arm_8703(ins, pc),
        0x2200 => parse_arm_8704(ins, pc),
        0x2201 => parse_arm_8705(ins, pc),
        0x2202 => parse_arm_8706(ins, pc),
        0x2203 => parse_arm_8707(ins, pc),
        0x2204 => parse_arm_8708(ins, pc),
        0x2205 => parse_arm_8709(ins, pc),
        0x2206 => parse_arm_8710(ins, pc),
        0x2207 => parse_arm_8711(ins, pc),
        0x2208 => parse_arm_8712(ins, pc),
        0x2209 => parse_arm_8713(ins, pc),
        0x220a => parse_arm_8714(ins, pc),
        0x220b => parse_arm_8715(ins, pc),
        0x220c => parse_arm_8716(ins, pc),
        0x220d => parse_arm_8717(ins, pc),
        0x220e => parse_arm_8718(ins, pc),
        0x220f => parse_arm_8719(ins, pc),
        0x2210 => parse_arm_8720(ins, pc),
        0x2211 => parse_arm_8721(ins, pc),
        0x2212 => parse_arm_8722(ins, pc),
        0x2213 => parse_arm_8723(ins, pc),
        0x2214 => parse_arm_8724(ins, pc),
        0x2215 => parse_arm_8725(ins, pc),
        0x2216 => parse_arm_8726(ins, pc),
        0x2217 => parse_arm_8727(ins, pc),
        0x2218 => parse_arm_8728(ins, pc),
        0x2219 => parse_arm_8729(ins, pc),
        0x221a => parse_arm_8730(ins, pc),
        0x221b => parse_arm_8731(ins, pc),
        0x221c => parse_arm_8732(ins, pc),
        0x221d => parse_arm_8733(ins, pc),
        0x221e => parse_arm_8734(ins, pc),
        0x221f => parse_arm_8735(ins, pc),
        0x2220 => parse_arm_8736(ins, pc),
        0x2221 => parse_arm_8737(ins, pc),
        0x2222 => parse_arm_8738(ins, pc),
        0x2223 => parse_arm_8739(ins, pc),
        0x2224 => parse_arm_8740(ins, pc),
        0x2225 => parse_arm_8741(ins, pc),
        0x2226 => parse_arm_8742(ins, pc),
        0x2227 => parse_arm_8743(ins, pc),
        0x2228 => parse_arm_8744(ins, pc),
        0x2229 => parse_arm_8745(ins, pc),
        0x222a => parse_arm_8746(ins, pc),
        0x222b => parse_arm_8747(ins, pc),
        0x222c => parse_arm_8748(ins, pc),
        0x222d => parse_arm_8749(ins, pc),
        0x222e => parse_arm_8750(ins, pc),
        0x222f => parse_arm_8751(ins, pc),
        0x2230 => parse_arm_8752(ins, pc),
        0x2231 => parse_arm_8753(ins, pc),
        0x2232 => parse_arm_8754(ins, pc),
        0x2233 => parse_arm_8755(ins, pc),
        0x2234 => parse_arm_8756(ins, pc),
        0x2235 => parse_arm_8757(ins, pc),
        0x2236 => parse_arm_8758(ins, pc),
        0x2237 => parse_arm_8759(ins, pc),
        0x2238 => parse_arm_8760(ins, pc),
        0x2239 => parse_arm_8761(ins, pc),
        0x223a => parse_arm_8762(ins, pc),
        0x223b => parse_arm_8763(ins, pc),
        0x223c => parse_arm_8764(ins, pc),
        0x223d => parse_arm_8765(ins, pc),
        0x223e => parse_arm_8766(ins, pc),
        0x223f => parse_arm_8767(ins, pc),
        0x2240 => parse_arm_8768(ins, pc),
        0x2241 => parse_arm_8769(ins, pc),
        0x2242 => parse_arm_8770(ins, pc),
        0x2243 => parse_arm_8771(ins, pc),
        0x2244 => parse_arm_8772(ins, pc),
        0x2245 => parse_arm_8773(ins, pc),
        0x2246 => parse_arm_8774(ins, pc),
        0x2247 => parse_arm_8775(ins, pc),
        0x2248 => parse_arm_8776(ins, pc),
        0x2249 => parse_arm_8777(ins, pc),
        0x224a => parse_arm_8778(ins, pc),
        0x224b => parse_arm_8779(ins, pc),
        0x224c => parse_arm_8780(ins, pc),
        0x224d => parse_arm_8781(ins, pc),
        0x224e => parse_arm_8782(ins, pc),
        0x224f => parse_arm_8783(ins, pc),
        0x2250 => parse_arm_8784(ins, pc),
        0x2251 => parse_arm_8785(ins, pc),
        0x2252 => parse_arm_8786(ins, pc),
        0x2253 => parse_arm_8787(ins, pc),
        0x2254 => parse_arm_8788(ins, pc),
        0x2255 => parse_arm_8789(ins, pc),
        0x2256 => parse_arm_8790(ins, pc),
        0x2257 => parse_arm_8791(ins, pc),
        0x2258 => parse_arm_8792(ins, pc),
        0x2259 => parse_arm_8793(ins, pc),
        0x225a => parse_arm_8794(ins, pc),
        0x225b => parse_arm_8795(ins, pc),
        0x225c => parse_arm_8796(ins, pc),
        0x225d => parse_arm_8797(ins, pc),
        0x225e => parse_arm_8798(ins, pc),
        0x225f => parse_arm_8799(ins, pc),
        0x2260 => parse_arm_8800(ins, pc),
        0x2261 => parse_arm_8801(ins, pc),
        0x2262 => parse_arm_8802(ins, pc),
        0x2263 => parse_arm_8803(ins, pc),
        0x2264 => parse_arm_8804(ins, pc),
        0x2265 => parse_arm_8805(ins, pc),
        0x2266 => parse_arm_8806(ins, pc),
        0x2267 => parse_arm_8807(ins, pc),
        0x2268 => parse_arm_8808(ins, pc),
        0x2269 => parse_arm_8809(ins, pc),
        0x226a => parse_arm_8810(ins, pc),
        0x226b => parse_arm_8811(ins, pc),
        0x226c => parse_arm_8812(ins, pc),
        0x226d => parse_arm_8813(ins, pc),
        0x226e => parse_arm_8814(ins, pc),
        0x226f => parse_arm_8815(ins, pc),
        0x2270 => parse_arm_8816(ins, pc),
        0x2271 => parse_arm_8817(ins, pc),
        0x2272 => parse_arm_8818(ins, pc),
        0x2273 => parse_arm_8819(ins, pc),
        0x2274 => parse_arm_8820(ins, pc),
        0x2275 => parse_arm_8821(ins, pc),
        0x2276 => parse_arm_8822(ins, pc),
        0x2277 => parse_arm_8823(ins, pc),
        0x2278 => parse_arm_8824(ins, pc),
        0x2279 => parse_arm_8825(ins, pc),
        0x227a => parse_arm_8826(ins, pc),
        0x227b => parse_arm_8827(ins, pc),
        0x227c => parse_arm_8828(ins, pc),
        0x227d => parse_arm_8829(ins, pc),
        0x227e => parse_arm_8830(ins, pc),
        0x227f => parse_arm_8831(ins, pc),
        0x2280 => parse_arm_8832(ins, pc),
        0x2281 => parse_arm_8833(ins, pc),
        0x2282 => parse_arm_8834(ins, pc),
        0x2283 => parse_arm_8835(ins, pc),
        0x2284 => parse_arm_8836(ins, pc),
        0x2285 => parse_arm_8837(ins, pc),
        0x2286 => parse_arm_8838(ins, pc),
        0x2287 => parse_arm_8839(ins, pc),
        0x2288 => parse_arm_8840(ins, pc),
        0x2289 => parse_arm_8841(ins, pc),
        0x228a => parse_arm_8842(ins, pc),
        0x228b => parse_arm_8843(ins, pc),
        0x228c => parse_arm_8844(ins, pc),
        0x228d => parse_arm_8845(ins, pc),
        0x228e => parse_arm_8846(ins, pc),
        0x228f => parse_arm_8847(ins, pc),
        0x2290 => parse_arm_8848(ins, pc),
        0x2291 => parse_arm_8849(ins, pc),
        0x2292 => parse_arm_8850(ins, pc),
        0x2293 => parse_arm_8851(ins, pc),
        0x2294 => parse_arm_8852(ins, pc),
        0x2295 => parse_arm_8853(ins, pc),
        0x2296 => parse_arm_8854(ins, pc),
        0x2297 => parse_arm_8855(ins, pc),
        0x2298 => parse_arm_8856(ins, pc),
        0x2299 => parse_arm_8857(ins, pc),
        0x229a => parse_arm_8858(ins, pc),
        0x229b => parse_arm_8859(ins, pc),
        0x229c => parse_arm_8860(ins, pc),
        0x229d => parse_arm_8861(ins, pc),
        0x229e => parse_arm_8862(ins, pc),
        0x229f => parse_arm_8863(ins, pc),
        0x22a0 => parse_arm_8864(ins, pc),
        0x22a1 => parse_arm_8865(ins, pc),
        0x22a2 => parse_arm_8866(ins, pc),
        0x22a3 => parse_arm_8867(ins, pc),
        0x22a4 => parse_arm_8868(ins, pc),
        0x22a5 => parse_arm_8869(ins, pc),
        0x22a6 => parse_arm_8870(ins, pc),
        0x22a7 => parse_arm_8871(ins, pc),
        0x22a8 => parse_arm_8872(ins, pc),
        0x22a9 => parse_arm_8873(ins, pc),
        0x22aa => parse_arm_8874(ins, pc),
        0x22ab => parse_arm_8875(ins, pc),
        0x22ac => parse_arm_8876(ins, pc),
        0x22ad => parse_arm_8877(ins, pc),
        0x22ae => parse_arm_8878(ins, pc),
        0x22af => parse_arm_8879(ins, pc),
        0x22b0 => parse_arm_8880(ins, pc),
        0x22b1 => parse_arm_8881(ins, pc),
        0x22b2 => parse_arm_8882(ins, pc),
        0x22b3 => parse_arm_8883(ins, pc),
        0x22b4 => parse_arm_8884(ins, pc),
        0x22b5 => parse_arm_8885(ins, pc),
        0x22b6 => parse_arm_8886(ins, pc),
        0x22b7 => parse_arm_8887(ins, pc),
        0x22b8 => parse_arm_8888(ins, pc),
        0x22b9 => parse_arm_8889(ins, pc),
        0x22ba => parse_arm_8890(ins, pc),
        0x22bb => parse_arm_8891(ins, pc),
        0x22bc => parse_arm_8892(ins, pc),
        0x22bd => parse_arm_8893(ins, pc),
        0x22be => parse_arm_8894(ins, pc),
        0x22bf => parse_arm_8895(ins, pc),
        0x22c0 => parse_arm_8896(ins, pc),
        0x22c1 => parse_arm_8897(ins, pc),
        0x22c2 => parse_arm_8898(ins, pc),
        0x22c3 => parse_arm_8899(ins, pc),
        0x22c4 => parse_arm_8900(ins, pc),
        0x22c5 => parse_arm_8901(ins, pc),
        0x22c6 => parse_arm_8902(ins, pc),
        0x22c7 => parse_arm_8903(ins, pc),
        0x22c8 => parse_arm_8904(ins, pc),
        0x22c9 => parse_arm_8905(ins, pc),
        0x22ca => parse_arm_8906(ins, pc),
        0x22cb => parse_arm_8907(ins, pc),
        0x22cc => parse_arm_8908(ins, pc),
        0x22cd => parse_arm_8909(ins, pc),
        0x22ce => parse_arm_8910(ins, pc),
        0x22cf => parse_arm_8911(ins, pc),
        0x22d0 => parse_arm_8912(ins, pc),
        0x22d1 => parse_arm_8913(ins, pc),
        0x22d2 => parse_arm_8914(ins, pc),
        0x22d3 => parse_arm_8915(ins, pc),
        0x22d4 => parse_arm_8916(ins, pc),
        0x22d5 => parse_arm_8917(ins, pc),
        0x22d6 => parse_arm_8918(ins, pc),
        0x22d7 => parse_arm_8919(ins, pc),
        0x22d8 => parse_arm_8920(ins, pc),
        0x22d9 => parse_arm_8921(ins, pc),
        0x22da => parse_arm_8922(ins, pc),
        0x22db => parse_arm_8923(ins, pc),
        0x22dc => parse_arm_8924(ins, pc),
        0x22dd => parse_arm_8925(ins, pc),
        0x22de => parse_arm_8926(ins, pc),
        0x22df => parse_arm_8927(ins, pc),
        0x22e0 => parse_arm_8928(ins, pc),
        0x22e1 => parse_arm_8929(ins, pc),
        0x22e2 => parse_arm_8930(ins, pc),
        0x22e3 => parse_arm_8931(ins, pc),
        0x22e4 => parse_arm_8932(ins, pc),
        0x22e5 => parse_arm_8933(ins, pc),
        0x22e6 => parse_arm_8934(ins, pc),
        0x22e7 => parse_arm_8935(ins, pc),
        0x22e8 => parse_arm_8936(ins, pc),
        0x22e9 => parse_arm_8937(ins, pc),
        0x22ea => parse_arm_8938(ins, pc),
        0x22eb => parse_arm_8939(ins, pc),
        0x22ec => parse_arm_8940(ins, pc),
        0x22ed => parse_arm_8941(ins, pc),
        0x22ee => parse_arm_8942(ins, pc),
        0x22ef => parse_arm_8943(ins, pc),
        0x22f0 => parse_arm_8944(ins, pc),
        0x22f1 => parse_arm_8945(ins, pc),
        0x22f2 => parse_arm_8946(ins, pc),
        0x22f3 => parse_arm_8947(ins, pc),
        0x22f4 => parse_arm_8948(ins, pc),
        0x22f5 => parse_arm_8949(ins, pc),
        0x22f6 => parse_arm_8950(ins, pc),
        0x22f7 => parse_arm_8951(ins, pc),
        0x22f8 => parse_arm_8952(ins, pc),
        0x22f9 => parse_arm_8953(ins, pc),
        0x22fa => parse_arm_8954(ins, pc),
        0x22fb => parse_arm_8955(ins, pc),
        0x22fc => parse_arm_8956(ins, pc),
        0x22fd => parse_arm_8957(ins, pc),
        0x22fe => parse_arm_8958(ins, pc),
        0x22ff => parse_arm_8959(ins, pc),
        0x2300 => parse_arm_8960(ins, pc),
        0x2301 => parse_arm_8961(ins, pc),
        0x2302 => parse_arm_8962(ins, pc),
        0x2303 => parse_arm_8963(ins, pc),
        0x2304 => parse_arm_8964(ins, pc),
        0x2305 => parse_arm_8965(ins, pc),
        0x2306 => parse_arm_8966(ins, pc),
        0x2307 => parse_arm_8967(ins, pc),
        0x2308 => parse_arm_8968(ins, pc),
        0x2309 => parse_arm_8969(ins, pc),
        0x230a => parse_arm_8970(ins, pc),
        0x230b => parse_arm_8971(ins, pc),
        0x230c => parse_arm_8972(ins, pc),
        0x230d => parse_arm_8973(ins, pc),
        0x230e => parse_arm_8974(ins, pc),
        0x230f => parse_arm_8975(ins, pc),
        0x2310 => parse_arm_8976(ins, pc),
        0x2311 => parse_arm_8977(ins, pc),
        0x2312 => parse_arm_8978(ins, pc),
        0x2313 => parse_arm_8979(ins, pc),
        0x2314 => parse_arm_8980(ins, pc),
        0x2315 => parse_arm_8981(ins, pc),
        0x2316 => parse_arm_8982(ins, pc),
        0x2317 => parse_arm_8983(ins, pc),
        0x2318 => parse_arm_8984(ins, pc),
        0x2319 => parse_arm_8985(ins, pc),
        0x231a => parse_arm_8986(ins, pc),
        0x231b => parse_arm_8987(ins, pc),
        0x231c => parse_arm_8988(ins, pc),
        0x231d => parse_arm_8989(ins, pc),
        0x231e => parse_arm_8990(ins, pc),
        0x231f => parse_arm_8991(ins, pc),
        0x2320 => parse_arm_8992(ins, pc),
        0x2321 => parse_arm_8993(ins, pc),
        0x2322 => parse_arm_8994(ins, pc),
        0x2323 => parse_arm_8995(ins, pc),
        0x2324 => parse_arm_8996(ins, pc),
        0x2325 => parse_arm_8997(ins, pc),
        0x2326 => parse_arm_8998(ins, pc),
        0x2327 => parse_arm_8999(ins, pc),
        0x2328 => parse_arm_9000(ins, pc),
        0x2329 => parse_arm_9001(ins, pc),
        0x232a => parse_arm_9002(ins, pc),
        0x232b => parse_arm_9003(ins, pc),
        0x232c => parse_arm_9004(ins, pc),
        0x232d => parse_arm_9005(ins, pc),
        0x232e => parse_arm_9006(ins, pc),
        0x232f => parse_arm_9007(ins, pc),
        0x2330 => parse_arm_9008(ins, pc),
        0x2331 => parse_arm_9009(ins, pc),
        0x2332 => parse_arm_9010(ins, pc),
        0x2333 => parse_arm_9011(ins, pc),
        0x2334 => parse_arm_9012(ins, pc),
        0x2335 => parse_arm_9013(ins, pc),
        0x2336 => parse_arm_9014(ins, pc),
        0x2337 => parse_arm_9015(ins, pc),
        0x2338 => parse_arm_9016(ins, pc),
        0x2339 => parse_arm_9017(ins, pc),
        0x233a => parse_arm_9018(ins, pc),
        0x233b => parse_arm_9019(ins, pc),
        0x233c => parse_arm_9020(ins, pc),
        0x233d => parse_arm_9021(ins, pc),
        0x233e => parse_arm_9022(ins, pc),
        0x233f => parse_arm_9023(ins, pc),
        0x2340 => parse_arm_9024(ins, pc),
        0x2341 => parse_arm_9025(ins, pc),
        0x2342 => parse_arm_9026(ins, pc),
        0x2343 => parse_arm_9027(ins, pc),
        0x2344 => parse_arm_9028(ins, pc),
        0x2345 => parse_arm_9029(ins, pc),
        0x2346 => parse_arm_9030(ins, pc),
        0x2347 => parse_arm_9031(ins, pc),
        0x2348 => parse_arm_9032(ins, pc),
        0x2349 => parse_arm_9033(ins, pc),
        0x234a => parse_arm_9034(ins, pc),
        0x234b => parse_arm_9035(ins, pc),
        0x234c => parse_arm_9036(ins, pc),
        0x234d => parse_arm_9037(ins, pc),
        0x234e => parse_arm_9038(ins, pc),
        0x234f => parse_arm_9039(ins, pc),
        0x2350 => parse_arm_9040(ins, pc),
        0x2351 => parse_arm_9041(ins, pc),
        0x2352 => parse_arm_9042(ins, pc),
        0x2353 => parse_arm_9043(ins, pc),
        0x2354 => parse_arm_9044(ins, pc),
        0x2355 => parse_arm_9045(ins, pc),
        0x2356 => parse_arm_9046(ins, pc),
        0x2357 => parse_arm_9047(ins, pc),
        0x2358 => parse_arm_9048(ins, pc),
        0x2359 => parse_arm_9049(ins, pc),
        0x235a => parse_arm_9050(ins, pc),
        0x235b => parse_arm_9051(ins, pc),
        0x235c => parse_arm_9052(ins, pc),
        0x235d => parse_arm_9053(ins, pc),
        0x235e => parse_arm_9054(ins, pc),
        0x235f => parse_arm_9055(ins, pc),
        0x2360 => parse_arm_9056(ins, pc),
        0x2361 => parse_arm_9057(ins, pc),
        0x2362 => parse_arm_9058(ins, pc),
        0x2363 => parse_arm_9059(ins, pc),
        0x2364 => parse_arm_9060(ins, pc),
        0x2365 => parse_arm_9061(ins, pc),
        0x2366 => parse_arm_9062(ins, pc),
        0x2367 => parse_arm_9063(ins, pc),
        0x2368 => parse_arm_9064(ins, pc),
        0x2369 => parse_arm_9065(ins, pc),
        0x236a => parse_arm_9066(ins, pc),
        0x236b => parse_arm_9067(ins, pc),
        0x236c => parse_arm_9068(ins, pc),
        0x236d => parse_arm_9069(ins, pc),
        0x236e => parse_arm_9070(ins, pc),
        0x236f => parse_arm_9071(ins, pc),
        0x2370 => parse_arm_9072(ins, pc),
        0x2371 => parse_arm_9073(ins, pc),
        0x2372 => parse_arm_9074(ins, pc),
        0x2373 => parse_arm_9075(ins, pc),
        0x2374 => parse_arm_9076(ins, pc),
        0x2375 => parse_arm_9077(ins, pc),
        0x2376 => parse_arm_9078(ins, pc),
        0x2377 => parse_arm_9079(ins, pc),
        0x2378 => parse_arm_9080(ins, pc),
        0x2379 => parse_arm_9081(ins, pc),
        0x237a => parse_arm_9082(ins, pc),
        0x237b => parse_arm_9083(ins, pc),
        0x237c => parse_arm_9084(ins, pc),
        0x237d => parse_arm_9085(ins, pc),
        0x237e => parse_arm_9086(ins, pc),
        0x237f => parse_arm_9087(ins, pc),
        0x2380 => parse_arm_9088(ins, pc),
        0x2381 => parse_arm_9089(ins, pc),
        0x2382 => parse_arm_9090(ins, pc),
        0x2383 => parse_arm_9091(ins, pc),
        0x2384 => parse_arm_9092(ins, pc),
        0x2385 => parse_arm_9093(ins, pc),
        0x2386 => parse_arm_9094(ins, pc),
        0x2387 => parse_arm_9095(ins, pc),
        0x2388 => parse_arm_9096(ins, pc),
        0x2389 => parse_arm_9097(ins, pc),
        0x238a => parse_arm_9098(ins, pc),
        0x238b => parse_arm_9099(ins, pc),
        0x238c => parse_arm_9100(ins, pc),
        0x238d => parse_arm_9101(ins, pc),
        0x238e => parse_arm_9102(ins, pc),
        0x238f => parse_arm_9103(ins, pc),
        0x2390 => parse_arm_9104(ins, pc),
        0x2391 => parse_arm_9105(ins, pc),
        0x2392 => parse_arm_9106(ins, pc),
        0x2393 => parse_arm_9107(ins, pc),
        0x2394 => parse_arm_9108(ins, pc),
        0x2395 => parse_arm_9109(ins, pc),
        0x2396 => parse_arm_9110(ins, pc),
        0x2397 => parse_arm_9111(ins, pc),
        0x2398 => parse_arm_9112(ins, pc),
        0x2399 => parse_arm_9113(ins, pc),
        0x239a => parse_arm_9114(ins, pc),
        0x239b => parse_arm_9115(ins, pc),
        0x239c => parse_arm_9116(ins, pc),
        0x239d => parse_arm_9117(ins, pc),
        0x239e => parse_arm_9118(ins, pc),
        0x239f => parse_arm_9119(ins, pc),
        0x23a0 => parse_arm_9120(ins, pc),
        0x23a1 => parse_arm_9121(ins, pc),
        0x23a2 => parse_arm_9122(ins, pc),
        0x23a3 => parse_arm_9123(ins, pc),
        0x23a4 => parse_arm_9124(ins, pc),
        0x23a5 => parse_arm_9125(ins, pc),
        0x23a6 => parse_arm_9126(ins, pc),
        0x23a7 => parse_arm_9127(ins, pc),
        0x23a8 => parse_arm_9128(ins, pc),
        0x23a9 => parse_arm_9129(ins, pc),
        0x23aa => parse_arm_9130(ins, pc),
        0x23ab => parse_arm_9131(ins, pc),
        0x23ac => parse_arm_9132(ins, pc),
        0x23ad => parse_arm_9133(ins, pc),
        0x23ae => parse_arm_9134(ins, pc),
        0x23af => parse_arm_9135(ins, pc),
        0x23b0 => parse_arm_9136(ins, pc),
        0x23b1 => parse_arm_9137(ins, pc),
        0x23b2 => parse_arm_9138(ins, pc),
        0x23b3 => parse_arm_9139(ins, pc),
        0x23b4 => parse_arm_9140(ins, pc),
        0x23b5 => parse_arm_9141(ins, pc),
        0x23b6 => parse_arm_9142(ins, pc),
        0x23b7 => parse_arm_9143(ins, pc),
        0x23b8 => parse_arm_9144(ins, pc),
        0x23b9 => parse_arm_9145(ins, pc),
        0x23ba => parse_arm_9146(ins, pc),
        0x23bb => parse_arm_9147(ins, pc),
        0x23bc => parse_arm_9148(ins, pc),
        0x23bd => parse_arm_9149(ins, pc),
        0x23be => parse_arm_9150(ins, pc),
        0x23bf => parse_arm_9151(ins, pc),
        0x23c0 => parse_arm_9152(ins, pc),
        0x23c1 => parse_arm_9153(ins, pc),
        0x23c2 => parse_arm_9154(ins, pc),
        0x23c3 => parse_arm_9155(ins, pc),
        0x23c4 => parse_arm_9156(ins, pc),
        0x23c5 => parse_arm_9157(ins, pc),
        0x23c6 => parse_arm_9158(ins, pc),
        0x23c7 => parse_arm_9159(ins, pc),
        0x23c8 => parse_arm_9160(ins, pc),
        0x23c9 => parse_arm_9161(ins, pc),
        0x23ca => parse_arm_9162(ins, pc),
        0x23cb => parse_arm_9163(ins, pc),
        0x23cc => parse_arm_9164(ins, pc),
        0x23cd => parse_arm_9165(ins, pc),
        0x23ce => parse_arm_9166(ins, pc),
        0x23cf => parse_arm_9167(ins, pc),
        0x23d0 => parse_arm_9168(ins, pc),
        0x23d1 => parse_arm_9169(ins, pc),
        0x23d2 => parse_arm_9170(ins, pc),
        0x23d3 => parse_arm_9171(ins, pc),
        0x23d4 => parse_arm_9172(ins, pc),
        0x23d5 => parse_arm_9173(ins, pc),
        0x23d6 => parse_arm_9174(ins, pc),
        0x23d7 => parse_arm_9175(ins, pc),
        0x23d8 => parse_arm_9176(ins, pc),
        0x23d9 => parse_arm_9177(ins, pc),
        0x23da => parse_arm_9178(ins, pc),
        0x23db => parse_arm_9179(ins, pc),
        0x23dc => parse_arm_9180(ins, pc),
        0x23dd => parse_arm_9181(ins, pc),
        0x23de => parse_arm_9182(ins, pc),
        0x23df => parse_arm_9183(ins, pc),
        0x23e0 => parse_arm_9184(ins, pc),
        0x23e1 => parse_arm_9185(ins, pc),
        0x23e2 => parse_arm_9186(ins, pc),
        0x23e3 => parse_arm_9187(ins, pc),
        0x23e4 => parse_arm_9188(ins, pc),
        0x23e5 => parse_arm_9189(ins, pc),
        0x23e6 => parse_arm_9190(ins, pc),
        0x23e7 => parse_arm_9191(ins, pc),
        0x23e8 => parse_arm_9192(ins, pc),
        0x23e9 => parse_arm_9193(ins, pc),
        0x23ea => parse_arm_9194(ins, pc),
        0x23eb => parse_arm_9195(ins, pc),
        0x23ec => parse_arm_9196(ins, pc),
        0x23ed => parse_arm_9197(ins, pc),
        0x23ee => parse_arm_9198(ins, pc),
        0x23ef => parse_arm_9199(ins, pc),
        0x23f0 => parse_arm_9200(ins, pc),
        0x23f1 => parse_arm_9201(ins, pc),
        0x23f2 => parse_arm_9202(ins, pc),
        0x23f3 => parse_arm_9203(ins, pc),
        0x23f4 => parse_arm_9204(ins, pc),
        0x23f5 => parse_arm_9205(ins, pc),
        0x23f6 => parse_arm_9206(ins, pc),
        0x23f7 => parse_arm_9207(ins, pc),
        0x23f8 => parse_arm_9208(ins, pc),
        0x23f9 => parse_arm_9209(ins, pc),
        0x23fa => parse_arm_9210(ins, pc),
        0x23fb => parse_arm_9211(ins, pc),
        0x23fc => parse_arm_9212(ins, pc),
        0x23fd => parse_arm_9213(ins, pc),
        0x23fe => parse_arm_9214(ins, pc),
        0x23ff => parse_arm_9215(ins, pc),
        0x2400 => parse_arm_9216(ins, pc),
        0x2401 => parse_arm_9217(ins, pc),
        0x2402 => parse_arm_9218(ins, pc),
        0x2403 => parse_arm_9219(ins, pc),
        0x2404 => parse_arm_9220(ins, pc),
        0x2405 => parse_arm_9221(ins, pc),
        0x2406 => parse_arm_9222(ins, pc),
        0x2407 => parse_arm_9223(ins, pc),
        0x2408 => parse_arm_9224(ins, pc),
        0x2409 => parse_arm_9225(ins, pc),
        0x240a => parse_arm_9226(ins, pc),
        0x240b => parse_arm_9227(ins, pc),
        0x240c => parse_arm_9228(ins, pc),
        0x240d => parse_arm_9229(ins, pc),
        0x240e => parse_arm_9230(ins, pc),
        0x240f => parse_arm_9231(ins, pc),
        0x2410 => parse_arm_9232(ins, pc),
        0x2411 => parse_arm_9233(ins, pc),
        0x2412 => parse_arm_9234(ins, pc),
        0x2413 => parse_arm_9235(ins, pc),
        0x2414 => parse_arm_9236(ins, pc),
        0x2415 => parse_arm_9237(ins, pc),
        0x2416 => parse_arm_9238(ins, pc),
        0x2417 => parse_arm_9239(ins, pc),
        0x2418 => parse_arm_9240(ins, pc),
        0x2419 => parse_arm_9241(ins, pc),
        0x241a => parse_arm_9242(ins, pc),
        0x241b => parse_arm_9243(ins, pc),
        0x241c => parse_arm_9244(ins, pc),
        0x241d => parse_arm_9245(ins, pc),
        0x241e => parse_arm_9246(ins, pc),
        0x241f => parse_arm_9247(ins, pc),
        0x2420 => parse_arm_9248(ins, pc),
        0x2421 => parse_arm_9249(ins, pc),
        0x2422 => parse_arm_9250(ins, pc),
        0x2423 => parse_arm_9251(ins, pc),
        0x2424 => parse_arm_9252(ins, pc),
        0x2425 => parse_arm_9253(ins, pc),
        0x2426 => parse_arm_9254(ins, pc),
        0x2427 => parse_arm_9255(ins, pc),
        0x2428 => parse_arm_9256(ins, pc),
        0x2429 => parse_arm_9257(ins, pc),
        0x242a => parse_arm_9258(ins, pc),
        0x242b => parse_arm_9259(ins, pc),
        0x242c => parse_arm_9260(ins, pc),
        0x242d => parse_arm_9261(ins, pc),
        0x242e => parse_arm_9262(ins, pc),
        0x242f => parse_arm_9263(ins, pc),
        0x2430 => parse_arm_9264(ins, pc),
        0x2431 => parse_arm_9265(ins, pc),
        0x2432 => parse_arm_9266(ins, pc),
        0x2433 => parse_arm_9267(ins, pc),
        0x2434 => parse_arm_9268(ins, pc),
        0x2435 => parse_arm_9269(ins, pc),
        0x2436 => parse_arm_9270(ins, pc),
        0x2437 => parse_arm_9271(ins, pc),
        0x2438 => parse_arm_9272(ins, pc),
        0x2439 => parse_arm_9273(ins, pc),
        0x243a => parse_arm_9274(ins, pc),
        0x243b => parse_arm_9275(ins, pc),
        0x243c => parse_arm_9276(ins, pc),
        0x243d => parse_arm_9277(ins, pc),
        0x243e => parse_arm_9278(ins, pc),
        0x243f => parse_arm_9279(ins, pc),
        0x2440 => parse_arm_9280(ins, pc),
        0x2441 => parse_arm_9281(ins, pc),
        0x2442 => parse_arm_9282(ins, pc),
        0x2443 => parse_arm_9283(ins, pc),
        0x2444 => parse_arm_9284(ins, pc),
        0x2445 => parse_arm_9285(ins, pc),
        0x2446 => parse_arm_9286(ins, pc),
        0x2447 => parse_arm_9287(ins, pc),
        0x2448 => parse_arm_9288(ins, pc),
        0x2449 => parse_arm_9289(ins, pc),
        0x244a => parse_arm_9290(ins, pc),
        0x244b => parse_arm_9291(ins, pc),
        0x244c => parse_arm_9292(ins, pc),
        0x244d => parse_arm_9293(ins, pc),
        0x244e => parse_arm_9294(ins, pc),
        0x244f => parse_arm_9295(ins, pc),
        0x2450 => parse_arm_9296(ins, pc),
        0x2451 => parse_arm_9297(ins, pc),
        0x2452 => parse_arm_9298(ins, pc),
        0x2453 => parse_arm_9299(ins, pc),
        0x2454 => parse_arm_9300(ins, pc),
        0x2455 => parse_arm_9301(ins, pc),
        0x2456 => parse_arm_9302(ins, pc),
        0x2457 => parse_arm_9303(ins, pc),
        0x2458 => parse_arm_9304(ins, pc),
        0x2459 => parse_arm_9305(ins, pc),
        0x245a => parse_arm_9306(ins, pc),
        0x245b => parse_arm_9307(ins, pc),
        0x245c => parse_arm_9308(ins, pc),
        0x245d => parse_arm_9309(ins, pc),
        0x245e => parse_arm_9310(ins, pc),
        0x245f => parse_arm_9311(ins, pc),
        0x2460 => parse_arm_9312(ins, pc),
        0x2461 => parse_arm_9313(ins, pc),
        0x2462 => parse_arm_9314(ins, pc),
        0x2463 => parse_arm_9315(ins, pc),
        0x2464 => parse_arm_9316(ins, pc),
        0x2465 => parse_arm_9317(ins, pc),
        0x2466 => parse_arm_9318(ins, pc),
        0x2467 => parse_arm_9319(ins, pc),
        0x2468 => parse_arm_9320(ins, pc),
        0x2469 => parse_arm_9321(ins, pc),
        0x246a => parse_arm_9322(ins, pc),
        0x246b => parse_arm_9323(ins, pc),
        0x246c => parse_arm_9324(ins, pc),
        0x246d => parse_arm_9325(ins, pc),
        0x246e => parse_arm_9326(ins, pc),
        0x246f => parse_arm_9327(ins, pc),
        0x2470 => parse_arm_9328(ins, pc),
        0x2471 => parse_arm_9329(ins, pc),
        0x2472 => parse_arm_9330(ins, pc),
        0x2473 => parse_arm_9331(ins, pc),
        0x2474 => parse_arm_9332(ins, pc),
        0x2475 => parse_arm_9333(ins, pc),
        0x2476 => parse_arm_9334(ins, pc),
        0x2477 => parse_arm_9335(ins, pc),
        0x2478 => parse_arm_9336(ins, pc),
        0x2479 => parse_arm_9337(ins, pc),
        0x247a => parse_arm_9338(ins, pc),
        0x247b => parse_arm_9339(ins, pc),
        0x247c => parse_arm_9340(ins, pc),
        0x247d => parse_arm_9341(ins, pc),
        0x247e => parse_arm_9342(ins, pc),
        0x247f => parse_arm_9343(ins, pc),
        0x2480 => parse_arm_9344(ins, pc),
        0x2481 => parse_arm_9345(ins, pc),
        0x2482 => parse_arm_9346(ins, pc),
        0x2483 => parse_arm_9347(ins, pc),
        0x2484 => parse_arm_9348(ins, pc),
        0x2485 => parse_arm_9349(ins, pc),
        0x2486 => parse_arm_9350(ins, pc),
        0x2487 => parse_arm_9351(ins, pc),
        0x2488 => parse_arm_9352(ins, pc),
        0x2489 => parse_arm_9353(ins, pc),
        0x248a => parse_arm_9354(ins, pc),
        0x248b => parse_arm_9355(ins, pc),
        0x248c => parse_arm_9356(ins, pc),
        0x248d => parse_arm_9357(ins, pc),
        0x248e => parse_arm_9358(ins, pc),
        0x248f => parse_arm_9359(ins, pc),
        0x2490 => parse_arm_9360(ins, pc),
        0x2491 => parse_arm_9361(ins, pc),
        0x2492 => parse_arm_9362(ins, pc),
        0x2493 => parse_arm_9363(ins, pc),
        0x2494 => parse_arm_9364(ins, pc),
        0x2495 => parse_arm_9365(ins, pc),
        0x2496 => parse_arm_9366(ins, pc),
        0x2497 => parse_arm_9367(ins, pc),
        0x2498 => parse_arm_9368(ins, pc),
        0x2499 => parse_arm_9369(ins, pc),
        0x249a => parse_arm_9370(ins, pc),
        0x249b => parse_arm_9371(ins, pc),
        0x249c => parse_arm_9372(ins, pc),
        0x249d => parse_arm_9373(ins, pc),
        0x249e => parse_arm_9374(ins, pc),
        0x249f => parse_arm_9375(ins, pc),
        0x24a0 => parse_arm_9376(ins, pc),
        0x24a1 => parse_arm_9377(ins, pc),
        0x24a2 => parse_arm_9378(ins, pc),
        0x24a3 => parse_arm_9379(ins, pc),
        0x24a4 => parse_arm_9380(ins, pc),
        0x24a5 => parse_arm_9381(ins, pc),
        0x24a6 => parse_arm_9382(ins, pc),
        0x24a7 => parse_arm_9383(ins, pc),
        0x24a8 => parse_arm_9384(ins, pc),
        0x24a9 => parse_arm_9385(ins, pc),
        0x24aa => parse_arm_9386(ins, pc),
        0x24ab => parse_arm_9387(ins, pc),
        0x24ac => parse_arm_9388(ins, pc),
        0x24ad => parse_arm_9389(ins, pc),
        0x24ae => parse_arm_9390(ins, pc),
        0x24af => parse_arm_9391(ins, pc),
        0x24b0 => parse_arm_9392(ins, pc),
        0x24b1 => parse_arm_9393(ins, pc),
        0x24b2 => parse_arm_9394(ins, pc),
        0x24b3 => parse_arm_9395(ins, pc),
        0x24b4 => parse_arm_9396(ins, pc),
        0x24b5 => parse_arm_9397(ins, pc),
        0x24b6 => parse_arm_9398(ins, pc),
        0x24b7 => parse_arm_9399(ins, pc),
        0x24b8 => parse_arm_9400(ins, pc),
        0x24b9 => parse_arm_9401(ins, pc),
        0x24ba => parse_arm_9402(ins, pc),
        0x24bb => parse_arm_9403(ins, pc),
        0x24bc => parse_arm_9404(ins, pc),
        0x24bd => parse_arm_9405(ins, pc),
        0x24be => parse_arm_9406(ins, pc),
        0x24bf => parse_arm_9407(ins, pc),
        0x24c0 => parse_arm_9408(ins, pc),
        0x24c1 => parse_arm_9409(ins, pc),
        0x24c2 => parse_arm_9410(ins, pc),
        0x24c3 => parse_arm_9411(ins, pc),
        0x24c4 => parse_arm_9412(ins, pc),
        0x24c5 => parse_arm_9413(ins, pc),
        0x24c6 => parse_arm_9414(ins, pc),
        0x24c7 => parse_arm_9415(ins, pc),
        0x24c8 => parse_arm_9416(ins, pc),
        0x24c9 => parse_arm_9417(ins, pc),
        0x24ca => parse_arm_9418(ins, pc),
        0x24cb => parse_arm_9419(ins, pc),
        0x24cc => parse_arm_9420(ins, pc),
        0x24cd => parse_arm_9421(ins, pc),
        0x24ce => parse_arm_9422(ins, pc),
        0x24cf => parse_arm_9423(ins, pc),
        0x24d0 => parse_arm_9424(ins, pc),
        0x24d1 => parse_arm_9425(ins, pc),
        0x24d2 => parse_arm_9426(ins, pc),
        0x24d3 => parse_arm_9427(ins, pc),
        0x24d4 => parse_arm_9428(ins, pc),
        0x24d5 => parse_arm_9429(ins, pc),
        0x24d6 => parse_arm_9430(ins, pc),
        0x24d7 => parse_arm_9431(ins, pc),
        0x24d8 => parse_arm_9432(ins, pc),
        0x24d9 => parse_arm_9433(ins, pc),
        0x24da => parse_arm_9434(ins, pc),
        0x24db => parse_arm_9435(ins, pc),
        0x24dc => parse_arm_9436(ins, pc),
        0x24dd => parse_arm_9437(ins, pc),
        0x24de => parse_arm_9438(ins, pc),
        0x24df => parse_arm_9439(ins, pc),
        0x24e0 => parse_arm_9440(ins, pc),
        0x24e1 => parse_arm_9441(ins, pc),
        0x24e2 => parse_arm_9442(ins, pc),
        0x24e3 => parse_arm_9443(ins, pc),
        0x24e4 => parse_arm_9444(ins, pc),
        0x24e5 => parse_arm_9445(ins, pc),
        0x24e6 => parse_arm_9446(ins, pc),
        0x24e7 => parse_arm_9447(ins, pc),
        0x24e8 => parse_arm_9448(ins, pc),
        0x24e9 => parse_arm_9449(ins, pc),
        0x24ea => parse_arm_9450(ins, pc),
        0x24eb => parse_arm_9451(ins, pc),
        0x24ec => parse_arm_9452(ins, pc),
        0x24ed => parse_arm_9453(ins, pc),
        0x24ee => parse_arm_9454(ins, pc),
        0x24ef => parse_arm_9455(ins, pc),
        0x24f0 => parse_arm_9456(ins, pc),
        0x24f1 => parse_arm_9457(ins, pc),
        0x24f2 => parse_arm_9458(ins, pc),
        0x24f3 => parse_arm_9459(ins, pc),
        0x24f4 => parse_arm_9460(ins, pc),
        0x24f5 => parse_arm_9461(ins, pc),
        0x24f6 => parse_arm_9462(ins, pc),
        0x24f7 => parse_arm_9463(ins, pc),
        0x24f8 => parse_arm_9464(ins, pc),
        0x24f9 => parse_arm_9465(ins, pc),
        0x24fa => parse_arm_9466(ins, pc),
        0x24fb => parse_arm_9467(ins, pc),
        0x24fc => parse_arm_9468(ins, pc),
        0x24fd => parse_arm_9469(ins, pc),
        0x24fe => parse_arm_9470(ins, pc),
        0x24ff => parse_arm_9471(ins, pc),
        0x2500 => parse_arm_9472(ins, pc),
        0x2501 => parse_arm_9473(ins, pc),
        0x2502 => parse_arm_9474(ins, pc),
        0x2503 => parse_arm_9475(ins, pc),
        0x2504 => parse_arm_9476(ins, pc),
        0x2505 => parse_arm_9477(ins, pc),
        0x2506 => parse_arm_9478(ins, pc),
        0x2507 => parse_arm_9479(ins, pc),
        0x2508 => parse_arm_9480(ins, pc),
        0x2509 => parse_arm_9481(ins, pc),
        0x250a => parse_arm_9482(ins, pc),
        0x250b => parse_arm_9483(ins, pc),
        0x250c => parse_arm_9484(ins, pc),
        0x250d => parse_arm_9485(ins, pc),
        0x250e => parse_arm_9486(ins, pc),
        0x250f => parse_arm_9487(ins, pc),
        0x2510 => parse_arm_9488(ins, pc),
        0x2511 => parse_arm_9489(ins, pc),
        0x2512 => parse_arm_9490(ins, pc),
        0x2513 => parse_arm_9491(ins, pc),
        0x2514 => parse_arm_9492(ins, pc),
        0x2515 => parse_arm_9493(ins, pc),
        0x2516 => parse_arm_9494(ins, pc),
        0x2517 => parse_arm_9495(ins, pc),
        0x2518 => parse_arm_9496(ins, pc),
        0x2519 => parse_arm_9497(ins, pc),
        0x251a => parse_arm_9498(ins, pc),
        0x251b => parse_arm_9499(ins, pc),
        0x251c => parse_arm_9500(ins, pc),
        0x251d => parse_arm_9501(ins, pc),
        0x251e => parse_arm_9502(ins, pc),
        0x251f => parse_arm_9503(ins, pc),
        0x2520 => parse_arm_9504(ins, pc),
        0x2521 => parse_arm_9505(ins, pc),
        0x2522 => parse_arm_9506(ins, pc),
        0x2523 => parse_arm_9507(ins, pc),
        0x2524 => parse_arm_9508(ins, pc),
        0x2525 => parse_arm_9509(ins, pc),
        0x2526 => parse_arm_9510(ins, pc),
        0x2527 => parse_arm_9511(ins, pc),
        0x2528 => parse_arm_9512(ins, pc),
        0x2529 => parse_arm_9513(ins, pc),
        0x252a => parse_arm_9514(ins, pc),
        0x252b => parse_arm_9515(ins, pc),
        0x252c => parse_arm_9516(ins, pc),
        0x252d => parse_arm_9517(ins, pc),
        0x252e => parse_arm_9518(ins, pc),
        0x252f => parse_arm_9519(ins, pc),
        0x2530 => parse_arm_9520(ins, pc),
        0x2531 => parse_arm_9521(ins, pc),
        0x2532 => parse_arm_9522(ins, pc),
        0x2533 => parse_arm_9523(ins, pc),
        0x2534 => parse_arm_9524(ins, pc),
        0x2535 => parse_arm_9525(ins, pc),
        0x2536 => parse_arm_9526(ins, pc),
        0x2537 => parse_arm_9527(ins, pc),
        0x2538 => parse_arm_9528(ins, pc),
        0x2539 => parse_arm_9529(ins, pc),
        0x253a => parse_arm_9530(ins, pc),
        0x253b => parse_arm_9531(ins, pc),
        0x253c => parse_arm_9532(ins, pc),
        0x253d => parse_arm_9533(ins, pc),
        0x253e => parse_arm_9534(ins, pc),
        0x253f => parse_arm_9535(ins, pc),
        0x2540 => parse_arm_9536(ins, pc),
        0x2541 => parse_arm_9537(ins, pc),
        0x2542 => parse_arm_9538(ins, pc),
        0x2543 => parse_arm_9539(ins, pc),
        0x2544 => parse_arm_9540(ins, pc),
        0x2545 => parse_arm_9541(ins, pc),
        0x2546 => parse_arm_9542(ins, pc),
        0x2547 => parse_arm_9543(ins, pc),
        0x2548 => parse_arm_9544(ins, pc),
        0x2549 => parse_arm_9545(ins, pc),
        0x254a => parse_arm_9546(ins, pc),
        0x254b => parse_arm_9547(ins, pc),
        0x254c => parse_arm_9548(ins, pc),
        0x254d => parse_arm_9549(ins, pc),
        0x254e => parse_arm_9550(ins, pc),
        0x254f => parse_arm_9551(ins, pc),
        0x2550 => parse_arm_9552(ins, pc),
        0x2551 => parse_arm_9553(ins, pc),
        0x2552 => parse_arm_9554(ins, pc),
        0x2553 => parse_arm_9555(ins, pc),
        0x2554 => parse_arm_9556(ins, pc),
        0x2555 => parse_arm_9557(ins, pc),
        0x2556 => parse_arm_9558(ins, pc),
        0x2557 => parse_arm_9559(ins, pc),
        0x2558 => parse_arm_9560(ins, pc),
        0x2559 => parse_arm_9561(ins, pc),
        0x255a => parse_arm_9562(ins, pc),
        0x255b => parse_arm_9563(ins, pc),
        0x255c => parse_arm_9564(ins, pc),
        0x255d => parse_arm_9565(ins, pc),
        0x255e => parse_arm_9566(ins, pc),
        0x255f => parse_arm_9567(ins, pc),
        0x2560 => parse_arm_9568(ins, pc),
        0x2561 => parse_arm_9569(ins, pc),
        0x2562 => parse_arm_9570(ins, pc),
        0x2563 => parse_arm_9571(ins, pc),
        0x2564 => parse_arm_9572(ins, pc),
        0x2565 => parse_arm_9573(ins, pc),
        0x2566 => parse_arm_9574(ins, pc),
        0x2567 => parse_arm_9575(ins, pc),
        0x2568 => parse_arm_9576(ins, pc),
        0x2569 => parse_arm_9577(ins, pc),
        0x256a => parse_arm_9578(ins, pc),
        0x256b => parse_arm_9579(ins, pc),
        0x256c => parse_arm_9580(ins, pc),
        0x256d => parse_arm_9581(ins, pc),
        0x256e => parse_arm_9582(ins, pc),
        0x256f => parse_arm_9583(ins, pc),
        0x2570 => parse_arm_9584(ins, pc),
        0x2571 => parse_arm_9585(ins, pc),
        0x2572 => parse_arm_9586(ins, pc),
        0x2573 => parse_arm_9587(ins, pc),
        0x2574 => parse_arm_9588(ins, pc),
        0x2575 => parse_arm_9589(ins, pc),
        0x2576 => parse_arm_9590(ins, pc),
        0x2577 => parse_arm_9591(ins, pc),
        0x2578 => parse_arm_9592(ins, pc),
        0x2579 => parse_arm_9593(ins, pc),
        0x257a => parse_arm_9594(ins, pc),
        0x257b => parse_arm_9595(ins, pc),
        0x257c => parse_arm_9596(ins, pc),
        0x257d => parse_arm_9597(ins, pc),
        0x257e => parse_arm_9598(ins, pc),
        0x257f => parse_arm_9599(ins, pc),
        0x2580 => parse_arm_9600(ins, pc),
        0x2581 => parse_arm_9601(ins, pc),
        0x2582 => parse_arm_9602(ins, pc),
        0x2583 => parse_arm_9603(ins, pc),
        0x2584 => parse_arm_9604(ins, pc),
        0x2585 => parse_arm_9605(ins, pc),
        0x2586 => parse_arm_9606(ins, pc),
        0x2587 => parse_arm_9607(ins, pc),
        0x2588 => parse_arm_9608(ins, pc),
        0x2589 => parse_arm_9609(ins, pc),
        0x258a => parse_arm_9610(ins, pc),
        0x258b => parse_arm_9611(ins, pc),
        0x258c => parse_arm_9612(ins, pc),
        0x258d => parse_arm_9613(ins, pc),
        0x258e => parse_arm_9614(ins, pc),
        0x258f => parse_arm_9615(ins, pc),
        0x2590 => parse_arm_9616(ins, pc),
        0x2591 => parse_arm_9617(ins, pc),
        0x2592 => parse_arm_9618(ins, pc),
        0x2593 => parse_arm_9619(ins, pc),
        0x2594 => parse_arm_9620(ins, pc),
        0x2595 => parse_arm_9621(ins, pc),
        0x2596 => parse_arm_9622(ins, pc),
        0x2597 => parse_arm_9623(ins, pc),
        0x2598 => parse_arm_9624(ins, pc),
        0x2599 => parse_arm_9625(ins, pc),
        0x259a => parse_arm_9626(ins, pc),
        0x259b => parse_arm_9627(ins, pc),
        0x259c => parse_arm_9628(ins, pc),
        0x259d => parse_arm_9629(ins, pc),
        0x259e => parse_arm_9630(ins, pc),
        0x259f => parse_arm_9631(ins, pc),
        0x25a0 => parse_arm_9632(ins, pc),
        0x25a1 => parse_arm_9633(ins, pc),
        0x25a2 => parse_arm_9634(ins, pc),
        0x25a3 => parse_arm_9635(ins, pc),
        0x25a4 => parse_arm_9636(ins, pc),
        0x25a5 => parse_arm_9637(ins, pc),
        0x25a6 => parse_arm_9638(ins, pc),
        0x25a7 => parse_arm_9639(ins, pc),
        0x25a8 => parse_arm_9640(ins, pc),
        0x25a9 => parse_arm_9641(ins, pc),
        0x25aa => parse_arm_9642(ins, pc),
        0x25ab => parse_arm_9643(ins, pc),
        0x25ac => parse_arm_9644(ins, pc),
        0x25ad => parse_arm_9645(ins, pc),
        0x25ae => parse_arm_9646(ins, pc),
        0x25af => parse_arm_9647(ins, pc),
        0x25b0 => parse_arm_9648(ins, pc),
        0x25b1 => parse_arm_9649(ins, pc),
        0x25b2 => parse_arm_9650(ins, pc),
        0x25b3 => parse_arm_9651(ins, pc),
        0x25b4 => parse_arm_9652(ins, pc),
        0x25b5 => parse_arm_9653(ins, pc),
        0x25b6 => parse_arm_9654(ins, pc),
        0x25b7 => parse_arm_9655(ins, pc),
        0x25b8 => parse_arm_9656(ins, pc),
        0x25b9 => parse_arm_9657(ins, pc),
        0x25ba => parse_arm_9658(ins, pc),
        0x25bb => parse_arm_9659(ins, pc),
        0x25bc => parse_arm_9660(ins, pc),
        0x25bd => parse_arm_9661(ins, pc),
        0x25be => parse_arm_9662(ins, pc),
        0x25bf => parse_arm_9663(ins, pc),
        0x25c0 => parse_arm_9664(ins, pc),
        0x25c1 => parse_arm_9665(ins, pc),
        0x25c2 => parse_arm_9666(ins, pc),
        0x25c3 => parse_arm_9667(ins, pc),
        0x25c4 => parse_arm_9668(ins, pc),
        0x25c5 => parse_arm_9669(ins, pc),
        0x25c6 => parse_arm_9670(ins, pc),
        0x25c7 => parse_arm_9671(ins, pc),
        0x25c8 => parse_arm_9672(ins, pc),
        0x25c9 => parse_arm_9673(ins, pc),
        0x25ca => parse_arm_9674(ins, pc),
        0x25cb => parse_arm_9675(ins, pc),
        0x25cc => parse_arm_9676(ins, pc),
        0x25cd => parse_arm_9677(ins, pc),
        0x25ce => parse_arm_9678(ins, pc),
        0x25cf => parse_arm_9679(ins, pc),
        0x25d0 => parse_arm_9680(ins, pc),
        0x25d1 => parse_arm_9681(ins, pc),
        0x25d2 => parse_arm_9682(ins, pc),
        0x25d3 => parse_arm_9683(ins, pc),
        0x25d4 => parse_arm_9684(ins, pc),
        0x25d5 => parse_arm_9685(ins, pc),
        0x25d6 => parse_arm_9686(ins, pc),
        0x25d7 => parse_arm_9687(ins, pc),
        0x25d8 => parse_arm_9688(ins, pc),
        0x25d9 => parse_arm_9689(ins, pc),
        0x25da => parse_arm_9690(ins, pc),
        0x25db => parse_arm_9691(ins, pc),
        0x25dc => parse_arm_9692(ins, pc),
        0x25dd => parse_arm_9693(ins, pc),
        0x25de => parse_arm_9694(ins, pc),
        0x25df => parse_arm_9695(ins, pc),
        0x25e0 => parse_arm_9696(ins, pc),
        0x25e1 => parse_arm_9697(ins, pc),
        0x25e2 => parse_arm_9698(ins, pc),
        0x25e3 => parse_arm_9699(ins, pc),
        0x25e4 => parse_arm_9700(ins, pc),
        0x25e5 => parse_arm_9701(ins, pc),
        0x25e6 => parse_arm_9702(ins, pc),
        0x25e7 => parse_arm_9703(ins, pc),
        0x25e8 => parse_arm_9704(ins, pc),
        0x25e9 => parse_arm_9705(ins, pc),
        0x25ea => parse_arm_9706(ins, pc),
        0x25eb => parse_arm_9707(ins, pc),
        0x25ec => parse_arm_9708(ins, pc),
        0x25ed => parse_arm_9709(ins, pc),
        0x25ee => parse_arm_9710(ins, pc),
        0x25ef => parse_arm_9711(ins, pc),
        0x25f0 => parse_arm_9712(ins, pc),
        0x25f1 => parse_arm_9713(ins, pc),
        0x25f2 => parse_arm_9714(ins, pc),
        0x25f3 => parse_arm_9715(ins, pc),
        0x25f4 => parse_arm_9716(ins, pc),
        0x25f5 => parse_arm_9717(ins, pc),
        0x25f6 => parse_arm_9718(ins, pc),
        0x25f7 => parse_arm_9719(ins, pc),
        0x25f8 => parse_arm_9720(ins, pc),
        0x25f9 => parse_arm_9721(ins, pc),
        0x25fa => parse_arm_9722(ins, pc),
        0x25fb => parse_arm_9723(ins, pc),
        0x25fc => parse_arm_9724(ins, pc),
        0x25fd => parse_arm_9725(ins, pc),
        0x25fe => parse_arm_9726(ins, pc),
        0x25ff => parse_arm_9727(ins, pc),
        0x2600 => parse_arm_9728(ins, pc),
        0x2601 => parse_arm_9729(ins, pc),
        0x2602 => parse_arm_9730(ins, pc),
        0x2603 => parse_arm_9731(ins, pc),
        0x2604 => parse_arm_9732(ins, pc),
        0x2605 => parse_arm_9733(ins, pc),
        0x2606 => parse_arm_9734(ins, pc),
        0x2607 => parse_arm_9735(ins, pc),
        0x2608 => parse_arm_9736(ins, pc),
        0x2609 => parse_arm_9737(ins, pc),
        0x260a => parse_arm_9738(ins, pc),
        0x260b => parse_arm_9739(ins, pc),
        0x260c => parse_arm_9740(ins, pc),
        0x260d => parse_arm_9741(ins, pc),
        0x260e => parse_arm_9742(ins, pc),
        0x260f => parse_arm_9743(ins, pc),
        0x2610 => parse_arm_9744(ins, pc),
        0x2611 => parse_arm_9745(ins, pc),
        0x2612 => parse_arm_9746(ins, pc),
        0x2613 => parse_arm_9747(ins, pc),
        0x2614 => parse_arm_9748(ins, pc),
        0x2615 => parse_arm_9749(ins, pc),
        0x2616 => parse_arm_9750(ins, pc),
        0x2617 => parse_arm_9751(ins, pc),
        0x2618 => parse_arm_9752(ins, pc),
        0x2619 => parse_arm_9753(ins, pc),
        0x261a => parse_arm_9754(ins, pc),
        0x261b => parse_arm_9755(ins, pc),
        0x261c => parse_arm_9756(ins, pc),
        0x261d => parse_arm_9757(ins, pc),
        0x261e => parse_arm_9758(ins, pc),
        0x261f => parse_arm_9759(ins, pc),
        0x2620 => parse_arm_9760(ins, pc),
        0x2621 => parse_arm_9761(ins, pc),
        0x2622 => parse_arm_9762(ins, pc),
        0x2623 => parse_arm_9763(ins, pc),
        0x2624 => parse_arm_9764(ins, pc),
        0x2625 => parse_arm_9765(ins, pc),
        0x2626 => parse_arm_9766(ins, pc),
        0x2627 => parse_arm_9767(ins, pc),
        0x2628 => parse_arm_9768(ins, pc),
        0x2629 => parse_arm_9769(ins, pc),
        0x262a => parse_arm_9770(ins, pc),
        0x262b => parse_arm_9771(ins, pc),
        0x262c => parse_arm_9772(ins, pc),
        0x262d => parse_arm_9773(ins, pc),
        0x262e => parse_arm_9774(ins, pc),
        0x262f => parse_arm_9775(ins, pc),
        0x2630 => parse_arm_9776(ins, pc),
        0x2631 => parse_arm_9777(ins, pc),
        0x2632 => parse_arm_9778(ins, pc),
        0x2633 => parse_arm_9779(ins, pc),
        0x2634 => parse_arm_9780(ins, pc),
        0x2635 => parse_arm_9781(ins, pc),
        0x2636 => parse_arm_9782(ins, pc),
        0x2637 => parse_arm_9783(ins, pc),
        0x2638 => parse_arm_9784(ins, pc),
        0x2639 => parse_arm_9785(ins, pc),
        0x263a => parse_arm_9786(ins, pc),
        0x263b => parse_arm_9787(ins, pc),
        0x263c => parse_arm_9788(ins, pc),
        0x263d => parse_arm_9789(ins, pc),
        0x263e => parse_arm_9790(ins, pc),
        0x263f => parse_arm_9791(ins, pc),
        0x2640 => parse_arm_9792(ins, pc),
        0x2641 => parse_arm_9793(ins, pc),
        0x2642 => parse_arm_9794(ins, pc),
        0x2643 => parse_arm_9795(ins, pc),
        0x2644 => parse_arm_9796(ins, pc),
        0x2645 => parse_arm_9797(ins, pc),
        0x2646 => parse_arm_9798(ins, pc),
        0x2647 => parse_arm_9799(ins, pc),
        0x2648 => parse_arm_9800(ins, pc),
        0x2649 => parse_arm_9801(ins, pc),
        0x264a => parse_arm_9802(ins, pc),
        0x264b => parse_arm_9803(ins, pc),
        0x264c => parse_arm_9804(ins, pc),
        0x264d => parse_arm_9805(ins, pc),
        0x264e => parse_arm_9806(ins, pc),
        0x264f => parse_arm_9807(ins, pc),
        0x2650 => parse_arm_9808(ins, pc),
        0x2651 => parse_arm_9809(ins, pc),
        0x2652 => parse_arm_9810(ins, pc),
        0x2653 => parse_arm_9811(ins, pc),
        0x2654 => parse_arm_9812(ins, pc),
        0x2655 => parse_arm_9813(ins, pc),
        0x2656 => parse_arm_9814(ins, pc),
        0x2657 => parse_arm_9815(ins, pc),
        0x2658 => parse_arm_9816(ins, pc),
        0x2659 => parse_arm_9817(ins, pc),
        0x265a => parse_arm_9818(ins, pc),
        0x265b => parse_arm_9819(ins, pc),
        0x265c => parse_arm_9820(ins, pc),
        0x265d => parse_arm_9821(ins, pc),
        0x265e => parse_arm_9822(ins, pc),
        0x265f => parse_arm_9823(ins, pc),
        0x2660 => parse_arm_9824(ins, pc),
        0x2661 => parse_arm_9825(ins, pc),
        0x2662 => parse_arm_9826(ins, pc),
        0x2663 => parse_arm_9827(ins, pc),
        0x2664 => parse_arm_9828(ins, pc),
        0x2665 => parse_arm_9829(ins, pc),
        0x2666 => parse_arm_9830(ins, pc),
        0x2667 => parse_arm_9831(ins, pc),
        0x2668 => parse_arm_9832(ins, pc),
        0x2669 => parse_arm_9833(ins, pc),
        0x266a => parse_arm_9834(ins, pc),
        0x266b => parse_arm_9835(ins, pc),
        0x266c => parse_arm_9836(ins, pc),
        0x266d => parse_arm_9837(ins, pc),
        0x266e => parse_arm_9838(ins, pc),
        0x266f => parse_arm_9839(ins, pc),
        0x2670 => parse_arm_9840(ins, pc),
        0x2671 => parse_arm_9841(ins, pc),
        0x2672 => parse_arm_9842(ins, pc),
        0x2673 => parse_arm_9843(ins, pc),
        0x2674 => parse_arm_9844(ins, pc),
        0x2675 => parse_arm_9845(ins, pc),
        0x2676 => parse_arm_9846(ins, pc),
        0x2677 => parse_arm_9847(ins, pc),
        0x2678 => parse_arm_9848(ins, pc),
        0x2679 => parse_arm_9849(ins, pc),
        0x267a => parse_arm_9850(ins, pc),
        0x267b => parse_arm_9851(ins, pc),
        0x267c => parse_arm_9852(ins, pc),
        0x267d => parse_arm_9853(ins, pc),
        0x267e => parse_arm_9854(ins, pc),
        0x267f => parse_arm_9855(ins, pc),
        0x2680 => parse_arm_9856(ins, pc),
        0x2681 => parse_arm_9857(ins, pc),
        0x2682 => parse_arm_9858(ins, pc),
        0x2683 => parse_arm_9859(ins, pc),
        0x2684 => parse_arm_9860(ins, pc),
        0x2685 => parse_arm_9861(ins, pc),
        0x2686 => parse_arm_9862(ins, pc),
        0x2687 => parse_arm_9863(ins, pc),
        0x2688 => parse_arm_9864(ins, pc),
        0x2689 => parse_arm_9865(ins, pc),
        0x268a => parse_arm_9866(ins, pc),
        0x268b => parse_arm_9867(ins, pc),
        0x268c => parse_arm_9868(ins, pc),
        0x268d => parse_arm_9869(ins, pc),
        0x268e => parse_arm_9870(ins, pc),
        0x268f => parse_arm_9871(ins, pc),
        0x2690 => parse_arm_9872(ins, pc),
        0x2691 => parse_arm_9873(ins, pc),
        0x2692 => parse_arm_9874(ins, pc),
        0x2693 => parse_arm_9875(ins, pc),
        0x2694 => parse_arm_9876(ins, pc),
        0x2695 => parse_arm_9877(ins, pc),
        0x2696 => parse_arm_9878(ins, pc),
        0x2697 => parse_arm_9879(ins, pc),
        0x2698 => parse_arm_9880(ins, pc),
        0x2699 => parse_arm_9881(ins, pc),
        0x269a => parse_arm_9882(ins, pc),
        0x269b => parse_arm_9883(ins, pc),
        0x269c => parse_arm_9884(ins, pc),
        0x269d => parse_arm_9885(ins, pc),
        0x269e => parse_arm_9886(ins, pc),
        0x269f => parse_arm_9887(ins, pc),
        0x26a0 => parse_arm_9888(ins, pc),
        0x26a1 => parse_arm_9889(ins, pc),
        0x26a2 => parse_arm_9890(ins, pc),
        0x26a3 => parse_arm_9891(ins, pc),
        0x26a4 => parse_arm_9892(ins, pc),
        0x26a5 => parse_arm_9893(ins, pc),
        0x26a6 => parse_arm_9894(ins, pc),
        0x26a7 => parse_arm_9895(ins, pc),
        0x26a8 => parse_arm_9896(ins, pc),
        0x26a9 => parse_arm_9897(ins, pc),
        0x26aa => parse_arm_9898(ins, pc),
        0x26ab => parse_arm_9899(ins, pc),
        0x26ac => parse_arm_9900(ins, pc),
        0x26ad => parse_arm_9901(ins, pc),
        0x26ae => parse_arm_9902(ins, pc),
        0x26af => parse_arm_9903(ins, pc),
        0x26b0 => parse_arm_9904(ins, pc),
        0x26b1 => parse_arm_9905(ins, pc),
        0x26b2 => parse_arm_9906(ins, pc),
        0x26b3 => parse_arm_9907(ins, pc),
        0x26b4 => parse_arm_9908(ins, pc),
        0x26b5 => parse_arm_9909(ins, pc),
        0x26b6 => parse_arm_9910(ins, pc),
        0x26b7 => parse_arm_9911(ins, pc),
        0x26b8 => parse_arm_9912(ins, pc),
        0x26b9 => parse_arm_9913(ins, pc),
        0x26ba => parse_arm_9914(ins, pc),
        0x26bb => parse_arm_9915(ins, pc),
        0x26bc => parse_arm_9916(ins, pc),
        0x26bd => parse_arm_9917(ins, pc),
        0x26be => parse_arm_9918(ins, pc),
        0x26bf => parse_arm_9919(ins, pc),
        0x26c0 => parse_arm_9920(ins, pc),
        0x26c1 => parse_arm_9921(ins, pc),
        0x26c2 => parse_arm_9922(ins, pc),
        0x26c3 => parse_arm_9923(ins, pc),
        0x26c4 => parse_arm_9924(ins, pc),
        0x26c5 => parse_arm_9925(ins, pc),
        0x26c6 => parse_arm_9926(ins, pc),
        0x26c7 => parse_arm_9927(ins, pc),
        0x26c8 => parse_arm_9928(ins, pc),
        0x26c9 => parse_arm_9929(ins, pc),
        0x26ca => parse_arm_9930(ins, pc),
        0x26cb => parse_arm_9931(ins, pc),
        0x26cc => parse_arm_9932(ins, pc),
        0x26cd => parse_arm_9933(ins, pc),
        0x26ce => parse_arm_9934(ins, pc),
        0x26cf => parse_arm_9935(ins, pc),
        0x26d0 => parse_arm_9936(ins, pc),
        0x26d1 => parse_arm_9937(ins, pc),
        0x26d2 => parse_arm_9938(ins, pc),
        0x26d3 => parse_arm_9939(ins, pc),
        0x26d4 => parse_arm_9940(ins, pc),
        0x26d5 => parse_arm_9941(ins, pc),
        0x26d6 => parse_arm_9942(ins, pc),
        0x26d7 => parse_arm_9943(ins, pc),
        0x26d8 => parse_arm_9944(ins, pc),
        0x26d9 => parse_arm_9945(ins, pc),
        0x26da => parse_arm_9946(ins, pc),
        0x26db => parse_arm_9947(ins, pc),
        0x26dc => parse_arm_9948(ins, pc),
        0x26dd => parse_arm_9949(ins, pc),
        0x26de => parse_arm_9950(ins, pc),
        0x26df => parse_arm_9951(ins, pc),
        0x26e0 => parse_arm_9952(ins, pc),
        0x26e1 => parse_arm_9953(ins, pc),
        0x26e2 => parse_arm_9954(ins, pc),
        0x26e3 => parse_arm_9955(ins, pc),
        0x26e4 => parse_arm_9956(ins, pc),
        0x26e5 => parse_arm_9957(ins, pc),
        0x26e6 => parse_arm_9958(ins, pc),
        0x26e7 => parse_arm_9959(ins, pc),
        0x26e8 => parse_arm_9960(ins, pc),
        0x26e9 => parse_arm_9961(ins, pc),
        0x26ea => parse_arm_9962(ins, pc),
        0x26eb => parse_arm_9963(ins, pc),
        0x26ec => parse_arm_9964(ins, pc),
        0x26ed => parse_arm_9965(ins, pc),
        0x26ee => parse_arm_9966(ins, pc),
        0x26ef => parse_arm_9967(ins, pc),
        0x26f0 => parse_arm_9968(ins, pc),
        0x26f1 => parse_arm_9969(ins, pc),
        0x26f2 => parse_arm_9970(ins, pc),
        0x26f3 => parse_arm_9971(ins, pc),
        0x26f4 => parse_arm_9972(ins, pc),
        0x26f5 => parse_arm_9973(ins, pc),
        0x26f6 => parse_arm_9974(ins, pc),
        0x26f7 => parse_arm_9975(ins, pc),
        0x26f8 => parse_arm_9976(ins, pc),
        0x26f9 => parse_arm_9977(ins, pc),
        0x26fa => parse_arm_9978(ins, pc),
        0x26fb => parse_arm_9979(ins, pc),
        0x26fc => parse_arm_9980(ins, pc),
        0x26fd => parse_arm_9981(ins, pc),
        0x26fe => parse_arm_9982(ins, pc),
        0x26ff => parse_arm_9983(ins, pc),
        0x2700 => parse_arm_9984(ins, pc),
        0x2701 => parse_arm_9985(ins, pc),
        0x2702 => parse_arm_9986(ins, pc),
        0x2703 => parse_arm_9987(ins, pc),
        0x2704 => parse_arm_9988(ins, pc),
        0x2705 => parse_arm_9989(ins, pc),
        0x2706 => parse_arm_9990(ins, pc),
        0x2707 => parse_arm_9991(ins, pc),
        0x2708 => parse_arm_9992(ins, pc),
        0x2709 => parse_arm_9993(ins, pc),
        0x270a => parse_arm_9994(ins, pc),
        0x270b => parse_arm_9995(ins, pc),
        0x270c => parse_arm_9996(ins, pc),
        0x270d => parse_arm_9997(ins, pc),
        0x270e => parse_arm_9998(ins, pc),
        0x270f => parse_arm_9999(ins, pc),
        0x2710 => parse_arm_10000(ins, pc),
        0x2711 => parse_arm_10001(ins, pc),
        0x2712 => parse_arm_10002(ins, pc),
        0x2713 => parse_arm_10003(ins, pc),
        0x2714 => parse_arm_10004(ins, pc),
        0x2715 => parse_arm_10005(ins, pc),
        0x2716 => parse_arm_10006(ins, pc),
        0x2717 => parse_arm_10007(ins, pc),
        0x2718 => parse_arm_10008(ins, pc),
        0x2719 => parse_arm_10009(ins, pc),
        0x271a => parse_arm_10010(ins, pc),
        0x271b => parse_arm_10011(ins, pc),
        0x271c => parse_arm_10012(ins, pc),
        0x271d => parse_arm_10013(ins, pc),
        0x271e => parse_arm_10014(ins, pc),
        0x271f => parse_arm_10015(ins, pc),
        0x2720 => parse_arm_10016(ins, pc),
        0x2721 => parse_arm_10017(ins, pc),
        0x2722 => parse_arm_10018(ins, pc),
        0x2723 => parse_arm_10019(ins, pc),
        0x2724 => parse_arm_10020(ins, pc),
        0x2725 => parse_arm_10021(ins, pc),
        0x2726 => parse_arm_10022(ins, pc),
        0x2727 => parse_arm_10023(ins, pc),
        0x2728 => parse_arm_10024(ins, pc),
        0x2729 => parse_arm_10025(ins, pc),
        0x272a => parse_arm_10026(ins, pc),
        0x272b => parse_arm_10027(ins, pc),
        0x272c => parse_arm_10028(ins, pc),
        0x272d => parse_arm_10029(ins, pc),
        0x272e => parse_arm_10030(ins, pc),
        0x272f => parse_arm_10031(ins, pc),
        0x2730 => parse_arm_10032(ins, pc),
        0x2731 => parse_arm_10033(ins, pc),
        0x2732 => parse_arm_10034(ins, pc),
        0x2733 => parse_arm_10035(ins, pc),
        0x2734 => parse_arm_10036(ins, pc),
        0x2735 => parse_arm_10037(ins, pc),
        0x2736 => parse_arm_10038(ins, pc),
        0x2737 => parse_arm_10039(ins, pc),
        0x2738 => parse_arm_10040(ins, pc),
        0x2739 => parse_arm_10041(ins, pc),
        0x273a => parse_arm_10042(ins, pc),
        0x273b => parse_arm_10043(ins, pc),
        0x273c => parse_arm_10044(ins, pc),
        0x273d => parse_arm_10045(ins, pc),
        0x273e => parse_arm_10046(ins, pc),
        0x273f => parse_arm_10047(ins, pc),
        0x2740 => parse_arm_10048(ins, pc),
        0x2741 => parse_arm_10049(ins, pc),
        0x2742 => parse_arm_10050(ins, pc),
        0x2743 => parse_arm_10051(ins, pc),
        0x2744 => parse_arm_10052(ins, pc),
        0x2745 => parse_arm_10053(ins, pc),
        0x2746 => parse_arm_10054(ins, pc),
        0x2747 => parse_arm_10055(ins, pc),
        0x2748 => parse_arm_10056(ins, pc),
        0x2749 => parse_arm_10057(ins, pc),
        0x274a => parse_arm_10058(ins, pc),
        0x274b => parse_arm_10059(ins, pc),
        0x274c => parse_arm_10060(ins, pc),
        0x274d => parse_arm_10061(ins, pc),
        0x274e => parse_arm_10062(ins, pc),
        0x274f => parse_arm_10063(ins, pc),
        0x2750 => parse_arm_10064(ins, pc),
        0x2751 => parse_arm_10065(ins, pc),
        0x2752 => parse_arm_10066(ins, pc),
        0x2753 => parse_arm_10067(ins, pc),
        0x2754 => parse_arm_10068(ins, pc),
        0x2755 => parse_arm_10069(ins, pc),
        0x2756 => parse_arm_10070(ins, pc),
        0x2757 => parse_arm_10071(ins, pc),
        0x2758 => parse_arm_10072(ins, pc),
        0x2759 => parse_arm_10073(ins, pc),
        0x275a => parse_arm_10074(ins, pc),
        0x275b => parse_arm_10075(ins, pc),
        0x275c => parse_arm_10076(ins, pc),
        0x275d => parse_arm_10077(ins, pc),
        0x275e => parse_arm_10078(ins, pc),
        0x275f => parse_arm_10079(ins, pc),
        0x2760 => parse_arm_10080(ins, pc),
        0x2761 => parse_arm_10081(ins, pc),
        0x2762 => parse_arm_10082(ins, pc),
        0x2763 => parse_arm_10083(ins, pc),
        0x2764 => parse_arm_10084(ins, pc),
        0x2765 => parse_arm_10085(ins, pc),
        0x2766 => parse_arm_10086(ins, pc),
        0x2767 => parse_arm_10087(ins, pc),
        0x2768 => parse_arm_10088(ins, pc),
        0x2769 => parse_arm_10089(ins, pc),
        0x276a => parse_arm_10090(ins, pc),
        0x276b => parse_arm_10091(ins, pc),
        0x276c => parse_arm_10092(ins, pc),
        0x276d => parse_arm_10093(ins, pc),
        0x276e => parse_arm_10094(ins, pc),
        0x276f => parse_arm_10095(ins, pc),
        0x2770 => parse_arm_10096(ins, pc),
        0x2771 => parse_arm_10097(ins, pc),
        0x2772 => parse_arm_10098(ins, pc),
        0x2773 => parse_arm_10099(ins, pc),
        0x2774 => parse_arm_10100(ins, pc),
        0x2775 => parse_arm_10101(ins, pc),
        0x2776 => parse_arm_10102(ins, pc),
        0x2777 => parse_arm_10103(ins, pc),
        0x2778 => parse_arm_10104(ins, pc),
        0x2779 => parse_arm_10105(ins, pc),
        0x277a => parse_arm_10106(ins, pc),
        0x277b => parse_arm_10107(ins, pc),
        0x277c => parse_arm_10108(ins, pc),
        0x277d => parse_arm_10109(ins, pc),
        0x277e => parse_arm_10110(ins, pc),
        0x277f => parse_arm_10111(ins, pc),
        0x2780 => parse_arm_10112(ins, pc),
        0x2781 => parse_arm_10113(ins, pc),
        0x2782 => parse_arm_10114(ins, pc),
        0x2783 => parse_arm_10115(ins, pc),
        0x2784 => parse_arm_10116(ins, pc),
        0x2785 => parse_arm_10117(ins, pc),
        0x2786 => parse_arm_10118(ins, pc),
        0x2787 => parse_arm_10119(ins, pc),
        0x2788 => parse_arm_10120(ins, pc),
        0x2789 => parse_arm_10121(ins, pc),
        0x278a => parse_arm_10122(ins, pc),
        0x278b => parse_arm_10123(ins, pc),
        0x278c => parse_arm_10124(ins, pc),
        0x278d => parse_arm_10125(ins, pc),
        0x278e => parse_arm_10126(ins, pc),
        0x278f => parse_arm_10127(ins, pc),
        0x2790 => parse_arm_10128(ins, pc),
        0x2791 => parse_arm_10129(ins, pc),
        0x2792 => parse_arm_10130(ins, pc),
        0x2793 => parse_arm_10131(ins, pc),
        0x2794 => parse_arm_10132(ins, pc),
        0x2795 => parse_arm_10133(ins, pc),
        0x2796 => parse_arm_10134(ins, pc),
        0x2797 => parse_arm_10135(ins, pc),
        0x2798 => parse_arm_10136(ins, pc),
        0x2799 => parse_arm_10137(ins, pc),
        0x279a => parse_arm_10138(ins, pc),
        0x279b => parse_arm_10139(ins, pc),
        0x279c => parse_arm_10140(ins, pc),
        0x279d => parse_arm_10141(ins, pc),
        0x279e => parse_arm_10142(ins, pc),
        0x279f => parse_arm_10143(ins, pc),
        0x27a0 => parse_arm_10144(ins, pc),
        0x27a1 => parse_arm_10145(ins, pc),
        0x27a2 => parse_arm_10146(ins, pc),
        0x27a3 => parse_arm_10147(ins, pc),
        0x27a4 => parse_arm_10148(ins, pc),
        0x27a5 => parse_arm_10149(ins, pc),
        0x27a6 => parse_arm_10150(ins, pc),
        0x27a7 => parse_arm_10151(ins, pc),
        0x27a8 => parse_arm_10152(ins, pc),
        0x27a9 => parse_arm_10153(ins, pc),
        0x27aa => parse_arm_10154(ins, pc),
        0x27ab => parse_arm_10155(ins, pc),
        0x27ac => parse_arm_10156(ins, pc),
        0x27ad => parse_arm_10157(ins, pc),
        0x27ae => parse_arm_10158(ins, pc),
        0x27af => parse_arm_10159(ins, pc),
        0x27b0 => parse_arm_10160(ins, pc),
        0x27b1 => parse_arm_10161(ins, pc),
        0x27b2 => parse_arm_10162(ins, pc),
        0x27b3 => parse_arm_10163(ins, pc),
        0x27b4 => parse_arm_10164(ins, pc),
        0x27b5 => parse_arm_10165(ins, pc),
        0x27b6 => parse_arm_10166(ins, pc),
        0x27b7 => parse_arm_10167(ins, pc),
        0x27b8 => parse_arm_10168(ins, pc),
        0x27b9 => parse_arm_10169(ins, pc),
        0x27ba => parse_arm_10170(ins, pc),
        0x27bb => parse_arm_10171(ins, pc),
        0x27bc => parse_arm_10172(ins, pc),
        0x27bd => parse_arm_10173(ins, pc),
        0x27be => parse_arm_10174(ins, pc),
        0x27bf => parse_arm_10175(ins, pc),
        0x27c0 => parse_arm_10176(ins, pc),
        0x27c1 => parse_arm_10177(ins, pc),
        0x27c2 => parse_arm_10178(ins, pc),
        0x27c3 => parse_arm_10179(ins, pc),
        0x27c4 => parse_arm_10180(ins, pc),
        0x27c5 => parse_arm_10181(ins, pc),
        0x27c6 => parse_arm_10182(ins, pc),
        0x27c7 => parse_arm_10183(ins, pc),
        0x27c8 => parse_arm_10184(ins, pc),
        0x27c9 => parse_arm_10185(ins, pc),
        0x27ca => parse_arm_10186(ins, pc),
        0x27cb => parse_arm_10187(ins, pc),
        0x27cc => parse_arm_10188(ins, pc),
        0x27cd => parse_arm_10189(ins, pc),
        0x27ce => parse_arm_10190(ins, pc),
        0x27cf => parse_arm_10191(ins, pc),
        0x27d0 => parse_arm_10192(ins, pc),
        0x27d1 => parse_arm_10193(ins, pc),
        0x27d2 => parse_arm_10194(ins, pc),
        0x27d3 => parse_arm_10195(ins, pc),
        0x27d4 => parse_arm_10196(ins, pc),
        0x27d5 => parse_arm_10197(ins, pc),
        0x27d6 => parse_arm_10198(ins, pc),
        0x27d7 => parse_arm_10199(ins, pc),
        0x27d8 => parse_arm_10200(ins, pc),
        0x27d9 => parse_arm_10201(ins, pc),
        0x27da => parse_arm_10202(ins, pc),
        0x27db => parse_arm_10203(ins, pc),
        0x27dc => parse_arm_10204(ins, pc),
        0x27dd => parse_arm_10205(ins, pc),
        0x27de => parse_arm_10206(ins, pc),
        0x27df => parse_arm_10207(ins, pc),
        0x27e0 => parse_arm_10208(ins, pc),
        0x27e1 => parse_arm_10209(ins, pc),
        0x27e2 => parse_arm_10210(ins, pc),
        0x27e3 => parse_arm_10211(ins, pc),
        0x27e4 => parse_arm_10212(ins, pc),
        0x27e5 => parse_arm_10213(ins, pc),
        0x27e6 => parse_arm_10214(ins, pc),
        0x27e7 => parse_arm_10215(ins, pc),
        0x27e8 => parse_arm_10216(ins, pc),
        0x27e9 => parse_arm_10217(ins, pc),
        0x27ea => parse_arm_10218(ins, pc),
        0x27eb => parse_arm_10219(ins, pc),
        0x27ec => parse_arm_10220(ins, pc),
        0x27ed => parse_arm_10221(ins, pc),
        0x27ee => parse_arm_10222(ins, pc),
        0x27ef => parse_arm_10223(ins, pc),
        0x27f0 => parse_arm_10224(ins, pc),
        0x27f1 => parse_arm_10225(ins, pc),
        0x27f2 => parse_arm_10226(ins, pc),
        0x27f3 => parse_arm_10227(ins, pc),
        0x27f4 => parse_arm_10228(ins, pc),
        0x27f5 => parse_arm_10229(ins, pc),
        0x27f6 => parse_arm_10230(ins, pc),
        0x27f7 => parse_arm_10231(ins, pc),
        0x27f8 => parse_arm_10232(ins, pc),
        0x27f9 => parse_arm_10233(ins, pc),
        0x27fa => parse_arm_10234(ins, pc),
        0x27fb => parse_arm_10235(ins, pc),
        0x27fc => parse_arm_10236(ins, pc),
        0x27fd => parse_arm_10237(ins, pc),
        0x27fe => parse_arm_10238(ins, pc),
        0x27ff => parse_arm_10239(ins, pc),
        0x2800 => parse_arm_10240(ins, pc),
        0x2801 => parse_arm_10241(ins, pc),
        0x2802 => parse_arm_10242(ins, pc),
        0x2803 => parse_arm_10243(ins, pc),
        0x2804 => parse_arm_10244(ins, pc),
        0x2805 => parse_arm_10245(ins, pc),
        0x2806 => parse_arm_10246(ins, pc),
        0x2807 => parse_arm_10247(ins, pc),
        0x2808 => parse_arm_10248(ins, pc),
        0x2809 => parse_arm_10249(ins, pc),
        0x280a => parse_arm_10250(ins, pc),
        0x280b => parse_arm_10251(ins, pc),
        0x280c => parse_arm_10252(ins, pc),
        0x280d => parse_arm_10253(ins, pc),
        0x280e => parse_arm_10254(ins, pc),
        0x280f => parse_arm_10255(ins, pc),
        0x2810 => parse_arm_10256(ins, pc),
        0x2811 => parse_arm_10257(ins, pc),
        0x2812 => parse_arm_10258(ins, pc),
        0x2813 => parse_arm_10259(ins, pc),
        0x2814 => parse_arm_10260(ins, pc),
        0x2815 => parse_arm_10261(ins, pc),
        0x2816 => parse_arm_10262(ins, pc),
        0x2817 => parse_arm_10263(ins, pc),
        0x2818 => parse_arm_10264(ins, pc),
        0x2819 => parse_arm_10265(ins, pc),
        0x281a => parse_arm_10266(ins, pc),
        0x281b => parse_arm_10267(ins, pc),
        0x281c => parse_arm_10268(ins, pc),
        0x281d => parse_arm_10269(ins, pc),
        0x281e => parse_arm_10270(ins, pc),
        0x281f => parse_arm_10271(ins, pc),
        0x2820 => parse_arm_10272(ins, pc),
        0x2821 => parse_arm_10273(ins, pc),
        0x2822 => parse_arm_10274(ins, pc),
        0x2823 => parse_arm_10275(ins, pc),
        0x2824 => parse_arm_10276(ins, pc),
        0x2825 => parse_arm_10277(ins, pc),
        0x2826 => parse_arm_10278(ins, pc),
        0x2827 => parse_arm_10279(ins, pc),
        0x2828 => parse_arm_10280(ins, pc),
        0x2829 => parse_arm_10281(ins, pc),
        0x282a => parse_arm_10282(ins, pc),
        0x282b => parse_arm_10283(ins, pc),
        0x282c => parse_arm_10284(ins, pc),
        0x282d => parse_arm_10285(ins, pc),
        0x282e => parse_arm_10286(ins, pc),
        0x282f => parse_arm_10287(ins, pc),
        0x2830 => parse_arm_10288(ins, pc),
        0x2831 => parse_arm_10289(ins, pc),
        0x2832 => parse_arm_10290(ins, pc),
        0x2833 => parse_arm_10291(ins, pc),
        0x2834 => parse_arm_10292(ins, pc),
        0x2835 => parse_arm_10293(ins, pc),
        0x2836 => parse_arm_10294(ins, pc),
        0x2837 => parse_arm_10295(ins, pc),
        0x2838 => parse_arm_10296(ins, pc),
        0x2839 => parse_arm_10297(ins, pc),
        0x283a => parse_arm_10298(ins, pc),
        0x283b => parse_arm_10299(ins, pc),
        0x283c => parse_arm_10300(ins, pc),
        0x283d => parse_arm_10301(ins, pc),
        0x283e => parse_arm_10302(ins, pc),
        0x283f => parse_arm_10303(ins, pc),
        0x2840 => parse_arm_10304(ins, pc),
        0x2841 => parse_arm_10305(ins, pc),
        0x2842 => parse_arm_10306(ins, pc),
        0x2843 => parse_arm_10307(ins, pc),
        0x2844 => parse_arm_10308(ins, pc),
        0x2845 => parse_arm_10309(ins, pc),
        0x2846 => parse_arm_10310(ins, pc),
        0x2847 => parse_arm_10311(ins, pc),
        0x2848 => parse_arm_10312(ins, pc),
        0x2849 => parse_arm_10313(ins, pc),
        0x284a => parse_arm_10314(ins, pc),
        0x284b => parse_arm_10315(ins, pc),
        0x284c => parse_arm_10316(ins, pc),
        0x284d => parse_arm_10317(ins, pc),
        0x284e => parse_arm_10318(ins, pc),
        0x284f => parse_arm_10319(ins, pc),
        0x2850 => parse_arm_10320(ins, pc),
        0x2851 => parse_arm_10321(ins, pc),
        0x2852 => parse_arm_10322(ins, pc),
        0x2853 => parse_arm_10323(ins, pc),
        0x2854 => parse_arm_10324(ins, pc),
        0x2855 => parse_arm_10325(ins, pc),
        0x2856 => parse_arm_10326(ins, pc),
        0x2857 => parse_arm_10327(ins, pc),
        0x2858 => parse_arm_10328(ins, pc),
        0x2859 => parse_arm_10329(ins, pc),
        0x285a => parse_arm_10330(ins, pc),
        0x285b => parse_arm_10331(ins, pc),
        0x285c => parse_arm_10332(ins, pc),
        0x285d => parse_arm_10333(ins, pc),
        0x285e => parse_arm_10334(ins, pc),
        0x285f => parse_arm_10335(ins, pc),
        0x2860 => parse_arm_10336(ins, pc),
        0x2861 => parse_arm_10337(ins, pc),
        0x2862 => parse_arm_10338(ins, pc),
        0x2863 => parse_arm_10339(ins, pc),
        0x2864 => parse_arm_10340(ins, pc),
        0x2865 => parse_arm_10341(ins, pc),
        0x2866 => parse_arm_10342(ins, pc),
        0x2867 => parse_arm_10343(ins, pc),
        0x2868 => parse_arm_10344(ins, pc),
        0x2869 => parse_arm_10345(ins, pc),
        0x286a => parse_arm_10346(ins, pc),
        0x286b => parse_arm_10347(ins, pc),
        0x286c => parse_arm_10348(ins, pc),
        0x286d => parse_arm_10349(ins, pc),
        0x286e => parse_arm_10350(ins, pc),
        0x286f => parse_arm_10351(ins, pc),
        0x2870 => parse_arm_10352(ins, pc),
        0x2871 => parse_arm_10353(ins, pc),
        0x2872 => parse_arm_10354(ins, pc),
        0x2873 => parse_arm_10355(ins, pc),
        0x2874 => parse_arm_10356(ins, pc),
        0x2875 => parse_arm_10357(ins, pc),
        0x2876 => parse_arm_10358(ins, pc),
        0x2877 => parse_arm_10359(ins, pc),
        0x2878 => parse_arm_10360(ins, pc),
        0x2879 => parse_arm_10361(ins, pc),
        0x287a => parse_arm_10362(ins, pc),
        0x287b => parse_arm_10363(ins, pc),
        0x287c => parse_arm_10364(ins, pc),
        0x287d => parse_arm_10365(ins, pc),
        0x287e => parse_arm_10366(ins, pc),
        0x287f => parse_arm_10367(ins, pc),
        0x2880 => parse_arm_10368(ins, pc),
        0x2881 => parse_arm_10369(ins, pc),
        0x2882 => parse_arm_10370(ins, pc),
        0x2883 => parse_arm_10371(ins, pc),
        0x2884 => parse_arm_10372(ins, pc),
        0x2885 => parse_arm_10373(ins, pc),
        0x2886 => parse_arm_10374(ins, pc),
        0x2887 => parse_arm_10375(ins, pc),
        0x2888 => parse_arm_10376(ins, pc),
        0x2889 => parse_arm_10377(ins, pc),
        0x288a => parse_arm_10378(ins, pc),
        0x288b => parse_arm_10379(ins, pc),
        0x288c => parse_arm_10380(ins, pc),
        0x288d => parse_arm_10381(ins, pc),
        0x288e => parse_arm_10382(ins, pc),
        0x288f => parse_arm_10383(ins, pc),
        0x2890 => parse_arm_10384(ins, pc),
        0x2891 => parse_arm_10385(ins, pc),
        0x2892 => parse_arm_10386(ins, pc),
        0x2893 => parse_arm_10387(ins, pc),
        0x2894 => parse_arm_10388(ins, pc),
        0x2895 => parse_arm_10389(ins, pc),
        0x2896 => parse_arm_10390(ins, pc),
        0x2897 => parse_arm_10391(ins, pc),
        0x2898 => parse_arm_10392(ins, pc),
        0x2899 => parse_arm_10393(ins, pc),
        0x289a => parse_arm_10394(ins, pc),
        0x289b => parse_arm_10395(ins, pc),
        0x289c => parse_arm_10396(ins, pc),
        0x289d => parse_arm_10397(ins, pc),
        0x289e => parse_arm_10398(ins, pc),
        0x289f => parse_arm_10399(ins, pc),
        0x28a0 => parse_arm_10400(ins, pc),
        0x28a1 => parse_arm_10401(ins, pc),
        0x28a2 => parse_arm_10402(ins, pc),
        0x28a3 => parse_arm_10403(ins, pc),
        0x28a4 => parse_arm_10404(ins, pc),
        0x28a5 => parse_arm_10405(ins, pc),
        0x28a6 => parse_arm_10406(ins, pc),
        0x28a7 => parse_arm_10407(ins, pc),
        0x28a8 => parse_arm_10408(ins, pc),
        0x28a9 => parse_arm_10409(ins, pc),
        0x28aa => parse_arm_10410(ins, pc),
        0x28ab => parse_arm_10411(ins, pc),
        0x28ac => parse_arm_10412(ins, pc),
        0x28ad => parse_arm_10413(ins, pc),
        0x28ae => parse_arm_10414(ins, pc),
        0x28af => parse_arm_10415(ins, pc),
        0x28b0 => parse_arm_10416(ins, pc),
        0x28b1 => parse_arm_10417(ins, pc),
        0x28b2 => parse_arm_10418(ins, pc),
        0x28b3 => parse_arm_10419(ins, pc),
        0x28b4 => parse_arm_10420(ins, pc),
        0x28b5 => parse_arm_10421(ins, pc),
        0x28b6 => parse_arm_10422(ins, pc),
        0x28b7 => parse_arm_10423(ins, pc),
        0x28b8 => parse_arm_10424(ins, pc),
        0x28b9 => parse_arm_10425(ins, pc),
        0x28ba => parse_arm_10426(ins, pc),
        0x28bb => parse_arm_10427(ins, pc),
        0x28bc => parse_arm_10428(ins, pc),
        0x28bd => parse_arm_10429(ins, pc),
        0x28be => parse_arm_10430(ins, pc),
        0x28bf => parse_arm_10431(ins, pc),
        0x28c0 => parse_arm_10432(ins, pc),
        0x28c1 => parse_arm_10433(ins, pc),
        0x28c2 => parse_arm_10434(ins, pc),
        0x28c3 => parse_arm_10435(ins, pc),
        0x28c4 => parse_arm_10436(ins, pc),
        0x28c5 => parse_arm_10437(ins, pc),
        0x28c6 => parse_arm_10438(ins, pc),
        0x28c7 => parse_arm_10439(ins, pc),
        0x28c8 => parse_arm_10440(ins, pc),
        0x28c9 => parse_arm_10441(ins, pc),
        0x28ca => parse_arm_10442(ins, pc),
        0x28cb => parse_arm_10443(ins, pc),
        0x28cc => parse_arm_10444(ins, pc),
        0x28cd => parse_arm_10445(ins, pc),
        0x28ce => parse_arm_10446(ins, pc),
        0x28cf => parse_arm_10447(ins, pc),
        0x28d0 => parse_arm_10448(ins, pc),
        0x28d1 => parse_arm_10449(ins, pc),
        0x28d2 => parse_arm_10450(ins, pc),
        0x28d3 => parse_arm_10451(ins, pc),
        0x28d4 => parse_arm_10452(ins, pc),
        0x28d5 => parse_arm_10453(ins, pc),
        0x28d6 => parse_arm_10454(ins, pc),
        0x28d7 => parse_arm_10455(ins, pc),
        0x28d8 => parse_arm_10456(ins, pc),
        0x28d9 => parse_arm_10457(ins, pc),
        0x28da => parse_arm_10458(ins, pc),
        0x28db => parse_arm_10459(ins, pc),
        0x28dc => parse_arm_10460(ins, pc),
        0x28dd => parse_arm_10461(ins, pc),
        0x28de => parse_arm_10462(ins, pc),
        0x28df => parse_arm_10463(ins, pc),
        0x28e0 => parse_arm_10464(ins, pc),
        0x28e1 => parse_arm_10465(ins, pc),
        0x28e2 => parse_arm_10466(ins, pc),
        0x28e3 => parse_arm_10467(ins, pc),
        0x28e4 => parse_arm_10468(ins, pc),
        0x28e5 => parse_arm_10469(ins, pc),
        0x28e6 => parse_arm_10470(ins, pc),
        0x28e7 => parse_arm_10471(ins, pc),
        0x28e8 => parse_arm_10472(ins, pc),
        0x28e9 => parse_arm_10473(ins, pc),
        0x28ea => parse_arm_10474(ins, pc),
        0x28eb => parse_arm_10475(ins, pc),
        0x28ec => parse_arm_10476(ins, pc),
        0x28ed => parse_arm_10477(ins, pc),
        0x28ee => parse_arm_10478(ins, pc),
        0x28ef => parse_arm_10479(ins, pc),
        0x28f0 => parse_arm_10480(ins, pc),
        0x28f1 => parse_arm_10481(ins, pc),
        0x28f2 => parse_arm_10482(ins, pc),
        0x28f3 => parse_arm_10483(ins, pc),
        0x28f4 => parse_arm_10484(ins, pc),
        0x28f5 => parse_arm_10485(ins, pc),
        0x28f6 => parse_arm_10486(ins, pc),
        0x28f7 => parse_arm_10487(ins, pc),
        0x28f8 => parse_arm_10488(ins, pc),
        0x28f9 => parse_arm_10489(ins, pc),
        0x28fa => parse_arm_10490(ins, pc),
        0x28fb => parse_arm_10491(ins, pc),
        0x28fc => parse_arm_10492(ins, pc),
        0x28fd => parse_arm_10493(ins, pc),
        0x28fe => parse_arm_10494(ins, pc),
        0x28ff => parse_arm_10495(ins, pc),
        0x2900 => parse_arm_10496(ins, pc),
        0x2901 => parse_arm_10497(ins, pc),
        0x2902 => parse_arm_10498(ins, pc),
        0x2903 => parse_arm_10499(ins, pc),
        0x2904 => parse_arm_10500(ins, pc),
        0x2905 => parse_arm_10501(ins, pc),
        0x2906 => parse_arm_10502(ins, pc),
        0x2907 => parse_arm_10503(ins, pc),
        0x2908 => parse_arm_10504(ins, pc),
        0x2909 => parse_arm_10505(ins, pc),
        0x290a => parse_arm_10506(ins, pc),
        0x290b => parse_arm_10507(ins, pc),
        0x290c => parse_arm_10508(ins, pc),
        0x290d => parse_arm_10509(ins, pc),
        0x290e => parse_arm_10510(ins, pc),
        0x290f => parse_arm_10511(ins, pc),
        0x2910 => parse_arm_10512(ins, pc),
        0x2911 => parse_arm_10513(ins, pc),
        0x2912 => parse_arm_10514(ins, pc),
        0x2913 => parse_arm_10515(ins, pc),
        0x2914 => parse_arm_10516(ins, pc),
        0x2915 => parse_arm_10517(ins, pc),
        0x2916 => parse_arm_10518(ins, pc),
        0x2917 => parse_arm_10519(ins, pc),
        0x2918 => parse_arm_10520(ins, pc),
        0x2919 => parse_arm_10521(ins, pc),
        0x291a => parse_arm_10522(ins, pc),
        0x291b => parse_arm_10523(ins, pc),
        0x291c => parse_arm_10524(ins, pc),
        0x291d => parse_arm_10525(ins, pc),
        0x291e => parse_arm_10526(ins, pc),
        0x291f => parse_arm_10527(ins, pc),
        0x2920 => parse_arm_10528(ins, pc),
        0x2921 => parse_arm_10529(ins, pc),
        0x2922 => parse_arm_10530(ins, pc),
        0x2923 => parse_arm_10531(ins, pc),
        0x2924 => parse_arm_10532(ins, pc),
        0x2925 => parse_arm_10533(ins, pc),
        0x2926 => parse_arm_10534(ins, pc),
        0x2927 => parse_arm_10535(ins, pc),
        0x2928 => parse_arm_10536(ins, pc),
        0x2929 => parse_arm_10537(ins, pc),
        0x292a => parse_arm_10538(ins, pc),
        0x292b => parse_arm_10539(ins, pc),
        0x292c => parse_arm_10540(ins, pc),
        0x292d => parse_arm_10541(ins, pc),
        0x292e => parse_arm_10542(ins, pc),
        0x292f => parse_arm_10543(ins, pc),
        0x2930 => parse_arm_10544(ins, pc),
        0x2931 => parse_arm_10545(ins, pc),
        0x2932 => parse_arm_10546(ins, pc),
        0x2933 => parse_arm_10547(ins, pc),
        0x2934 => parse_arm_10548(ins, pc),
        0x2935 => parse_arm_10549(ins, pc),
        0x2936 => parse_arm_10550(ins, pc),
        0x2937 => parse_arm_10551(ins, pc),
        0x2938 => parse_arm_10552(ins, pc),
        0x2939 => parse_arm_10553(ins, pc),
        0x293a => parse_arm_10554(ins, pc),
        0x293b => parse_arm_10555(ins, pc),
        0x293c => parse_arm_10556(ins, pc),
        0x293d => parse_arm_10557(ins, pc),
        0x293e => parse_arm_10558(ins, pc),
        0x293f => parse_arm_10559(ins, pc),
        0x2940 => parse_arm_10560(ins, pc),
        0x2941 => parse_arm_10561(ins, pc),
        0x2942 => parse_arm_10562(ins, pc),
        0x2943 => parse_arm_10563(ins, pc),
        0x2944 => parse_arm_10564(ins, pc),
        0x2945 => parse_arm_10565(ins, pc),
        0x2946 => parse_arm_10566(ins, pc),
        0x2947 => parse_arm_10567(ins, pc),
        0x2948 => parse_arm_10568(ins, pc),
        0x2949 => parse_arm_10569(ins, pc),
        0x294a => parse_arm_10570(ins, pc),
        0x294b => parse_arm_10571(ins, pc),
        0x294c => parse_arm_10572(ins, pc),
        0x294d => parse_arm_10573(ins, pc),
        0x294e => parse_arm_10574(ins, pc),
        0x294f => parse_arm_10575(ins, pc),
        0x2950 => parse_arm_10576(ins, pc),
        0x2951 => parse_arm_10577(ins, pc),
        0x2952 => parse_arm_10578(ins, pc),
        0x2953 => parse_arm_10579(ins, pc),
        0x2954 => parse_arm_10580(ins, pc),
        0x2955 => parse_arm_10581(ins, pc),
        0x2956 => parse_arm_10582(ins, pc),
        0x2957 => parse_arm_10583(ins, pc),
        0x2958 => parse_arm_10584(ins, pc),
        0x2959 => parse_arm_10585(ins, pc),
        0x295a => parse_arm_10586(ins, pc),
        0x295b => parse_arm_10587(ins, pc),
        0x295c => parse_arm_10588(ins, pc),
        0x295d => parse_arm_10589(ins, pc),
        0x295e => parse_arm_10590(ins, pc),
        0x295f => parse_arm_10591(ins, pc),
        0x2960 => parse_arm_10592(ins, pc),
        0x2961 => parse_arm_10593(ins, pc),
        0x2962 => parse_arm_10594(ins, pc),
        0x2963 => parse_arm_10595(ins, pc),
        0x2964 => parse_arm_10596(ins, pc),
        0x2965 => parse_arm_10597(ins, pc),
        0x2966 => parse_arm_10598(ins, pc),
        0x2967 => parse_arm_10599(ins, pc),
        0x2968 => parse_arm_10600(ins, pc),
        0x2969 => parse_arm_10601(ins, pc),
        0x296a => parse_arm_10602(ins, pc),
        0x296b => parse_arm_10603(ins, pc),
        0x296c => parse_arm_10604(ins, pc),
        0x296d => parse_arm_10605(ins, pc),
        0x296e => parse_arm_10606(ins, pc),
        0x296f => parse_arm_10607(ins, pc),
        0x2970 => parse_arm_10608(ins, pc),
        0x2971 => parse_arm_10609(ins, pc),
        0x2972 => parse_arm_10610(ins, pc),
        0x2973 => parse_arm_10611(ins, pc),
        0x2974 => parse_arm_10612(ins, pc),
        0x2975 => parse_arm_10613(ins, pc),
        0x2976 => parse_arm_10614(ins, pc),
        0x2977 => parse_arm_10615(ins, pc),
        0x2978 => parse_arm_10616(ins, pc),
        0x2979 => parse_arm_10617(ins, pc),
        0x297a => parse_arm_10618(ins, pc),
        0x297b => parse_arm_10619(ins, pc),
        0x297c => parse_arm_10620(ins, pc),
        0x297d => parse_arm_10621(ins, pc),
        0x297e => parse_arm_10622(ins, pc),
        0x297f => parse_arm_10623(ins, pc),
        0x2980 => parse_arm_10624(ins, pc),
        0x2981 => parse_arm_10625(ins, pc),
        0x2982 => parse_arm_10626(ins, pc),
        0x2983 => parse_arm_10627(ins, pc),
        0x2984 => parse_arm_10628(ins, pc),
        0x2985 => parse_arm_10629(ins, pc),
        0x2986 => parse_arm_10630(ins, pc),
        0x2987 => parse_arm_10631(ins, pc),
        0x2988 => parse_arm_10632(ins, pc),
        0x2989 => parse_arm_10633(ins, pc),
        0x298a => parse_arm_10634(ins, pc),
        0x298b => parse_arm_10635(ins, pc),
        0x298c => parse_arm_10636(ins, pc),
        0x298d => parse_arm_10637(ins, pc),
        0x298e => parse_arm_10638(ins, pc),
        0x298f => parse_arm_10639(ins, pc),
        0x2990 => parse_arm_10640(ins, pc),
        0x2991 => parse_arm_10641(ins, pc),
        0x2992 => parse_arm_10642(ins, pc),
        0x2993 => parse_arm_10643(ins, pc),
        0x2994 => parse_arm_10644(ins, pc),
        0x2995 => parse_arm_10645(ins, pc),
        0x2996 => parse_arm_10646(ins, pc),
        0x2997 => parse_arm_10647(ins, pc),
        0x2998 => parse_arm_10648(ins, pc),
        0x2999 => parse_arm_10649(ins, pc),
        0x299a => parse_arm_10650(ins, pc),
        0x299b => parse_arm_10651(ins, pc),
        0x299c => parse_arm_10652(ins, pc),
        0x299d => parse_arm_10653(ins, pc),
        0x299e => parse_arm_10654(ins, pc),
        0x299f => parse_arm_10655(ins, pc),
        0x29a0 => parse_arm_10656(ins, pc),
        0x29a1 => parse_arm_10657(ins, pc),
        0x29a2 => parse_arm_10658(ins, pc),
        0x29a3 => parse_arm_10659(ins, pc),
        0x29a4 => parse_arm_10660(ins, pc),
        0x29a5 => parse_arm_10661(ins, pc),
        0x29a6 => parse_arm_10662(ins, pc),
        0x29a7 => parse_arm_10663(ins, pc),
        0x29a8 => parse_arm_10664(ins, pc),
        0x29a9 => parse_arm_10665(ins, pc),
        0x29aa => parse_arm_10666(ins, pc),
        0x29ab => parse_arm_10667(ins, pc),
        0x29ac => parse_arm_10668(ins, pc),
        0x29ad => parse_arm_10669(ins, pc),
        0x29ae => parse_arm_10670(ins, pc),
        0x29af => parse_arm_10671(ins, pc),
        0x29b0 => parse_arm_10672(ins, pc),
        0x29b1 => parse_arm_10673(ins, pc),
        0x29b2 => parse_arm_10674(ins, pc),
        0x29b3 => parse_arm_10675(ins, pc),
        0x29b4 => parse_arm_10676(ins, pc),
        0x29b5 => parse_arm_10677(ins, pc),
        0x29b6 => parse_arm_10678(ins, pc),
        0x29b7 => parse_arm_10679(ins, pc),
        0x29b8 => parse_arm_10680(ins, pc),
        0x29b9 => parse_arm_10681(ins, pc),
        0x29ba => parse_arm_10682(ins, pc),
        0x29bb => parse_arm_10683(ins, pc),
        0x29bc => parse_arm_10684(ins, pc),
        0x29bd => parse_arm_10685(ins, pc),
        0x29be => parse_arm_10686(ins, pc),
        0x29bf => parse_arm_10687(ins, pc),
        0x29c0 => parse_arm_10688(ins, pc),
        0x29c1 => parse_arm_10689(ins, pc),
        0x29c2 => parse_arm_10690(ins, pc),
        0x29c3 => parse_arm_10691(ins, pc),
        0x29c4 => parse_arm_10692(ins, pc),
        0x29c5 => parse_arm_10693(ins, pc),
        0x29c6 => parse_arm_10694(ins, pc),
        0x29c7 => parse_arm_10695(ins, pc),
        0x29c8 => parse_arm_10696(ins, pc),
        0x29c9 => parse_arm_10697(ins, pc),
        0x29ca => parse_arm_10698(ins, pc),
        0x29cb => parse_arm_10699(ins, pc),
        0x29cc => parse_arm_10700(ins, pc),
        0x29cd => parse_arm_10701(ins, pc),
        0x29ce => parse_arm_10702(ins, pc),
        0x29cf => parse_arm_10703(ins, pc),
        0x29d0 => parse_arm_10704(ins, pc),
        0x29d1 => parse_arm_10705(ins, pc),
        0x29d2 => parse_arm_10706(ins, pc),
        0x29d3 => parse_arm_10707(ins, pc),
        0x29d4 => parse_arm_10708(ins, pc),
        0x29d5 => parse_arm_10709(ins, pc),
        0x29d6 => parse_arm_10710(ins, pc),
        0x29d7 => parse_arm_10711(ins, pc),
        0x29d8 => parse_arm_10712(ins, pc),
        0x29d9 => parse_arm_10713(ins, pc),
        0x29da => parse_arm_10714(ins, pc),
        0x29db => parse_arm_10715(ins, pc),
        0x29dc => parse_arm_10716(ins, pc),
        0x29dd => parse_arm_10717(ins, pc),
        0x29de => parse_arm_10718(ins, pc),
        0x29df => parse_arm_10719(ins, pc),
        0x29e0 => parse_arm_10720(ins, pc),
        0x29e1 => parse_arm_10721(ins, pc),
        0x29e2 => parse_arm_10722(ins, pc),
        0x29e3 => parse_arm_10723(ins, pc),
        0x29e4 => parse_arm_10724(ins, pc),
        0x29e5 => parse_arm_10725(ins, pc),
        0x29e6 => parse_arm_10726(ins, pc),
        0x29e7 => parse_arm_10727(ins, pc),
        0x29e8 => parse_arm_10728(ins, pc),
        0x29e9 => parse_arm_10729(ins, pc),
        0x29ea => parse_arm_10730(ins, pc),
        0x29eb => parse_arm_10731(ins, pc),
        0x29ec => parse_arm_10732(ins, pc),
        0x29ed => parse_arm_10733(ins, pc),
        0x29ee => parse_arm_10734(ins, pc),
        0x29ef => parse_arm_10735(ins, pc),
        0x29f0 => parse_arm_10736(ins, pc),
        0x29f1 => parse_arm_10737(ins, pc),
        0x29f2 => parse_arm_10738(ins, pc),
        0x29f3 => parse_arm_10739(ins, pc),
        0x29f4 => parse_arm_10740(ins, pc),
        0x29f5 => parse_arm_10741(ins, pc),
        0x29f6 => parse_arm_10742(ins, pc),
        0x29f7 => parse_arm_10743(ins, pc),
        0x29f8 => parse_arm_10744(ins, pc),
        0x29f9 => parse_arm_10745(ins, pc),
        0x29fa => parse_arm_10746(ins, pc),
        0x29fb => parse_arm_10747(ins, pc),
        0x29fc => parse_arm_10748(ins, pc),
        0x29fd => parse_arm_10749(ins, pc),
        0x29fe => parse_arm_10750(ins, pc),
        0x29ff => parse_arm_10751(ins, pc),
        0x2a00 => parse_arm_10752(ins, pc),
        0x2a01 => parse_arm_10753(ins, pc),
        0x2a02 => parse_arm_10754(ins, pc),
        0x2a03 => parse_arm_10755(ins, pc),
        0x2a04 => parse_arm_10756(ins, pc),
        0x2a05 => parse_arm_10757(ins, pc),
        0x2a06 => parse_arm_10758(ins, pc),
        0x2a07 => parse_arm_10759(ins, pc),
        0x2a08 => parse_arm_10760(ins, pc),
        0x2a09 => parse_arm_10761(ins, pc),
        0x2a0a => parse_arm_10762(ins, pc),
        0x2a0b => parse_arm_10763(ins, pc),
        0x2a0c => parse_arm_10764(ins, pc),
        0x2a0d => parse_arm_10765(ins, pc),
        0x2a0e => parse_arm_10766(ins, pc),
        0x2a0f => parse_arm_10767(ins, pc),
        0x2a10 => parse_arm_10768(ins, pc),
        0x2a11 => parse_arm_10769(ins, pc),
        0x2a12 => parse_arm_10770(ins, pc),
        0x2a13 => parse_arm_10771(ins, pc),
        0x2a14 => parse_arm_10772(ins, pc),
        0x2a15 => parse_arm_10773(ins, pc),
        0x2a16 => parse_arm_10774(ins, pc),
        0x2a17 => parse_arm_10775(ins, pc),
        0x2a18 => parse_arm_10776(ins, pc),
        0x2a19 => parse_arm_10777(ins, pc),
        0x2a1a => parse_arm_10778(ins, pc),
        0x2a1b => parse_arm_10779(ins, pc),
        0x2a1c => parse_arm_10780(ins, pc),
        0x2a1d => parse_arm_10781(ins, pc),
        0x2a1e => parse_arm_10782(ins, pc),
        0x2a1f => parse_arm_10783(ins, pc),
        0x2a20 => parse_arm_10784(ins, pc),
        0x2a21 => parse_arm_10785(ins, pc),
        0x2a22 => parse_arm_10786(ins, pc),
        0x2a23 => parse_arm_10787(ins, pc),
        0x2a24 => parse_arm_10788(ins, pc),
        0x2a25 => parse_arm_10789(ins, pc),
        0x2a26 => parse_arm_10790(ins, pc),
        0x2a27 => parse_arm_10791(ins, pc),
        0x2a28 => parse_arm_10792(ins, pc),
        0x2a29 => parse_arm_10793(ins, pc),
        0x2a2a => parse_arm_10794(ins, pc),
        0x2a2b => parse_arm_10795(ins, pc),
        0x2a2c => parse_arm_10796(ins, pc),
        0x2a2d => parse_arm_10797(ins, pc),
        0x2a2e => parse_arm_10798(ins, pc),
        0x2a2f => parse_arm_10799(ins, pc),
        0x2a30 => parse_arm_10800(ins, pc),
        0x2a31 => parse_arm_10801(ins, pc),
        0x2a32 => parse_arm_10802(ins, pc),
        0x2a33 => parse_arm_10803(ins, pc),
        0x2a34 => parse_arm_10804(ins, pc),
        0x2a35 => parse_arm_10805(ins, pc),
        0x2a36 => parse_arm_10806(ins, pc),
        0x2a37 => parse_arm_10807(ins, pc),
        0x2a38 => parse_arm_10808(ins, pc),
        0x2a39 => parse_arm_10809(ins, pc),
        0x2a3a => parse_arm_10810(ins, pc),
        0x2a3b => parse_arm_10811(ins, pc),
        0x2a3c => parse_arm_10812(ins, pc),
        0x2a3d => parse_arm_10813(ins, pc),
        0x2a3e => parse_arm_10814(ins, pc),
        0x2a3f => parse_arm_10815(ins, pc),
        0x2a40 => parse_arm_10816(ins, pc),
        0x2a41 => parse_arm_10817(ins, pc),
        0x2a42 => parse_arm_10818(ins, pc),
        0x2a43 => parse_arm_10819(ins, pc),
        0x2a44 => parse_arm_10820(ins, pc),
        0x2a45 => parse_arm_10821(ins, pc),
        0x2a46 => parse_arm_10822(ins, pc),
        0x2a47 => parse_arm_10823(ins, pc),
        0x2a48 => parse_arm_10824(ins, pc),
        0x2a49 => parse_arm_10825(ins, pc),
        0x2a4a => parse_arm_10826(ins, pc),
        0x2a4b => parse_arm_10827(ins, pc),
        0x2a4c => parse_arm_10828(ins, pc),
        0x2a4d => parse_arm_10829(ins, pc),
        0x2a4e => parse_arm_10830(ins, pc),
        0x2a4f => parse_arm_10831(ins, pc),
        0x2a50 => parse_arm_10832(ins, pc),
        0x2a51 => parse_arm_10833(ins, pc),
        0x2a52 => parse_arm_10834(ins, pc),
        0x2a53 => parse_arm_10835(ins, pc),
        0x2a54 => parse_arm_10836(ins, pc),
        0x2a55 => parse_arm_10837(ins, pc),
        0x2a56 => parse_arm_10838(ins, pc),
        0x2a57 => parse_arm_10839(ins, pc),
        0x2a58 => parse_arm_10840(ins, pc),
        0x2a59 => parse_arm_10841(ins, pc),
        0x2a5a => parse_arm_10842(ins, pc),
        0x2a5b => parse_arm_10843(ins, pc),
        0x2a5c => parse_arm_10844(ins, pc),
        0x2a5d => parse_arm_10845(ins, pc),
        0x2a5e => parse_arm_10846(ins, pc),
        0x2a5f => parse_arm_10847(ins, pc),
        0x2a60 => parse_arm_10848(ins, pc),
        0x2a61 => parse_arm_10849(ins, pc),
        0x2a62 => parse_arm_10850(ins, pc),
        0x2a63 => parse_arm_10851(ins, pc),
        0x2a64 => parse_arm_10852(ins, pc),
        0x2a65 => parse_arm_10853(ins, pc),
        0x2a66 => parse_arm_10854(ins, pc),
        0x2a67 => parse_arm_10855(ins, pc),
        0x2a68 => parse_arm_10856(ins, pc),
        0x2a69 => parse_arm_10857(ins, pc),
        0x2a6a => parse_arm_10858(ins, pc),
        0x2a6b => parse_arm_10859(ins, pc),
        0x2a6c => parse_arm_10860(ins, pc),
        0x2a6d => parse_arm_10861(ins, pc),
        0x2a6e => parse_arm_10862(ins, pc),
        0x2a6f => parse_arm_10863(ins, pc),
        0x2a70 => parse_arm_10864(ins, pc),
        0x2a71 => parse_arm_10865(ins, pc),
        0x2a72 => parse_arm_10866(ins, pc),
        0x2a73 => parse_arm_10867(ins, pc),
        0x2a74 => parse_arm_10868(ins, pc),
        0x2a75 => parse_arm_10869(ins, pc),
        0x2a76 => parse_arm_10870(ins, pc),
        0x2a77 => parse_arm_10871(ins, pc),
        0x2a78 => parse_arm_10872(ins, pc),
        0x2a79 => parse_arm_10873(ins, pc),
        0x2a7a => parse_arm_10874(ins, pc),
        0x2a7b => parse_arm_10875(ins, pc),
        0x2a7c => parse_arm_10876(ins, pc),
        0x2a7d => parse_arm_10877(ins, pc),
        0x2a7e => parse_arm_10878(ins, pc),
        0x2a7f => parse_arm_10879(ins, pc),
        0x2a80 => parse_arm_10880(ins, pc),
        0x2a81 => parse_arm_10881(ins, pc),
        0x2a82 => parse_arm_10882(ins, pc),
        0x2a83 => parse_arm_10883(ins, pc),
        0x2a84 => parse_arm_10884(ins, pc),
        0x2a85 => parse_arm_10885(ins, pc),
        0x2a86 => parse_arm_10886(ins, pc),
        0x2a87 => parse_arm_10887(ins, pc),
        0x2a88 => parse_arm_10888(ins, pc),
        0x2a89 => parse_arm_10889(ins, pc),
        0x2a8a => parse_arm_10890(ins, pc),
        0x2a8b => parse_arm_10891(ins, pc),
        0x2a8c => parse_arm_10892(ins, pc),
        0x2a8d => parse_arm_10893(ins, pc),
        0x2a8e => parse_arm_10894(ins, pc),
        0x2a8f => parse_arm_10895(ins, pc),
        0x2a90 => parse_arm_10896(ins, pc),
        0x2a91 => parse_arm_10897(ins, pc),
        0x2a92 => parse_arm_10898(ins, pc),
        0x2a93 => parse_arm_10899(ins, pc),
        0x2a94 => parse_arm_10900(ins, pc),
        0x2a95 => parse_arm_10901(ins, pc),
        0x2a96 => parse_arm_10902(ins, pc),
        0x2a97 => parse_arm_10903(ins, pc),
        0x2a98 => parse_arm_10904(ins, pc),
        0x2a99 => parse_arm_10905(ins, pc),
        0x2a9a => parse_arm_10906(ins, pc),
        0x2a9b => parse_arm_10907(ins, pc),
        0x2a9c => parse_arm_10908(ins, pc),
        0x2a9d => parse_arm_10909(ins, pc),
        0x2a9e => parse_arm_10910(ins, pc),
        0x2a9f => parse_arm_10911(ins, pc),
        0x2aa0 => parse_arm_10912(ins, pc),
        0x2aa1 => parse_arm_10913(ins, pc),
        0x2aa2 => parse_arm_10914(ins, pc),
        0x2aa3 => parse_arm_10915(ins, pc),
        0x2aa4 => parse_arm_10916(ins, pc),
        0x2aa5 => parse_arm_10917(ins, pc),
        0x2aa6 => parse_arm_10918(ins, pc),
        0x2aa7 => parse_arm_10919(ins, pc),
        0x2aa8 => parse_arm_10920(ins, pc),
        0x2aa9 => parse_arm_10921(ins, pc),
        0x2aaa => parse_arm_10922(ins, pc),
        0x2aab => parse_arm_10923(ins, pc),
        0x2aac => parse_arm_10924(ins, pc),
        0x2aad => parse_arm_10925(ins, pc),
        0x2aae => parse_arm_10926(ins, pc),
        0x2aaf => parse_arm_10927(ins, pc),
        0x2ab0 => parse_arm_10928(ins, pc),
        0x2ab1 => parse_arm_10929(ins, pc),
        0x2ab2 => parse_arm_10930(ins, pc),
        0x2ab3 => parse_arm_10931(ins, pc),
        0x2ab4 => parse_arm_10932(ins, pc),
        0x2ab5 => parse_arm_10933(ins, pc),
        0x2ab6 => parse_arm_10934(ins, pc),
        0x2ab7 => parse_arm_10935(ins, pc),
        0x2ab8 => parse_arm_10936(ins, pc),
        0x2ab9 => parse_arm_10937(ins, pc),
        0x2aba => parse_arm_10938(ins, pc),
        0x2abb => parse_arm_10939(ins, pc),
        0x2abc => parse_arm_10940(ins, pc),
        0x2abd => parse_arm_10941(ins, pc),
        0x2abe => parse_arm_10942(ins, pc),
        0x2abf => parse_arm_10943(ins, pc),
        0x2ac0 => parse_arm_10944(ins, pc),
        0x2ac1 => parse_arm_10945(ins, pc),
        0x2ac2 => parse_arm_10946(ins, pc),
        0x2ac3 => parse_arm_10947(ins, pc),
        0x2ac4 => parse_arm_10948(ins, pc),
        0x2ac5 => parse_arm_10949(ins, pc),
        0x2ac6 => parse_arm_10950(ins, pc),
        0x2ac7 => parse_arm_10951(ins, pc),
        0x2ac8 => parse_arm_10952(ins, pc),
        0x2ac9 => parse_arm_10953(ins, pc),
        0x2aca => parse_arm_10954(ins, pc),
        0x2acb => parse_arm_10955(ins, pc),
        0x2acc => parse_arm_10956(ins, pc),
        0x2acd => parse_arm_10957(ins, pc),
        0x2ace => parse_arm_10958(ins, pc),
        0x2acf => parse_arm_10959(ins, pc),
        0x2ad0 => parse_arm_10960(ins, pc),
        0x2ad1 => parse_arm_10961(ins, pc),
        0x2ad2 => parse_arm_10962(ins, pc),
        0x2ad3 => parse_arm_10963(ins, pc),
        0x2ad4 => parse_arm_10964(ins, pc),
        0x2ad5 => parse_arm_10965(ins, pc),
        0x2ad6 => parse_arm_10966(ins, pc),
        0x2ad7 => parse_arm_10967(ins, pc),
        0x2ad8 => parse_arm_10968(ins, pc),
        0x2ad9 => parse_arm_10969(ins, pc),
        0x2ada => parse_arm_10970(ins, pc),
        0x2adb => parse_arm_10971(ins, pc),
        0x2adc => parse_arm_10972(ins, pc),
        0x2add => parse_arm_10973(ins, pc),
        0x2ade => parse_arm_10974(ins, pc),
        0x2adf => parse_arm_10975(ins, pc),
        0x2ae0 => parse_arm_10976(ins, pc),
        0x2ae1 => parse_arm_10977(ins, pc),
        0x2ae2 => parse_arm_10978(ins, pc),
        0x2ae3 => parse_arm_10979(ins, pc),
        0x2ae4 => parse_arm_10980(ins, pc),
        0x2ae5 => parse_arm_10981(ins, pc),
        0x2ae6 => parse_arm_10982(ins, pc),
        0x2ae7 => parse_arm_10983(ins, pc),
        0x2ae8 => parse_arm_10984(ins, pc),
        0x2ae9 => parse_arm_10985(ins, pc),
        0x2aea => parse_arm_10986(ins, pc),
        0x2aeb => parse_arm_10987(ins, pc),
        0x2aec => parse_arm_10988(ins, pc),
        0x2aed => parse_arm_10989(ins, pc),
        0x2aee => parse_arm_10990(ins, pc),
        0x2aef => parse_arm_10991(ins, pc),
        0x2af0 => parse_arm_10992(ins, pc),
        0x2af1 => parse_arm_10993(ins, pc),
        0x2af2 => parse_arm_10994(ins, pc),
        0x2af3 => parse_arm_10995(ins, pc),
        0x2af4 => parse_arm_10996(ins, pc),
        0x2af5 => parse_arm_10997(ins, pc),
        0x2af6 => parse_arm_10998(ins, pc),
        0x2af7 => parse_arm_10999(ins, pc),
        0x2af8 => parse_arm_11000(ins, pc),
        0x2af9 => parse_arm_11001(ins, pc),
        0x2afa => parse_arm_11002(ins, pc),
        0x2afb => parse_arm_11003(ins, pc),
        0x2afc => parse_arm_11004(ins, pc),
        0x2afd => parse_arm_11005(ins, pc),
        0x2afe => parse_arm_11006(ins, pc),
        0x2aff => parse_arm_11007(ins, pc),
        0x2b00 => parse_arm_11008(ins, pc),
        0x2b01 => parse_arm_11009(ins, pc),
        0x2b02 => parse_arm_11010(ins, pc),
        0x2b03 => parse_arm_11011(ins, pc),
        0x2b04 => parse_arm_11012(ins, pc),
        0x2b05 => parse_arm_11013(ins, pc),
        0x2b06 => parse_arm_11014(ins, pc),
        0x2b07 => parse_arm_11015(ins, pc),
        0x2b08 => parse_arm_11016(ins, pc),
        0x2b09 => parse_arm_11017(ins, pc),
        0x2b0a => parse_arm_11018(ins, pc),
        0x2b0b => parse_arm_11019(ins, pc),
        0x2b0c => parse_arm_11020(ins, pc),
        0x2b0d => parse_arm_11021(ins, pc),
        0x2b0e => parse_arm_11022(ins, pc),
        0x2b0f => parse_arm_11023(ins, pc),
        0x2b10 => parse_arm_11024(ins, pc),
        0x2b11 => parse_arm_11025(ins, pc),
        0x2b12 => parse_arm_11026(ins, pc),
        0x2b13 => parse_arm_11027(ins, pc),
        0x2b14 => parse_arm_11028(ins, pc),
        0x2b15 => parse_arm_11029(ins, pc),
        0x2b16 => parse_arm_11030(ins, pc),
        0x2b17 => parse_arm_11031(ins, pc),
        0x2b18 => parse_arm_11032(ins, pc),
        0x2b19 => parse_arm_11033(ins, pc),
        0x2b1a => parse_arm_11034(ins, pc),
        0x2b1b => parse_arm_11035(ins, pc),
        0x2b1c => parse_arm_11036(ins, pc),
        0x2b1d => parse_arm_11037(ins, pc),
        0x2b1e => parse_arm_11038(ins, pc),
        0x2b1f => parse_arm_11039(ins, pc),
        0x2b20 => parse_arm_11040(ins, pc),
        0x2b21 => parse_arm_11041(ins, pc),
        0x2b22 => parse_arm_11042(ins, pc),
        0x2b23 => parse_arm_11043(ins, pc),
        0x2b24 => parse_arm_11044(ins, pc),
        0x2b25 => parse_arm_11045(ins, pc),
        0x2b26 => parse_arm_11046(ins, pc),
        0x2b27 => parse_arm_11047(ins, pc),
        0x2b28 => parse_arm_11048(ins, pc),
        0x2b29 => parse_arm_11049(ins, pc),
        0x2b2a => parse_arm_11050(ins, pc),
        0x2b2b => parse_arm_11051(ins, pc),
        0x2b2c => parse_arm_11052(ins, pc),
        0x2b2d => parse_arm_11053(ins, pc),
        0x2b2e => parse_arm_11054(ins, pc),
        0x2b2f => parse_arm_11055(ins, pc),
        0x2b30 => parse_arm_11056(ins, pc),
        0x2b31 => parse_arm_11057(ins, pc),
        0x2b32 => parse_arm_11058(ins, pc),
        0x2b33 => parse_arm_11059(ins, pc),
        0x2b34 => parse_arm_11060(ins, pc),
        0x2b35 => parse_arm_11061(ins, pc),
        0x2b36 => parse_arm_11062(ins, pc),
        0x2b37 => parse_arm_11063(ins, pc),
        0x2b38 => parse_arm_11064(ins, pc),
        0x2b39 => parse_arm_11065(ins, pc),
        0x2b3a => parse_arm_11066(ins, pc),
        0x2b3b => parse_arm_11067(ins, pc),
        0x2b3c => parse_arm_11068(ins, pc),
        0x2b3d => parse_arm_11069(ins, pc),
        0x2b3e => parse_arm_11070(ins, pc),
        0x2b3f => parse_arm_11071(ins, pc),
        0x2b40 => parse_arm_11072(ins, pc),
        0x2b41 => parse_arm_11073(ins, pc),
        0x2b42 => parse_arm_11074(ins, pc),
        0x2b43 => parse_arm_11075(ins, pc),
        0x2b44 => parse_arm_11076(ins, pc),
        0x2b45 => parse_arm_11077(ins, pc),
        0x2b46 => parse_arm_11078(ins, pc),
        0x2b47 => parse_arm_11079(ins, pc),
        0x2b48 => parse_arm_11080(ins, pc),
        0x2b49 => parse_arm_11081(ins, pc),
        0x2b4a => parse_arm_11082(ins, pc),
        0x2b4b => parse_arm_11083(ins, pc),
        0x2b4c => parse_arm_11084(ins, pc),
        0x2b4d => parse_arm_11085(ins, pc),
        0x2b4e => parse_arm_11086(ins, pc),
        0x2b4f => parse_arm_11087(ins, pc),
        0x2b50 => parse_arm_11088(ins, pc),
        0x2b51 => parse_arm_11089(ins, pc),
        0x2b52 => parse_arm_11090(ins, pc),
        0x2b53 => parse_arm_11091(ins, pc),
        0x2b54 => parse_arm_11092(ins, pc),
        0x2b55 => parse_arm_11093(ins, pc),
        0x2b56 => parse_arm_11094(ins, pc),
        0x2b57 => parse_arm_11095(ins, pc),
        0x2b58 => parse_arm_11096(ins, pc),
        0x2b59 => parse_arm_11097(ins, pc),
        0x2b5a => parse_arm_11098(ins, pc),
        0x2b5b => parse_arm_11099(ins, pc),
        0x2b5c => parse_arm_11100(ins, pc),
        0x2b5d => parse_arm_11101(ins, pc),
        0x2b5e => parse_arm_11102(ins, pc),
        0x2b5f => parse_arm_11103(ins, pc),
        0x2b60 => parse_arm_11104(ins, pc),
        0x2b61 => parse_arm_11105(ins, pc),
        0x2b62 => parse_arm_11106(ins, pc),
        0x2b63 => parse_arm_11107(ins, pc),
        0x2b64 => parse_arm_11108(ins, pc),
        0x2b65 => parse_arm_11109(ins, pc),
        0x2b66 => parse_arm_11110(ins, pc),
        0x2b67 => parse_arm_11111(ins, pc),
        0x2b68 => parse_arm_11112(ins, pc),
        0x2b69 => parse_arm_11113(ins, pc),
        0x2b6a => parse_arm_11114(ins, pc),
        0x2b6b => parse_arm_11115(ins, pc),
        0x2b6c => parse_arm_11116(ins, pc),
        0x2b6d => parse_arm_11117(ins, pc),
        0x2b6e => parse_arm_11118(ins, pc),
        0x2b6f => parse_arm_11119(ins, pc),
        0x2b70 => parse_arm_11120(ins, pc),
        0x2b71 => parse_arm_11121(ins, pc),
        0x2b72 => parse_arm_11122(ins, pc),
        0x2b73 => parse_arm_11123(ins, pc),
        0x2b74 => parse_arm_11124(ins, pc),
        0x2b75 => parse_arm_11125(ins, pc),
        0x2b76 => parse_arm_11126(ins, pc),
        0x2b77 => parse_arm_11127(ins, pc),
        0x2b78 => parse_arm_11128(ins, pc),
        0x2b79 => parse_arm_11129(ins, pc),
        0x2b7a => parse_arm_11130(ins, pc),
        0x2b7b => parse_arm_11131(ins, pc),
        0x2b7c => parse_arm_11132(ins, pc),
        0x2b7d => parse_arm_11133(ins, pc),
        0x2b7e => parse_arm_11134(ins, pc),
        0x2b7f => parse_arm_11135(ins, pc),
        0x2b80 => parse_arm_11136(ins, pc),
        0x2b81 => parse_arm_11137(ins, pc),
        0x2b82 => parse_arm_11138(ins, pc),
        0x2b83 => parse_arm_11139(ins, pc),
        0x2b84 => parse_arm_11140(ins, pc),
        0x2b85 => parse_arm_11141(ins, pc),
        0x2b86 => parse_arm_11142(ins, pc),
        0x2b87 => parse_arm_11143(ins, pc),
        0x2b88 => parse_arm_11144(ins, pc),
        0x2b89 => parse_arm_11145(ins, pc),
        0x2b8a => parse_arm_11146(ins, pc),
        0x2b8b => parse_arm_11147(ins, pc),
        0x2b8c => parse_arm_11148(ins, pc),
        0x2b8d => parse_arm_11149(ins, pc),
        0x2b8e => parse_arm_11150(ins, pc),
        0x2b8f => parse_arm_11151(ins, pc),
        0x2b90 => parse_arm_11152(ins, pc),
        0x2b91 => parse_arm_11153(ins, pc),
        0x2b92 => parse_arm_11154(ins, pc),
        0x2b93 => parse_arm_11155(ins, pc),
        0x2b94 => parse_arm_11156(ins, pc),
        0x2b95 => parse_arm_11157(ins, pc),
        0x2b96 => parse_arm_11158(ins, pc),
        0x2b97 => parse_arm_11159(ins, pc),
        0x2b98 => parse_arm_11160(ins, pc),
        0x2b99 => parse_arm_11161(ins, pc),
        0x2b9a => parse_arm_11162(ins, pc),
        0x2b9b => parse_arm_11163(ins, pc),
        0x2b9c => parse_arm_11164(ins, pc),
        0x2b9d => parse_arm_11165(ins, pc),
        0x2b9e => parse_arm_11166(ins, pc),
        0x2b9f => parse_arm_11167(ins, pc),
        0x2ba0 => parse_arm_11168(ins, pc),
        0x2ba1 => parse_arm_11169(ins, pc),
        0x2ba2 => parse_arm_11170(ins, pc),
        0x2ba3 => parse_arm_11171(ins, pc),
        0x2ba4 => parse_arm_11172(ins, pc),
        0x2ba5 => parse_arm_11173(ins, pc),
        0x2ba6 => parse_arm_11174(ins, pc),
        0x2ba7 => parse_arm_11175(ins, pc),
        0x2ba8 => parse_arm_11176(ins, pc),
        0x2ba9 => parse_arm_11177(ins, pc),
        0x2baa => parse_arm_11178(ins, pc),
        0x2bab => parse_arm_11179(ins, pc),
        0x2bac => parse_arm_11180(ins, pc),
        0x2bad => parse_arm_11181(ins, pc),
        0x2bae => parse_arm_11182(ins, pc),
        0x2baf => parse_arm_11183(ins, pc),
        0x2bb0 => parse_arm_11184(ins, pc),
        0x2bb1 => parse_arm_11185(ins, pc),
        0x2bb2 => parse_arm_11186(ins, pc),
        0x2bb3 => parse_arm_11187(ins, pc),
        0x2bb4 => parse_arm_11188(ins, pc),
        0x2bb5 => parse_arm_11189(ins, pc),
        0x2bb6 => parse_arm_11190(ins, pc),
        0x2bb7 => parse_arm_11191(ins, pc),
        0x2bb8 => parse_arm_11192(ins, pc),
        0x2bb9 => parse_arm_11193(ins, pc),
        0x2bba => parse_arm_11194(ins, pc),
        0x2bbb => parse_arm_11195(ins, pc),
        0x2bbc => parse_arm_11196(ins, pc),
        0x2bbd => parse_arm_11197(ins, pc),
        0x2bbe => parse_arm_11198(ins, pc),
        0x2bbf => parse_arm_11199(ins, pc),
        0x2bc0 => parse_arm_11200(ins, pc),
        0x2bc1 => parse_arm_11201(ins, pc),
        0x2bc2 => parse_arm_11202(ins, pc),
        0x2bc3 => parse_arm_11203(ins, pc),
        0x2bc4 => parse_arm_11204(ins, pc),
        0x2bc5 => parse_arm_11205(ins, pc),
        0x2bc6 => parse_arm_11206(ins, pc),
        0x2bc7 => parse_arm_11207(ins, pc),
        0x2bc8 => parse_arm_11208(ins, pc),
        0x2bc9 => parse_arm_11209(ins, pc),
        0x2bca => parse_arm_11210(ins, pc),
        0x2bcb => parse_arm_11211(ins, pc),
        0x2bcc => parse_arm_11212(ins, pc),
        0x2bcd => parse_arm_11213(ins, pc),
        0x2bce => parse_arm_11214(ins, pc),
        0x2bcf => parse_arm_11215(ins, pc),
        0x2bd0 => parse_arm_11216(ins, pc),
        0x2bd1 => parse_arm_11217(ins, pc),
        0x2bd2 => parse_arm_11218(ins, pc),
        0x2bd3 => parse_arm_11219(ins, pc),
        0x2bd4 => parse_arm_11220(ins, pc),
        0x2bd5 => parse_arm_11221(ins, pc),
        0x2bd6 => parse_arm_11222(ins, pc),
        0x2bd7 => parse_arm_11223(ins, pc),
        0x2bd8 => parse_arm_11224(ins, pc),
        0x2bd9 => parse_arm_11225(ins, pc),
        0x2bda => parse_arm_11226(ins, pc),
        0x2bdb => parse_arm_11227(ins, pc),
        0x2bdc => parse_arm_11228(ins, pc),
        0x2bdd => parse_arm_11229(ins, pc),
        0x2bde => parse_arm_11230(ins, pc),
        0x2bdf => parse_arm_11231(ins, pc),
        0x2be0 => parse_arm_11232(ins, pc),
        0x2be1 => parse_arm_11233(ins, pc),
        0x2be2 => parse_arm_11234(ins, pc),
        0x2be3 => parse_arm_11235(ins, pc),
        0x2be4 => parse_arm_11236(ins, pc),
        0x2be5 => parse_arm_11237(ins, pc),
        0x2be6 => parse_arm_11238(ins, pc),
        0x2be7 => parse_arm_11239(ins, pc),
        0x2be8 => parse_arm_11240(ins, pc),
        0x2be9 => parse_arm_11241(ins, pc),
        0x2bea => parse_arm_11242(ins, pc),
        0x2beb => parse_arm_11243(ins, pc),
        0x2bec => parse_arm_11244(ins, pc),
        0x2bed => parse_arm_11245(ins, pc),
        0x2bee => parse_arm_11246(ins, pc),
        0x2bef => parse_arm_11247(ins, pc),
        0x2bf0 => parse_arm_11248(ins, pc),
        0x2bf1 => parse_arm_11249(ins, pc),
        0x2bf2 => parse_arm_11250(ins, pc),
        0x2bf3 => parse_arm_11251(ins, pc),
        0x2bf4 => parse_arm_11252(ins, pc),
        0x2bf5 => parse_arm_11253(ins, pc),
        0x2bf6 => parse_arm_11254(ins, pc),
        0x2bf7 => parse_arm_11255(ins, pc),
        0x2bf8 => parse_arm_11256(ins, pc),
        0x2bf9 => parse_arm_11257(ins, pc),
        0x2bfa => parse_arm_11258(ins, pc),
        0x2bfb => parse_arm_11259(ins, pc),
        0x2bfc => parse_arm_11260(ins, pc),
        0x2bfd => parse_arm_11261(ins, pc),
        0x2bfe => parse_arm_11262(ins, pc),
        0x2bff => parse_arm_11263(ins, pc),
        0x2c00 => parse_arm_11264(ins, pc),
        0x2c01 => parse_arm_11265(ins, pc),
        0x2c02 => parse_arm_11266(ins, pc),
        0x2c03 => parse_arm_11267(ins, pc),
        0x2c04 => parse_arm_11268(ins, pc),
        0x2c05 => parse_arm_11269(ins, pc),
        0x2c06 => parse_arm_11270(ins, pc),
        0x2c07 => parse_arm_11271(ins, pc),
        0x2c08 => parse_arm_11272(ins, pc),
        0x2c09 => parse_arm_11273(ins, pc),
        0x2c0a => parse_arm_11274(ins, pc),
        0x2c0b => parse_arm_11275(ins, pc),
        0x2c0c => parse_arm_11276(ins, pc),
        0x2c0d => parse_arm_11277(ins, pc),
        0x2c0e => parse_arm_11278(ins, pc),
        0x2c0f => parse_arm_11279(ins, pc),
        0x2c10 => parse_arm_11280(ins, pc),
        0x2c11 => parse_arm_11281(ins, pc),
        0x2c12 => parse_arm_11282(ins, pc),
        0x2c13 => parse_arm_11283(ins, pc),
        0x2c14 => parse_arm_11284(ins, pc),
        0x2c15 => parse_arm_11285(ins, pc),
        0x2c16 => parse_arm_11286(ins, pc),
        0x2c17 => parse_arm_11287(ins, pc),
        0x2c18 => parse_arm_11288(ins, pc),
        0x2c19 => parse_arm_11289(ins, pc),
        0x2c1a => parse_arm_11290(ins, pc),
        0x2c1b => parse_arm_11291(ins, pc),
        0x2c1c => parse_arm_11292(ins, pc),
        0x2c1d => parse_arm_11293(ins, pc),
        0x2c1e => parse_arm_11294(ins, pc),
        0x2c1f => parse_arm_11295(ins, pc),
        0x2c20 => parse_arm_11296(ins, pc),
        0x2c21 => parse_arm_11297(ins, pc),
        0x2c22 => parse_arm_11298(ins, pc),
        0x2c23 => parse_arm_11299(ins, pc),
        0x2c24 => parse_arm_11300(ins, pc),
        0x2c25 => parse_arm_11301(ins, pc),
        0x2c26 => parse_arm_11302(ins, pc),
        0x2c27 => parse_arm_11303(ins, pc),
        0x2c28 => parse_arm_11304(ins, pc),
        0x2c29 => parse_arm_11305(ins, pc),
        0x2c2a => parse_arm_11306(ins, pc),
        0x2c2b => parse_arm_11307(ins, pc),
        0x2c2c => parse_arm_11308(ins, pc),
        0x2c2d => parse_arm_11309(ins, pc),
        0x2c2e => parse_arm_11310(ins, pc),
        0x2c2f => parse_arm_11311(ins, pc),
        0x2c30 => parse_arm_11312(ins, pc),
        0x2c31 => parse_arm_11313(ins, pc),
        0x2c32 => parse_arm_11314(ins, pc),
        0x2c33 => parse_arm_11315(ins, pc),
        0x2c34 => parse_arm_11316(ins, pc),
        0x2c35 => parse_arm_11317(ins, pc),
        0x2c36 => parse_arm_11318(ins, pc),
        0x2c37 => parse_arm_11319(ins, pc),
        0x2c38 => parse_arm_11320(ins, pc),
        0x2c39 => parse_arm_11321(ins, pc),
        0x2c3a => parse_arm_11322(ins, pc),
        0x2c3b => parse_arm_11323(ins, pc),
        0x2c3c => parse_arm_11324(ins, pc),
        0x2c3d => parse_arm_11325(ins, pc),
        0x2c3e => parse_arm_11326(ins, pc),
        0x2c3f => parse_arm_11327(ins, pc),
        0x2c40 => parse_arm_11328(ins, pc),
        0x2c41 => parse_arm_11329(ins, pc),
        0x2c42 => parse_arm_11330(ins, pc),
        0x2c43 => parse_arm_11331(ins, pc),
        0x2c44 => parse_arm_11332(ins, pc),
        0x2c45 => parse_arm_11333(ins, pc),
        0x2c46 => parse_arm_11334(ins, pc),
        0x2c47 => parse_arm_11335(ins, pc),
        0x2c48 => parse_arm_11336(ins, pc),
        0x2c49 => parse_arm_11337(ins, pc),
        0x2c4a => parse_arm_11338(ins, pc),
        0x2c4b => parse_arm_11339(ins, pc),
        0x2c4c => parse_arm_11340(ins, pc),
        0x2c4d => parse_arm_11341(ins, pc),
        0x2c4e => parse_arm_11342(ins, pc),
        0x2c4f => parse_arm_11343(ins, pc),
        0x2c50 => parse_arm_11344(ins, pc),
        0x2c51 => parse_arm_11345(ins, pc),
        0x2c52 => parse_arm_11346(ins, pc),
        0x2c53 => parse_arm_11347(ins, pc),
        0x2c54 => parse_arm_11348(ins, pc),
        0x2c55 => parse_arm_11349(ins, pc),
        0x2c56 => parse_arm_11350(ins, pc),
        0x2c57 => parse_arm_11351(ins, pc),
        0x2c58 => parse_arm_11352(ins, pc),
        0x2c59 => parse_arm_11353(ins, pc),
        0x2c5a => parse_arm_11354(ins, pc),
        0x2c5b => parse_arm_11355(ins, pc),
        0x2c5c => parse_arm_11356(ins, pc),
        0x2c5d => parse_arm_11357(ins, pc),
        0x2c5e => parse_arm_11358(ins, pc),
        0x2c5f => parse_arm_11359(ins, pc),
        0x2c60 => parse_arm_11360(ins, pc),
        0x2c61 => parse_arm_11361(ins, pc),
        0x2c62 => parse_arm_11362(ins, pc),
        0x2c63 => parse_arm_11363(ins, pc),
        0x2c64 => parse_arm_11364(ins, pc),
        0x2c65 => parse_arm_11365(ins, pc),
        0x2c66 => parse_arm_11366(ins, pc),
        0x2c67 => parse_arm_11367(ins, pc),
        0x2c68 => parse_arm_11368(ins, pc),
        0x2c69 => parse_arm_11369(ins, pc),
        0x2c6a => parse_arm_11370(ins, pc),
        0x2c6b => parse_arm_11371(ins, pc),
        0x2c6c => parse_arm_11372(ins, pc),
        0x2c6d => parse_arm_11373(ins, pc),
        0x2c6e => parse_arm_11374(ins, pc),
        0x2c6f => parse_arm_11375(ins, pc),
        0x2c70 => parse_arm_11376(ins, pc),
        0x2c71 => parse_arm_11377(ins, pc),
        0x2c72 => parse_arm_11378(ins, pc),
        0x2c73 => parse_arm_11379(ins, pc),
        0x2c74 => parse_arm_11380(ins, pc),
        0x2c75 => parse_arm_11381(ins, pc),
        0x2c76 => parse_arm_11382(ins, pc),
        0x2c77 => parse_arm_11383(ins, pc),
        0x2c78 => parse_arm_11384(ins, pc),
        0x2c79 => parse_arm_11385(ins, pc),
        0x2c7a => parse_arm_11386(ins, pc),
        0x2c7b => parse_arm_11387(ins, pc),
        0x2c7c => parse_arm_11388(ins, pc),
        0x2c7d => parse_arm_11389(ins, pc),
        0x2c7e => parse_arm_11390(ins, pc),
        0x2c7f => parse_arm_11391(ins, pc),
        0x2c80 => parse_arm_11392(ins, pc),
        0x2c81 => parse_arm_11393(ins, pc),
        0x2c82 => parse_arm_11394(ins, pc),
        0x2c83 => parse_arm_11395(ins, pc),
        0x2c84 => parse_arm_11396(ins, pc),
        0x2c85 => parse_arm_11397(ins, pc),
        0x2c86 => parse_arm_11398(ins, pc),
        0x2c87 => parse_arm_11399(ins, pc),
        0x2c88 => parse_arm_11400(ins, pc),
        0x2c89 => parse_arm_11401(ins, pc),
        0x2c8a => parse_arm_11402(ins, pc),
        0x2c8b => parse_arm_11403(ins, pc),
        0x2c8c => parse_arm_11404(ins, pc),
        0x2c8d => parse_arm_11405(ins, pc),
        0x2c8e => parse_arm_11406(ins, pc),
        0x2c8f => parse_arm_11407(ins, pc),
        0x2c90 => parse_arm_11408(ins, pc),
        0x2c91 => parse_arm_11409(ins, pc),
        0x2c92 => parse_arm_11410(ins, pc),
        0x2c93 => parse_arm_11411(ins, pc),
        0x2c94 => parse_arm_11412(ins, pc),
        0x2c95 => parse_arm_11413(ins, pc),
        0x2c96 => parse_arm_11414(ins, pc),
        0x2c97 => parse_arm_11415(ins, pc),
        0x2c98 => parse_arm_11416(ins, pc),
        0x2c99 => parse_arm_11417(ins, pc),
        0x2c9a => parse_arm_11418(ins, pc),
        0x2c9b => parse_arm_11419(ins, pc),
        0x2c9c => parse_arm_11420(ins, pc),
        0x2c9d => parse_arm_11421(ins, pc),
        0x2c9e => parse_arm_11422(ins, pc),
        0x2c9f => parse_arm_11423(ins, pc),
        0x2ca0 => parse_arm_11424(ins, pc),
        0x2ca1 => parse_arm_11425(ins, pc),
        0x2ca2 => parse_arm_11426(ins, pc),
        0x2ca3 => parse_arm_11427(ins, pc),
        0x2ca4 => parse_arm_11428(ins, pc),
        0x2ca5 => parse_arm_11429(ins, pc),
        0x2ca6 => parse_arm_11430(ins, pc),
        0x2ca7 => parse_arm_11431(ins, pc),
        0x2ca8 => parse_arm_11432(ins, pc),
        0x2ca9 => parse_arm_11433(ins, pc),
        0x2caa => parse_arm_11434(ins, pc),
        0x2cab => parse_arm_11435(ins, pc),
        0x2cac => parse_arm_11436(ins, pc),
        0x2cad => parse_arm_11437(ins, pc),
        0x2cae => parse_arm_11438(ins, pc),
        0x2caf => parse_arm_11439(ins, pc),
        0x2cb0 => parse_arm_11440(ins, pc),
        0x2cb1 => parse_arm_11441(ins, pc),
        0x2cb2 => parse_arm_11442(ins, pc),
        0x2cb3 => parse_arm_11443(ins, pc),
        0x2cb4 => parse_arm_11444(ins, pc),
        0x2cb5 => parse_arm_11445(ins, pc),
        0x2cb6 => parse_arm_11446(ins, pc),
        0x2cb7 => parse_arm_11447(ins, pc),
        0x2cb8 => parse_arm_11448(ins, pc),
        0x2cb9 => parse_arm_11449(ins, pc),
        0x2cba => parse_arm_11450(ins, pc),
        0x2cbb => parse_arm_11451(ins, pc),
        0x2cbc => parse_arm_11452(ins, pc),
        0x2cbd => parse_arm_11453(ins, pc),
        0x2cbe => parse_arm_11454(ins, pc),
        0x2cbf => parse_arm_11455(ins, pc),
        0x2cc0 => parse_arm_11456(ins, pc),
        0x2cc1 => parse_arm_11457(ins, pc),
        0x2cc2 => parse_arm_11458(ins, pc),
        0x2cc3 => parse_arm_11459(ins, pc),
        0x2cc4 => parse_arm_11460(ins, pc),
        0x2cc5 => parse_arm_11461(ins, pc),
        0x2cc6 => parse_arm_11462(ins, pc),
        0x2cc7 => parse_arm_11463(ins, pc),
        0x2cc8 => parse_arm_11464(ins, pc),
        0x2cc9 => parse_arm_11465(ins, pc),
        0x2cca => parse_arm_11466(ins, pc),
        0x2ccb => parse_arm_11467(ins, pc),
        0x2ccc => parse_arm_11468(ins, pc),
        0x2ccd => parse_arm_11469(ins, pc),
        0x2cce => parse_arm_11470(ins, pc),
        0x2ccf => parse_arm_11471(ins, pc),
        0x2cd0 => parse_arm_11472(ins, pc),
        0x2cd1 => parse_arm_11473(ins, pc),
        0x2cd2 => parse_arm_11474(ins, pc),
        0x2cd3 => parse_arm_11475(ins, pc),
        0x2cd4 => parse_arm_11476(ins, pc),
        0x2cd5 => parse_arm_11477(ins, pc),
        0x2cd6 => parse_arm_11478(ins, pc),
        0x2cd7 => parse_arm_11479(ins, pc),
        0x2cd8 => parse_arm_11480(ins, pc),
        0x2cd9 => parse_arm_11481(ins, pc),
        0x2cda => parse_arm_11482(ins, pc),
        0x2cdb => parse_arm_11483(ins, pc),
        0x2cdc => parse_arm_11484(ins, pc),
        0x2cdd => parse_arm_11485(ins, pc),
        0x2cde => parse_arm_11486(ins, pc),
        0x2cdf => parse_arm_11487(ins, pc),
        0x2ce0 => parse_arm_11488(ins, pc),
        0x2ce1 => parse_arm_11489(ins, pc),
        0x2ce2 => parse_arm_11490(ins, pc),
        0x2ce3 => parse_arm_11491(ins, pc),
        0x2ce4 => parse_arm_11492(ins, pc),
        0x2ce5 => parse_arm_11493(ins, pc),
        0x2ce6 => parse_arm_11494(ins, pc),
        0x2ce7 => parse_arm_11495(ins, pc),
        0x2ce8 => parse_arm_11496(ins, pc),
        0x2ce9 => parse_arm_11497(ins, pc),
        0x2cea => parse_arm_11498(ins, pc),
        0x2ceb => parse_arm_11499(ins, pc),
        0x2cec => parse_arm_11500(ins, pc),
        0x2ced => parse_arm_11501(ins, pc),
        0x2cee => parse_arm_11502(ins, pc),
        0x2cef => parse_arm_11503(ins, pc),
        0x2cf0 => parse_arm_11504(ins, pc),
        0x2cf1 => parse_arm_11505(ins, pc),
        0x2cf2 => parse_arm_11506(ins, pc),
        0x2cf3 => parse_arm_11507(ins, pc),
        0x2cf4 => parse_arm_11508(ins, pc),
        0x2cf5 => parse_arm_11509(ins, pc),
        0x2cf6 => parse_arm_11510(ins, pc),
        0x2cf7 => parse_arm_11511(ins, pc),
        0x2cf8 => parse_arm_11512(ins, pc),
        0x2cf9 => parse_arm_11513(ins, pc),
        0x2cfa => parse_arm_11514(ins, pc),
        0x2cfb => parse_arm_11515(ins, pc),
        0x2cfc => parse_arm_11516(ins, pc),
        0x2cfd => parse_arm_11517(ins, pc),
        0x2cfe => parse_arm_11518(ins, pc),
        0x2cff => parse_arm_11519(ins, pc),
        0x2d00 => parse_arm_11520(ins, pc),
        0x2d01 => parse_arm_11521(ins, pc),
        0x2d02 => parse_arm_11522(ins, pc),
        0x2d03 => parse_arm_11523(ins, pc),
        0x2d04 => parse_arm_11524(ins, pc),
        0x2d05 => parse_arm_11525(ins, pc),
        0x2d06 => parse_arm_11526(ins, pc),
        0x2d07 => parse_arm_11527(ins, pc),
        0x2d08 => parse_arm_11528(ins, pc),
        0x2d09 => parse_arm_11529(ins, pc),
        0x2d0a => parse_arm_11530(ins, pc),
        0x2d0b => parse_arm_11531(ins, pc),
        0x2d0c => parse_arm_11532(ins, pc),
        0x2d0d => parse_arm_11533(ins, pc),
        0x2d0e => parse_arm_11534(ins, pc),
        0x2d0f => parse_arm_11535(ins, pc),
        0x2d10 => parse_arm_11536(ins, pc),
        0x2d11 => parse_arm_11537(ins, pc),
        0x2d12 => parse_arm_11538(ins, pc),
        0x2d13 => parse_arm_11539(ins, pc),
        0x2d14 => parse_arm_11540(ins, pc),
        0x2d15 => parse_arm_11541(ins, pc),
        0x2d16 => parse_arm_11542(ins, pc),
        0x2d17 => parse_arm_11543(ins, pc),
        0x2d18 => parse_arm_11544(ins, pc),
        0x2d19 => parse_arm_11545(ins, pc),
        0x2d1a => parse_arm_11546(ins, pc),
        0x2d1b => parse_arm_11547(ins, pc),
        0x2d1c => parse_arm_11548(ins, pc),
        0x2d1d => parse_arm_11549(ins, pc),
        0x2d1e => parse_arm_11550(ins, pc),
        0x2d1f => parse_arm_11551(ins, pc),
        0x2d20 => parse_arm_11552(ins, pc),
        0x2d21 => parse_arm_11553(ins, pc),
        0x2d22 => parse_arm_11554(ins, pc),
        0x2d23 => parse_arm_11555(ins, pc),
        0x2d24 => parse_arm_11556(ins, pc),
        0x2d25 => parse_arm_11557(ins, pc),
        0x2d26 => parse_arm_11558(ins, pc),
        0x2d27 => parse_arm_11559(ins, pc),
        0x2d28 => parse_arm_11560(ins, pc),
        0x2d29 => parse_arm_11561(ins, pc),
        0x2d2a => parse_arm_11562(ins, pc),
        0x2d2b => parse_arm_11563(ins, pc),
        0x2d2c => parse_arm_11564(ins, pc),
        0x2d2d => parse_arm_11565(ins, pc),
        0x2d2e => parse_arm_11566(ins, pc),
        0x2d2f => parse_arm_11567(ins, pc),
        0x2d30 => parse_arm_11568(ins, pc),
        0x2d31 => parse_arm_11569(ins, pc),
        0x2d32 => parse_arm_11570(ins, pc),
        0x2d33 => parse_arm_11571(ins, pc),
        0x2d34 => parse_arm_11572(ins, pc),
        0x2d35 => parse_arm_11573(ins, pc),
        0x2d36 => parse_arm_11574(ins, pc),
        0x2d37 => parse_arm_11575(ins, pc),
        0x2d38 => parse_arm_11576(ins, pc),
        0x2d39 => parse_arm_11577(ins, pc),
        0x2d3a => parse_arm_11578(ins, pc),
        0x2d3b => parse_arm_11579(ins, pc),
        0x2d3c => parse_arm_11580(ins, pc),
        0x2d3d => parse_arm_11581(ins, pc),
        0x2d3e => parse_arm_11582(ins, pc),
        0x2d3f => parse_arm_11583(ins, pc),
        0x2d40 => parse_arm_11584(ins, pc),
        0x2d41 => parse_arm_11585(ins, pc),
        0x2d42 => parse_arm_11586(ins, pc),
        0x2d43 => parse_arm_11587(ins, pc),
        0x2d44 => parse_arm_11588(ins, pc),
        0x2d45 => parse_arm_11589(ins, pc),
        0x2d46 => parse_arm_11590(ins, pc),
        0x2d47 => parse_arm_11591(ins, pc),
        0x2d48 => parse_arm_11592(ins, pc),
        0x2d49 => parse_arm_11593(ins, pc),
        0x2d4a => parse_arm_11594(ins, pc),
        0x2d4b => parse_arm_11595(ins, pc),
        0x2d4c => parse_arm_11596(ins, pc),
        0x2d4d => parse_arm_11597(ins, pc),
        0x2d4e => parse_arm_11598(ins, pc),
        0x2d4f => parse_arm_11599(ins, pc),
        0x2d50 => parse_arm_11600(ins, pc),
        0x2d51 => parse_arm_11601(ins, pc),
        0x2d52 => parse_arm_11602(ins, pc),
        0x2d53 => parse_arm_11603(ins, pc),
        0x2d54 => parse_arm_11604(ins, pc),
        0x2d55 => parse_arm_11605(ins, pc),
        0x2d56 => parse_arm_11606(ins, pc),
        0x2d57 => parse_arm_11607(ins, pc),
        0x2d58 => parse_arm_11608(ins, pc),
        0x2d59 => parse_arm_11609(ins, pc),
        0x2d5a => parse_arm_11610(ins, pc),
        0x2d5b => parse_arm_11611(ins, pc),
        0x2d5c => parse_arm_11612(ins, pc),
        0x2d5d => parse_arm_11613(ins, pc),
        0x2d5e => parse_arm_11614(ins, pc),
        0x2d5f => parse_arm_11615(ins, pc),
        0x2d60 => parse_arm_11616(ins, pc),
        0x2d61 => parse_arm_11617(ins, pc),
        0x2d62 => parse_arm_11618(ins, pc),
        0x2d63 => parse_arm_11619(ins, pc),
        0x2d64 => parse_arm_11620(ins, pc),
        0x2d65 => parse_arm_11621(ins, pc),
        0x2d66 => parse_arm_11622(ins, pc),
        0x2d67 => parse_arm_11623(ins, pc),
        0x2d68 => parse_arm_11624(ins, pc),
        0x2d69 => parse_arm_11625(ins, pc),
        0x2d6a => parse_arm_11626(ins, pc),
        0x2d6b => parse_arm_11627(ins, pc),
        0x2d6c => parse_arm_11628(ins, pc),
        0x2d6d => parse_arm_11629(ins, pc),
        0x2d6e => parse_arm_11630(ins, pc),
        0x2d6f => parse_arm_11631(ins, pc),
        0x2d70 => parse_arm_11632(ins, pc),
        0x2d71 => parse_arm_11633(ins, pc),
        0x2d72 => parse_arm_11634(ins, pc),
        0x2d73 => parse_arm_11635(ins, pc),
        0x2d74 => parse_arm_11636(ins, pc),
        0x2d75 => parse_arm_11637(ins, pc),
        0x2d76 => parse_arm_11638(ins, pc),
        0x2d77 => parse_arm_11639(ins, pc),
        0x2d78 => parse_arm_11640(ins, pc),
        0x2d79 => parse_arm_11641(ins, pc),
        0x2d7a => parse_arm_11642(ins, pc),
        0x2d7b => parse_arm_11643(ins, pc),
        0x2d7c => parse_arm_11644(ins, pc),
        0x2d7d => parse_arm_11645(ins, pc),
        0x2d7e => parse_arm_11646(ins, pc),
        0x2d7f => parse_arm_11647(ins, pc),
        0x2d80 => parse_arm_11648(ins, pc),
        0x2d81 => parse_arm_11649(ins, pc),
        0x2d82 => parse_arm_11650(ins, pc),
        0x2d83 => parse_arm_11651(ins, pc),
        0x2d84 => parse_arm_11652(ins, pc),
        0x2d85 => parse_arm_11653(ins, pc),
        0x2d86 => parse_arm_11654(ins, pc),
        0x2d87 => parse_arm_11655(ins, pc),
        0x2d88 => parse_arm_11656(ins, pc),
        0x2d89 => parse_arm_11657(ins, pc),
        0x2d8a => parse_arm_11658(ins, pc),
        0x2d8b => parse_arm_11659(ins, pc),
        0x2d8c => parse_arm_11660(ins, pc),
        0x2d8d => parse_arm_11661(ins, pc),
        0x2d8e => parse_arm_11662(ins, pc),
        0x2d8f => parse_arm_11663(ins, pc),
        0x2d90 => parse_arm_11664(ins, pc),
        0x2d91 => parse_arm_11665(ins, pc),
        0x2d92 => parse_arm_11666(ins, pc),
        0x2d93 => parse_arm_11667(ins, pc),
        0x2d94 => parse_arm_11668(ins, pc),
        0x2d95 => parse_arm_11669(ins, pc),
        0x2d96 => parse_arm_11670(ins, pc),
        0x2d97 => parse_arm_11671(ins, pc),
        0x2d98 => parse_arm_11672(ins, pc),
        0x2d99 => parse_arm_11673(ins, pc),
        0x2d9a => parse_arm_11674(ins, pc),
        0x2d9b => parse_arm_11675(ins, pc),
        0x2d9c => parse_arm_11676(ins, pc),
        0x2d9d => parse_arm_11677(ins, pc),
        0x2d9e => parse_arm_11678(ins, pc),
        0x2d9f => parse_arm_11679(ins, pc),
        0x2da0 => parse_arm_11680(ins, pc),
        0x2da1 => parse_arm_11681(ins, pc),
        0x2da2 => parse_arm_11682(ins, pc),
        0x2da3 => parse_arm_11683(ins, pc),
        0x2da4 => parse_arm_11684(ins, pc),
        0x2da5 => parse_arm_11685(ins, pc),
        0x2da6 => parse_arm_11686(ins, pc),
        0x2da7 => parse_arm_11687(ins, pc),
        0x2da8 => parse_arm_11688(ins, pc),
        0x2da9 => parse_arm_11689(ins, pc),
        0x2daa => parse_arm_11690(ins, pc),
        0x2dab => parse_arm_11691(ins, pc),
        0x2dac => parse_arm_11692(ins, pc),
        0x2dad => parse_arm_11693(ins, pc),
        0x2dae => parse_arm_11694(ins, pc),
        0x2daf => parse_arm_11695(ins, pc),
        0x2db0 => parse_arm_11696(ins, pc),
        0x2db1 => parse_arm_11697(ins, pc),
        0x2db2 => parse_arm_11698(ins, pc),
        0x2db3 => parse_arm_11699(ins, pc),
        0x2db4 => parse_arm_11700(ins, pc),
        0x2db5 => parse_arm_11701(ins, pc),
        0x2db6 => parse_arm_11702(ins, pc),
        0x2db7 => parse_arm_11703(ins, pc),
        0x2db8 => parse_arm_11704(ins, pc),
        0x2db9 => parse_arm_11705(ins, pc),
        0x2dba => parse_arm_11706(ins, pc),
        0x2dbb => parse_arm_11707(ins, pc),
        0x2dbc => parse_arm_11708(ins, pc),
        0x2dbd => parse_arm_11709(ins, pc),
        0x2dbe => parse_arm_11710(ins, pc),
        0x2dbf => parse_arm_11711(ins, pc),
        0x2dc0 => parse_arm_11712(ins, pc),
        0x2dc1 => parse_arm_11713(ins, pc),
        0x2dc2 => parse_arm_11714(ins, pc),
        0x2dc3 => parse_arm_11715(ins, pc),
        0x2dc4 => parse_arm_11716(ins, pc),
        0x2dc5 => parse_arm_11717(ins, pc),
        0x2dc6 => parse_arm_11718(ins, pc),
        0x2dc7 => parse_arm_11719(ins, pc),
        0x2dc8 => parse_arm_11720(ins, pc),
        0x2dc9 => parse_arm_11721(ins, pc),
        0x2dca => parse_arm_11722(ins, pc),
        0x2dcb => parse_arm_11723(ins, pc),
        0x2dcc => parse_arm_11724(ins, pc),
        0x2dcd => parse_arm_11725(ins, pc),
        0x2dce => parse_arm_11726(ins, pc),
        0x2dcf => parse_arm_11727(ins, pc),
        0x2dd0 => parse_arm_11728(ins, pc),
        0x2dd1 => parse_arm_11729(ins, pc),
        0x2dd2 => parse_arm_11730(ins, pc),
        0x2dd3 => parse_arm_11731(ins, pc),
        0x2dd4 => parse_arm_11732(ins, pc),
        0x2dd5 => parse_arm_11733(ins, pc),
        0x2dd6 => parse_arm_11734(ins, pc),
        0x2dd7 => parse_arm_11735(ins, pc),
        0x2dd8 => parse_arm_11736(ins, pc),
        0x2dd9 => parse_arm_11737(ins, pc),
        0x2dda => parse_arm_11738(ins, pc),
        0x2ddb => parse_arm_11739(ins, pc),
        0x2ddc => parse_arm_11740(ins, pc),
        0x2ddd => parse_arm_11741(ins, pc),
        0x2dde => parse_arm_11742(ins, pc),
        0x2ddf => parse_arm_11743(ins, pc),
        0x2de0 => parse_arm_11744(ins, pc),
        0x2de1 => parse_arm_11745(ins, pc),
        0x2de2 => parse_arm_11746(ins, pc),
        0x2de3 => parse_arm_11747(ins, pc),
        0x2de4 => parse_arm_11748(ins, pc),
        0x2de5 => parse_arm_11749(ins, pc),
        0x2de6 => parse_arm_11750(ins, pc),
        0x2de7 => parse_arm_11751(ins, pc),
        0x2de8 => parse_arm_11752(ins, pc),
        0x2de9 => parse_arm_11753(ins, pc),
        0x2dea => parse_arm_11754(ins, pc),
        0x2deb => parse_arm_11755(ins, pc),
        0x2dec => parse_arm_11756(ins, pc),
        0x2ded => parse_arm_11757(ins, pc),
        0x2dee => parse_arm_11758(ins, pc),
        0x2def => parse_arm_11759(ins, pc),
        0x2df0 => parse_arm_11760(ins, pc),
        0x2df1 => parse_arm_11761(ins, pc),
        0x2df2 => parse_arm_11762(ins, pc),
        0x2df3 => parse_arm_11763(ins, pc),
        0x2df4 => parse_arm_11764(ins, pc),
        0x2df5 => parse_arm_11765(ins, pc),
        0x2df6 => parse_arm_11766(ins, pc),
        0x2df7 => parse_arm_11767(ins, pc),
        0x2df8 => parse_arm_11768(ins, pc),
        0x2df9 => parse_arm_11769(ins, pc),
        0x2dfa => parse_arm_11770(ins, pc),
        0x2dfb => parse_arm_11771(ins, pc),
        0x2dfc => parse_arm_11772(ins, pc),
        0x2dfd => parse_arm_11773(ins, pc),
        0x2dfe => parse_arm_11774(ins, pc),
        0x2dff => parse_arm_11775(ins, pc),
        0x2e00 => parse_arm_11776(ins, pc),
        0x2e01 => parse_arm_11777(ins, pc),
        0x2e02 => parse_arm_11778(ins, pc),
        0x2e03 => parse_arm_11779(ins, pc),
        0x2e04 => parse_arm_11780(ins, pc),
        0x2e05 => parse_arm_11781(ins, pc),
        0x2e06 => parse_arm_11782(ins, pc),
        0x2e07 => parse_arm_11783(ins, pc),
        0x2e08 => parse_arm_11784(ins, pc),
        0x2e09 => parse_arm_11785(ins, pc),
        0x2e0a => parse_arm_11786(ins, pc),
        0x2e0b => parse_arm_11787(ins, pc),
        0x2e0c => parse_arm_11788(ins, pc),
        0x2e0d => parse_arm_11789(ins, pc),
        0x2e0e => parse_arm_11790(ins, pc),
        0x2e0f => parse_arm_11791(ins, pc),
        0x2e10 => parse_arm_11792(ins, pc),
        0x2e11 => parse_arm_11793(ins, pc),
        0x2e12 => parse_arm_11794(ins, pc),
        0x2e13 => parse_arm_11795(ins, pc),
        0x2e14 => parse_arm_11796(ins, pc),
        0x2e15 => parse_arm_11797(ins, pc),
        0x2e16 => parse_arm_11798(ins, pc),
        0x2e17 => parse_arm_11799(ins, pc),
        0x2e18 => parse_arm_11800(ins, pc),
        0x2e19 => parse_arm_11801(ins, pc),
        0x2e1a => parse_arm_11802(ins, pc),
        0x2e1b => parse_arm_11803(ins, pc),
        0x2e1c => parse_arm_11804(ins, pc),
        0x2e1d => parse_arm_11805(ins, pc),
        0x2e1e => parse_arm_11806(ins, pc),
        0x2e1f => parse_arm_11807(ins, pc),
        0x2e20 => parse_arm_11808(ins, pc),
        0x2e21 => parse_arm_11809(ins, pc),
        0x2e22 => parse_arm_11810(ins, pc),
        0x2e23 => parse_arm_11811(ins, pc),
        0x2e24 => parse_arm_11812(ins, pc),
        0x2e25 => parse_arm_11813(ins, pc),
        0x2e26 => parse_arm_11814(ins, pc),
        0x2e27 => parse_arm_11815(ins, pc),
        0x2e28 => parse_arm_11816(ins, pc),
        0x2e29 => parse_arm_11817(ins, pc),
        0x2e2a => parse_arm_11818(ins, pc),
        0x2e2b => parse_arm_11819(ins, pc),
        0x2e2c => parse_arm_11820(ins, pc),
        0x2e2d => parse_arm_11821(ins, pc),
        0x2e2e => parse_arm_11822(ins, pc),
        0x2e2f => parse_arm_11823(ins, pc),
        0x2e30 => parse_arm_11824(ins, pc),
        0x2e31 => parse_arm_11825(ins, pc),
        0x2e32 => parse_arm_11826(ins, pc),
        0x2e33 => parse_arm_11827(ins, pc),
        0x2e34 => parse_arm_11828(ins, pc),
        0x2e35 => parse_arm_11829(ins, pc),
        0x2e36 => parse_arm_11830(ins, pc),
        0x2e37 => parse_arm_11831(ins, pc),
        0x2e38 => parse_arm_11832(ins, pc),
        0x2e39 => parse_arm_11833(ins, pc),
        0x2e3a => parse_arm_11834(ins, pc),
        0x2e3b => parse_arm_11835(ins, pc),
        0x2e3c => parse_arm_11836(ins, pc),
        0x2e3d => parse_arm_11837(ins, pc),
        0x2e3e => parse_arm_11838(ins, pc),
        0x2e3f => parse_arm_11839(ins, pc),
        0x2e40 => parse_arm_11840(ins, pc),
        0x2e41 => parse_arm_11841(ins, pc),
        0x2e42 => parse_arm_11842(ins, pc),
        0x2e43 => parse_arm_11843(ins, pc),
        0x2e44 => parse_arm_11844(ins, pc),
        0x2e45 => parse_arm_11845(ins, pc),
        0x2e46 => parse_arm_11846(ins, pc),
        0x2e47 => parse_arm_11847(ins, pc),
        0x2e48 => parse_arm_11848(ins, pc),
        0x2e49 => parse_arm_11849(ins, pc),
        0x2e4a => parse_arm_11850(ins, pc),
        0x2e4b => parse_arm_11851(ins, pc),
        0x2e4c => parse_arm_11852(ins, pc),
        0x2e4d => parse_arm_11853(ins, pc),
        0x2e4e => parse_arm_11854(ins, pc),
        0x2e4f => parse_arm_11855(ins, pc),
        0x2e50 => parse_arm_11856(ins, pc),
        0x2e51 => parse_arm_11857(ins, pc),
        0x2e52 => parse_arm_11858(ins, pc),
        0x2e53 => parse_arm_11859(ins, pc),
        0x2e54 => parse_arm_11860(ins, pc),
        0x2e55 => parse_arm_11861(ins, pc),
        0x2e56 => parse_arm_11862(ins, pc),
        0x2e57 => parse_arm_11863(ins, pc),
        0x2e58 => parse_arm_11864(ins, pc),
        0x2e59 => parse_arm_11865(ins, pc),
        0x2e5a => parse_arm_11866(ins, pc),
        0x2e5b => parse_arm_11867(ins, pc),
        0x2e5c => parse_arm_11868(ins, pc),
        0x2e5d => parse_arm_11869(ins, pc),
        0x2e5e => parse_arm_11870(ins, pc),
        0x2e5f => parse_arm_11871(ins, pc),
        0x2e60 => parse_arm_11872(ins, pc),
        0x2e61 => parse_arm_11873(ins, pc),
        0x2e62 => parse_arm_11874(ins, pc),
        0x2e63 => parse_arm_11875(ins, pc),
        0x2e64 => parse_arm_11876(ins, pc),
        0x2e65 => parse_arm_11877(ins, pc),
        0x2e66 => parse_arm_11878(ins, pc),
        0x2e67 => parse_arm_11879(ins, pc),
        0x2e68 => parse_arm_11880(ins, pc),
        0x2e69 => parse_arm_11881(ins, pc),
        0x2e6a => parse_arm_11882(ins, pc),
        0x2e6b => parse_arm_11883(ins, pc),
        0x2e6c => parse_arm_11884(ins, pc),
        0x2e6d => parse_arm_11885(ins, pc),
        0x2e6e => parse_arm_11886(ins, pc),
        0x2e6f => parse_arm_11887(ins, pc),
        0x2e70 => parse_arm_11888(ins, pc),
        0x2e71 => parse_arm_11889(ins, pc),
        0x2e72 => parse_arm_11890(ins, pc),
        0x2e73 => parse_arm_11891(ins, pc),
        0x2e74 => parse_arm_11892(ins, pc),
        0x2e75 => parse_arm_11893(ins, pc),
        0x2e76 => parse_arm_11894(ins, pc),
        0x2e77 => parse_arm_11895(ins, pc),
        0x2e78 => parse_arm_11896(ins, pc),
        0x2e79 => parse_arm_11897(ins, pc),
        0x2e7a => parse_arm_11898(ins, pc),
        0x2e7b => parse_arm_11899(ins, pc),
        0x2e7c => parse_arm_11900(ins, pc),
        0x2e7d => parse_arm_11901(ins, pc),
        0x2e7e => parse_arm_11902(ins, pc),
        0x2e7f => parse_arm_11903(ins, pc),
        0x2e80 => parse_arm_11904(ins, pc),
        0x2e81 => parse_arm_11905(ins, pc),
        0x2e82 => parse_arm_11906(ins, pc),
        0x2e83 => parse_arm_11907(ins, pc),
        0x2e84 => parse_arm_11908(ins, pc),
        0x2e85 => parse_arm_11909(ins, pc),
        0x2e86 => parse_arm_11910(ins, pc),
        0x2e87 => parse_arm_11911(ins, pc),
        0x2e88 => parse_arm_11912(ins, pc),
        0x2e89 => parse_arm_11913(ins, pc),
        0x2e8a => parse_arm_11914(ins, pc),
        0x2e8b => parse_arm_11915(ins, pc),
        0x2e8c => parse_arm_11916(ins, pc),
        0x2e8d => parse_arm_11917(ins, pc),
        0x2e8e => parse_arm_11918(ins, pc),
        0x2e8f => parse_arm_11919(ins, pc),
        0x2e90 => parse_arm_11920(ins, pc),
        0x2e91 => parse_arm_11921(ins, pc),
        0x2e92 => parse_arm_11922(ins, pc),
        0x2e93 => parse_arm_11923(ins, pc),
        0x2e94 => parse_arm_11924(ins, pc),
        0x2e95 => parse_arm_11925(ins, pc),
        0x2e96 => parse_arm_11926(ins, pc),
        0x2e97 => parse_arm_11927(ins, pc),
        0x2e98 => parse_arm_11928(ins, pc),
        0x2e99 => parse_arm_11929(ins, pc),
        0x2e9a => parse_arm_11930(ins, pc),
        0x2e9b => parse_arm_11931(ins, pc),
        0x2e9c => parse_arm_11932(ins, pc),
        0x2e9d => parse_arm_11933(ins, pc),
        0x2e9e => parse_arm_11934(ins, pc),
        0x2e9f => parse_arm_11935(ins, pc),
        0x2ea0 => parse_arm_11936(ins, pc),
        0x2ea1 => parse_arm_11937(ins, pc),
        0x2ea2 => parse_arm_11938(ins, pc),
        0x2ea3 => parse_arm_11939(ins, pc),
        0x2ea4 => parse_arm_11940(ins, pc),
        0x2ea5 => parse_arm_11941(ins, pc),
        0x2ea6 => parse_arm_11942(ins, pc),
        0x2ea7 => parse_arm_11943(ins, pc),
        0x2ea8 => parse_arm_11944(ins, pc),
        0x2ea9 => parse_arm_11945(ins, pc),
        0x2eaa => parse_arm_11946(ins, pc),
        0x2eab => parse_arm_11947(ins, pc),
        0x2eac => parse_arm_11948(ins, pc),
        0x2ead => parse_arm_11949(ins, pc),
        0x2eae => parse_arm_11950(ins, pc),
        0x2eaf => parse_arm_11951(ins, pc),
        0x2eb0 => parse_arm_11952(ins, pc),
        0x2eb1 => parse_arm_11953(ins, pc),
        0x2eb2 => parse_arm_11954(ins, pc),
        0x2eb3 => parse_arm_11955(ins, pc),
        0x2eb4 => parse_arm_11956(ins, pc),
        0x2eb5 => parse_arm_11957(ins, pc),
        0x2eb6 => parse_arm_11958(ins, pc),
        0x2eb7 => parse_arm_11959(ins, pc),
        0x2eb8 => parse_arm_11960(ins, pc),
        0x2eb9 => parse_arm_11961(ins, pc),
        0x2eba => parse_arm_11962(ins, pc),
        0x2ebb => parse_arm_11963(ins, pc),
        0x2ebc => parse_arm_11964(ins, pc),
        0x2ebd => parse_arm_11965(ins, pc),
        0x2ebe => parse_arm_11966(ins, pc),
        0x2ebf => parse_arm_11967(ins, pc),
        0x2ec0 => parse_arm_11968(ins, pc),
        0x2ec1 => parse_arm_11969(ins, pc),
        0x2ec2 => parse_arm_11970(ins, pc),
        0x2ec3 => parse_arm_11971(ins, pc),
        0x2ec4 => parse_arm_11972(ins, pc),
        0x2ec5 => parse_arm_11973(ins, pc),
        0x2ec6 => parse_arm_11974(ins, pc),
        0x2ec7 => parse_arm_11975(ins, pc),
        0x2ec8 => parse_arm_11976(ins, pc),
        0x2ec9 => parse_arm_11977(ins, pc),
        0x2eca => parse_arm_11978(ins, pc),
        0x2ecb => parse_arm_11979(ins, pc),
        0x2ecc => parse_arm_11980(ins, pc),
        0x2ecd => parse_arm_11981(ins, pc),
        0x2ece => parse_arm_11982(ins, pc),
        0x2ecf => parse_arm_11983(ins, pc),
        0x2ed0 => parse_arm_11984(ins, pc),
        0x2ed1 => parse_arm_11985(ins, pc),
        0x2ed2 => parse_arm_11986(ins, pc),
        0x2ed3 => parse_arm_11987(ins, pc),
        0x2ed4 => parse_arm_11988(ins, pc),
        0x2ed5 => parse_arm_11989(ins, pc),
        0x2ed6 => parse_arm_11990(ins, pc),
        0x2ed7 => parse_arm_11991(ins, pc),
        0x2ed8 => parse_arm_11992(ins, pc),
        0x2ed9 => parse_arm_11993(ins, pc),
        0x2eda => parse_arm_11994(ins, pc),
        0x2edb => parse_arm_11995(ins, pc),
        0x2edc => parse_arm_11996(ins, pc),
        0x2edd => parse_arm_11997(ins, pc),
        0x2ede => parse_arm_11998(ins, pc),
        0x2edf => parse_arm_11999(ins, pc),
        0x2ee0 => parse_arm_12000(ins, pc),
        0x2ee1 => parse_arm_12001(ins, pc),
        0x2ee2 => parse_arm_12002(ins, pc),
        0x2ee3 => parse_arm_12003(ins, pc),
        0x2ee4 => parse_arm_12004(ins, pc),
        0x2ee5 => parse_arm_12005(ins, pc),
        0x2ee6 => parse_arm_12006(ins, pc),
        0x2ee7 => parse_arm_12007(ins, pc),
        0x2ee8 => parse_arm_12008(ins, pc),
        0x2ee9 => parse_arm_12009(ins, pc),
        0x2eea => parse_arm_12010(ins, pc),
        0x2eeb => parse_arm_12011(ins, pc),
        0x2eec => parse_arm_12012(ins, pc),
        0x2eed => parse_arm_12013(ins, pc),
        0x2eee => parse_arm_12014(ins, pc),
        0x2eef => parse_arm_12015(ins, pc),
        0x2ef0 => parse_arm_12016(ins, pc),
        0x2ef1 => parse_arm_12017(ins, pc),
        0x2ef2 => parse_arm_12018(ins, pc),
        0x2ef3 => parse_arm_12019(ins, pc),
        0x2ef4 => parse_arm_12020(ins, pc),
        0x2ef5 => parse_arm_12021(ins, pc),
        0x2ef6 => parse_arm_12022(ins, pc),
        0x2ef7 => parse_arm_12023(ins, pc),
        0x2ef8 => parse_arm_12024(ins, pc),
        0x2ef9 => parse_arm_12025(ins, pc),
        0x2efa => parse_arm_12026(ins, pc),
        0x2efb => parse_arm_12027(ins, pc),
        0x2efc => parse_arm_12028(ins, pc),
        0x2efd => parse_arm_12029(ins, pc),
        0x2efe => parse_arm_12030(ins, pc),
        0x2eff => parse_arm_12031(ins, pc),
        0x2f00 => parse_arm_12032(ins, pc),
        0x2f01 => parse_arm_12033(ins, pc),
        0x2f02 => parse_arm_12034(ins, pc),
        0x2f03 => parse_arm_12035(ins, pc),
        0x2f04 => parse_arm_12036(ins, pc),
        0x2f05 => parse_arm_12037(ins, pc),
        0x2f06 => parse_arm_12038(ins, pc),
        0x2f07 => parse_arm_12039(ins, pc),
        0x2f08 => parse_arm_12040(ins, pc),
        0x2f09 => parse_arm_12041(ins, pc),
        0x2f0a => parse_arm_12042(ins, pc),
        0x2f0b => parse_arm_12043(ins, pc),
        0x2f0c => parse_arm_12044(ins, pc),
        0x2f0d => parse_arm_12045(ins, pc),
        0x2f0e => parse_arm_12046(ins, pc),
        0x2f0f => parse_arm_12047(ins, pc),
        0x2f10 => parse_arm_12048(ins, pc),
        0x2f11 => parse_arm_12049(ins, pc),
        0x2f12 => parse_arm_12050(ins, pc),
        0x2f13 => parse_arm_12051(ins, pc),
        0x2f14 => parse_arm_12052(ins, pc),
        0x2f15 => parse_arm_12053(ins, pc),
        0x2f16 => parse_arm_12054(ins, pc),
        0x2f17 => parse_arm_12055(ins, pc),
        0x2f18 => parse_arm_12056(ins, pc),
        0x2f19 => parse_arm_12057(ins, pc),
        0x2f1a => parse_arm_12058(ins, pc),
        0x2f1b => parse_arm_12059(ins, pc),
        0x2f1c => parse_arm_12060(ins, pc),
        0x2f1d => parse_arm_12061(ins, pc),
        0x2f1e => parse_arm_12062(ins, pc),
        0x2f1f => parse_arm_12063(ins, pc),
        0x2f20 => parse_arm_12064(ins, pc),
        0x2f21 => parse_arm_12065(ins, pc),
        0x2f22 => parse_arm_12066(ins, pc),
        0x2f23 => parse_arm_12067(ins, pc),
        0x2f24 => parse_arm_12068(ins, pc),
        0x2f25 => parse_arm_12069(ins, pc),
        0x2f26 => parse_arm_12070(ins, pc),
        0x2f27 => parse_arm_12071(ins, pc),
        0x2f28 => parse_arm_12072(ins, pc),
        0x2f29 => parse_arm_12073(ins, pc),
        0x2f2a => parse_arm_12074(ins, pc),
        0x2f2b => parse_arm_12075(ins, pc),
        0x2f2c => parse_arm_12076(ins, pc),
        0x2f2d => parse_arm_12077(ins, pc),
        0x2f2e => parse_arm_12078(ins, pc),
        0x2f2f => parse_arm_12079(ins, pc),
        0x2f30 => parse_arm_12080(ins, pc),
        0x2f31 => parse_arm_12081(ins, pc),
        0x2f32 => parse_arm_12082(ins, pc),
        0x2f33 => parse_arm_12083(ins, pc),
        0x2f34 => parse_arm_12084(ins, pc),
        0x2f35 => parse_arm_12085(ins, pc),
        0x2f36 => parse_arm_12086(ins, pc),
        0x2f37 => parse_arm_12087(ins, pc),
        0x2f38 => parse_arm_12088(ins, pc),
        0x2f39 => parse_arm_12089(ins, pc),
        0x2f3a => parse_arm_12090(ins, pc),
        0x2f3b => parse_arm_12091(ins, pc),
        0x2f3c => parse_arm_12092(ins, pc),
        0x2f3d => parse_arm_12093(ins, pc),
        0x2f3e => parse_arm_12094(ins, pc),
        0x2f3f => parse_arm_12095(ins, pc),
        0x2f40 => parse_arm_12096(ins, pc),
        0x2f41 => parse_arm_12097(ins, pc),
        0x2f42 => parse_arm_12098(ins, pc),
        0x2f43 => parse_arm_12099(ins, pc),
        0x2f44 => parse_arm_12100(ins, pc),
        0x2f45 => parse_arm_12101(ins, pc),
        0x2f46 => parse_arm_12102(ins, pc),
        0x2f47 => parse_arm_12103(ins, pc),
        0x2f48 => parse_arm_12104(ins, pc),
        0x2f49 => parse_arm_12105(ins, pc),
        0x2f4a => parse_arm_12106(ins, pc),
        0x2f4b => parse_arm_12107(ins, pc),
        0x2f4c => parse_arm_12108(ins, pc),
        0x2f4d => parse_arm_12109(ins, pc),
        0x2f4e => parse_arm_12110(ins, pc),
        0x2f4f => parse_arm_12111(ins, pc),
        0x2f50 => parse_arm_12112(ins, pc),
        0x2f51 => parse_arm_12113(ins, pc),
        0x2f52 => parse_arm_12114(ins, pc),
        0x2f53 => parse_arm_12115(ins, pc),
        0x2f54 => parse_arm_12116(ins, pc),
        0x2f55 => parse_arm_12117(ins, pc),
        0x2f56 => parse_arm_12118(ins, pc),
        0x2f57 => parse_arm_12119(ins, pc),
        0x2f58 => parse_arm_12120(ins, pc),
        0x2f59 => parse_arm_12121(ins, pc),
        0x2f5a => parse_arm_12122(ins, pc),
        0x2f5b => parse_arm_12123(ins, pc),
        0x2f5c => parse_arm_12124(ins, pc),
        0x2f5d => parse_arm_12125(ins, pc),
        0x2f5e => parse_arm_12126(ins, pc),
        0x2f5f => parse_arm_12127(ins, pc),
        0x2f60 => parse_arm_12128(ins, pc),
        0x2f61 => parse_arm_12129(ins, pc),
        0x2f62 => parse_arm_12130(ins, pc),
        0x2f63 => parse_arm_12131(ins, pc),
        0x2f64 => parse_arm_12132(ins, pc),
        0x2f65 => parse_arm_12133(ins, pc),
        0x2f66 => parse_arm_12134(ins, pc),
        0x2f67 => parse_arm_12135(ins, pc),
        0x2f68 => parse_arm_12136(ins, pc),
        0x2f69 => parse_arm_12137(ins, pc),
        0x2f6a => parse_arm_12138(ins, pc),
        0x2f6b => parse_arm_12139(ins, pc),
        0x2f6c => parse_arm_12140(ins, pc),
        0x2f6d => parse_arm_12141(ins, pc),
        0x2f6e => parse_arm_12142(ins, pc),
        0x2f6f => parse_arm_12143(ins, pc),
        0x2f70 => parse_arm_12144(ins, pc),
        0x2f71 => parse_arm_12145(ins, pc),
        0x2f72 => parse_arm_12146(ins, pc),
        0x2f73 => parse_arm_12147(ins, pc),
        0x2f74 => parse_arm_12148(ins, pc),
        0x2f75 => parse_arm_12149(ins, pc),
        0x2f76 => parse_arm_12150(ins, pc),
        0x2f77 => parse_arm_12151(ins, pc),
        0x2f78 => parse_arm_12152(ins, pc),
        0x2f79 => parse_arm_12153(ins, pc),
        0x2f7a => parse_arm_12154(ins, pc),
        0x2f7b => parse_arm_12155(ins, pc),
        0x2f7c => parse_arm_12156(ins, pc),
        0x2f7d => parse_arm_12157(ins, pc),
        0x2f7e => parse_arm_12158(ins, pc),
        0x2f7f => parse_arm_12159(ins, pc),
        0x2f80 => parse_arm_12160(ins, pc),
        0x2f81 => parse_arm_12161(ins, pc),
        0x2f82 => parse_arm_12162(ins, pc),
        0x2f83 => parse_arm_12163(ins, pc),
        0x2f84 => parse_arm_12164(ins, pc),
        0x2f85 => parse_arm_12165(ins, pc),
        0x2f86 => parse_arm_12166(ins, pc),
        0x2f87 => parse_arm_12167(ins, pc),
        0x2f88 => parse_arm_12168(ins, pc),
        0x2f89 => parse_arm_12169(ins, pc),
        0x2f8a => parse_arm_12170(ins, pc),
        0x2f8b => parse_arm_12171(ins, pc),
        0x2f8c => parse_arm_12172(ins, pc),
        0x2f8d => parse_arm_12173(ins, pc),
        0x2f8e => parse_arm_12174(ins, pc),
        0x2f8f => parse_arm_12175(ins, pc),
        0x2f90 => parse_arm_12176(ins, pc),
        0x2f91 => parse_arm_12177(ins, pc),
        0x2f92 => parse_arm_12178(ins, pc),
        0x2f93 => parse_arm_12179(ins, pc),
        0x2f94 => parse_arm_12180(ins, pc),
        0x2f95 => parse_arm_12181(ins, pc),
        0x2f96 => parse_arm_12182(ins, pc),
        0x2f97 => parse_arm_12183(ins, pc),
        0x2f98 => parse_arm_12184(ins, pc),
        0x2f99 => parse_arm_12185(ins, pc),
        0x2f9a => parse_arm_12186(ins, pc),
        0x2f9b => parse_arm_12187(ins, pc),
        0x2f9c => parse_arm_12188(ins, pc),
        0x2f9d => parse_arm_12189(ins, pc),
        0x2f9e => parse_arm_12190(ins, pc),
        0x2f9f => parse_arm_12191(ins, pc),
        0x2fa0 => parse_arm_12192(ins, pc),
        0x2fa1 => parse_arm_12193(ins, pc),
        0x2fa2 => parse_arm_12194(ins, pc),
        0x2fa3 => parse_arm_12195(ins, pc),
        0x2fa4 => parse_arm_12196(ins, pc),
        0x2fa5 => parse_arm_12197(ins, pc),
        0x2fa6 => parse_arm_12198(ins, pc),
        0x2fa7 => parse_arm_12199(ins, pc),
        0x2fa8 => parse_arm_12200(ins, pc),
        0x2fa9 => parse_arm_12201(ins, pc),
        0x2faa => parse_arm_12202(ins, pc),
        0x2fab => parse_arm_12203(ins, pc),
        0x2fac => parse_arm_12204(ins, pc),
        0x2fad => parse_arm_12205(ins, pc),
        0x2fae => parse_arm_12206(ins, pc),
        0x2faf => parse_arm_12207(ins, pc),
        0x2fb0 => parse_arm_12208(ins, pc),
        0x2fb1 => parse_arm_12209(ins, pc),
        0x2fb2 => parse_arm_12210(ins, pc),
        0x2fb3 => parse_arm_12211(ins, pc),
        0x2fb4 => parse_arm_12212(ins, pc),
        0x2fb5 => parse_arm_12213(ins, pc),
        0x2fb6 => parse_arm_12214(ins, pc),
        0x2fb7 => parse_arm_12215(ins, pc),
        0x2fb8 => parse_arm_12216(ins, pc),
        0x2fb9 => parse_arm_12217(ins, pc),
        0x2fba => parse_arm_12218(ins, pc),
        0x2fbb => parse_arm_12219(ins, pc),
        0x2fbc => parse_arm_12220(ins, pc),
        0x2fbd => parse_arm_12221(ins, pc),
        0x2fbe => parse_arm_12222(ins, pc),
        0x2fbf => parse_arm_12223(ins, pc),
        0x2fc0 => parse_arm_12224(ins, pc),
        0x2fc1 => parse_arm_12225(ins, pc),
        0x2fc2 => parse_arm_12226(ins, pc),
        0x2fc3 => parse_arm_12227(ins, pc),
        0x2fc4 => parse_arm_12228(ins, pc),
        0x2fc5 => parse_arm_12229(ins, pc),
        0x2fc6 => parse_arm_12230(ins, pc),
        0x2fc7 => parse_arm_12231(ins, pc),
        0x2fc8 => parse_arm_12232(ins, pc),
        0x2fc9 => parse_arm_12233(ins, pc),
        0x2fca => parse_arm_12234(ins, pc),
        0x2fcb => parse_arm_12235(ins, pc),
        0x2fcc => parse_arm_12236(ins, pc),
        0x2fcd => parse_arm_12237(ins, pc),
        0x2fce => parse_arm_12238(ins, pc),
        0x2fcf => parse_arm_12239(ins, pc),
        0x2fd0 => parse_arm_12240(ins, pc),
        0x2fd1 => parse_arm_12241(ins, pc),
        0x2fd2 => parse_arm_12242(ins, pc),
        0x2fd3 => parse_arm_12243(ins, pc),
        0x2fd4 => parse_arm_12244(ins, pc),
        0x2fd5 => parse_arm_12245(ins, pc),
        0x2fd6 => parse_arm_12246(ins, pc),
        0x2fd7 => parse_arm_12247(ins, pc),
        0x2fd8 => parse_arm_12248(ins, pc),
        0x2fd9 => parse_arm_12249(ins, pc),
        0x2fda => parse_arm_12250(ins, pc),
        0x2fdb => parse_arm_12251(ins, pc),
        0x2fdc => parse_arm_12252(ins, pc),
        0x2fdd => parse_arm_12253(ins, pc),
        0x2fde => parse_arm_12254(ins, pc),
        0x2fdf => parse_arm_12255(ins, pc),
        0x2fe0 => parse_arm_12256(ins, pc),
        0x2fe1 => parse_arm_12257(ins, pc),
        0x2fe2 => parse_arm_12258(ins, pc),
        0x2fe3 => parse_arm_12259(ins, pc),
        0x2fe4 => parse_arm_12260(ins, pc),
        0x2fe5 => parse_arm_12261(ins, pc),
        0x2fe6 => parse_arm_12262(ins, pc),
        0x2fe7 => parse_arm_12263(ins, pc),
        0x2fe8 => parse_arm_12264(ins, pc),
        0x2fe9 => parse_arm_12265(ins, pc),
        0x2fea => parse_arm_12266(ins, pc),
        0x2feb => parse_arm_12267(ins, pc),
        0x2fec => parse_arm_12268(ins, pc),
        0x2fed => parse_arm_12269(ins, pc),
        0x2fee => parse_arm_12270(ins, pc),
        0x2fef => parse_arm_12271(ins, pc),
        0x2ff0 => parse_arm_12272(ins, pc),
        0x2ff1 => parse_arm_12273(ins, pc),
        0x2ff2 => parse_arm_12274(ins, pc),
        0x2ff3 => parse_arm_12275(ins, pc),
        0x2ff4 => parse_arm_12276(ins, pc),
        0x2ff5 => parse_arm_12277(ins, pc),
        0x2ff6 => parse_arm_12278(ins, pc),
        0x2ff7 => parse_arm_12279(ins, pc),
        0x2ff8 => parse_arm_12280(ins, pc),
        0x2ff9 => parse_arm_12281(ins, pc),
        0x2ffa => parse_arm_12282(ins, pc),
        0x2ffb => parse_arm_12283(ins, pc),
        0x2ffc => parse_arm_12284(ins, pc),
        0x2ffd => parse_arm_12285(ins, pc),
        0x2ffe => parse_arm_12286(ins, pc),
        0x2fff => parse_arm_12287(ins, pc),
        0x3000 => parse_arm_12288(ins, pc),
        0x3001 => parse_arm_12289(ins, pc),
        0x3002 => parse_arm_12290(ins, pc),
        0x3003 => parse_arm_12291(ins, pc),
        0x3004 => parse_arm_12292(ins, pc),
        0x3005 => parse_arm_12293(ins, pc),
        0x3006 => parse_arm_12294(ins, pc),
        0x3007 => parse_arm_12295(ins, pc),
        0x3008 => parse_arm_12296(ins, pc),
        0x3009 => parse_arm_12297(ins, pc),
        0x300a => parse_arm_12298(ins, pc),
        0x300b => parse_arm_12299(ins, pc),
        0x300c => parse_arm_12300(ins, pc),
        0x300d => parse_arm_12301(ins, pc),
        0x300e => parse_arm_12302(ins, pc),
        0x300f => parse_arm_12303(ins, pc),
        0x3010 => parse_arm_12304(ins, pc),
        0x3011 => parse_arm_12305(ins, pc),
        0x3012 => parse_arm_12306(ins, pc),
        0x3013 => parse_arm_12307(ins, pc),
        0x3014 => parse_arm_12308(ins, pc),
        0x3015 => parse_arm_12309(ins, pc),
        0x3016 => parse_arm_12310(ins, pc),
        0x3017 => parse_arm_12311(ins, pc),
        0x3018 => parse_arm_12312(ins, pc),
        0x3019 => parse_arm_12313(ins, pc),
        0x301a => parse_arm_12314(ins, pc),
        0x301b => parse_arm_12315(ins, pc),
        0x301c => parse_arm_12316(ins, pc),
        0x301d => parse_arm_12317(ins, pc),
        0x301e => parse_arm_12318(ins, pc),
        0x301f => parse_arm_12319(ins, pc),
        0x3020 => parse_arm_12320(ins, pc),
        0x3021 => parse_arm_12321(ins, pc),
        0x3022 => parse_arm_12322(ins, pc),
        0x3023 => parse_arm_12323(ins, pc),
        0x3024 => parse_arm_12324(ins, pc),
        0x3025 => parse_arm_12325(ins, pc),
        0x3026 => parse_arm_12326(ins, pc),
        0x3027 => parse_arm_12327(ins, pc),
        0x3028 => parse_arm_12328(ins, pc),
        0x3029 => parse_arm_12329(ins, pc),
        0x302a => parse_arm_12330(ins, pc),
        0x302b => parse_arm_12331(ins, pc),
        0x302c => parse_arm_12332(ins, pc),
        0x302d => parse_arm_12333(ins, pc),
        0x302e => parse_arm_12334(ins, pc),
        0x302f => parse_arm_12335(ins, pc),
        0x3030 => parse_arm_12336(ins, pc),
        0x3031 => parse_arm_12337(ins, pc),
        0x3032 => parse_arm_12338(ins, pc),
        0x3033 => parse_arm_12339(ins, pc),
        0x3034 => parse_arm_12340(ins, pc),
        0x3035 => parse_arm_12341(ins, pc),
        0x3036 => parse_arm_12342(ins, pc),
        0x3037 => parse_arm_12343(ins, pc),
        0x3038 => parse_arm_12344(ins, pc),
        0x3039 => parse_arm_12345(ins, pc),
        0x303a => parse_arm_12346(ins, pc),
        0x303b => parse_arm_12347(ins, pc),
        0x303c => parse_arm_12348(ins, pc),
        0x303d => parse_arm_12349(ins, pc),
        0x303e => parse_arm_12350(ins, pc),
        0x303f => parse_arm_12351(ins, pc),
        0x3040 => parse_arm_12352(ins, pc),
        0x3041 => parse_arm_12353(ins, pc),
        0x3042 => parse_arm_12354(ins, pc),
        0x3043 => parse_arm_12355(ins, pc),
        0x3044 => parse_arm_12356(ins, pc),
        0x3045 => parse_arm_12357(ins, pc),
        0x3046 => parse_arm_12358(ins, pc),
        0x3047 => parse_arm_12359(ins, pc),
        0x3048 => parse_arm_12360(ins, pc),
        0x3049 => parse_arm_12361(ins, pc),
        0x304a => parse_arm_12362(ins, pc),
        0x304b => parse_arm_12363(ins, pc),
        0x304c => parse_arm_12364(ins, pc),
        0x304d => parse_arm_12365(ins, pc),
        0x304e => parse_arm_12366(ins, pc),
        0x304f => parse_arm_12367(ins, pc),
        0x3050 => parse_arm_12368(ins, pc),
        0x3051 => parse_arm_12369(ins, pc),
        0x3052 => parse_arm_12370(ins, pc),
        0x3053 => parse_arm_12371(ins, pc),
        0x3054 => parse_arm_12372(ins, pc),
        0x3055 => parse_arm_12373(ins, pc),
        0x3056 => parse_arm_12374(ins, pc),
        0x3057 => parse_arm_12375(ins, pc),
        0x3058 => parse_arm_12376(ins, pc),
        0x3059 => parse_arm_12377(ins, pc),
        0x305a => parse_arm_12378(ins, pc),
        0x305b => parse_arm_12379(ins, pc),
        0x305c => parse_arm_12380(ins, pc),
        0x305d => parse_arm_12381(ins, pc),
        0x305e => parse_arm_12382(ins, pc),
        0x305f => parse_arm_12383(ins, pc),
        0x3060 => parse_arm_12384(ins, pc),
        0x3061 => parse_arm_12385(ins, pc),
        0x3062 => parse_arm_12386(ins, pc),
        0x3063 => parse_arm_12387(ins, pc),
        0x3064 => parse_arm_12388(ins, pc),
        0x3065 => parse_arm_12389(ins, pc),
        0x3066 => parse_arm_12390(ins, pc),
        0x3067 => parse_arm_12391(ins, pc),
        0x3068 => parse_arm_12392(ins, pc),
        0x3069 => parse_arm_12393(ins, pc),
        0x306a => parse_arm_12394(ins, pc),
        0x306b => parse_arm_12395(ins, pc),
        0x306c => parse_arm_12396(ins, pc),
        0x306d => parse_arm_12397(ins, pc),
        0x306e => parse_arm_12398(ins, pc),
        0x306f => parse_arm_12399(ins, pc),
        0x3070 => parse_arm_12400(ins, pc),
        0x3071 => parse_arm_12401(ins, pc),
        0x3072 => parse_arm_12402(ins, pc),
        0x3073 => parse_arm_12403(ins, pc),
        0x3074 => parse_arm_12404(ins, pc),
        0x3075 => parse_arm_12405(ins, pc),
        0x3076 => parse_arm_12406(ins, pc),
        0x3077 => parse_arm_12407(ins, pc),
        0x3078 => parse_arm_12408(ins, pc),
        0x3079 => parse_arm_12409(ins, pc),
        0x307a => parse_arm_12410(ins, pc),
        0x307b => parse_arm_12411(ins, pc),
        0x307c => parse_arm_12412(ins, pc),
        0x307d => parse_arm_12413(ins, pc),
        0x307e => parse_arm_12414(ins, pc),
        0x307f => parse_arm_12415(ins, pc),
        0x3080 => parse_arm_12416(ins, pc),
        0x3081 => parse_arm_12417(ins, pc),
        0x3082 => parse_arm_12418(ins, pc),
        0x3083 => parse_arm_12419(ins, pc),
        0x3084 => parse_arm_12420(ins, pc),
        0x3085 => parse_arm_12421(ins, pc),
        0x3086 => parse_arm_12422(ins, pc),
        0x3087 => parse_arm_12423(ins, pc),
        0x3088 => parse_arm_12424(ins, pc),
        0x3089 => parse_arm_12425(ins, pc),
        0x308a => parse_arm_12426(ins, pc),
        0x308b => parse_arm_12427(ins, pc),
        0x308c => parse_arm_12428(ins, pc),
        0x308d => parse_arm_12429(ins, pc),
        0x308e => parse_arm_12430(ins, pc),
        0x308f => parse_arm_12431(ins, pc),
        0x3090 => parse_arm_12432(ins, pc),
        0x3091 => parse_arm_12433(ins, pc),
        0x3092 => parse_arm_12434(ins, pc),
        0x3093 => parse_arm_12435(ins, pc),
        0x3094 => parse_arm_12436(ins, pc),
        0x3095 => parse_arm_12437(ins, pc),
        0x3096 => parse_arm_12438(ins, pc),
        0x3097 => parse_arm_12439(ins, pc),
        0x3098 => parse_arm_12440(ins, pc),
        0x3099 => parse_arm_12441(ins, pc),
        0x309a => parse_arm_12442(ins, pc),
        0x309b => parse_arm_12443(ins, pc),
        0x309c => parse_arm_12444(ins, pc),
        0x309d => parse_arm_12445(ins, pc),
        0x309e => parse_arm_12446(ins, pc),
        0x309f => parse_arm_12447(ins, pc),
        0x30a0 => parse_arm_12448(ins, pc),
        0x30a1 => parse_arm_12449(ins, pc),
        0x30a2 => parse_arm_12450(ins, pc),
        0x30a3 => parse_arm_12451(ins, pc),
        0x30a4 => parse_arm_12452(ins, pc),
        0x30a5 => parse_arm_12453(ins, pc),
        0x30a6 => parse_arm_12454(ins, pc),
        0x30a7 => parse_arm_12455(ins, pc),
        0x30a8 => parse_arm_12456(ins, pc),
        0x30a9 => parse_arm_12457(ins, pc),
        0x30aa => parse_arm_12458(ins, pc),
        0x30ab => parse_arm_12459(ins, pc),
        0x30ac => parse_arm_12460(ins, pc),
        0x30ad => parse_arm_12461(ins, pc),
        0x30ae => parse_arm_12462(ins, pc),
        0x30af => parse_arm_12463(ins, pc),
        0x30b0 => parse_arm_12464(ins, pc),
        0x30b1 => parse_arm_12465(ins, pc),
        0x30b2 => parse_arm_12466(ins, pc),
        0x30b3 => parse_arm_12467(ins, pc),
        0x30b4 => parse_arm_12468(ins, pc),
        0x30b5 => parse_arm_12469(ins, pc),
        0x30b6 => parse_arm_12470(ins, pc),
        0x30b7 => parse_arm_12471(ins, pc),
        0x30b8 => parse_arm_12472(ins, pc),
        0x30b9 => parse_arm_12473(ins, pc),
        0x30ba => parse_arm_12474(ins, pc),
        0x30bb => parse_arm_12475(ins, pc),
        0x30bc => parse_arm_12476(ins, pc),
        0x30bd => parse_arm_12477(ins, pc),
        0x30be => parse_arm_12478(ins, pc),
        0x30bf => parse_arm_12479(ins, pc),
        0x30c0 => parse_arm_12480(ins, pc),
        0x30c1 => parse_arm_12481(ins, pc),
        0x30c2 => parse_arm_12482(ins, pc),
        0x30c3 => parse_arm_12483(ins, pc),
        0x30c4 => parse_arm_12484(ins, pc),
        0x30c5 => parse_arm_12485(ins, pc),
        0x30c6 => parse_arm_12486(ins, pc),
        0x30c7 => parse_arm_12487(ins, pc),
        0x30c8 => parse_arm_12488(ins, pc),
        0x30c9 => parse_arm_12489(ins, pc),
        0x30ca => parse_arm_12490(ins, pc),
        0x30cb => parse_arm_12491(ins, pc),
        0x30cc => parse_arm_12492(ins, pc),
        0x30cd => parse_arm_12493(ins, pc),
        0x30ce => parse_arm_12494(ins, pc),
        0x30cf => parse_arm_12495(ins, pc),
        0x30d0 => parse_arm_12496(ins, pc),
        0x30d1 => parse_arm_12497(ins, pc),
        0x30d2 => parse_arm_12498(ins, pc),
        0x30d3 => parse_arm_12499(ins, pc),
        0x30d4 => parse_arm_12500(ins, pc),
        0x30d5 => parse_arm_12501(ins, pc),
        0x30d6 => parse_arm_12502(ins, pc),
        0x30d7 => parse_arm_12503(ins, pc),
        0x30d8 => parse_arm_12504(ins, pc),
        0x30d9 => parse_arm_12505(ins, pc),
        0x30da => parse_arm_12506(ins, pc),
        0x30db => parse_arm_12507(ins, pc),
        0x30dc => parse_arm_12508(ins, pc),
        0x30dd => parse_arm_12509(ins, pc),
        0x30de => parse_arm_12510(ins, pc),
        0x30df => parse_arm_12511(ins, pc),
        0x30e0 => parse_arm_12512(ins, pc),
        0x30e1 => parse_arm_12513(ins, pc),
        0x30e2 => parse_arm_12514(ins, pc),
        0x30e3 => parse_arm_12515(ins, pc),
        0x30e4 => parse_arm_12516(ins, pc),
        0x30e5 => parse_arm_12517(ins, pc),
        0x30e6 => parse_arm_12518(ins, pc),
        0x30e7 => parse_arm_12519(ins, pc),
        0x30e8 => parse_arm_12520(ins, pc),
        0x30e9 => parse_arm_12521(ins, pc),
        0x30ea => parse_arm_12522(ins, pc),
        0x30eb => parse_arm_12523(ins, pc),
        0x30ec => parse_arm_12524(ins, pc),
        0x30ed => parse_arm_12525(ins, pc),
        0x30ee => parse_arm_12526(ins, pc),
        0x30ef => parse_arm_12527(ins, pc),
        0x30f0 => parse_arm_12528(ins, pc),
        0x30f1 => parse_arm_12529(ins, pc),
        0x30f2 => parse_arm_12530(ins, pc),
        0x30f3 => parse_arm_12531(ins, pc),
        0x30f4 => parse_arm_12532(ins, pc),
        0x30f5 => parse_arm_12533(ins, pc),
        0x30f6 => parse_arm_12534(ins, pc),
        0x30f7 => parse_arm_12535(ins, pc),
        0x30f8 => parse_arm_12536(ins, pc),
        0x30f9 => parse_arm_12537(ins, pc),
        0x30fa => parse_arm_12538(ins, pc),
        0x30fb => parse_arm_12539(ins, pc),
        0x30fc => parse_arm_12540(ins, pc),
        0x30fd => parse_arm_12541(ins, pc),
        0x30fe => parse_arm_12542(ins, pc),
        0x30ff => parse_arm_12543(ins, pc),
        0x3100 => parse_arm_12544(ins, pc),
        0x3101 => parse_arm_12545(ins, pc),
        0x3102 => parse_arm_12546(ins, pc),
        0x3103 => parse_arm_12547(ins, pc),
        0x3104 => parse_arm_12548(ins, pc),
        0x3105 => parse_arm_12549(ins, pc),
        0x3106 => parse_arm_12550(ins, pc),
        0x3107 => parse_arm_12551(ins, pc),
        0x3108 => parse_arm_12552(ins, pc),
        0x3109 => parse_arm_12553(ins, pc),
        0x310a => parse_arm_12554(ins, pc),
        0x310b => parse_arm_12555(ins, pc),
        0x310c => parse_arm_12556(ins, pc),
        0x310d => parse_arm_12557(ins, pc),
        0x310e => parse_arm_12558(ins, pc),
        0x310f => parse_arm_12559(ins, pc),
        0x3110 => parse_arm_12560(ins, pc),
        0x3111 => parse_arm_12561(ins, pc),
        0x3112 => parse_arm_12562(ins, pc),
        0x3113 => parse_arm_12563(ins, pc),
        0x3114 => parse_arm_12564(ins, pc),
        0x3115 => parse_arm_12565(ins, pc),
        0x3116 => parse_arm_12566(ins, pc),
        0x3117 => parse_arm_12567(ins, pc),
        0x3118 => parse_arm_12568(ins, pc),
        0x3119 => parse_arm_12569(ins, pc),
        0x311a => parse_arm_12570(ins, pc),
        0x311b => parse_arm_12571(ins, pc),
        0x311c => parse_arm_12572(ins, pc),
        0x311d => parse_arm_12573(ins, pc),
        0x311e => parse_arm_12574(ins, pc),
        0x311f => parse_arm_12575(ins, pc),
        0x3120 => parse_arm_12576(ins, pc),
        0x3121 => parse_arm_12577(ins, pc),
        0x3122 => parse_arm_12578(ins, pc),
        0x3123 => parse_arm_12579(ins, pc),
        0x3124 => parse_arm_12580(ins, pc),
        0x3125 => parse_arm_12581(ins, pc),
        0x3126 => parse_arm_12582(ins, pc),
        0x3127 => parse_arm_12583(ins, pc),
        0x3128 => parse_arm_12584(ins, pc),
        0x3129 => parse_arm_12585(ins, pc),
        0x312a => parse_arm_12586(ins, pc),
        0x312b => parse_arm_12587(ins, pc),
        0x312c => parse_arm_12588(ins, pc),
        0x312d => parse_arm_12589(ins, pc),
        0x312e => parse_arm_12590(ins, pc),
        0x312f => parse_arm_12591(ins, pc),
        0x3130 => parse_arm_12592(ins, pc),
        0x3131 => parse_arm_12593(ins, pc),
        0x3132 => parse_arm_12594(ins, pc),
        0x3133 => parse_arm_12595(ins, pc),
        0x3134 => parse_arm_12596(ins, pc),
        0x3135 => parse_arm_12597(ins, pc),
        0x3136 => parse_arm_12598(ins, pc),
        0x3137 => parse_arm_12599(ins, pc),
        0x3138 => parse_arm_12600(ins, pc),
        0x3139 => parse_arm_12601(ins, pc),
        0x313a => parse_arm_12602(ins, pc),
        0x313b => parse_arm_12603(ins, pc),
        0x313c => parse_arm_12604(ins, pc),
        0x313d => parse_arm_12605(ins, pc),
        0x313e => parse_arm_12606(ins, pc),
        0x313f => parse_arm_12607(ins, pc),
        0x3140 => parse_arm_12608(ins, pc),
        0x3141 => parse_arm_12609(ins, pc),
        0x3142 => parse_arm_12610(ins, pc),
        0x3143 => parse_arm_12611(ins, pc),
        0x3144 => parse_arm_12612(ins, pc),
        0x3145 => parse_arm_12613(ins, pc),
        0x3146 => parse_arm_12614(ins, pc),
        0x3147 => parse_arm_12615(ins, pc),
        0x3148 => parse_arm_12616(ins, pc),
        0x3149 => parse_arm_12617(ins, pc),
        0x314a => parse_arm_12618(ins, pc),
        0x314b => parse_arm_12619(ins, pc),
        0x314c => parse_arm_12620(ins, pc),
        0x314d => parse_arm_12621(ins, pc),
        0x314e => parse_arm_12622(ins, pc),
        0x314f => parse_arm_12623(ins, pc),
        0x3150 => parse_arm_12624(ins, pc),
        0x3151 => parse_arm_12625(ins, pc),
        0x3152 => parse_arm_12626(ins, pc),
        0x3153 => parse_arm_12627(ins, pc),
        0x3154 => parse_arm_12628(ins, pc),
        0x3155 => parse_arm_12629(ins, pc),
        0x3156 => parse_arm_12630(ins, pc),
        0x3157 => parse_arm_12631(ins, pc),
        0x3158 => parse_arm_12632(ins, pc),
        0x3159 => parse_arm_12633(ins, pc),
        0x315a => parse_arm_12634(ins, pc),
        0x315b => parse_arm_12635(ins, pc),
        0x315c => parse_arm_12636(ins, pc),
        0x315d => parse_arm_12637(ins, pc),
        0x315e => parse_arm_12638(ins, pc),
        0x315f => parse_arm_12639(ins, pc),
        0x3160 => parse_arm_12640(ins, pc),
        0x3161 => parse_arm_12641(ins, pc),
        0x3162 => parse_arm_12642(ins, pc),
        0x3163 => parse_arm_12643(ins, pc),
        0x3164 => parse_arm_12644(ins, pc),
        0x3165 => parse_arm_12645(ins, pc),
        0x3166 => parse_arm_12646(ins, pc),
        0x3167 => parse_arm_12647(ins, pc),
        0x3168 => parse_arm_12648(ins, pc),
        0x3169 => parse_arm_12649(ins, pc),
        0x316a => parse_arm_12650(ins, pc),
        0x316b => parse_arm_12651(ins, pc),
        0x316c => parse_arm_12652(ins, pc),
        0x316d => parse_arm_12653(ins, pc),
        0x316e => parse_arm_12654(ins, pc),
        0x316f => parse_arm_12655(ins, pc),
        0x3170 => parse_arm_12656(ins, pc),
        0x3171 => parse_arm_12657(ins, pc),
        0x3172 => parse_arm_12658(ins, pc),
        0x3173 => parse_arm_12659(ins, pc),
        0x3174 => parse_arm_12660(ins, pc),
        0x3175 => parse_arm_12661(ins, pc),
        0x3176 => parse_arm_12662(ins, pc),
        0x3177 => parse_arm_12663(ins, pc),
        0x3178 => parse_arm_12664(ins, pc),
        0x3179 => parse_arm_12665(ins, pc),
        0x317a => parse_arm_12666(ins, pc),
        0x317b => parse_arm_12667(ins, pc),
        0x317c => parse_arm_12668(ins, pc),
        0x317d => parse_arm_12669(ins, pc),
        0x317e => parse_arm_12670(ins, pc),
        0x317f => parse_arm_12671(ins, pc),
        0x3180 => parse_arm_12672(ins, pc),
        0x3181 => parse_arm_12673(ins, pc),
        0x3182 => parse_arm_12674(ins, pc),
        0x3183 => parse_arm_12675(ins, pc),
        0x3184 => parse_arm_12676(ins, pc),
        0x3185 => parse_arm_12677(ins, pc),
        0x3186 => parse_arm_12678(ins, pc),
        0x3187 => parse_arm_12679(ins, pc),
        0x3188 => parse_arm_12680(ins, pc),
        0x3189 => parse_arm_12681(ins, pc),
        0x318a => parse_arm_12682(ins, pc),
        0x318b => parse_arm_12683(ins, pc),
        0x318c => parse_arm_12684(ins, pc),
        0x318d => parse_arm_12685(ins, pc),
        0x318e => parse_arm_12686(ins, pc),
        0x318f => parse_arm_12687(ins, pc),
        0x3190 => parse_arm_12688(ins, pc),
        0x3191 => parse_arm_12689(ins, pc),
        0x3192 => parse_arm_12690(ins, pc),
        0x3193 => parse_arm_12691(ins, pc),
        0x3194 => parse_arm_12692(ins, pc),
        0x3195 => parse_arm_12693(ins, pc),
        0x3196 => parse_arm_12694(ins, pc),
        0x3197 => parse_arm_12695(ins, pc),
        0x3198 => parse_arm_12696(ins, pc),
        0x3199 => parse_arm_12697(ins, pc),
        0x319a => parse_arm_12698(ins, pc),
        0x319b => parse_arm_12699(ins, pc),
        0x319c => parse_arm_12700(ins, pc),
        0x319d => parse_arm_12701(ins, pc),
        0x319e => parse_arm_12702(ins, pc),
        0x319f => parse_arm_12703(ins, pc),
        0x31a0 => parse_arm_12704(ins, pc),
        0x31a1 => parse_arm_12705(ins, pc),
        0x31a2 => parse_arm_12706(ins, pc),
        0x31a3 => parse_arm_12707(ins, pc),
        0x31a4 => parse_arm_12708(ins, pc),
        0x31a5 => parse_arm_12709(ins, pc),
        0x31a6 => parse_arm_12710(ins, pc),
        0x31a7 => parse_arm_12711(ins, pc),
        0x31a8 => parse_arm_12712(ins, pc),
        0x31a9 => parse_arm_12713(ins, pc),
        0x31aa => parse_arm_12714(ins, pc),
        0x31ab => parse_arm_12715(ins, pc),
        0x31ac => parse_arm_12716(ins, pc),
        0x31ad => parse_arm_12717(ins, pc),
        0x31ae => parse_arm_12718(ins, pc),
        0x31af => parse_arm_12719(ins, pc),
        0x31b0 => parse_arm_12720(ins, pc),
        0x31b1 => parse_arm_12721(ins, pc),
        0x31b2 => parse_arm_12722(ins, pc),
        0x31b3 => parse_arm_12723(ins, pc),
        0x31b4 => parse_arm_12724(ins, pc),
        0x31b5 => parse_arm_12725(ins, pc),
        0x31b6 => parse_arm_12726(ins, pc),
        0x31b7 => parse_arm_12727(ins, pc),
        0x31b8 => parse_arm_12728(ins, pc),
        0x31b9 => parse_arm_12729(ins, pc),
        0x31ba => parse_arm_12730(ins, pc),
        0x31bb => parse_arm_12731(ins, pc),
        0x31bc => parse_arm_12732(ins, pc),
        0x31bd => parse_arm_12733(ins, pc),
        0x31be => parse_arm_12734(ins, pc),
        0x31bf => parse_arm_12735(ins, pc),
        0x31c0 => parse_arm_12736(ins, pc),
        0x31c1 => parse_arm_12737(ins, pc),
        0x31c2 => parse_arm_12738(ins, pc),
        0x31c3 => parse_arm_12739(ins, pc),
        0x31c4 => parse_arm_12740(ins, pc),
        0x31c5 => parse_arm_12741(ins, pc),
        0x31c6 => parse_arm_12742(ins, pc),
        0x31c7 => parse_arm_12743(ins, pc),
        0x31c8 => parse_arm_12744(ins, pc),
        0x31c9 => parse_arm_12745(ins, pc),
        0x31ca => parse_arm_12746(ins, pc),
        0x31cb => parse_arm_12747(ins, pc),
        0x31cc => parse_arm_12748(ins, pc),
        0x31cd => parse_arm_12749(ins, pc),
        0x31ce => parse_arm_12750(ins, pc),
        0x31cf => parse_arm_12751(ins, pc),
        0x31d0 => parse_arm_12752(ins, pc),
        0x31d1 => parse_arm_12753(ins, pc),
        0x31d2 => parse_arm_12754(ins, pc),
        0x31d3 => parse_arm_12755(ins, pc),
        0x31d4 => parse_arm_12756(ins, pc),
        0x31d5 => parse_arm_12757(ins, pc),
        0x31d6 => parse_arm_12758(ins, pc),
        0x31d7 => parse_arm_12759(ins, pc),
        0x31d8 => parse_arm_12760(ins, pc),
        0x31d9 => parse_arm_12761(ins, pc),
        0x31da => parse_arm_12762(ins, pc),
        0x31db => parse_arm_12763(ins, pc),
        0x31dc => parse_arm_12764(ins, pc),
        0x31dd => parse_arm_12765(ins, pc),
        0x31de => parse_arm_12766(ins, pc),
        0x31df => parse_arm_12767(ins, pc),
        0x31e0 => parse_arm_12768(ins, pc),
        0x31e1 => parse_arm_12769(ins, pc),
        0x31e2 => parse_arm_12770(ins, pc),
        0x31e3 => parse_arm_12771(ins, pc),
        0x31e4 => parse_arm_12772(ins, pc),
        0x31e5 => parse_arm_12773(ins, pc),
        0x31e6 => parse_arm_12774(ins, pc),
        0x31e7 => parse_arm_12775(ins, pc),
        0x31e8 => parse_arm_12776(ins, pc),
        0x31e9 => parse_arm_12777(ins, pc),
        0x31ea => parse_arm_12778(ins, pc),
        0x31eb => parse_arm_12779(ins, pc),
        0x31ec => parse_arm_12780(ins, pc),
        0x31ed => parse_arm_12781(ins, pc),
        0x31ee => parse_arm_12782(ins, pc),
        0x31ef => parse_arm_12783(ins, pc),
        0x31f0 => parse_arm_12784(ins, pc),
        0x31f1 => parse_arm_12785(ins, pc),
        0x31f2 => parse_arm_12786(ins, pc),
        0x31f3 => parse_arm_12787(ins, pc),
        0x31f4 => parse_arm_12788(ins, pc),
        0x31f5 => parse_arm_12789(ins, pc),
        0x31f6 => parse_arm_12790(ins, pc),
        0x31f7 => parse_arm_12791(ins, pc),
        0x31f8 => parse_arm_12792(ins, pc),
        0x31f9 => parse_arm_12793(ins, pc),
        0x31fa => parse_arm_12794(ins, pc),
        0x31fb => parse_arm_12795(ins, pc),
        0x31fc => parse_arm_12796(ins, pc),
        0x31fd => parse_arm_12797(ins, pc),
        0x31fe => parse_arm_12798(ins, pc),
        0x31ff => parse_arm_12799(ins, pc),
        0x3200 => parse_arm_12800(ins, pc),
        0x3201 => parse_arm_12801(ins, pc),
        0x3202 => parse_arm_12802(ins, pc),
        0x3203 => parse_arm_12803(ins, pc),
        0x3204 => parse_arm_12804(ins, pc),
        0x3205 => parse_arm_12805(ins, pc),
        0x3206 => parse_arm_12806(ins, pc),
        0x3207 => parse_arm_12807(ins, pc),
        0x3208 => parse_arm_12808(ins, pc),
        0x3209 => parse_arm_12809(ins, pc),
        0x320a => parse_arm_12810(ins, pc),
        0x320b => parse_arm_12811(ins, pc),
        0x320c => parse_arm_12812(ins, pc),
        0x320d => parse_arm_12813(ins, pc),
        0x320e => parse_arm_12814(ins, pc),
        0x320f => parse_arm_12815(ins, pc),
        0x3210 => parse_arm_12816(ins, pc),
        0x3211 => parse_arm_12817(ins, pc),
        0x3212 => parse_arm_12818(ins, pc),
        0x3213 => parse_arm_12819(ins, pc),
        0x3214 => parse_arm_12820(ins, pc),
        0x3215 => parse_arm_12821(ins, pc),
        0x3216 => parse_arm_12822(ins, pc),
        0x3217 => parse_arm_12823(ins, pc),
        0x3218 => parse_arm_12824(ins, pc),
        0x3219 => parse_arm_12825(ins, pc),
        0x321a => parse_arm_12826(ins, pc),
        0x321b => parse_arm_12827(ins, pc),
        0x321c => parse_arm_12828(ins, pc),
        0x321d => parse_arm_12829(ins, pc),
        0x321e => parse_arm_12830(ins, pc),
        0x321f => parse_arm_12831(ins, pc),
        0x3220 => parse_arm_12832(ins, pc),
        0x3221 => parse_arm_12833(ins, pc),
        0x3222 => parse_arm_12834(ins, pc),
        0x3223 => parse_arm_12835(ins, pc),
        0x3224 => parse_arm_12836(ins, pc),
        0x3225 => parse_arm_12837(ins, pc),
        0x3226 => parse_arm_12838(ins, pc),
        0x3227 => parse_arm_12839(ins, pc),
        0x3228 => parse_arm_12840(ins, pc),
        0x3229 => parse_arm_12841(ins, pc),
        0x322a => parse_arm_12842(ins, pc),
        0x322b => parse_arm_12843(ins, pc),
        0x322c => parse_arm_12844(ins, pc),
        0x322d => parse_arm_12845(ins, pc),
        0x322e => parse_arm_12846(ins, pc),
        0x322f => parse_arm_12847(ins, pc),
        0x3230 => parse_arm_12848(ins, pc),
        0x3231 => parse_arm_12849(ins, pc),
        0x3232 => parse_arm_12850(ins, pc),
        0x3233 => parse_arm_12851(ins, pc),
        0x3234 => parse_arm_12852(ins, pc),
        0x3235 => parse_arm_12853(ins, pc),
        0x3236 => parse_arm_12854(ins, pc),
        0x3237 => parse_arm_12855(ins, pc),
        0x3238 => parse_arm_12856(ins, pc),
        0x3239 => parse_arm_12857(ins, pc),
        0x323a => parse_arm_12858(ins, pc),
        0x323b => parse_arm_12859(ins, pc),
        0x323c => parse_arm_12860(ins, pc),
        0x323d => parse_arm_12861(ins, pc),
        0x323e => parse_arm_12862(ins, pc),
        0x323f => parse_arm_12863(ins, pc),
        0x3240 => parse_arm_12864(ins, pc),
        0x3241 => parse_arm_12865(ins, pc),
        0x3242 => parse_arm_12866(ins, pc),
        0x3243 => parse_arm_12867(ins, pc),
        0x3244 => parse_arm_12868(ins, pc),
        0x3245 => parse_arm_12869(ins, pc),
        0x3246 => parse_arm_12870(ins, pc),
        0x3247 => parse_arm_12871(ins, pc),
        0x3248 => parse_arm_12872(ins, pc),
        0x3249 => parse_arm_12873(ins, pc),
        0x324a => parse_arm_12874(ins, pc),
        0x324b => parse_arm_12875(ins, pc),
        0x324c => parse_arm_12876(ins, pc),
        0x324d => parse_arm_12877(ins, pc),
        0x324e => parse_arm_12878(ins, pc),
        0x324f => parse_arm_12879(ins, pc),
        0x3250 => parse_arm_12880(ins, pc),
        0x3251 => parse_arm_12881(ins, pc),
        0x3252 => parse_arm_12882(ins, pc),
        0x3253 => parse_arm_12883(ins, pc),
        0x3254 => parse_arm_12884(ins, pc),
        0x3255 => parse_arm_12885(ins, pc),
        0x3256 => parse_arm_12886(ins, pc),
        0x3257 => parse_arm_12887(ins, pc),
        0x3258 => parse_arm_12888(ins, pc),
        0x3259 => parse_arm_12889(ins, pc),
        0x325a => parse_arm_12890(ins, pc),
        0x325b => parse_arm_12891(ins, pc),
        0x325c => parse_arm_12892(ins, pc),
        0x325d => parse_arm_12893(ins, pc),
        0x325e => parse_arm_12894(ins, pc),
        0x325f => parse_arm_12895(ins, pc),
        0x3260 => parse_arm_12896(ins, pc),
        0x3261 => parse_arm_12897(ins, pc),
        0x3262 => parse_arm_12898(ins, pc),
        0x3263 => parse_arm_12899(ins, pc),
        0x3264 => parse_arm_12900(ins, pc),
        0x3265 => parse_arm_12901(ins, pc),
        0x3266 => parse_arm_12902(ins, pc),
        0x3267 => parse_arm_12903(ins, pc),
        0x3268 => parse_arm_12904(ins, pc),
        0x3269 => parse_arm_12905(ins, pc),
        0x326a => parse_arm_12906(ins, pc),
        0x326b => parse_arm_12907(ins, pc),
        0x326c => parse_arm_12908(ins, pc),
        0x326d => parse_arm_12909(ins, pc),
        0x326e => parse_arm_12910(ins, pc),
        0x326f => parse_arm_12911(ins, pc),
        0x3270 => parse_arm_12912(ins, pc),
        0x3271 => parse_arm_12913(ins, pc),
        0x3272 => parse_arm_12914(ins, pc),
        0x3273 => parse_arm_12915(ins, pc),
        0x3274 => parse_arm_12916(ins, pc),
        0x3275 => parse_arm_12917(ins, pc),
        0x3276 => parse_arm_12918(ins, pc),
        0x3277 => parse_arm_12919(ins, pc),
        0x3278 => parse_arm_12920(ins, pc),
        0x3279 => parse_arm_12921(ins, pc),
        0x327a => parse_arm_12922(ins, pc),
        0x327b => parse_arm_12923(ins, pc),
        0x327c => parse_arm_12924(ins, pc),
        0x327d => parse_arm_12925(ins, pc),
        0x327e => parse_arm_12926(ins, pc),
        0x327f => parse_arm_12927(ins, pc),
        0x3280 => parse_arm_12928(ins, pc),
        0x3281 => parse_arm_12929(ins, pc),
        0x3282 => parse_arm_12930(ins, pc),
        0x3283 => parse_arm_12931(ins, pc),
        0x3284 => parse_arm_12932(ins, pc),
        0x3285 => parse_arm_12933(ins, pc),
        0x3286 => parse_arm_12934(ins, pc),
        0x3287 => parse_arm_12935(ins, pc),
        0x3288 => parse_arm_12936(ins, pc),
        0x3289 => parse_arm_12937(ins, pc),
        0x328a => parse_arm_12938(ins, pc),
        0x328b => parse_arm_12939(ins, pc),
        0x328c => parse_arm_12940(ins, pc),
        0x328d => parse_arm_12941(ins, pc),
        0x328e => parse_arm_12942(ins, pc),
        0x328f => parse_arm_12943(ins, pc),
        0x3290 => parse_arm_12944(ins, pc),
        0x3291 => parse_arm_12945(ins, pc),
        0x3292 => parse_arm_12946(ins, pc),
        0x3293 => parse_arm_12947(ins, pc),
        0x3294 => parse_arm_12948(ins, pc),
        0x3295 => parse_arm_12949(ins, pc),
        0x3296 => parse_arm_12950(ins, pc),
        0x3297 => parse_arm_12951(ins, pc),
        0x3298 => parse_arm_12952(ins, pc),
        0x3299 => parse_arm_12953(ins, pc),
        0x329a => parse_arm_12954(ins, pc),
        0x329b => parse_arm_12955(ins, pc),
        0x329c => parse_arm_12956(ins, pc),
        0x329d => parse_arm_12957(ins, pc),
        0x329e => parse_arm_12958(ins, pc),
        0x329f => parse_arm_12959(ins, pc),
        0x32a0 => parse_arm_12960(ins, pc),
        0x32a1 => parse_arm_12961(ins, pc),
        0x32a2 => parse_arm_12962(ins, pc),
        0x32a3 => parse_arm_12963(ins, pc),
        0x32a4 => parse_arm_12964(ins, pc),
        0x32a5 => parse_arm_12965(ins, pc),
        0x32a6 => parse_arm_12966(ins, pc),
        0x32a7 => parse_arm_12967(ins, pc),
        0x32a8 => parse_arm_12968(ins, pc),
        0x32a9 => parse_arm_12969(ins, pc),
        0x32aa => parse_arm_12970(ins, pc),
        0x32ab => parse_arm_12971(ins, pc),
        0x32ac => parse_arm_12972(ins, pc),
        0x32ad => parse_arm_12973(ins, pc),
        0x32ae => parse_arm_12974(ins, pc),
        0x32af => parse_arm_12975(ins, pc),
        0x32b0 => parse_arm_12976(ins, pc),
        0x32b1 => parse_arm_12977(ins, pc),
        0x32b2 => parse_arm_12978(ins, pc),
        0x32b3 => parse_arm_12979(ins, pc),
        0x32b4 => parse_arm_12980(ins, pc),
        0x32b5 => parse_arm_12981(ins, pc),
        0x32b6 => parse_arm_12982(ins, pc),
        0x32b7 => parse_arm_12983(ins, pc),
        0x32b8 => parse_arm_12984(ins, pc),
        0x32b9 => parse_arm_12985(ins, pc),
        0x32ba => parse_arm_12986(ins, pc),
        0x32bb => parse_arm_12987(ins, pc),
        0x32bc => parse_arm_12988(ins, pc),
        0x32bd => parse_arm_12989(ins, pc),
        0x32be => parse_arm_12990(ins, pc),
        0x32bf => parse_arm_12991(ins, pc),
        0x32c0 => parse_arm_12992(ins, pc),
        0x32c1 => parse_arm_12993(ins, pc),
        0x32c2 => parse_arm_12994(ins, pc),
        0x32c3 => parse_arm_12995(ins, pc),
        0x32c4 => parse_arm_12996(ins, pc),
        0x32c5 => parse_arm_12997(ins, pc),
        0x32c6 => parse_arm_12998(ins, pc),
        0x32c7 => parse_arm_12999(ins, pc),
        0x32c8 => parse_arm_13000(ins, pc),
        0x32c9 => parse_arm_13001(ins, pc),
        0x32ca => parse_arm_13002(ins, pc),
        0x32cb => parse_arm_13003(ins, pc),
        0x32cc => parse_arm_13004(ins, pc),
        0x32cd => parse_arm_13005(ins, pc),
        0x32ce => parse_arm_13006(ins, pc),
        0x32cf => parse_arm_13007(ins, pc),
        0x32d0 => parse_arm_13008(ins, pc),
        0x32d1 => parse_arm_13009(ins, pc),
        0x32d2 => parse_arm_13010(ins, pc),
        0x32d3 => parse_arm_13011(ins, pc),
        0x32d4 => parse_arm_13012(ins, pc),
        0x32d5 => parse_arm_13013(ins, pc),
        0x32d6 => parse_arm_13014(ins, pc),
        0x32d7 => parse_arm_13015(ins, pc),
        0x32d8 => parse_arm_13016(ins, pc),
        0x32d9 => parse_arm_13017(ins, pc),
        0x32da => parse_arm_13018(ins, pc),
        0x32db => parse_arm_13019(ins, pc),
        0x32dc => parse_arm_13020(ins, pc),
        0x32dd => parse_arm_13021(ins, pc),
        0x32de => parse_arm_13022(ins, pc),
        0x32df => parse_arm_13023(ins, pc),
        0x32e0 => parse_arm_13024(ins, pc),
        0x32e1 => parse_arm_13025(ins, pc),
        0x32e2 => parse_arm_13026(ins, pc),
        0x32e3 => parse_arm_13027(ins, pc),
        0x32e4 => parse_arm_13028(ins, pc),
        0x32e5 => parse_arm_13029(ins, pc),
        0x32e6 => parse_arm_13030(ins, pc),
        0x32e7 => parse_arm_13031(ins, pc),
        0x32e8 => parse_arm_13032(ins, pc),
        0x32e9 => parse_arm_13033(ins, pc),
        0x32ea => parse_arm_13034(ins, pc),
        0x32eb => parse_arm_13035(ins, pc),
        0x32ec => parse_arm_13036(ins, pc),
        0x32ed => parse_arm_13037(ins, pc),
        0x32ee => parse_arm_13038(ins, pc),
        0x32ef => parse_arm_13039(ins, pc),
        0x32f0 => parse_arm_13040(ins, pc),
        0x32f1 => parse_arm_13041(ins, pc),
        0x32f2 => parse_arm_13042(ins, pc),
        0x32f3 => parse_arm_13043(ins, pc),
        0x32f4 => parse_arm_13044(ins, pc),
        0x32f5 => parse_arm_13045(ins, pc),
        0x32f6 => parse_arm_13046(ins, pc),
        0x32f7 => parse_arm_13047(ins, pc),
        0x32f8 => parse_arm_13048(ins, pc),
        0x32f9 => parse_arm_13049(ins, pc),
        0x32fa => parse_arm_13050(ins, pc),
        0x32fb => parse_arm_13051(ins, pc),
        0x32fc => parse_arm_13052(ins, pc),
        0x32fd => parse_arm_13053(ins, pc),
        0x32fe => parse_arm_13054(ins, pc),
        0x32ff => parse_arm_13055(ins, pc),
        0x3300 => parse_arm_13056(ins, pc),
        0x3301 => parse_arm_13057(ins, pc),
        0x3302 => parse_arm_13058(ins, pc),
        0x3303 => parse_arm_13059(ins, pc),
        0x3304 => parse_arm_13060(ins, pc),
        0x3305 => parse_arm_13061(ins, pc),
        0x3306 => parse_arm_13062(ins, pc),
        0x3307 => parse_arm_13063(ins, pc),
        0x3308 => parse_arm_13064(ins, pc),
        0x3309 => parse_arm_13065(ins, pc),
        0x330a => parse_arm_13066(ins, pc),
        0x330b => parse_arm_13067(ins, pc),
        0x330c => parse_arm_13068(ins, pc),
        0x330d => parse_arm_13069(ins, pc),
        0x330e => parse_arm_13070(ins, pc),
        0x330f => parse_arm_13071(ins, pc),
        0x3310 => parse_arm_13072(ins, pc),
        0x3311 => parse_arm_13073(ins, pc),
        0x3312 => parse_arm_13074(ins, pc),
        0x3313 => parse_arm_13075(ins, pc),
        0x3314 => parse_arm_13076(ins, pc),
        0x3315 => parse_arm_13077(ins, pc),
        0x3316 => parse_arm_13078(ins, pc),
        0x3317 => parse_arm_13079(ins, pc),
        0x3318 => parse_arm_13080(ins, pc),
        0x3319 => parse_arm_13081(ins, pc),
        0x331a => parse_arm_13082(ins, pc),
        0x331b => parse_arm_13083(ins, pc),
        0x331c => parse_arm_13084(ins, pc),
        0x331d => parse_arm_13085(ins, pc),
        0x331e => parse_arm_13086(ins, pc),
        0x331f => parse_arm_13087(ins, pc),
        0x3320 => parse_arm_13088(ins, pc),
        0x3321 => parse_arm_13089(ins, pc),
        0x3322 => parse_arm_13090(ins, pc),
        0x3323 => parse_arm_13091(ins, pc),
        0x3324 => parse_arm_13092(ins, pc),
        0x3325 => parse_arm_13093(ins, pc),
        0x3326 => parse_arm_13094(ins, pc),
        0x3327 => parse_arm_13095(ins, pc),
        0x3328 => parse_arm_13096(ins, pc),
        0x3329 => parse_arm_13097(ins, pc),
        0x332a => parse_arm_13098(ins, pc),
        0x332b => parse_arm_13099(ins, pc),
        0x332c => parse_arm_13100(ins, pc),
        0x332d => parse_arm_13101(ins, pc),
        0x332e => parse_arm_13102(ins, pc),
        0x332f => parse_arm_13103(ins, pc),
        0x3330 => parse_arm_13104(ins, pc),
        0x3331 => parse_arm_13105(ins, pc),
        0x3332 => parse_arm_13106(ins, pc),
        0x3333 => parse_arm_13107(ins, pc),
        0x3334 => parse_arm_13108(ins, pc),
        0x3335 => parse_arm_13109(ins, pc),
        0x3336 => parse_arm_13110(ins, pc),
        0x3337 => parse_arm_13111(ins, pc),
        0x3338 => parse_arm_13112(ins, pc),
        0x3339 => parse_arm_13113(ins, pc),
        0x333a => parse_arm_13114(ins, pc),
        0x333b => parse_arm_13115(ins, pc),
        0x333c => parse_arm_13116(ins, pc),
        0x333d => parse_arm_13117(ins, pc),
        0x333e => parse_arm_13118(ins, pc),
        0x333f => parse_arm_13119(ins, pc),
        0x3340 => parse_arm_13120(ins, pc),
        0x3341 => parse_arm_13121(ins, pc),
        0x3342 => parse_arm_13122(ins, pc),
        0x3343 => parse_arm_13123(ins, pc),
        0x3344 => parse_arm_13124(ins, pc),
        0x3345 => parse_arm_13125(ins, pc),
        0x3346 => parse_arm_13126(ins, pc),
        0x3347 => parse_arm_13127(ins, pc),
        0x3348 => parse_arm_13128(ins, pc),
        0x3349 => parse_arm_13129(ins, pc),
        0x334a => parse_arm_13130(ins, pc),
        0x334b => parse_arm_13131(ins, pc),
        0x334c => parse_arm_13132(ins, pc),
        0x334d => parse_arm_13133(ins, pc),
        0x334e => parse_arm_13134(ins, pc),
        0x334f => parse_arm_13135(ins, pc),
        0x3350 => parse_arm_13136(ins, pc),
        0x3351 => parse_arm_13137(ins, pc),
        0x3352 => parse_arm_13138(ins, pc),
        0x3353 => parse_arm_13139(ins, pc),
        0x3354 => parse_arm_13140(ins, pc),
        0x3355 => parse_arm_13141(ins, pc),
        0x3356 => parse_arm_13142(ins, pc),
        0x3357 => parse_arm_13143(ins, pc),
        0x3358 => parse_arm_13144(ins, pc),
        0x3359 => parse_arm_13145(ins, pc),
        0x335a => parse_arm_13146(ins, pc),
        0x335b => parse_arm_13147(ins, pc),
        0x335c => parse_arm_13148(ins, pc),
        0x335d => parse_arm_13149(ins, pc),
        0x335e => parse_arm_13150(ins, pc),
        0x335f => parse_arm_13151(ins, pc),
        0x3360 => parse_arm_13152(ins, pc),
        0x3361 => parse_arm_13153(ins, pc),
        0x3362 => parse_arm_13154(ins, pc),
        0x3363 => parse_arm_13155(ins, pc),
        0x3364 => parse_arm_13156(ins, pc),
        0x3365 => parse_arm_13157(ins, pc),
        0x3366 => parse_arm_13158(ins, pc),
        0x3367 => parse_arm_13159(ins, pc),
        0x3368 => parse_arm_13160(ins, pc),
        0x3369 => parse_arm_13161(ins, pc),
        0x336a => parse_arm_13162(ins, pc),
        0x336b => parse_arm_13163(ins, pc),
        0x336c => parse_arm_13164(ins, pc),
        0x336d => parse_arm_13165(ins, pc),
        0x336e => parse_arm_13166(ins, pc),
        0x336f => parse_arm_13167(ins, pc),
        0x3370 => parse_arm_13168(ins, pc),
        0x3371 => parse_arm_13169(ins, pc),
        0x3372 => parse_arm_13170(ins, pc),
        0x3373 => parse_arm_13171(ins, pc),
        0x3374 => parse_arm_13172(ins, pc),
        0x3375 => parse_arm_13173(ins, pc),
        0x3376 => parse_arm_13174(ins, pc),
        0x3377 => parse_arm_13175(ins, pc),
        0x3378 => parse_arm_13176(ins, pc),
        0x3379 => parse_arm_13177(ins, pc),
        0x337a => parse_arm_13178(ins, pc),
        0x337b => parse_arm_13179(ins, pc),
        0x337c => parse_arm_13180(ins, pc),
        0x337d => parse_arm_13181(ins, pc),
        0x337e => parse_arm_13182(ins, pc),
        0x337f => parse_arm_13183(ins, pc),
        0x3380 => parse_arm_13184(ins, pc),
        0x3381 => parse_arm_13185(ins, pc),
        0x3382 => parse_arm_13186(ins, pc),
        0x3383 => parse_arm_13187(ins, pc),
        0x3384 => parse_arm_13188(ins, pc),
        0x3385 => parse_arm_13189(ins, pc),
        0x3386 => parse_arm_13190(ins, pc),
        0x3387 => parse_arm_13191(ins, pc),
        0x3388 => parse_arm_13192(ins, pc),
        0x3389 => parse_arm_13193(ins, pc),
        0x338a => parse_arm_13194(ins, pc),
        0x338b => parse_arm_13195(ins, pc),
        0x338c => parse_arm_13196(ins, pc),
        0x338d => parse_arm_13197(ins, pc),
        0x338e => parse_arm_13198(ins, pc),
        0x338f => parse_arm_13199(ins, pc),
        0x3390 => parse_arm_13200(ins, pc),
        0x3391 => parse_arm_13201(ins, pc),
        0x3392 => parse_arm_13202(ins, pc),
        0x3393 => parse_arm_13203(ins, pc),
        0x3394 => parse_arm_13204(ins, pc),
        0x3395 => parse_arm_13205(ins, pc),
        0x3396 => parse_arm_13206(ins, pc),
        0x3397 => parse_arm_13207(ins, pc),
        0x3398 => parse_arm_13208(ins, pc),
        0x3399 => parse_arm_13209(ins, pc),
        0x339a => parse_arm_13210(ins, pc),
        0x339b => parse_arm_13211(ins, pc),
        0x339c => parse_arm_13212(ins, pc),
        0x339d => parse_arm_13213(ins, pc),
        0x339e => parse_arm_13214(ins, pc),
        0x339f => parse_arm_13215(ins, pc),
        0x33a0 => parse_arm_13216(ins, pc),
        0x33a1 => parse_arm_13217(ins, pc),
        0x33a2 => parse_arm_13218(ins, pc),
        0x33a3 => parse_arm_13219(ins, pc),
        0x33a4 => parse_arm_13220(ins, pc),
        0x33a5 => parse_arm_13221(ins, pc),
        0x33a6 => parse_arm_13222(ins, pc),
        0x33a7 => parse_arm_13223(ins, pc),
        0x33a8 => parse_arm_13224(ins, pc),
        0x33a9 => parse_arm_13225(ins, pc),
        0x33aa => parse_arm_13226(ins, pc),
        0x33ab => parse_arm_13227(ins, pc),
        0x33ac => parse_arm_13228(ins, pc),
        0x33ad => parse_arm_13229(ins, pc),
        0x33ae => parse_arm_13230(ins, pc),
        0x33af => parse_arm_13231(ins, pc),
        0x33b0 => parse_arm_13232(ins, pc),
        0x33b1 => parse_arm_13233(ins, pc),
        0x33b2 => parse_arm_13234(ins, pc),
        0x33b3 => parse_arm_13235(ins, pc),
        0x33b4 => parse_arm_13236(ins, pc),
        0x33b5 => parse_arm_13237(ins, pc),
        0x33b6 => parse_arm_13238(ins, pc),
        0x33b7 => parse_arm_13239(ins, pc),
        0x33b8 => parse_arm_13240(ins, pc),
        0x33b9 => parse_arm_13241(ins, pc),
        0x33ba => parse_arm_13242(ins, pc),
        0x33bb => parse_arm_13243(ins, pc),
        0x33bc => parse_arm_13244(ins, pc),
        0x33bd => parse_arm_13245(ins, pc),
        0x33be => parse_arm_13246(ins, pc),
        0x33bf => parse_arm_13247(ins, pc),
        0x33c0 => parse_arm_13248(ins, pc),
        0x33c1 => parse_arm_13249(ins, pc),
        0x33c2 => parse_arm_13250(ins, pc),
        0x33c3 => parse_arm_13251(ins, pc),
        0x33c4 => parse_arm_13252(ins, pc),
        0x33c5 => parse_arm_13253(ins, pc),
        0x33c6 => parse_arm_13254(ins, pc),
        0x33c7 => parse_arm_13255(ins, pc),
        0x33c8 => parse_arm_13256(ins, pc),
        0x33c9 => parse_arm_13257(ins, pc),
        0x33ca => parse_arm_13258(ins, pc),
        0x33cb => parse_arm_13259(ins, pc),
        0x33cc => parse_arm_13260(ins, pc),
        0x33cd => parse_arm_13261(ins, pc),
        0x33ce => parse_arm_13262(ins, pc),
        0x33cf => parse_arm_13263(ins, pc),
        0x33d0 => parse_arm_13264(ins, pc),
        0x33d1 => parse_arm_13265(ins, pc),
        0x33d2 => parse_arm_13266(ins, pc),
        0x33d3 => parse_arm_13267(ins, pc),
        0x33d4 => parse_arm_13268(ins, pc),
        0x33d5 => parse_arm_13269(ins, pc),
        0x33d6 => parse_arm_13270(ins, pc),
        0x33d7 => parse_arm_13271(ins, pc),
        0x33d8 => parse_arm_13272(ins, pc),
        0x33d9 => parse_arm_13273(ins, pc),
        0x33da => parse_arm_13274(ins, pc),
        0x33db => parse_arm_13275(ins, pc),
        0x33dc => parse_arm_13276(ins, pc),
        0x33dd => parse_arm_13277(ins, pc),
        0x33de => parse_arm_13278(ins, pc),
        0x33df => parse_arm_13279(ins, pc),
        0x33e0 => parse_arm_13280(ins, pc),
        0x33e1 => parse_arm_13281(ins, pc),
        0x33e2 => parse_arm_13282(ins, pc),
        0x33e3 => parse_arm_13283(ins, pc),
        0x33e4 => parse_arm_13284(ins, pc),
        0x33e5 => parse_arm_13285(ins, pc),
        0x33e6 => parse_arm_13286(ins, pc),
        0x33e7 => parse_arm_13287(ins, pc),
        0x33e8 => parse_arm_13288(ins, pc),
        0x33e9 => parse_arm_13289(ins, pc),
        0x33ea => parse_arm_13290(ins, pc),
        0x33eb => parse_arm_13291(ins, pc),
        0x33ec => parse_arm_13292(ins, pc),
        0x33ed => parse_arm_13293(ins, pc),
        0x33ee => parse_arm_13294(ins, pc),
        0x33ef => parse_arm_13295(ins, pc),
        0x33f0 => parse_arm_13296(ins, pc),
        0x33f1 => parse_arm_13297(ins, pc),
        0x33f2 => parse_arm_13298(ins, pc),
        0x33f3 => parse_arm_13299(ins, pc),
        0x33f4 => parse_arm_13300(ins, pc),
        0x33f5 => parse_arm_13301(ins, pc),
        0x33f6 => parse_arm_13302(ins, pc),
        0x33f7 => parse_arm_13303(ins, pc),
        0x33f8 => parse_arm_13304(ins, pc),
        0x33f9 => parse_arm_13305(ins, pc),
        0x33fa => parse_arm_13306(ins, pc),
        0x33fb => parse_arm_13307(ins, pc),
        0x33fc => parse_arm_13308(ins, pc),
        0x33fd => parse_arm_13309(ins, pc),
        0x33fe => parse_arm_13310(ins, pc),
        0x33ff => parse_arm_13311(ins, pc),
        0x3400 => parse_arm_13312(ins, pc),
        0x3401 => parse_arm_13313(ins, pc),
        0x3402 => parse_arm_13314(ins, pc),
        0x3403 => parse_arm_13315(ins, pc),
        0x3404 => parse_arm_13316(ins, pc),
        0x3405 => parse_arm_13317(ins, pc),
        0x3406 => parse_arm_13318(ins, pc),
        0x3407 => parse_arm_13319(ins, pc),
        0x3408 => parse_arm_13320(ins, pc),
        0x3409 => parse_arm_13321(ins, pc),
        0x340a => parse_arm_13322(ins, pc),
        0x340b => parse_arm_13323(ins, pc),
        0x340c => parse_arm_13324(ins, pc),
        0x340d => parse_arm_13325(ins, pc),
        0x340e => parse_arm_13326(ins, pc),
        0x340f => parse_arm_13327(ins, pc),
        0x3410 => parse_arm_13328(ins, pc),
        0x3411 => parse_arm_13329(ins, pc),
        0x3412 => parse_arm_13330(ins, pc),
        0x3413 => parse_arm_13331(ins, pc),
        0x3414 => parse_arm_13332(ins, pc),
        0x3415 => parse_arm_13333(ins, pc),
        0x3416 => parse_arm_13334(ins, pc),
        0x3417 => parse_arm_13335(ins, pc),
        0x3418 => parse_arm_13336(ins, pc),
        0x3419 => parse_arm_13337(ins, pc),
        0x341a => parse_arm_13338(ins, pc),
        0x341b => parse_arm_13339(ins, pc),
        0x341c => parse_arm_13340(ins, pc),
        0x341d => parse_arm_13341(ins, pc),
        0x341e => parse_arm_13342(ins, pc),
        0x341f => parse_arm_13343(ins, pc),
        0x3420 => parse_arm_13344(ins, pc),
        0x3421 => parse_arm_13345(ins, pc),
        0x3422 => parse_arm_13346(ins, pc),
        0x3423 => parse_arm_13347(ins, pc),
        0x3424 => parse_arm_13348(ins, pc),
        0x3425 => parse_arm_13349(ins, pc),
        0x3426 => parse_arm_13350(ins, pc),
        0x3427 => parse_arm_13351(ins, pc),
        0x3428 => parse_arm_13352(ins, pc),
        0x3429 => parse_arm_13353(ins, pc),
        0x342a => parse_arm_13354(ins, pc),
        0x342b => parse_arm_13355(ins, pc),
        0x342c => parse_arm_13356(ins, pc),
        0x342d => parse_arm_13357(ins, pc),
        0x342e => parse_arm_13358(ins, pc),
        0x342f => parse_arm_13359(ins, pc),
        0x3430 => parse_arm_13360(ins, pc),
        0x3431 => parse_arm_13361(ins, pc),
        0x3432 => parse_arm_13362(ins, pc),
        0x3433 => parse_arm_13363(ins, pc),
        0x3434 => parse_arm_13364(ins, pc),
        0x3435 => parse_arm_13365(ins, pc),
        0x3436 => parse_arm_13366(ins, pc),
        0x3437 => parse_arm_13367(ins, pc),
        0x3438 => parse_arm_13368(ins, pc),
        0x3439 => parse_arm_13369(ins, pc),
        0x343a => parse_arm_13370(ins, pc),
        0x343b => parse_arm_13371(ins, pc),
        0x343c => parse_arm_13372(ins, pc),
        0x343d => parse_arm_13373(ins, pc),
        0x343e => parse_arm_13374(ins, pc),
        0x343f => parse_arm_13375(ins, pc),
        0x3440 => parse_arm_13376(ins, pc),
        0x3441 => parse_arm_13377(ins, pc),
        0x3442 => parse_arm_13378(ins, pc),
        0x3443 => parse_arm_13379(ins, pc),
        0x3444 => parse_arm_13380(ins, pc),
        0x3445 => parse_arm_13381(ins, pc),
        0x3446 => parse_arm_13382(ins, pc),
        0x3447 => parse_arm_13383(ins, pc),
        0x3448 => parse_arm_13384(ins, pc),
        0x3449 => parse_arm_13385(ins, pc),
        0x344a => parse_arm_13386(ins, pc),
        0x344b => parse_arm_13387(ins, pc),
        0x344c => parse_arm_13388(ins, pc),
        0x344d => parse_arm_13389(ins, pc),
        0x344e => parse_arm_13390(ins, pc),
        0x344f => parse_arm_13391(ins, pc),
        0x3450 => parse_arm_13392(ins, pc),
        0x3451 => parse_arm_13393(ins, pc),
        0x3452 => parse_arm_13394(ins, pc),
        0x3453 => parse_arm_13395(ins, pc),
        0x3454 => parse_arm_13396(ins, pc),
        0x3455 => parse_arm_13397(ins, pc),
        0x3456 => parse_arm_13398(ins, pc),
        0x3457 => parse_arm_13399(ins, pc),
        0x3458 => parse_arm_13400(ins, pc),
        0x3459 => parse_arm_13401(ins, pc),
        0x345a => parse_arm_13402(ins, pc),
        0x345b => parse_arm_13403(ins, pc),
        0x345c => parse_arm_13404(ins, pc),
        0x345d => parse_arm_13405(ins, pc),
        0x345e => parse_arm_13406(ins, pc),
        0x345f => parse_arm_13407(ins, pc),
        0x3460 => parse_arm_13408(ins, pc),
        0x3461 => parse_arm_13409(ins, pc),
        0x3462 => parse_arm_13410(ins, pc),
        0x3463 => parse_arm_13411(ins, pc),
        0x3464 => parse_arm_13412(ins, pc),
        0x3465 => parse_arm_13413(ins, pc),
        0x3466 => parse_arm_13414(ins, pc),
        0x3467 => parse_arm_13415(ins, pc),
        0x3468 => parse_arm_13416(ins, pc),
        0x3469 => parse_arm_13417(ins, pc),
        0x346a => parse_arm_13418(ins, pc),
        0x346b => parse_arm_13419(ins, pc),
        0x346c => parse_arm_13420(ins, pc),
        0x346d => parse_arm_13421(ins, pc),
        0x346e => parse_arm_13422(ins, pc),
        0x346f => parse_arm_13423(ins, pc),
        0x3470 => parse_arm_13424(ins, pc),
        0x3471 => parse_arm_13425(ins, pc),
        0x3472 => parse_arm_13426(ins, pc),
        0x3473 => parse_arm_13427(ins, pc),
        0x3474 => parse_arm_13428(ins, pc),
        0x3475 => parse_arm_13429(ins, pc),
        0x3476 => parse_arm_13430(ins, pc),
        0x3477 => parse_arm_13431(ins, pc),
        0x3478 => parse_arm_13432(ins, pc),
        0x3479 => parse_arm_13433(ins, pc),
        0x347a => parse_arm_13434(ins, pc),
        0x347b => parse_arm_13435(ins, pc),
        0x347c => parse_arm_13436(ins, pc),
        0x347d => parse_arm_13437(ins, pc),
        0x347e => parse_arm_13438(ins, pc),
        0x347f => parse_arm_13439(ins, pc),
        0x3480 => parse_arm_13440(ins, pc),
        0x3481 => parse_arm_13441(ins, pc),
        0x3482 => parse_arm_13442(ins, pc),
        0x3483 => parse_arm_13443(ins, pc),
        0x3484 => parse_arm_13444(ins, pc),
        0x3485 => parse_arm_13445(ins, pc),
        0x3486 => parse_arm_13446(ins, pc),
        0x3487 => parse_arm_13447(ins, pc),
        0x3488 => parse_arm_13448(ins, pc),
        0x3489 => parse_arm_13449(ins, pc),
        0x348a => parse_arm_13450(ins, pc),
        0x348b => parse_arm_13451(ins, pc),
        0x348c => parse_arm_13452(ins, pc),
        0x348d => parse_arm_13453(ins, pc),
        0x348e => parse_arm_13454(ins, pc),
        0x348f => parse_arm_13455(ins, pc),
        0x3490 => parse_arm_13456(ins, pc),
        0x3491 => parse_arm_13457(ins, pc),
        0x3492 => parse_arm_13458(ins, pc),
        0x3493 => parse_arm_13459(ins, pc),
        0x3494 => parse_arm_13460(ins, pc),
        0x3495 => parse_arm_13461(ins, pc),
        0x3496 => parse_arm_13462(ins, pc),
        0x3497 => parse_arm_13463(ins, pc),
        0x3498 => parse_arm_13464(ins, pc),
        0x3499 => parse_arm_13465(ins, pc),
        0x349a => parse_arm_13466(ins, pc),
        0x349b => parse_arm_13467(ins, pc),
        0x349c => parse_arm_13468(ins, pc),
        0x349d => parse_arm_13469(ins, pc),
        0x349e => parse_arm_13470(ins, pc),
        0x349f => parse_arm_13471(ins, pc),
        0x34a0 => parse_arm_13472(ins, pc),
        0x34a1 => parse_arm_13473(ins, pc),
        0x34a2 => parse_arm_13474(ins, pc),
        0x34a3 => parse_arm_13475(ins, pc),
        0x34a4 => parse_arm_13476(ins, pc),
        0x34a5 => parse_arm_13477(ins, pc),
        0x34a6 => parse_arm_13478(ins, pc),
        0x34a7 => parse_arm_13479(ins, pc),
        0x34a8 => parse_arm_13480(ins, pc),
        0x34a9 => parse_arm_13481(ins, pc),
        0x34aa => parse_arm_13482(ins, pc),
        0x34ab => parse_arm_13483(ins, pc),
        0x34ac => parse_arm_13484(ins, pc),
        0x34ad => parse_arm_13485(ins, pc),
        0x34ae => parse_arm_13486(ins, pc),
        0x34af => parse_arm_13487(ins, pc),
        0x34b0 => parse_arm_13488(ins, pc),
        0x34b1 => parse_arm_13489(ins, pc),
        0x34b2 => parse_arm_13490(ins, pc),
        0x34b3 => parse_arm_13491(ins, pc),
        0x34b4 => parse_arm_13492(ins, pc),
        0x34b5 => parse_arm_13493(ins, pc),
        0x34b6 => parse_arm_13494(ins, pc),
        0x34b7 => parse_arm_13495(ins, pc),
        0x34b8 => parse_arm_13496(ins, pc),
        0x34b9 => parse_arm_13497(ins, pc),
        0x34ba => parse_arm_13498(ins, pc),
        0x34bb => parse_arm_13499(ins, pc),
        0x34bc => parse_arm_13500(ins, pc),
        0x34bd => parse_arm_13501(ins, pc),
        0x34be => parse_arm_13502(ins, pc),
        0x34bf => parse_arm_13503(ins, pc),
        0x34c0 => parse_arm_13504(ins, pc),
        0x34c1 => parse_arm_13505(ins, pc),
        0x34c2 => parse_arm_13506(ins, pc),
        0x34c3 => parse_arm_13507(ins, pc),
        0x34c4 => parse_arm_13508(ins, pc),
        0x34c5 => parse_arm_13509(ins, pc),
        0x34c6 => parse_arm_13510(ins, pc),
        0x34c7 => parse_arm_13511(ins, pc),
        0x34c8 => parse_arm_13512(ins, pc),
        0x34c9 => parse_arm_13513(ins, pc),
        0x34ca => parse_arm_13514(ins, pc),
        0x34cb => parse_arm_13515(ins, pc),
        0x34cc => parse_arm_13516(ins, pc),
        0x34cd => parse_arm_13517(ins, pc),
        0x34ce => parse_arm_13518(ins, pc),
        0x34cf => parse_arm_13519(ins, pc),
        0x34d0 => parse_arm_13520(ins, pc),
        0x34d1 => parse_arm_13521(ins, pc),
        0x34d2 => parse_arm_13522(ins, pc),
        0x34d3 => parse_arm_13523(ins, pc),
        0x34d4 => parse_arm_13524(ins, pc),
        0x34d5 => parse_arm_13525(ins, pc),
        0x34d6 => parse_arm_13526(ins, pc),
        0x34d7 => parse_arm_13527(ins, pc),
        0x34d8 => parse_arm_13528(ins, pc),
        0x34d9 => parse_arm_13529(ins, pc),
        0x34da => parse_arm_13530(ins, pc),
        0x34db => parse_arm_13531(ins, pc),
        0x34dc => parse_arm_13532(ins, pc),
        0x34dd => parse_arm_13533(ins, pc),
        0x34de => parse_arm_13534(ins, pc),
        0x34df => parse_arm_13535(ins, pc),
        0x34e0 => parse_arm_13536(ins, pc),
        0x34e1 => parse_arm_13537(ins, pc),
        0x34e2 => parse_arm_13538(ins, pc),
        0x34e3 => parse_arm_13539(ins, pc),
        0x34e4 => parse_arm_13540(ins, pc),
        0x34e5 => parse_arm_13541(ins, pc),
        0x34e6 => parse_arm_13542(ins, pc),
        0x34e7 => parse_arm_13543(ins, pc),
        0x34e8 => parse_arm_13544(ins, pc),
        0x34e9 => parse_arm_13545(ins, pc),
        0x34ea => parse_arm_13546(ins, pc),
        0x34eb => parse_arm_13547(ins, pc),
        0x34ec => parse_arm_13548(ins, pc),
        0x34ed => parse_arm_13549(ins, pc),
        0x34ee => parse_arm_13550(ins, pc),
        0x34ef => parse_arm_13551(ins, pc),
        0x34f0 => parse_arm_13552(ins, pc),
        0x34f1 => parse_arm_13553(ins, pc),
        0x34f2 => parse_arm_13554(ins, pc),
        0x34f3 => parse_arm_13555(ins, pc),
        0x34f4 => parse_arm_13556(ins, pc),
        0x34f5 => parse_arm_13557(ins, pc),
        0x34f6 => parse_arm_13558(ins, pc),
        0x34f7 => parse_arm_13559(ins, pc),
        0x34f8 => parse_arm_13560(ins, pc),
        0x34f9 => parse_arm_13561(ins, pc),
        0x34fa => parse_arm_13562(ins, pc),
        0x34fb => parse_arm_13563(ins, pc),
        0x34fc => parse_arm_13564(ins, pc),
        0x34fd => parse_arm_13565(ins, pc),
        0x34fe => parse_arm_13566(ins, pc),
        0x34ff => parse_arm_13567(ins, pc),
        0x3500 => parse_arm_13568(ins, pc),
        0x3501 => parse_arm_13569(ins, pc),
        0x3502 => parse_arm_13570(ins, pc),
        0x3503 => parse_arm_13571(ins, pc),
        0x3504 => parse_arm_13572(ins, pc),
        0x3505 => parse_arm_13573(ins, pc),
        0x3506 => parse_arm_13574(ins, pc),
        0x3507 => parse_arm_13575(ins, pc),
        0x3508 => parse_arm_13576(ins, pc),
        0x3509 => parse_arm_13577(ins, pc),
        0x350a => parse_arm_13578(ins, pc),
        0x350b => parse_arm_13579(ins, pc),
        0x350c => parse_arm_13580(ins, pc),
        0x350d => parse_arm_13581(ins, pc),
        0x350e => parse_arm_13582(ins, pc),
        0x350f => parse_arm_13583(ins, pc),
        0x3510 => parse_arm_13584(ins, pc),
        0x3511 => parse_arm_13585(ins, pc),
        0x3512 => parse_arm_13586(ins, pc),
        0x3513 => parse_arm_13587(ins, pc),
        0x3514 => parse_arm_13588(ins, pc),
        0x3515 => parse_arm_13589(ins, pc),
        0x3516 => parse_arm_13590(ins, pc),
        0x3517 => parse_arm_13591(ins, pc),
        0x3518 => parse_arm_13592(ins, pc),
        0x3519 => parse_arm_13593(ins, pc),
        0x351a => parse_arm_13594(ins, pc),
        0x351b => parse_arm_13595(ins, pc),
        0x351c => parse_arm_13596(ins, pc),
        0x351d => parse_arm_13597(ins, pc),
        0x351e => parse_arm_13598(ins, pc),
        0x351f => parse_arm_13599(ins, pc),
        0x3520 => parse_arm_13600(ins, pc),
        0x3521 => parse_arm_13601(ins, pc),
        0x3522 => parse_arm_13602(ins, pc),
        0x3523 => parse_arm_13603(ins, pc),
        0x3524 => parse_arm_13604(ins, pc),
        0x3525 => parse_arm_13605(ins, pc),
        0x3526 => parse_arm_13606(ins, pc),
        0x3527 => parse_arm_13607(ins, pc),
        0x3528 => parse_arm_13608(ins, pc),
        0x3529 => parse_arm_13609(ins, pc),
        0x352a => parse_arm_13610(ins, pc),
        0x352b => parse_arm_13611(ins, pc),
        0x352c => parse_arm_13612(ins, pc),
        0x352d => parse_arm_13613(ins, pc),
        0x352e => parse_arm_13614(ins, pc),
        0x352f => parse_arm_13615(ins, pc),
        0x3530 => parse_arm_13616(ins, pc),
        0x3531 => parse_arm_13617(ins, pc),
        0x3532 => parse_arm_13618(ins, pc),
        0x3533 => parse_arm_13619(ins, pc),
        0x3534 => parse_arm_13620(ins, pc),
        0x3535 => parse_arm_13621(ins, pc),
        0x3536 => parse_arm_13622(ins, pc),
        0x3537 => parse_arm_13623(ins, pc),
        0x3538 => parse_arm_13624(ins, pc),
        0x3539 => parse_arm_13625(ins, pc),
        0x353a => parse_arm_13626(ins, pc),
        0x353b => parse_arm_13627(ins, pc),
        0x353c => parse_arm_13628(ins, pc),
        0x353d => parse_arm_13629(ins, pc),
        0x353e => parse_arm_13630(ins, pc),
        0x353f => parse_arm_13631(ins, pc),
        0x3540 => parse_arm_13632(ins, pc),
        0x3541 => parse_arm_13633(ins, pc),
        0x3542 => parse_arm_13634(ins, pc),
        0x3543 => parse_arm_13635(ins, pc),
        0x3544 => parse_arm_13636(ins, pc),
        0x3545 => parse_arm_13637(ins, pc),
        0x3546 => parse_arm_13638(ins, pc),
        0x3547 => parse_arm_13639(ins, pc),
        0x3548 => parse_arm_13640(ins, pc),
        0x3549 => parse_arm_13641(ins, pc),
        0x354a => parse_arm_13642(ins, pc),
        0x354b => parse_arm_13643(ins, pc),
        0x354c => parse_arm_13644(ins, pc),
        0x354d => parse_arm_13645(ins, pc),
        0x354e => parse_arm_13646(ins, pc),
        0x354f => parse_arm_13647(ins, pc),
        0x3550 => parse_arm_13648(ins, pc),
        0x3551 => parse_arm_13649(ins, pc),
        0x3552 => parse_arm_13650(ins, pc),
        0x3553 => parse_arm_13651(ins, pc),
        0x3554 => parse_arm_13652(ins, pc),
        0x3555 => parse_arm_13653(ins, pc),
        0x3556 => parse_arm_13654(ins, pc),
        0x3557 => parse_arm_13655(ins, pc),
        0x3558 => parse_arm_13656(ins, pc),
        0x3559 => parse_arm_13657(ins, pc),
        0x355a => parse_arm_13658(ins, pc),
        0x355b => parse_arm_13659(ins, pc),
        0x355c => parse_arm_13660(ins, pc),
        0x355d => parse_arm_13661(ins, pc),
        0x355e => parse_arm_13662(ins, pc),
        0x355f => parse_arm_13663(ins, pc),
        0x3560 => parse_arm_13664(ins, pc),
        0x3561 => parse_arm_13665(ins, pc),
        0x3562 => parse_arm_13666(ins, pc),
        0x3563 => parse_arm_13667(ins, pc),
        0x3564 => parse_arm_13668(ins, pc),
        0x3565 => parse_arm_13669(ins, pc),
        0x3566 => parse_arm_13670(ins, pc),
        0x3567 => parse_arm_13671(ins, pc),
        0x3568 => parse_arm_13672(ins, pc),
        0x3569 => parse_arm_13673(ins, pc),
        0x356a => parse_arm_13674(ins, pc),
        0x356b => parse_arm_13675(ins, pc),
        0x356c => parse_arm_13676(ins, pc),
        0x356d => parse_arm_13677(ins, pc),
        0x356e => parse_arm_13678(ins, pc),
        0x356f => parse_arm_13679(ins, pc),
        0x3570 => parse_arm_13680(ins, pc),
        0x3571 => parse_arm_13681(ins, pc),
        0x3572 => parse_arm_13682(ins, pc),
        0x3573 => parse_arm_13683(ins, pc),
        0x3574 => parse_arm_13684(ins, pc),
        0x3575 => parse_arm_13685(ins, pc),
        0x3576 => parse_arm_13686(ins, pc),
        0x3577 => parse_arm_13687(ins, pc),
        0x3578 => parse_arm_13688(ins, pc),
        0x3579 => parse_arm_13689(ins, pc),
        0x357a => parse_arm_13690(ins, pc),
        0x357b => parse_arm_13691(ins, pc),
        0x357c => parse_arm_13692(ins, pc),
        0x357d => parse_arm_13693(ins, pc),
        0x357e => parse_arm_13694(ins, pc),
        0x357f => parse_arm_13695(ins, pc),
        0x3580 => parse_arm_13696(ins, pc),
        0x3581 => parse_arm_13697(ins, pc),
        0x3582 => parse_arm_13698(ins, pc),
        0x3583 => parse_arm_13699(ins, pc),
        0x3584 => parse_arm_13700(ins, pc),
        0x3585 => parse_arm_13701(ins, pc),
        0x3586 => parse_arm_13702(ins, pc),
        0x3587 => parse_arm_13703(ins, pc),
        0x3588 => parse_arm_13704(ins, pc),
        0x3589 => parse_arm_13705(ins, pc),
        0x358a => parse_arm_13706(ins, pc),
        0x358b => parse_arm_13707(ins, pc),
        0x358c => parse_arm_13708(ins, pc),
        0x358d => parse_arm_13709(ins, pc),
        0x358e => parse_arm_13710(ins, pc),
        0x358f => parse_arm_13711(ins, pc),
        0x3590 => parse_arm_13712(ins, pc),
        0x3591 => parse_arm_13713(ins, pc),
        0x3592 => parse_arm_13714(ins, pc),
        0x3593 => parse_arm_13715(ins, pc),
        0x3594 => parse_arm_13716(ins, pc),
        0x3595 => parse_arm_13717(ins, pc),
        0x3596 => parse_arm_13718(ins, pc),
        0x3597 => parse_arm_13719(ins, pc),
        0x3598 => parse_arm_13720(ins, pc),
        0x3599 => parse_arm_13721(ins, pc),
        0x359a => parse_arm_13722(ins, pc),
        0x359b => parse_arm_13723(ins, pc),
        0x359c => parse_arm_13724(ins, pc),
        0x359d => parse_arm_13725(ins, pc),
        0x359e => parse_arm_13726(ins, pc),
        0x359f => parse_arm_13727(ins, pc),
        0x35a0 => parse_arm_13728(ins, pc),
        0x35a1 => parse_arm_13729(ins, pc),
        0x35a2 => parse_arm_13730(ins, pc),
        0x35a3 => parse_arm_13731(ins, pc),
        0x35a4 => parse_arm_13732(ins, pc),
        0x35a5 => parse_arm_13733(ins, pc),
        0x35a6 => parse_arm_13734(ins, pc),
        0x35a7 => parse_arm_13735(ins, pc),
        0x35a8 => parse_arm_13736(ins, pc),
        0x35a9 => parse_arm_13737(ins, pc),
        0x35aa => parse_arm_13738(ins, pc),
        0x35ab => parse_arm_13739(ins, pc),
        0x35ac => parse_arm_13740(ins, pc),
        0x35ad => parse_arm_13741(ins, pc),
        0x35ae => parse_arm_13742(ins, pc),
        0x35af => parse_arm_13743(ins, pc),
        0x35b0 => parse_arm_13744(ins, pc),
        0x35b1 => parse_arm_13745(ins, pc),
        0x35b2 => parse_arm_13746(ins, pc),
        0x35b3 => parse_arm_13747(ins, pc),
        0x35b4 => parse_arm_13748(ins, pc),
        0x35b5 => parse_arm_13749(ins, pc),
        0x35b6 => parse_arm_13750(ins, pc),
        0x35b7 => parse_arm_13751(ins, pc),
        0x35b8 => parse_arm_13752(ins, pc),
        0x35b9 => parse_arm_13753(ins, pc),
        0x35ba => parse_arm_13754(ins, pc),
        0x35bb => parse_arm_13755(ins, pc),
        0x35bc => parse_arm_13756(ins, pc),
        0x35bd => parse_arm_13757(ins, pc),
        0x35be => parse_arm_13758(ins, pc),
        0x35bf => parse_arm_13759(ins, pc),
        0x35c0 => parse_arm_13760(ins, pc),
        0x35c1 => parse_arm_13761(ins, pc),
        0x35c2 => parse_arm_13762(ins, pc),
        0x35c3 => parse_arm_13763(ins, pc),
        0x35c4 => parse_arm_13764(ins, pc),
        0x35c5 => parse_arm_13765(ins, pc),
        0x35c6 => parse_arm_13766(ins, pc),
        0x35c7 => parse_arm_13767(ins, pc),
        0x35c8 => parse_arm_13768(ins, pc),
        0x35c9 => parse_arm_13769(ins, pc),
        0x35ca => parse_arm_13770(ins, pc),
        0x35cb => parse_arm_13771(ins, pc),
        0x35cc => parse_arm_13772(ins, pc),
        0x35cd => parse_arm_13773(ins, pc),
        0x35ce => parse_arm_13774(ins, pc),
        0x35cf => parse_arm_13775(ins, pc),
        0x35d0 => parse_arm_13776(ins, pc),
        0x35d1 => parse_arm_13777(ins, pc),
        0x35d2 => parse_arm_13778(ins, pc),
        0x35d3 => parse_arm_13779(ins, pc),
        0x35d4 => parse_arm_13780(ins, pc),
        0x35d5 => parse_arm_13781(ins, pc),
        0x35d6 => parse_arm_13782(ins, pc),
        0x35d7 => parse_arm_13783(ins, pc),
        0x35d8 => parse_arm_13784(ins, pc),
        0x35d9 => parse_arm_13785(ins, pc),
        0x35da => parse_arm_13786(ins, pc),
        0x35db => parse_arm_13787(ins, pc),
        0x35dc => parse_arm_13788(ins, pc),
        0x35dd => parse_arm_13789(ins, pc),
        0x35de => parse_arm_13790(ins, pc),
        0x35df => parse_arm_13791(ins, pc),
        0x35e0 => parse_arm_13792(ins, pc),
        0x35e1 => parse_arm_13793(ins, pc),
        0x35e2 => parse_arm_13794(ins, pc),
        0x35e3 => parse_arm_13795(ins, pc),
        0x35e4 => parse_arm_13796(ins, pc),
        0x35e5 => parse_arm_13797(ins, pc),
        0x35e6 => parse_arm_13798(ins, pc),
        0x35e7 => parse_arm_13799(ins, pc),
        0x35e8 => parse_arm_13800(ins, pc),
        0x35e9 => parse_arm_13801(ins, pc),
        0x35ea => parse_arm_13802(ins, pc),
        0x35eb => parse_arm_13803(ins, pc),
        0x35ec => parse_arm_13804(ins, pc),
        0x35ed => parse_arm_13805(ins, pc),
        0x35ee => parse_arm_13806(ins, pc),
        0x35ef => parse_arm_13807(ins, pc),
        0x35f0 => parse_arm_13808(ins, pc),
        0x35f1 => parse_arm_13809(ins, pc),
        0x35f2 => parse_arm_13810(ins, pc),
        0x35f3 => parse_arm_13811(ins, pc),
        0x35f4 => parse_arm_13812(ins, pc),
        0x35f5 => parse_arm_13813(ins, pc),
        0x35f6 => parse_arm_13814(ins, pc),
        0x35f7 => parse_arm_13815(ins, pc),
        0x35f8 => parse_arm_13816(ins, pc),
        0x35f9 => parse_arm_13817(ins, pc),
        0x35fa => parse_arm_13818(ins, pc),
        0x35fb => parse_arm_13819(ins, pc),
        0x35fc => parse_arm_13820(ins, pc),
        0x35fd => parse_arm_13821(ins, pc),
        0x35fe => parse_arm_13822(ins, pc),
        0x35ff => parse_arm_13823(ins, pc),
        0x3600 => parse_arm_13824(ins, pc),
        0x3601 => parse_arm_13825(ins, pc),
        0x3602 => parse_arm_13826(ins, pc),
        0x3603 => parse_arm_13827(ins, pc),
        0x3604 => parse_arm_13828(ins, pc),
        0x3605 => parse_arm_13829(ins, pc),
        0x3606 => parse_arm_13830(ins, pc),
        0x3607 => parse_arm_13831(ins, pc),
        0x3608 => parse_arm_13832(ins, pc),
        0x3609 => parse_arm_13833(ins, pc),
        0x360a => parse_arm_13834(ins, pc),
        0x360b => parse_arm_13835(ins, pc),
        0x360c => parse_arm_13836(ins, pc),
        0x360d => parse_arm_13837(ins, pc),
        0x360e => parse_arm_13838(ins, pc),
        0x360f => parse_arm_13839(ins, pc),
        0x3610 => parse_arm_13840(ins, pc),
        0x3611 => parse_arm_13841(ins, pc),
        0x3612 => parse_arm_13842(ins, pc),
        0x3613 => parse_arm_13843(ins, pc),
        0x3614 => parse_arm_13844(ins, pc),
        0x3615 => parse_arm_13845(ins, pc),
        0x3616 => parse_arm_13846(ins, pc),
        0x3617 => parse_arm_13847(ins, pc),
        0x3618 => parse_arm_13848(ins, pc),
        0x3619 => parse_arm_13849(ins, pc),
        0x361a => parse_arm_13850(ins, pc),
        0x361b => parse_arm_13851(ins, pc),
        0x361c => parse_arm_13852(ins, pc),
        0x361d => parse_arm_13853(ins, pc),
        0x361e => parse_arm_13854(ins, pc),
        0x361f => parse_arm_13855(ins, pc),
        0x3620 => parse_arm_13856(ins, pc),
        0x3621 => parse_arm_13857(ins, pc),
        0x3622 => parse_arm_13858(ins, pc),
        0x3623 => parse_arm_13859(ins, pc),
        0x3624 => parse_arm_13860(ins, pc),
        0x3625 => parse_arm_13861(ins, pc),
        0x3626 => parse_arm_13862(ins, pc),
        0x3627 => parse_arm_13863(ins, pc),
        0x3628 => parse_arm_13864(ins, pc),
        0x3629 => parse_arm_13865(ins, pc),
        0x362a => parse_arm_13866(ins, pc),
        0x362b => parse_arm_13867(ins, pc),
        0x362c => parse_arm_13868(ins, pc),
        0x362d => parse_arm_13869(ins, pc),
        0x362e => parse_arm_13870(ins, pc),
        0x362f => parse_arm_13871(ins, pc),
        0x3630 => parse_arm_13872(ins, pc),
        0x3631 => parse_arm_13873(ins, pc),
        0x3632 => parse_arm_13874(ins, pc),
        0x3633 => parse_arm_13875(ins, pc),
        0x3634 => parse_arm_13876(ins, pc),
        0x3635 => parse_arm_13877(ins, pc),
        0x3636 => parse_arm_13878(ins, pc),
        0x3637 => parse_arm_13879(ins, pc),
        0x3638 => parse_arm_13880(ins, pc),
        0x3639 => parse_arm_13881(ins, pc),
        0x363a => parse_arm_13882(ins, pc),
        0x363b => parse_arm_13883(ins, pc),
        0x363c => parse_arm_13884(ins, pc),
        0x363d => parse_arm_13885(ins, pc),
        0x363e => parse_arm_13886(ins, pc),
        0x363f => parse_arm_13887(ins, pc),
        0x3640 => parse_arm_13888(ins, pc),
        0x3641 => parse_arm_13889(ins, pc),
        0x3642 => parse_arm_13890(ins, pc),
        0x3643 => parse_arm_13891(ins, pc),
        0x3644 => parse_arm_13892(ins, pc),
        0x3645 => parse_arm_13893(ins, pc),
        0x3646 => parse_arm_13894(ins, pc),
        0x3647 => parse_arm_13895(ins, pc),
        0x3648 => parse_arm_13896(ins, pc),
        0x3649 => parse_arm_13897(ins, pc),
        0x364a => parse_arm_13898(ins, pc),
        0x364b => parse_arm_13899(ins, pc),
        0x364c => parse_arm_13900(ins, pc),
        0x364d => parse_arm_13901(ins, pc),
        0x364e => parse_arm_13902(ins, pc),
        0x364f => parse_arm_13903(ins, pc),
        0x3650 => parse_arm_13904(ins, pc),
        0x3651 => parse_arm_13905(ins, pc),
        0x3652 => parse_arm_13906(ins, pc),
        0x3653 => parse_arm_13907(ins, pc),
        0x3654 => parse_arm_13908(ins, pc),
        0x3655 => parse_arm_13909(ins, pc),
        0x3656 => parse_arm_13910(ins, pc),
        0x3657 => parse_arm_13911(ins, pc),
        0x3658 => parse_arm_13912(ins, pc),
        0x3659 => parse_arm_13913(ins, pc),
        0x365a => parse_arm_13914(ins, pc),
        0x365b => parse_arm_13915(ins, pc),
        0x365c => parse_arm_13916(ins, pc),
        0x365d => parse_arm_13917(ins, pc),
        0x365e => parse_arm_13918(ins, pc),
        0x365f => parse_arm_13919(ins, pc),
        0x3660 => parse_arm_13920(ins, pc),
        0x3661 => parse_arm_13921(ins, pc),
        0x3662 => parse_arm_13922(ins, pc),
        0x3663 => parse_arm_13923(ins, pc),
        0x3664 => parse_arm_13924(ins, pc),
        0x3665 => parse_arm_13925(ins, pc),
        0x3666 => parse_arm_13926(ins, pc),
        0x3667 => parse_arm_13927(ins, pc),
        0x3668 => parse_arm_13928(ins, pc),
        0x3669 => parse_arm_13929(ins, pc),
        0x366a => parse_arm_13930(ins, pc),
        0x366b => parse_arm_13931(ins, pc),
        0x366c => parse_arm_13932(ins, pc),
        0x366d => parse_arm_13933(ins, pc),
        0x366e => parse_arm_13934(ins, pc),
        0x366f => parse_arm_13935(ins, pc),
        0x3670 => parse_arm_13936(ins, pc),
        0x3671 => parse_arm_13937(ins, pc),
        0x3672 => parse_arm_13938(ins, pc),
        0x3673 => parse_arm_13939(ins, pc),
        0x3674 => parse_arm_13940(ins, pc),
        0x3675 => parse_arm_13941(ins, pc),
        0x3676 => parse_arm_13942(ins, pc),
        0x3677 => parse_arm_13943(ins, pc),
        0x3678 => parse_arm_13944(ins, pc),
        0x3679 => parse_arm_13945(ins, pc),
        0x367a => parse_arm_13946(ins, pc),
        0x367b => parse_arm_13947(ins, pc),
        0x367c => parse_arm_13948(ins, pc),
        0x367d => parse_arm_13949(ins, pc),
        0x367e => parse_arm_13950(ins, pc),
        0x367f => parse_arm_13951(ins, pc),
        0x3680 => parse_arm_13952(ins, pc),
        0x3681 => parse_arm_13953(ins, pc),
        0x3682 => parse_arm_13954(ins, pc),
        0x3683 => parse_arm_13955(ins, pc),
        0x3684 => parse_arm_13956(ins, pc),
        0x3685 => parse_arm_13957(ins, pc),
        0x3686 => parse_arm_13958(ins, pc),
        0x3687 => parse_arm_13959(ins, pc),
        0x3688 => parse_arm_13960(ins, pc),
        0x3689 => parse_arm_13961(ins, pc),
        0x368a => parse_arm_13962(ins, pc),
        0x368b => parse_arm_13963(ins, pc),
        0x368c => parse_arm_13964(ins, pc),
        0x368d => parse_arm_13965(ins, pc),
        0x368e => parse_arm_13966(ins, pc),
        0x368f => parse_arm_13967(ins, pc),
        0x3690 => parse_arm_13968(ins, pc),
        0x3691 => parse_arm_13969(ins, pc),
        0x3692 => parse_arm_13970(ins, pc),
        0x3693 => parse_arm_13971(ins, pc),
        0x3694 => parse_arm_13972(ins, pc),
        0x3695 => parse_arm_13973(ins, pc),
        0x3696 => parse_arm_13974(ins, pc),
        0x3697 => parse_arm_13975(ins, pc),
        0x3698 => parse_arm_13976(ins, pc),
        0x3699 => parse_arm_13977(ins, pc),
        0x369a => parse_arm_13978(ins, pc),
        0x369b => parse_arm_13979(ins, pc),
        0x369c => parse_arm_13980(ins, pc),
        0x369d => parse_arm_13981(ins, pc),
        0x369e => parse_arm_13982(ins, pc),
        0x369f => parse_arm_13983(ins, pc),
        0x36a0 => parse_arm_13984(ins, pc),
        0x36a1 => parse_arm_13985(ins, pc),
        0x36a2 => parse_arm_13986(ins, pc),
        0x36a3 => parse_arm_13987(ins, pc),
        0x36a4 => parse_arm_13988(ins, pc),
        0x36a5 => parse_arm_13989(ins, pc),
        0x36a6 => parse_arm_13990(ins, pc),
        0x36a7 => parse_arm_13991(ins, pc),
        0x36a8 => parse_arm_13992(ins, pc),
        0x36a9 => parse_arm_13993(ins, pc),
        0x36aa => parse_arm_13994(ins, pc),
        0x36ab => parse_arm_13995(ins, pc),
        0x36ac => parse_arm_13996(ins, pc),
        0x36ad => parse_arm_13997(ins, pc),
        0x36ae => parse_arm_13998(ins, pc),
        0x36af => parse_arm_13999(ins, pc),
        0x36b0 => parse_arm_14000(ins, pc),
        0x36b1 => parse_arm_14001(ins, pc),
        0x36b2 => parse_arm_14002(ins, pc),
        0x36b3 => parse_arm_14003(ins, pc),
        0x36b4 => parse_arm_14004(ins, pc),
        0x36b5 => parse_arm_14005(ins, pc),
        0x36b6 => parse_arm_14006(ins, pc),
        0x36b7 => parse_arm_14007(ins, pc),
        0x36b8 => parse_arm_14008(ins, pc),
        0x36b9 => parse_arm_14009(ins, pc),
        0x36ba => parse_arm_14010(ins, pc),
        0x36bb => parse_arm_14011(ins, pc),
        0x36bc => parse_arm_14012(ins, pc),
        0x36bd => parse_arm_14013(ins, pc),
        0x36be => parse_arm_14014(ins, pc),
        0x36bf => parse_arm_14015(ins, pc),
        0x36c0 => parse_arm_14016(ins, pc),
        0x36c1 => parse_arm_14017(ins, pc),
        0x36c2 => parse_arm_14018(ins, pc),
        0x36c3 => parse_arm_14019(ins, pc),
        0x36c4 => parse_arm_14020(ins, pc),
        0x36c5 => parse_arm_14021(ins, pc),
        0x36c6 => parse_arm_14022(ins, pc),
        0x36c7 => parse_arm_14023(ins, pc),
        0x36c8 => parse_arm_14024(ins, pc),
        0x36c9 => parse_arm_14025(ins, pc),
        0x36ca => parse_arm_14026(ins, pc),
        0x36cb => parse_arm_14027(ins, pc),
        0x36cc => parse_arm_14028(ins, pc),
        0x36cd => parse_arm_14029(ins, pc),
        0x36ce => parse_arm_14030(ins, pc),
        0x36cf => parse_arm_14031(ins, pc),
        0x36d0 => parse_arm_14032(ins, pc),
        0x36d1 => parse_arm_14033(ins, pc),
        0x36d2 => parse_arm_14034(ins, pc),
        0x36d3 => parse_arm_14035(ins, pc),
        0x36d4 => parse_arm_14036(ins, pc),
        0x36d5 => parse_arm_14037(ins, pc),
        0x36d6 => parse_arm_14038(ins, pc),
        0x36d7 => parse_arm_14039(ins, pc),
        0x36d8 => parse_arm_14040(ins, pc),
        0x36d9 => parse_arm_14041(ins, pc),
        0x36da => parse_arm_14042(ins, pc),
        0x36db => parse_arm_14043(ins, pc),
        0x36dc => parse_arm_14044(ins, pc),
        0x36dd => parse_arm_14045(ins, pc),
        0x36de => parse_arm_14046(ins, pc),
        0x36df => parse_arm_14047(ins, pc),
        0x36e0 => parse_arm_14048(ins, pc),
        0x36e1 => parse_arm_14049(ins, pc),
        0x36e2 => parse_arm_14050(ins, pc),
        0x36e3 => parse_arm_14051(ins, pc),
        0x36e4 => parse_arm_14052(ins, pc),
        0x36e5 => parse_arm_14053(ins, pc),
        0x36e6 => parse_arm_14054(ins, pc),
        0x36e7 => parse_arm_14055(ins, pc),
        0x36e8 => parse_arm_14056(ins, pc),
        0x36e9 => parse_arm_14057(ins, pc),
        0x36ea => parse_arm_14058(ins, pc),
        0x36eb => parse_arm_14059(ins, pc),
        0x36ec => parse_arm_14060(ins, pc),
        0x36ed => parse_arm_14061(ins, pc),
        0x36ee => parse_arm_14062(ins, pc),
        0x36ef => parse_arm_14063(ins, pc),
        0x36f0 => parse_arm_14064(ins, pc),
        0x36f1 => parse_arm_14065(ins, pc),
        0x36f2 => parse_arm_14066(ins, pc),
        0x36f3 => parse_arm_14067(ins, pc),
        0x36f4 => parse_arm_14068(ins, pc),
        0x36f5 => parse_arm_14069(ins, pc),
        0x36f6 => parse_arm_14070(ins, pc),
        0x36f7 => parse_arm_14071(ins, pc),
        0x36f8 => parse_arm_14072(ins, pc),
        0x36f9 => parse_arm_14073(ins, pc),
        0x36fa => parse_arm_14074(ins, pc),
        0x36fb => parse_arm_14075(ins, pc),
        0x36fc => parse_arm_14076(ins, pc),
        0x36fd => parse_arm_14077(ins, pc),
        0x36fe => parse_arm_14078(ins, pc),
        0x36ff => parse_arm_14079(ins, pc),
        0x3700 => parse_arm_14080(ins, pc),
        0x3701 => parse_arm_14081(ins, pc),
        0x3702 => parse_arm_14082(ins, pc),
        0x3703 => parse_arm_14083(ins, pc),
        0x3704 => parse_arm_14084(ins, pc),
        0x3705 => parse_arm_14085(ins, pc),
        0x3706 => parse_arm_14086(ins, pc),
        0x3707 => parse_arm_14087(ins, pc),
        0x3708 => parse_arm_14088(ins, pc),
        0x3709 => parse_arm_14089(ins, pc),
        0x370a => parse_arm_14090(ins, pc),
        0x370b => parse_arm_14091(ins, pc),
        0x370c => parse_arm_14092(ins, pc),
        0x370d => parse_arm_14093(ins, pc),
        0x370e => parse_arm_14094(ins, pc),
        0x370f => parse_arm_14095(ins, pc),
        0x3710 => parse_arm_14096(ins, pc),
        0x3711 => parse_arm_14097(ins, pc),
        0x3712 => parse_arm_14098(ins, pc),
        0x3713 => parse_arm_14099(ins, pc),
        0x3714 => parse_arm_14100(ins, pc),
        0x3715 => parse_arm_14101(ins, pc),
        0x3716 => parse_arm_14102(ins, pc),
        0x3717 => parse_arm_14103(ins, pc),
        0x3718 => parse_arm_14104(ins, pc),
        0x3719 => parse_arm_14105(ins, pc),
        0x371a => parse_arm_14106(ins, pc),
        0x371b => parse_arm_14107(ins, pc),
        0x371c => parse_arm_14108(ins, pc),
        0x371d => parse_arm_14109(ins, pc),
        0x371e => parse_arm_14110(ins, pc),
        0x371f => parse_arm_14111(ins, pc),
        0x3720 => parse_arm_14112(ins, pc),
        0x3721 => parse_arm_14113(ins, pc),
        0x3722 => parse_arm_14114(ins, pc),
        0x3723 => parse_arm_14115(ins, pc),
        0x3724 => parse_arm_14116(ins, pc),
        0x3725 => parse_arm_14117(ins, pc),
        0x3726 => parse_arm_14118(ins, pc),
        0x3727 => parse_arm_14119(ins, pc),
        0x3728 => parse_arm_14120(ins, pc),
        0x3729 => parse_arm_14121(ins, pc),
        0x372a => parse_arm_14122(ins, pc),
        0x372b => parse_arm_14123(ins, pc),
        0x372c => parse_arm_14124(ins, pc),
        0x372d => parse_arm_14125(ins, pc),
        0x372e => parse_arm_14126(ins, pc),
        0x372f => parse_arm_14127(ins, pc),
        0x3730 => parse_arm_14128(ins, pc),
        0x3731 => parse_arm_14129(ins, pc),
        0x3732 => parse_arm_14130(ins, pc),
        0x3733 => parse_arm_14131(ins, pc),
        0x3734 => parse_arm_14132(ins, pc),
        0x3735 => parse_arm_14133(ins, pc),
        0x3736 => parse_arm_14134(ins, pc),
        0x3737 => parse_arm_14135(ins, pc),
        0x3738 => parse_arm_14136(ins, pc),
        0x3739 => parse_arm_14137(ins, pc),
        0x373a => parse_arm_14138(ins, pc),
        0x373b => parse_arm_14139(ins, pc),
        0x373c => parse_arm_14140(ins, pc),
        0x373d => parse_arm_14141(ins, pc),
        0x373e => parse_arm_14142(ins, pc),
        0x373f => parse_arm_14143(ins, pc),
        0x3740 => parse_arm_14144(ins, pc),
        0x3741 => parse_arm_14145(ins, pc),
        0x3742 => parse_arm_14146(ins, pc),
        0x3743 => parse_arm_14147(ins, pc),
        0x3744 => parse_arm_14148(ins, pc),
        0x3745 => parse_arm_14149(ins, pc),
        0x3746 => parse_arm_14150(ins, pc),
        0x3747 => parse_arm_14151(ins, pc),
        0x3748 => parse_arm_14152(ins, pc),
        0x3749 => parse_arm_14153(ins, pc),
        0x374a => parse_arm_14154(ins, pc),
        0x374b => parse_arm_14155(ins, pc),
        0x374c => parse_arm_14156(ins, pc),
        0x374d => parse_arm_14157(ins, pc),
        0x374e => parse_arm_14158(ins, pc),
        0x374f => parse_arm_14159(ins, pc),
        0x3750 => parse_arm_14160(ins, pc),
        0x3751 => parse_arm_14161(ins, pc),
        0x3752 => parse_arm_14162(ins, pc),
        0x3753 => parse_arm_14163(ins, pc),
        0x3754 => parse_arm_14164(ins, pc),
        0x3755 => parse_arm_14165(ins, pc),
        0x3756 => parse_arm_14166(ins, pc),
        0x3757 => parse_arm_14167(ins, pc),
        0x3758 => parse_arm_14168(ins, pc),
        0x3759 => parse_arm_14169(ins, pc),
        0x375a => parse_arm_14170(ins, pc),
        0x375b => parse_arm_14171(ins, pc),
        0x375c => parse_arm_14172(ins, pc),
        0x375d => parse_arm_14173(ins, pc),
        0x375e => parse_arm_14174(ins, pc),
        0x375f => parse_arm_14175(ins, pc),
        0x3760 => parse_arm_14176(ins, pc),
        0x3761 => parse_arm_14177(ins, pc),
        0x3762 => parse_arm_14178(ins, pc),
        0x3763 => parse_arm_14179(ins, pc),
        0x3764 => parse_arm_14180(ins, pc),
        0x3765 => parse_arm_14181(ins, pc),
        0x3766 => parse_arm_14182(ins, pc),
        0x3767 => parse_arm_14183(ins, pc),
        0x3768 => parse_arm_14184(ins, pc),
        0x3769 => parse_arm_14185(ins, pc),
        0x376a => parse_arm_14186(ins, pc),
        0x376b => parse_arm_14187(ins, pc),
        0x376c => parse_arm_14188(ins, pc),
        0x376d => parse_arm_14189(ins, pc),
        0x376e => parse_arm_14190(ins, pc),
        0x376f => parse_arm_14191(ins, pc),
        0x3770 => parse_arm_14192(ins, pc),
        0x3771 => parse_arm_14193(ins, pc),
        0x3772 => parse_arm_14194(ins, pc),
        0x3773 => parse_arm_14195(ins, pc),
        0x3774 => parse_arm_14196(ins, pc),
        0x3775 => parse_arm_14197(ins, pc),
        0x3776 => parse_arm_14198(ins, pc),
        0x3777 => parse_arm_14199(ins, pc),
        0x3778 => parse_arm_14200(ins, pc),
        0x3779 => parse_arm_14201(ins, pc),
        0x377a => parse_arm_14202(ins, pc),
        0x377b => parse_arm_14203(ins, pc),
        0x377c => parse_arm_14204(ins, pc),
        0x377d => parse_arm_14205(ins, pc),
        0x377e => parse_arm_14206(ins, pc),
        0x377f => parse_arm_14207(ins, pc),
        0x3780 => parse_arm_14208(ins, pc),
        0x3781 => parse_arm_14209(ins, pc),
        0x3782 => parse_arm_14210(ins, pc),
        0x3783 => parse_arm_14211(ins, pc),
        0x3784 => parse_arm_14212(ins, pc),
        0x3785 => parse_arm_14213(ins, pc),
        0x3786 => parse_arm_14214(ins, pc),
        0x3787 => parse_arm_14215(ins, pc),
        0x3788 => parse_arm_14216(ins, pc),
        0x3789 => parse_arm_14217(ins, pc),
        0x378a => parse_arm_14218(ins, pc),
        0x378b => parse_arm_14219(ins, pc),
        0x378c => parse_arm_14220(ins, pc),
        0x378d => parse_arm_14221(ins, pc),
        0x378e => parse_arm_14222(ins, pc),
        0x378f => parse_arm_14223(ins, pc),
        0x3790 => parse_arm_14224(ins, pc),
        0x3791 => parse_arm_14225(ins, pc),
        0x3792 => parse_arm_14226(ins, pc),
        0x3793 => parse_arm_14227(ins, pc),
        0x3794 => parse_arm_14228(ins, pc),
        0x3795 => parse_arm_14229(ins, pc),
        0x3796 => parse_arm_14230(ins, pc),
        0x3797 => parse_arm_14231(ins, pc),
        0x3798 => parse_arm_14232(ins, pc),
        0x3799 => parse_arm_14233(ins, pc),
        0x379a => parse_arm_14234(ins, pc),
        0x379b => parse_arm_14235(ins, pc),
        0x379c => parse_arm_14236(ins, pc),
        0x379d => parse_arm_14237(ins, pc),
        0x379e => parse_arm_14238(ins, pc),
        0x379f => parse_arm_14239(ins, pc),
        0x37a0 => parse_arm_14240(ins, pc),
        0x37a1 => parse_arm_14241(ins, pc),
        0x37a2 => parse_arm_14242(ins, pc),
        0x37a3 => parse_arm_14243(ins, pc),
        0x37a4 => parse_arm_14244(ins, pc),
        0x37a5 => parse_arm_14245(ins, pc),
        0x37a6 => parse_arm_14246(ins, pc),
        0x37a7 => parse_arm_14247(ins, pc),
        0x37a8 => parse_arm_14248(ins, pc),
        0x37a9 => parse_arm_14249(ins, pc),
        0x37aa => parse_arm_14250(ins, pc),
        0x37ab => parse_arm_14251(ins, pc),
        0x37ac => parse_arm_14252(ins, pc),
        0x37ad => parse_arm_14253(ins, pc),
        0x37ae => parse_arm_14254(ins, pc),
        0x37af => parse_arm_14255(ins, pc),
        0x37b0 => parse_arm_14256(ins, pc),
        0x37b1 => parse_arm_14257(ins, pc),
        0x37b2 => parse_arm_14258(ins, pc),
        0x37b3 => parse_arm_14259(ins, pc),
        0x37b4 => parse_arm_14260(ins, pc),
        0x37b5 => parse_arm_14261(ins, pc),
        0x37b6 => parse_arm_14262(ins, pc),
        0x37b7 => parse_arm_14263(ins, pc),
        0x37b8 => parse_arm_14264(ins, pc),
        0x37b9 => parse_arm_14265(ins, pc),
        0x37ba => parse_arm_14266(ins, pc),
        0x37bb => parse_arm_14267(ins, pc),
        0x37bc => parse_arm_14268(ins, pc),
        0x37bd => parse_arm_14269(ins, pc),
        0x37be => parse_arm_14270(ins, pc),
        0x37bf => parse_arm_14271(ins, pc),
        0x37c0 => parse_arm_14272(ins, pc),
        0x37c1 => parse_arm_14273(ins, pc),
        0x37c2 => parse_arm_14274(ins, pc),
        0x37c3 => parse_arm_14275(ins, pc),
        0x37c4 => parse_arm_14276(ins, pc),
        0x37c5 => parse_arm_14277(ins, pc),
        0x37c6 => parse_arm_14278(ins, pc),
        0x37c7 => parse_arm_14279(ins, pc),
        0x37c8 => parse_arm_14280(ins, pc),
        0x37c9 => parse_arm_14281(ins, pc),
        0x37ca => parse_arm_14282(ins, pc),
        0x37cb => parse_arm_14283(ins, pc),
        0x37cc => parse_arm_14284(ins, pc),
        0x37cd => parse_arm_14285(ins, pc),
        0x37ce => parse_arm_14286(ins, pc),
        0x37cf => parse_arm_14287(ins, pc),
        0x37d0 => parse_arm_14288(ins, pc),
        0x37d1 => parse_arm_14289(ins, pc),
        0x37d2 => parse_arm_14290(ins, pc),
        0x37d3 => parse_arm_14291(ins, pc),
        0x37d4 => parse_arm_14292(ins, pc),
        0x37d5 => parse_arm_14293(ins, pc),
        0x37d6 => parse_arm_14294(ins, pc),
        0x37d7 => parse_arm_14295(ins, pc),
        0x37d8 => parse_arm_14296(ins, pc),
        0x37d9 => parse_arm_14297(ins, pc),
        0x37da => parse_arm_14298(ins, pc),
        0x37db => parse_arm_14299(ins, pc),
        0x37dc => parse_arm_14300(ins, pc),
        0x37dd => parse_arm_14301(ins, pc),
        0x37de => parse_arm_14302(ins, pc),
        0x37df => parse_arm_14303(ins, pc),
        0x37e0 => parse_arm_14304(ins, pc),
        0x37e1 => parse_arm_14305(ins, pc),
        0x37e2 => parse_arm_14306(ins, pc),
        0x37e3 => parse_arm_14307(ins, pc),
        0x37e4 => parse_arm_14308(ins, pc),
        0x37e5 => parse_arm_14309(ins, pc),
        0x37e6 => parse_arm_14310(ins, pc),
        0x37e7 => parse_arm_14311(ins, pc),
        0x37e8 => parse_arm_14312(ins, pc),
        0x37e9 => parse_arm_14313(ins, pc),
        0x37ea => parse_arm_14314(ins, pc),
        0x37eb => parse_arm_14315(ins, pc),
        0x37ec => parse_arm_14316(ins, pc),
        0x37ed => parse_arm_14317(ins, pc),
        0x37ee => parse_arm_14318(ins, pc),
        0x37ef => parse_arm_14319(ins, pc),
        0x37f0 => parse_arm_14320(ins, pc),
        0x37f1 => parse_arm_14321(ins, pc),
        0x37f2 => parse_arm_14322(ins, pc),
        0x37f3 => parse_arm_14323(ins, pc),
        0x37f4 => parse_arm_14324(ins, pc),
        0x37f5 => parse_arm_14325(ins, pc),
        0x37f6 => parse_arm_14326(ins, pc),
        0x37f7 => parse_arm_14327(ins, pc),
        0x37f8 => parse_arm_14328(ins, pc),
        0x37f9 => parse_arm_14329(ins, pc),
        0x37fa => parse_arm_14330(ins, pc),
        0x37fb => parse_arm_14331(ins, pc),
        0x37fc => parse_arm_14332(ins, pc),
        0x37fd => parse_arm_14333(ins, pc),
        0x37fe => parse_arm_14334(ins, pc),
        0x37ff => parse_arm_14335(ins, pc),
        0x3800 => parse_arm_14336(ins, pc),
        0x3801 => parse_arm_14337(ins, pc),
        0x3802 => parse_arm_14338(ins, pc),
        0x3803 => parse_arm_14339(ins, pc),
        0x3804 => parse_arm_14340(ins, pc),
        0x3805 => parse_arm_14341(ins, pc),
        0x3806 => parse_arm_14342(ins, pc),
        0x3807 => parse_arm_14343(ins, pc),
        0x3808 => parse_arm_14344(ins, pc),
        0x3809 => parse_arm_14345(ins, pc),
        0x380a => parse_arm_14346(ins, pc),
        0x380b => parse_arm_14347(ins, pc),
        0x380c => parse_arm_14348(ins, pc),
        0x380d => parse_arm_14349(ins, pc),
        0x380e => parse_arm_14350(ins, pc),
        0x380f => parse_arm_14351(ins, pc),
        0x3810 => parse_arm_14352(ins, pc),
        0x3811 => parse_arm_14353(ins, pc),
        0x3812 => parse_arm_14354(ins, pc),
        0x3813 => parse_arm_14355(ins, pc),
        0x3814 => parse_arm_14356(ins, pc),
        0x3815 => parse_arm_14357(ins, pc),
        0x3816 => parse_arm_14358(ins, pc),
        0x3817 => parse_arm_14359(ins, pc),
        0x3818 => parse_arm_14360(ins, pc),
        0x3819 => parse_arm_14361(ins, pc),
        0x381a => parse_arm_14362(ins, pc),
        0x381b => parse_arm_14363(ins, pc),
        0x381c => parse_arm_14364(ins, pc),
        0x381d => parse_arm_14365(ins, pc),
        0x381e => parse_arm_14366(ins, pc),
        0x381f => parse_arm_14367(ins, pc),
        0x3820 => parse_arm_14368(ins, pc),
        0x3821 => parse_arm_14369(ins, pc),
        0x3822 => parse_arm_14370(ins, pc),
        0x3823 => parse_arm_14371(ins, pc),
        0x3824 => parse_arm_14372(ins, pc),
        0x3825 => parse_arm_14373(ins, pc),
        0x3826 => parse_arm_14374(ins, pc),
        0x3827 => parse_arm_14375(ins, pc),
        0x3828 => parse_arm_14376(ins, pc),
        0x3829 => parse_arm_14377(ins, pc),
        0x382a => parse_arm_14378(ins, pc),
        0x382b => parse_arm_14379(ins, pc),
        0x382c => parse_arm_14380(ins, pc),
        0x382d => parse_arm_14381(ins, pc),
        0x382e => parse_arm_14382(ins, pc),
        0x382f => parse_arm_14383(ins, pc),
        0x3830 => parse_arm_14384(ins, pc),
        0x3831 => parse_arm_14385(ins, pc),
        0x3832 => parse_arm_14386(ins, pc),
        0x3833 => parse_arm_14387(ins, pc),
        0x3834 => parse_arm_14388(ins, pc),
        0x3835 => parse_arm_14389(ins, pc),
        0x3836 => parse_arm_14390(ins, pc),
        0x3837 => parse_arm_14391(ins, pc),
        0x3838 => parse_arm_14392(ins, pc),
        0x3839 => parse_arm_14393(ins, pc),
        0x383a => parse_arm_14394(ins, pc),
        0x383b => parse_arm_14395(ins, pc),
        0x383c => parse_arm_14396(ins, pc),
        0x383d => parse_arm_14397(ins, pc),
        0x383e => parse_arm_14398(ins, pc),
        0x383f => parse_arm_14399(ins, pc),
        0x3840 => parse_arm_14400(ins, pc),
        0x3841 => parse_arm_14401(ins, pc),
        0x3842 => parse_arm_14402(ins, pc),
        0x3843 => parse_arm_14403(ins, pc),
        0x3844 => parse_arm_14404(ins, pc),
        0x3845 => parse_arm_14405(ins, pc),
        0x3846 => parse_arm_14406(ins, pc),
        0x3847 => parse_arm_14407(ins, pc),
        0x3848 => parse_arm_14408(ins, pc),
        0x3849 => parse_arm_14409(ins, pc),
        0x384a => parse_arm_14410(ins, pc),
        0x384b => parse_arm_14411(ins, pc),
        0x384c => parse_arm_14412(ins, pc),
        0x384d => parse_arm_14413(ins, pc),
        0x384e => parse_arm_14414(ins, pc),
        0x384f => parse_arm_14415(ins, pc),
        0x3850 => parse_arm_14416(ins, pc),
        0x3851 => parse_arm_14417(ins, pc),
        0x3852 => parse_arm_14418(ins, pc),
        0x3853 => parse_arm_14419(ins, pc),
        0x3854 => parse_arm_14420(ins, pc),
        0x3855 => parse_arm_14421(ins, pc),
        0x3856 => parse_arm_14422(ins, pc),
        0x3857 => parse_arm_14423(ins, pc),
        0x3858 => parse_arm_14424(ins, pc),
        0x3859 => parse_arm_14425(ins, pc),
        0x385a => parse_arm_14426(ins, pc),
        0x385b => parse_arm_14427(ins, pc),
        0x385c => parse_arm_14428(ins, pc),
        0x385d => parse_arm_14429(ins, pc),
        0x385e => parse_arm_14430(ins, pc),
        0x385f => parse_arm_14431(ins, pc),
        0x3860 => parse_arm_14432(ins, pc),
        0x3861 => parse_arm_14433(ins, pc),
        0x3862 => parse_arm_14434(ins, pc),
        0x3863 => parse_arm_14435(ins, pc),
        0x3864 => parse_arm_14436(ins, pc),
        0x3865 => parse_arm_14437(ins, pc),
        0x3866 => parse_arm_14438(ins, pc),
        0x3867 => parse_arm_14439(ins, pc),
        0x3868 => parse_arm_14440(ins, pc),
        0x3869 => parse_arm_14441(ins, pc),
        0x386a => parse_arm_14442(ins, pc),
        0x386b => parse_arm_14443(ins, pc),
        0x386c => parse_arm_14444(ins, pc),
        0x386d => parse_arm_14445(ins, pc),
        0x386e => parse_arm_14446(ins, pc),
        0x386f => parse_arm_14447(ins, pc),
        0x3870 => parse_arm_14448(ins, pc),
        0x3871 => parse_arm_14449(ins, pc),
        0x3872 => parse_arm_14450(ins, pc),
        0x3873 => parse_arm_14451(ins, pc),
        0x3874 => parse_arm_14452(ins, pc),
        0x3875 => parse_arm_14453(ins, pc),
        0x3876 => parse_arm_14454(ins, pc),
        0x3877 => parse_arm_14455(ins, pc),
        0x3878 => parse_arm_14456(ins, pc),
        0x3879 => parse_arm_14457(ins, pc),
        0x387a => parse_arm_14458(ins, pc),
        0x387b => parse_arm_14459(ins, pc),
        0x387c => parse_arm_14460(ins, pc),
        0x387d => parse_arm_14461(ins, pc),
        0x387e => parse_arm_14462(ins, pc),
        0x387f => parse_arm_14463(ins, pc),
        0x3880 => parse_arm_14464(ins, pc),
        0x3881 => parse_arm_14465(ins, pc),
        0x3882 => parse_arm_14466(ins, pc),
        0x3883 => parse_arm_14467(ins, pc),
        0x3884 => parse_arm_14468(ins, pc),
        0x3885 => parse_arm_14469(ins, pc),
        0x3886 => parse_arm_14470(ins, pc),
        0x3887 => parse_arm_14471(ins, pc),
        0x3888 => parse_arm_14472(ins, pc),
        0x3889 => parse_arm_14473(ins, pc),
        0x388a => parse_arm_14474(ins, pc),
        0x388b => parse_arm_14475(ins, pc),
        0x388c => parse_arm_14476(ins, pc),
        0x388d => parse_arm_14477(ins, pc),
        0x388e => parse_arm_14478(ins, pc),
        0x388f => parse_arm_14479(ins, pc),
        0x3890 => parse_arm_14480(ins, pc),
        0x3891 => parse_arm_14481(ins, pc),
        0x3892 => parse_arm_14482(ins, pc),
        0x3893 => parse_arm_14483(ins, pc),
        0x3894 => parse_arm_14484(ins, pc),
        0x3895 => parse_arm_14485(ins, pc),
        0x3896 => parse_arm_14486(ins, pc),
        0x3897 => parse_arm_14487(ins, pc),
        0x3898 => parse_arm_14488(ins, pc),
        0x3899 => parse_arm_14489(ins, pc),
        0x389a => parse_arm_14490(ins, pc),
        0x389b => parse_arm_14491(ins, pc),
        0x389c => parse_arm_14492(ins, pc),
        0x389d => parse_arm_14493(ins, pc),
        0x389e => parse_arm_14494(ins, pc),
        0x389f => parse_arm_14495(ins, pc),
        0x38a0 => parse_arm_14496(ins, pc),
        0x38a1 => parse_arm_14497(ins, pc),
        0x38a2 => parse_arm_14498(ins, pc),
        0x38a3 => parse_arm_14499(ins, pc),
        0x38a4 => parse_arm_14500(ins, pc),
        0x38a5 => parse_arm_14501(ins, pc),
        0x38a6 => parse_arm_14502(ins, pc),
        0x38a7 => parse_arm_14503(ins, pc),
        0x38a8 => parse_arm_14504(ins, pc),
        0x38a9 => parse_arm_14505(ins, pc),
        0x38aa => parse_arm_14506(ins, pc),
        0x38ab => parse_arm_14507(ins, pc),
        0x38ac => parse_arm_14508(ins, pc),
        0x38ad => parse_arm_14509(ins, pc),
        0x38ae => parse_arm_14510(ins, pc),
        0x38af => parse_arm_14511(ins, pc),
        0x38b0 => parse_arm_14512(ins, pc),
        0x38b1 => parse_arm_14513(ins, pc),
        0x38b2 => parse_arm_14514(ins, pc),
        0x38b3 => parse_arm_14515(ins, pc),
        0x38b4 => parse_arm_14516(ins, pc),
        0x38b5 => parse_arm_14517(ins, pc),
        0x38b6 => parse_arm_14518(ins, pc),
        0x38b7 => parse_arm_14519(ins, pc),
        0x38b8 => parse_arm_14520(ins, pc),
        0x38b9 => parse_arm_14521(ins, pc),
        0x38ba => parse_arm_14522(ins, pc),
        0x38bb => parse_arm_14523(ins, pc),
        0x38bc => parse_arm_14524(ins, pc),
        0x38bd => parse_arm_14525(ins, pc),
        0x38be => parse_arm_14526(ins, pc),
        0x38bf => parse_arm_14527(ins, pc),
        0x38c0 => parse_arm_14528(ins, pc),
        0x38c1 => parse_arm_14529(ins, pc),
        0x38c2 => parse_arm_14530(ins, pc),
        0x38c3 => parse_arm_14531(ins, pc),
        0x38c4 => parse_arm_14532(ins, pc),
        0x38c5 => parse_arm_14533(ins, pc),
        0x38c6 => parse_arm_14534(ins, pc),
        0x38c7 => parse_arm_14535(ins, pc),
        0x38c8 => parse_arm_14536(ins, pc),
        0x38c9 => parse_arm_14537(ins, pc),
        0x38ca => parse_arm_14538(ins, pc),
        0x38cb => parse_arm_14539(ins, pc),
        0x38cc => parse_arm_14540(ins, pc),
        0x38cd => parse_arm_14541(ins, pc),
        0x38ce => parse_arm_14542(ins, pc),
        0x38cf => parse_arm_14543(ins, pc),
        0x38d0 => parse_arm_14544(ins, pc),
        0x38d1 => parse_arm_14545(ins, pc),
        0x38d2 => parse_arm_14546(ins, pc),
        0x38d3 => parse_arm_14547(ins, pc),
        0x38d4 => parse_arm_14548(ins, pc),
        0x38d5 => parse_arm_14549(ins, pc),
        0x38d6 => parse_arm_14550(ins, pc),
        0x38d7 => parse_arm_14551(ins, pc),
        0x38d8 => parse_arm_14552(ins, pc),
        0x38d9 => parse_arm_14553(ins, pc),
        0x38da => parse_arm_14554(ins, pc),
        0x38db => parse_arm_14555(ins, pc),
        0x38dc => parse_arm_14556(ins, pc),
        0x38dd => parse_arm_14557(ins, pc),
        0x38de => parse_arm_14558(ins, pc),
        0x38df => parse_arm_14559(ins, pc),
        0x38e0 => parse_arm_14560(ins, pc),
        0x38e1 => parse_arm_14561(ins, pc),
        0x38e2 => parse_arm_14562(ins, pc),
        0x38e3 => parse_arm_14563(ins, pc),
        0x38e4 => parse_arm_14564(ins, pc),
        0x38e5 => parse_arm_14565(ins, pc),
        0x38e6 => parse_arm_14566(ins, pc),
        0x38e7 => parse_arm_14567(ins, pc),
        0x38e8 => parse_arm_14568(ins, pc),
        0x38e9 => parse_arm_14569(ins, pc),
        0x38ea => parse_arm_14570(ins, pc),
        0x38eb => parse_arm_14571(ins, pc),
        0x38ec => parse_arm_14572(ins, pc),
        0x38ed => parse_arm_14573(ins, pc),
        0x38ee => parse_arm_14574(ins, pc),
        0x38ef => parse_arm_14575(ins, pc),
        0x38f0 => parse_arm_14576(ins, pc),
        0x38f1 => parse_arm_14577(ins, pc),
        0x38f2 => parse_arm_14578(ins, pc),
        0x38f3 => parse_arm_14579(ins, pc),
        0x38f4 => parse_arm_14580(ins, pc),
        0x38f5 => parse_arm_14581(ins, pc),
        0x38f6 => parse_arm_14582(ins, pc),
        0x38f7 => parse_arm_14583(ins, pc),
        0x38f8 => parse_arm_14584(ins, pc),
        0x38f9 => parse_arm_14585(ins, pc),
        0x38fa => parse_arm_14586(ins, pc),
        0x38fb => parse_arm_14587(ins, pc),
        0x38fc => parse_arm_14588(ins, pc),
        0x38fd => parse_arm_14589(ins, pc),
        0x38fe => parse_arm_14590(ins, pc),
        0x38ff => parse_arm_14591(ins, pc),
        0x3900 => parse_arm_14592(ins, pc),
        0x3901 => parse_arm_14593(ins, pc),
        0x3902 => parse_arm_14594(ins, pc),
        0x3903 => parse_arm_14595(ins, pc),
        0x3904 => parse_arm_14596(ins, pc),
        0x3905 => parse_arm_14597(ins, pc),
        0x3906 => parse_arm_14598(ins, pc),
        0x3907 => parse_arm_14599(ins, pc),
        0x3908 => parse_arm_14600(ins, pc),
        0x3909 => parse_arm_14601(ins, pc),
        0x390a => parse_arm_14602(ins, pc),
        0x390b => parse_arm_14603(ins, pc),
        0x390c => parse_arm_14604(ins, pc),
        0x390d => parse_arm_14605(ins, pc),
        0x390e => parse_arm_14606(ins, pc),
        0x390f => parse_arm_14607(ins, pc),
        0x3910 => parse_arm_14608(ins, pc),
        0x3911 => parse_arm_14609(ins, pc),
        0x3912 => parse_arm_14610(ins, pc),
        0x3913 => parse_arm_14611(ins, pc),
        0x3914 => parse_arm_14612(ins, pc),
        0x3915 => parse_arm_14613(ins, pc),
        0x3916 => parse_arm_14614(ins, pc),
        0x3917 => parse_arm_14615(ins, pc),
        0x3918 => parse_arm_14616(ins, pc),
        0x3919 => parse_arm_14617(ins, pc),
        0x391a => parse_arm_14618(ins, pc),
        0x391b => parse_arm_14619(ins, pc),
        0x391c => parse_arm_14620(ins, pc),
        0x391d => parse_arm_14621(ins, pc),
        0x391e => parse_arm_14622(ins, pc),
        0x391f => parse_arm_14623(ins, pc),
        0x3920 => parse_arm_14624(ins, pc),
        0x3921 => parse_arm_14625(ins, pc),
        0x3922 => parse_arm_14626(ins, pc),
        0x3923 => parse_arm_14627(ins, pc),
        0x3924 => parse_arm_14628(ins, pc),
        0x3925 => parse_arm_14629(ins, pc),
        0x3926 => parse_arm_14630(ins, pc),
        0x3927 => parse_arm_14631(ins, pc),
        0x3928 => parse_arm_14632(ins, pc),
        0x3929 => parse_arm_14633(ins, pc),
        0x392a => parse_arm_14634(ins, pc),
        0x392b => parse_arm_14635(ins, pc),
        0x392c => parse_arm_14636(ins, pc),
        0x392d => parse_arm_14637(ins, pc),
        0x392e => parse_arm_14638(ins, pc),
        0x392f => parse_arm_14639(ins, pc),
        0x3930 => parse_arm_14640(ins, pc),
        0x3931 => parse_arm_14641(ins, pc),
        0x3932 => parse_arm_14642(ins, pc),
        0x3933 => parse_arm_14643(ins, pc),
        0x3934 => parse_arm_14644(ins, pc),
        0x3935 => parse_arm_14645(ins, pc),
        0x3936 => parse_arm_14646(ins, pc),
        0x3937 => parse_arm_14647(ins, pc),
        0x3938 => parse_arm_14648(ins, pc),
        0x3939 => parse_arm_14649(ins, pc),
        0x393a => parse_arm_14650(ins, pc),
        0x393b => parse_arm_14651(ins, pc),
        0x393c => parse_arm_14652(ins, pc),
        0x393d => parse_arm_14653(ins, pc),
        0x393e => parse_arm_14654(ins, pc),
        0x393f => parse_arm_14655(ins, pc),
        0x3940 => parse_arm_14656(ins, pc),
        0x3941 => parse_arm_14657(ins, pc),
        0x3942 => parse_arm_14658(ins, pc),
        0x3943 => parse_arm_14659(ins, pc),
        0x3944 => parse_arm_14660(ins, pc),
        0x3945 => parse_arm_14661(ins, pc),
        0x3946 => parse_arm_14662(ins, pc),
        0x3947 => parse_arm_14663(ins, pc),
        0x3948 => parse_arm_14664(ins, pc),
        0x3949 => parse_arm_14665(ins, pc),
        0x394a => parse_arm_14666(ins, pc),
        0x394b => parse_arm_14667(ins, pc),
        0x394c => parse_arm_14668(ins, pc),
        0x394d => parse_arm_14669(ins, pc),
        0x394e => parse_arm_14670(ins, pc),
        0x394f => parse_arm_14671(ins, pc),
        0x3950 => parse_arm_14672(ins, pc),
        0x3951 => parse_arm_14673(ins, pc),
        0x3952 => parse_arm_14674(ins, pc),
        0x3953 => parse_arm_14675(ins, pc),
        0x3954 => parse_arm_14676(ins, pc),
        0x3955 => parse_arm_14677(ins, pc),
        0x3956 => parse_arm_14678(ins, pc),
        0x3957 => parse_arm_14679(ins, pc),
        0x3958 => parse_arm_14680(ins, pc),
        0x3959 => parse_arm_14681(ins, pc),
        0x395a => parse_arm_14682(ins, pc),
        0x395b => parse_arm_14683(ins, pc),
        0x395c => parse_arm_14684(ins, pc),
        0x395d => parse_arm_14685(ins, pc),
        0x395e => parse_arm_14686(ins, pc),
        0x395f => parse_arm_14687(ins, pc),
        0x3960 => parse_arm_14688(ins, pc),
        0x3961 => parse_arm_14689(ins, pc),
        0x3962 => parse_arm_14690(ins, pc),
        0x3963 => parse_arm_14691(ins, pc),
        0x3964 => parse_arm_14692(ins, pc),
        0x3965 => parse_arm_14693(ins, pc),
        0x3966 => parse_arm_14694(ins, pc),
        0x3967 => parse_arm_14695(ins, pc),
        0x3968 => parse_arm_14696(ins, pc),
        0x3969 => parse_arm_14697(ins, pc),
        0x396a => parse_arm_14698(ins, pc),
        0x396b => parse_arm_14699(ins, pc),
        0x396c => parse_arm_14700(ins, pc),
        0x396d => parse_arm_14701(ins, pc),
        0x396e => parse_arm_14702(ins, pc),
        0x396f => parse_arm_14703(ins, pc),
        0x3970 => parse_arm_14704(ins, pc),
        0x3971 => parse_arm_14705(ins, pc),
        0x3972 => parse_arm_14706(ins, pc),
        0x3973 => parse_arm_14707(ins, pc),
        0x3974 => parse_arm_14708(ins, pc),
        0x3975 => parse_arm_14709(ins, pc),
        0x3976 => parse_arm_14710(ins, pc),
        0x3977 => parse_arm_14711(ins, pc),
        0x3978 => parse_arm_14712(ins, pc),
        0x3979 => parse_arm_14713(ins, pc),
        0x397a => parse_arm_14714(ins, pc),
        0x397b => parse_arm_14715(ins, pc),
        0x397c => parse_arm_14716(ins, pc),
        0x397d => parse_arm_14717(ins, pc),
        0x397e => parse_arm_14718(ins, pc),
        0x397f => parse_arm_14719(ins, pc),
        0x3980 => parse_arm_14720(ins, pc),
        0x3981 => parse_arm_14721(ins, pc),
        0x3982 => parse_arm_14722(ins, pc),
        0x3983 => parse_arm_14723(ins, pc),
        0x3984 => parse_arm_14724(ins, pc),
        0x3985 => parse_arm_14725(ins, pc),
        0x3986 => parse_arm_14726(ins, pc),
        0x3987 => parse_arm_14727(ins, pc),
        0x3988 => parse_arm_14728(ins, pc),
        0x3989 => parse_arm_14729(ins, pc),
        0x398a => parse_arm_14730(ins, pc),
        0x398b => parse_arm_14731(ins, pc),
        0x398c => parse_arm_14732(ins, pc),
        0x398d => parse_arm_14733(ins, pc),
        0x398e => parse_arm_14734(ins, pc),
        0x398f => parse_arm_14735(ins, pc),
        0x3990 => parse_arm_14736(ins, pc),
        0x3991 => parse_arm_14737(ins, pc),
        0x3992 => parse_arm_14738(ins, pc),
        0x3993 => parse_arm_14739(ins, pc),
        0x3994 => parse_arm_14740(ins, pc),
        0x3995 => parse_arm_14741(ins, pc),
        0x3996 => parse_arm_14742(ins, pc),
        0x3997 => parse_arm_14743(ins, pc),
        0x3998 => parse_arm_14744(ins, pc),
        0x3999 => parse_arm_14745(ins, pc),
        0x399a => parse_arm_14746(ins, pc),
        0x399b => parse_arm_14747(ins, pc),
        0x399c => parse_arm_14748(ins, pc),
        0x399d => parse_arm_14749(ins, pc),
        0x399e => parse_arm_14750(ins, pc),
        0x399f => parse_arm_14751(ins, pc),
        0x39a0 => parse_arm_14752(ins, pc),
        0x39a1 => parse_arm_14753(ins, pc),
        0x39a2 => parse_arm_14754(ins, pc),
        0x39a3 => parse_arm_14755(ins, pc),
        0x39a4 => parse_arm_14756(ins, pc),
        0x39a5 => parse_arm_14757(ins, pc),
        0x39a6 => parse_arm_14758(ins, pc),
        0x39a7 => parse_arm_14759(ins, pc),
        0x39a8 => parse_arm_14760(ins, pc),
        0x39a9 => parse_arm_14761(ins, pc),
        0x39aa => parse_arm_14762(ins, pc),
        0x39ab => parse_arm_14763(ins, pc),
        0x39ac => parse_arm_14764(ins, pc),
        0x39ad => parse_arm_14765(ins, pc),
        0x39ae => parse_arm_14766(ins, pc),
        0x39af => parse_arm_14767(ins, pc),
        0x39b0 => parse_arm_14768(ins, pc),
        0x39b1 => parse_arm_14769(ins, pc),
        0x39b2 => parse_arm_14770(ins, pc),
        0x39b3 => parse_arm_14771(ins, pc),
        0x39b4 => parse_arm_14772(ins, pc),
        0x39b5 => parse_arm_14773(ins, pc),
        0x39b6 => parse_arm_14774(ins, pc),
        0x39b7 => parse_arm_14775(ins, pc),
        0x39b8 => parse_arm_14776(ins, pc),
        0x39b9 => parse_arm_14777(ins, pc),
        0x39ba => parse_arm_14778(ins, pc),
        0x39bb => parse_arm_14779(ins, pc),
        0x39bc => parse_arm_14780(ins, pc),
        0x39bd => parse_arm_14781(ins, pc),
        0x39be => parse_arm_14782(ins, pc),
        0x39bf => parse_arm_14783(ins, pc),
        0x39c0 => parse_arm_14784(ins, pc),
        0x39c1 => parse_arm_14785(ins, pc),
        0x39c2 => parse_arm_14786(ins, pc),
        0x39c3 => parse_arm_14787(ins, pc),
        0x39c4 => parse_arm_14788(ins, pc),
        0x39c5 => parse_arm_14789(ins, pc),
        0x39c6 => parse_arm_14790(ins, pc),
        0x39c7 => parse_arm_14791(ins, pc),
        0x39c8 => parse_arm_14792(ins, pc),
        0x39c9 => parse_arm_14793(ins, pc),
        0x39ca => parse_arm_14794(ins, pc),
        0x39cb => parse_arm_14795(ins, pc),
        0x39cc => parse_arm_14796(ins, pc),
        0x39cd => parse_arm_14797(ins, pc),
        0x39ce => parse_arm_14798(ins, pc),
        0x39cf => parse_arm_14799(ins, pc),
        0x39d0 => parse_arm_14800(ins, pc),
        0x39d1 => parse_arm_14801(ins, pc),
        0x39d2 => parse_arm_14802(ins, pc),
        0x39d3 => parse_arm_14803(ins, pc),
        0x39d4 => parse_arm_14804(ins, pc),
        0x39d5 => parse_arm_14805(ins, pc),
        0x39d6 => parse_arm_14806(ins, pc),
        0x39d7 => parse_arm_14807(ins, pc),
        0x39d8 => parse_arm_14808(ins, pc),
        0x39d9 => parse_arm_14809(ins, pc),
        0x39da => parse_arm_14810(ins, pc),
        0x39db => parse_arm_14811(ins, pc),
        0x39dc => parse_arm_14812(ins, pc),
        0x39dd => parse_arm_14813(ins, pc),
        0x39de => parse_arm_14814(ins, pc),
        0x39df => parse_arm_14815(ins, pc),
        0x39e0 => parse_arm_14816(ins, pc),
        0x39e1 => parse_arm_14817(ins, pc),
        0x39e2 => parse_arm_14818(ins, pc),
        0x39e3 => parse_arm_14819(ins, pc),
        0x39e4 => parse_arm_14820(ins, pc),
        0x39e5 => parse_arm_14821(ins, pc),
        0x39e6 => parse_arm_14822(ins, pc),
        0x39e7 => parse_arm_14823(ins, pc),
        0x39e8 => parse_arm_14824(ins, pc),
        0x39e9 => parse_arm_14825(ins, pc),
        0x39ea => parse_arm_14826(ins, pc),
        0x39eb => parse_arm_14827(ins, pc),
        0x39ec => parse_arm_14828(ins, pc),
        0x39ed => parse_arm_14829(ins, pc),
        0x39ee => parse_arm_14830(ins, pc),
        0x39ef => parse_arm_14831(ins, pc),
        0x39f0 => parse_arm_14832(ins, pc),
        0x39f1 => parse_arm_14833(ins, pc),
        0x39f2 => parse_arm_14834(ins, pc),
        0x39f3 => parse_arm_14835(ins, pc),
        0x39f4 => parse_arm_14836(ins, pc),
        0x39f5 => parse_arm_14837(ins, pc),
        0x39f6 => parse_arm_14838(ins, pc),
        0x39f7 => parse_arm_14839(ins, pc),
        0x39f8 => parse_arm_14840(ins, pc),
        0x39f9 => parse_arm_14841(ins, pc),
        0x39fa => parse_arm_14842(ins, pc),
        0x39fb => parse_arm_14843(ins, pc),
        0x39fc => parse_arm_14844(ins, pc),
        0x39fd => parse_arm_14845(ins, pc),
        0x39fe => parse_arm_14846(ins, pc),
        0x39ff => parse_arm_14847(ins, pc),
        0x3a00 => parse_arm_14848(ins, pc),
        0x3a01 => parse_arm_14849(ins, pc),
        0x3a02 => parse_arm_14850(ins, pc),
        0x3a03 => parse_arm_14851(ins, pc),
        0x3a04 => parse_arm_14852(ins, pc),
        0x3a05 => parse_arm_14853(ins, pc),
        0x3a06 => parse_arm_14854(ins, pc),
        0x3a07 => parse_arm_14855(ins, pc),
        0x3a08 => parse_arm_14856(ins, pc),
        0x3a09 => parse_arm_14857(ins, pc),
        0x3a0a => parse_arm_14858(ins, pc),
        0x3a0b => parse_arm_14859(ins, pc),
        0x3a0c => parse_arm_14860(ins, pc),
        0x3a0d => parse_arm_14861(ins, pc),
        0x3a0e => parse_arm_14862(ins, pc),
        0x3a0f => parse_arm_14863(ins, pc),
        0x3a10 => parse_arm_14864(ins, pc),
        0x3a11 => parse_arm_14865(ins, pc),
        0x3a12 => parse_arm_14866(ins, pc),
        0x3a13 => parse_arm_14867(ins, pc),
        0x3a14 => parse_arm_14868(ins, pc),
        0x3a15 => parse_arm_14869(ins, pc),
        0x3a16 => parse_arm_14870(ins, pc),
        0x3a17 => parse_arm_14871(ins, pc),
        0x3a18 => parse_arm_14872(ins, pc),
        0x3a19 => parse_arm_14873(ins, pc),
        0x3a1a => parse_arm_14874(ins, pc),
        0x3a1b => parse_arm_14875(ins, pc),
        0x3a1c => parse_arm_14876(ins, pc),
        0x3a1d => parse_arm_14877(ins, pc),
        0x3a1e => parse_arm_14878(ins, pc),
        0x3a1f => parse_arm_14879(ins, pc),
        0x3a20 => parse_arm_14880(ins, pc),
        0x3a21 => parse_arm_14881(ins, pc),
        0x3a22 => parse_arm_14882(ins, pc),
        0x3a23 => parse_arm_14883(ins, pc),
        0x3a24 => parse_arm_14884(ins, pc),
        0x3a25 => parse_arm_14885(ins, pc),
        0x3a26 => parse_arm_14886(ins, pc),
        0x3a27 => parse_arm_14887(ins, pc),
        0x3a28 => parse_arm_14888(ins, pc),
        0x3a29 => parse_arm_14889(ins, pc),
        0x3a2a => parse_arm_14890(ins, pc),
        0x3a2b => parse_arm_14891(ins, pc),
        0x3a2c => parse_arm_14892(ins, pc),
        0x3a2d => parse_arm_14893(ins, pc),
        0x3a2e => parse_arm_14894(ins, pc),
        0x3a2f => parse_arm_14895(ins, pc),
        0x3a30 => parse_arm_14896(ins, pc),
        0x3a31 => parse_arm_14897(ins, pc),
        0x3a32 => parse_arm_14898(ins, pc),
        0x3a33 => parse_arm_14899(ins, pc),
        0x3a34 => parse_arm_14900(ins, pc),
        0x3a35 => parse_arm_14901(ins, pc),
        0x3a36 => parse_arm_14902(ins, pc),
        0x3a37 => parse_arm_14903(ins, pc),
        0x3a38 => parse_arm_14904(ins, pc),
        0x3a39 => parse_arm_14905(ins, pc),
        0x3a3a => parse_arm_14906(ins, pc),
        0x3a3b => parse_arm_14907(ins, pc),
        0x3a3c => parse_arm_14908(ins, pc),
        0x3a3d => parse_arm_14909(ins, pc),
        0x3a3e => parse_arm_14910(ins, pc),
        0x3a3f => parse_arm_14911(ins, pc),
        0x3a40 => parse_arm_14912(ins, pc),
        0x3a41 => parse_arm_14913(ins, pc),
        0x3a42 => parse_arm_14914(ins, pc),
        0x3a43 => parse_arm_14915(ins, pc),
        0x3a44 => parse_arm_14916(ins, pc),
        0x3a45 => parse_arm_14917(ins, pc),
        0x3a46 => parse_arm_14918(ins, pc),
        0x3a47 => parse_arm_14919(ins, pc),
        0x3a48 => parse_arm_14920(ins, pc),
        0x3a49 => parse_arm_14921(ins, pc),
        0x3a4a => parse_arm_14922(ins, pc),
        0x3a4b => parse_arm_14923(ins, pc),
        0x3a4c => parse_arm_14924(ins, pc),
        0x3a4d => parse_arm_14925(ins, pc),
        0x3a4e => parse_arm_14926(ins, pc),
        0x3a4f => parse_arm_14927(ins, pc),
        0x3a50 => parse_arm_14928(ins, pc),
        0x3a51 => parse_arm_14929(ins, pc),
        0x3a52 => parse_arm_14930(ins, pc),
        0x3a53 => parse_arm_14931(ins, pc),
        0x3a54 => parse_arm_14932(ins, pc),
        0x3a55 => parse_arm_14933(ins, pc),
        0x3a56 => parse_arm_14934(ins, pc),
        0x3a57 => parse_arm_14935(ins, pc),
        0x3a58 => parse_arm_14936(ins, pc),
        0x3a59 => parse_arm_14937(ins, pc),
        0x3a5a => parse_arm_14938(ins, pc),
        0x3a5b => parse_arm_14939(ins, pc),
        0x3a5c => parse_arm_14940(ins, pc),
        0x3a5d => parse_arm_14941(ins, pc),
        0x3a5e => parse_arm_14942(ins, pc),
        0x3a5f => parse_arm_14943(ins, pc),
        0x3a60 => parse_arm_14944(ins, pc),
        0x3a61 => parse_arm_14945(ins, pc),
        0x3a62 => parse_arm_14946(ins, pc),
        0x3a63 => parse_arm_14947(ins, pc),
        0x3a64 => parse_arm_14948(ins, pc),
        0x3a65 => parse_arm_14949(ins, pc),
        0x3a66 => parse_arm_14950(ins, pc),
        0x3a67 => parse_arm_14951(ins, pc),
        0x3a68 => parse_arm_14952(ins, pc),
        0x3a69 => parse_arm_14953(ins, pc),
        0x3a6a => parse_arm_14954(ins, pc),
        0x3a6b => parse_arm_14955(ins, pc),
        0x3a6c => parse_arm_14956(ins, pc),
        0x3a6d => parse_arm_14957(ins, pc),
        0x3a6e => parse_arm_14958(ins, pc),
        0x3a6f => parse_arm_14959(ins, pc),
        0x3a70 => parse_arm_14960(ins, pc),
        0x3a71 => parse_arm_14961(ins, pc),
        0x3a72 => parse_arm_14962(ins, pc),
        0x3a73 => parse_arm_14963(ins, pc),
        0x3a74 => parse_arm_14964(ins, pc),
        0x3a75 => parse_arm_14965(ins, pc),
        0x3a76 => parse_arm_14966(ins, pc),
        0x3a77 => parse_arm_14967(ins, pc),
        0x3a78 => parse_arm_14968(ins, pc),
        0x3a79 => parse_arm_14969(ins, pc),
        0x3a7a => parse_arm_14970(ins, pc),
        0x3a7b => parse_arm_14971(ins, pc),
        0x3a7c => parse_arm_14972(ins, pc),
        0x3a7d => parse_arm_14973(ins, pc),
        0x3a7e => parse_arm_14974(ins, pc),
        0x3a7f => parse_arm_14975(ins, pc),
        0x3a80 => parse_arm_14976(ins, pc),
        0x3a81 => parse_arm_14977(ins, pc),
        0x3a82 => parse_arm_14978(ins, pc),
        0x3a83 => parse_arm_14979(ins, pc),
        0x3a84 => parse_arm_14980(ins, pc),
        0x3a85 => parse_arm_14981(ins, pc),
        0x3a86 => parse_arm_14982(ins, pc),
        0x3a87 => parse_arm_14983(ins, pc),
        0x3a88 => parse_arm_14984(ins, pc),
        0x3a89 => parse_arm_14985(ins, pc),
        0x3a8a => parse_arm_14986(ins, pc),
        0x3a8b => parse_arm_14987(ins, pc),
        0x3a8c => parse_arm_14988(ins, pc),
        0x3a8d => parse_arm_14989(ins, pc),
        0x3a8e => parse_arm_14990(ins, pc),
        0x3a8f => parse_arm_14991(ins, pc),
        0x3a90 => parse_arm_14992(ins, pc),
        0x3a91 => parse_arm_14993(ins, pc),
        0x3a92 => parse_arm_14994(ins, pc),
        0x3a93 => parse_arm_14995(ins, pc),
        0x3a94 => parse_arm_14996(ins, pc),
        0x3a95 => parse_arm_14997(ins, pc),
        0x3a96 => parse_arm_14998(ins, pc),
        0x3a97 => parse_arm_14999(ins, pc),
        0x3a98 => parse_arm_15000(ins, pc),
        0x3a99 => parse_arm_15001(ins, pc),
        0x3a9a => parse_arm_15002(ins, pc),
        0x3a9b => parse_arm_15003(ins, pc),
        0x3a9c => parse_arm_15004(ins, pc),
        0x3a9d => parse_arm_15005(ins, pc),
        0x3a9e => parse_arm_15006(ins, pc),
        0x3a9f => parse_arm_15007(ins, pc),
        0x3aa0 => parse_arm_15008(ins, pc),
        0x3aa1 => parse_arm_15009(ins, pc),
        0x3aa2 => parse_arm_15010(ins, pc),
        0x3aa3 => parse_arm_15011(ins, pc),
        0x3aa4 => parse_arm_15012(ins, pc),
        0x3aa5 => parse_arm_15013(ins, pc),
        0x3aa6 => parse_arm_15014(ins, pc),
        0x3aa7 => parse_arm_15015(ins, pc),
        0x3aa8 => parse_arm_15016(ins, pc),
        0x3aa9 => parse_arm_15017(ins, pc),
        0x3aaa => parse_arm_15018(ins, pc),
        0x3aab => parse_arm_15019(ins, pc),
        0x3aac => parse_arm_15020(ins, pc),
        0x3aad => parse_arm_15021(ins, pc),
        0x3aae => parse_arm_15022(ins, pc),
        0x3aaf => parse_arm_15023(ins, pc),
        0x3ab0 => parse_arm_15024(ins, pc),
        0x3ab1 => parse_arm_15025(ins, pc),
        0x3ab2 => parse_arm_15026(ins, pc),
        0x3ab3 => parse_arm_15027(ins, pc),
        0x3ab4 => parse_arm_15028(ins, pc),
        0x3ab5 => parse_arm_15029(ins, pc),
        0x3ab6 => parse_arm_15030(ins, pc),
        0x3ab7 => parse_arm_15031(ins, pc),
        0x3ab8 => parse_arm_15032(ins, pc),
        0x3ab9 => parse_arm_15033(ins, pc),
        0x3aba => parse_arm_15034(ins, pc),
        0x3abb => parse_arm_15035(ins, pc),
        0x3abc => parse_arm_15036(ins, pc),
        0x3abd => parse_arm_15037(ins, pc),
        0x3abe => parse_arm_15038(ins, pc),
        0x3abf => parse_arm_15039(ins, pc),
        0x3ac0 => parse_arm_15040(ins, pc),
        0x3ac1 => parse_arm_15041(ins, pc),
        0x3ac2 => parse_arm_15042(ins, pc),
        0x3ac3 => parse_arm_15043(ins, pc),
        0x3ac4 => parse_arm_15044(ins, pc),
        0x3ac5 => parse_arm_15045(ins, pc),
        0x3ac6 => parse_arm_15046(ins, pc),
        0x3ac7 => parse_arm_15047(ins, pc),
        0x3ac8 => parse_arm_15048(ins, pc),
        0x3ac9 => parse_arm_15049(ins, pc),
        0x3aca => parse_arm_15050(ins, pc),
        0x3acb => parse_arm_15051(ins, pc),
        0x3acc => parse_arm_15052(ins, pc),
        0x3acd => parse_arm_15053(ins, pc),
        0x3ace => parse_arm_15054(ins, pc),
        0x3acf => parse_arm_15055(ins, pc),
        0x3ad0 => parse_arm_15056(ins, pc),
        0x3ad1 => parse_arm_15057(ins, pc),
        0x3ad2 => parse_arm_15058(ins, pc),
        0x3ad3 => parse_arm_15059(ins, pc),
        0x3ad4 => parse_arm_15060(ins, pc),
        0x3ad5 => parse_arm_15061(ins, pc),
        0x3ad6 => parse_arm_15062(ins, pc),
        0x3ad7 => parse_arm_15063(ins, pc),
        0x3ad8 => parse_arm_15064(ins, pc),
        0x3ad9 => parse_arm_15065(ins, pc),
        0x3ada => parse_arm_15066(ins, pc),
        0x3adb => parse_arm_15067(ins, pc),
        0x3adc => parse_arm_15068(ins, pc),
        0x3add => parse_arm_15069(ins, pc),
        0x3ade => parse_arm_15070(ins, pc),
        0x3adf => parse_arm_15071(ins, pc),
        0x3ae0 => parse_arm_15072(ins, pc),
        0x3ae1 => parse_arm_15073(ins, pc),
        0x3ae2 => parse_arm_15074(ins, pc),
        0x3ae3 => parse_arm_15075(ins, pc),
        0x3ae4 => parse_arm_15076(ins, pc),
        0x3ae5 => parse_arm_15077(ins, pc),
        0x3ae6 => parse_arm_15078(ins, pc),
        0x3ae7 => parse_arm_15079(ins, pc),
        0x3ae8 => parse_arm_15080(ins, pc),
        0x3ae9 => parse_arm_15081(ins, pc),
        0x3aea => parse_arm_15082(ins, pc),
        0x3aeb => parse_arm_15083(ins, pc),
        0x3aec => parse_arm_15084(ins, pc),
        0x3aed => parse_arm_15085(ins, pc),
        0x3aee => parse_arm_15086(ins, pc),
        0x3aef => parse_arm_15087(ins, pc),
        0x3af0 => parse_arm_15088(ins, pc),
        0x3af1 => parse_arm_15089(ins, pc),
        0x3af2 => parse_arm_15090(ins, pc),
        0x3af3 => parse_arm_15091(ins, pc),
        0x3af4 => parse_arm_15092(ins, pc),
        0x3af5 => parse_arm_15093(ins, pc),
        0x3af6 => parse_arm_15094(ins, pc),
        0x3af7 => parse_arm_15095(ins, pc),
        0x3af8 => parse_arm_15096(ins, pc),
        0x3af9 => parse_arm_15097(ins, pc),
        0x3afa => parse_arm_15098(ins, pc),
        0x3afb => parse_arm_15099(ins, pc),
        0x3afc => parse_arm_15100(ins, pc),
        0x3afd => parse_arm_15101(ins, pc),
        0x3afe => parse_arm_15102(ins, pc),
        0x3aff => parse_arm_15103(ins, pc),
        0x3b00 => parse_arm_15104(ins, pc),
        0x3b01 => parse_arm_15105(ins, pc),
        0x3b02 => parse_arm_15106(ins, pc),
        0x3b03 => parse_arm_15107(ins, pc),
        0x3b04 => parse_arm_15108(ins, pc),
        0x3b05 => parse_arm_15109(ins, pc),
        0x3b06 => parse_arm_15110(ins, pc),
        0x3b07 => parse_arm_15111(ins, pc),
        0x3b08 => parse_arm_15112(ins, pc),
        0x3b09 => parse_arm_15113(ins, pc),
        0x3b0a => parse_arm_15114(ins, pc),
        0x3b0b => parse_arm_15115(ins, pc),
        0x3b0c => parse_arm_15116(ins, pc),
        0x3b0d => parse_arm_15117(ins, pc),
        0x3b0e => parse_arm_15118(ins, pc),
        0x3b0f => parse_arm_15119(ins, pc),
        0x3b10 => parse_arm_15120(ins, pc),
        0x3b11 => parse_arm_15121(ins, pc),
        0x3b12 => parse_arm_15122(ins, pc),
        0x3b13 => parse_arm_15123(ins, pc),
        0x3b14 => parse_arm_15124(ins, pc),
        0x3b15 => parse_arm_15125(ins, pc),
        0x3b16 => parse_arm_15126(ins, pc),
        0x3b17 => parse_arm_15127(ins, pc),
        0x3b18 => parse_arm_15128(ins, pc),
        0x3b19 => parse_arm_15129(ins, pc),
        0x3b1a => parse_arm_15130(ins, pc),
        0x3b1b => parse_arm_15131(ins, pc),
        0x3b1c => parse_arm_15132(ins, pc),
        0x3b1d => parse_arm_15133(ins, pc),
        0x3b1e => parse_arm_15134(ins, pc),
        0x3b1f => parse_arm_15135(ins, pc),
        0x3b20 => parse_arm_15136(ins, pc),
        0x3b21 => parse_arm_15137(ins, pc),
        0x3b22 => parse_arm_15138(ins, pc),
        0x3b23 => parse_arm_15139(ins, pc),
        0x3b24 => parse_arm_15140(ins, pc),
        0x3b25 => parse_arm_15141(ins, pc),
        0x3b26 => parse_arm_15142(ins, pc),
        0x3b27 => parse_arm_15143(ins, pc),
        0x3b28 => parse_arm_15144(ins, pc),
        0x3b29 => parse_arm_15145(ins, pc),
        0x3b2a => parse_arm_15146(ins, pc),
        0x3b2b => parse_arm_15147(ins, pc),
        0x3b2c => parse_arm_15148(ins, pc),
        0x3b2d => parse_arm_15149(ins, pc),
        0x3b2e => parse_arm_15150(ins, pc),
        0x3b2f => parse_arm_15151(ins, pc),
        0x3b30 => parse_arm_15152(ins, pc),
        0x3b31 => parse_arm_15153(ins, pc),
        0x3b32 => parse_arm_15154(ins, pc),
        0x3b33 => parse_arm_15155(ins, pc),
        0x3b34 => parse_arm_15156(ins, pc),
        0x3b35 => parse_arm_15157(ins, pc),
        0x3b36 => parse_arm_15158(ins, pc),
        0x3b37 => parse_arm_15159(ins, pc),
        0x3b38 => parse_arm_15160(ins, pc),
        0x3b39 => parse_arm_15161(ins, pc),
        0x3b3a => parse_arm_15162(ins, pc),
        0x3b3b => parse_arm_15163(ins, pc),
        0x3b3c => parse_arm_15164(ins, pc),
        0x3b3d => parse_arm_15165(ins, pc),
        0x3b3e => parse_arm_15166(ins, pc),
        0x3b3f => parse_arm_15167(ins, pc),
        0x3b40 => parse_arm_15168(ins, pc),
        0x3b41 => parse_arm_15169(ins, pc),
        0x3b42 => parse_arm_15170(ins, pc),
        0x3b43 => parse_arm_15171(ins, pc),
        0x3b44 => parse_arm_15172(ins, pc),
        0x3b45 => parse_arm_15173(ins, pc),
        0x3b46 => parse_arm_15174(ins, pc),
        0x3b47 => parse_arm_15175(ins, pc),
        0x3b48 => parse_arm_15176(ins, pc),
        0x3b49 => parse_arm_15177(ins, pc),
        0x3b4a => parse_arm_15178(ins, pc),
        0x3b4b => parse_arm_15179(ins, pc),
        0x3b4c => parse_arm_15180(ins, pc),
        0x3b4d => parse_arm_15181(ins, pc),
        0x3b4e => parse_arm_15182(ins, pc),
        0x3b4f => parse_arm_15183(ins, pc),
        0x3b50 => parse_arm_15184(ins, pc),
        0x3b51 => parse_arm_15185(ins, pc),
        0x3b52 => parse_arm_15186(ins, pc),
        0x3b53 => parse_arm_15187(ins, pc),
        0x3b54 => parse_arm_15188(ins, pc),
        0x3b55 => parse_arm_15189(ins, pc),
        0x3b56 => parse_arm_15190(ins, pc),
        0x3b57 => parse_arm_15191(ins, pc),
        0x3b58 => parse_arm_15192(ins, pc),
        0x3b59 => parse_arm_15193(ins, pc),
        0x3b5a => parse_arm_15194(ins, pc),
        0x3b5b => parse_arm_15195(ins, pc),
        0x3b5c => parse_arm_15196(ins, pc),
        0x3b5d => parse_arm_15197(ins, pc),
        0x3b5e => parse_arm_15198(ins, pc),
        0x3b5f => parse_arm_15199(ins, pc),
        0x3b60 => parse_arm_15200(ins, pc),
        0x3b61 => parse_arm_15201(ins, pc),
        0x3b62 => parse_arm_15202(ins, pc),
        0x3b63 => parse_arm_15203(ins, pc),
        0x3b64 => parse_arm_15204(ins, pc),
        0x3b65 => parse_arm_15205(ins, pc),
        0x3b66 => parse_arm_15206(ins, pc),
        0x3b67 => parse_arm_15207(ins, pc),
        0x3b68 => parse_arm_15208(ins, pc),
        0x3b69 => parse_arm_15209(ins, pc),
        0x3b6a => parse_arm_15210(ins, pc),
        0x3b6b => parse_arm_15211(ins, pc),
        0x3b6c => parse_arm_15212(ins, pc),
        0x3b6d => parse_arm_15213(ins, pc),
        0x3b6e => parse_arm_15214(ins, pc),
        0x3b6f => parse_arm_15215(ins, pc),
        0x3b70 => parse_arm_15216(ins, pc),
        0x3b71 => parse_arm_15217(ins, pc),
        0x3b72 => parse_arm_15218(ins, pc),
        0x3b73 => parse_arm_15219(ins, pc),
        0x3b74 => parse_arm_15220(ins, pc),
        0x3b75 => parse_arm_15221(ins, pc),
        0x3b76 => parse_arm_15222(ins, pc),
        0x3b77 => parse_arm_15223(ins, pc),
        0x3b78 => parse_arm_15224(ins, pc),
        0x3b79 => parse_arm_15225(ins, pc),
        0x3b7a => parse_arm_15226(ins, pc),
        0x3b7b => parse_arm_15227(ins, pc),
        0x3b7c => parse_arm_15228(ins, pc),
        0x3b7d => parse_arm_15229(ins, pc),
        0x3b7e => parse_arm_15230(ins, pc),
        0x3b7f => parse_arm_15231(ins, pc),
        0x3b80 => parse_arm_15232(ins, pc),
        0x3b81 => parse_arm_15233(ins, pc),
        0x3b82 => parse_arm_15234(ins, pc),
        0x3b83 => parse_arm_15235(ins, pc),
        0x3b84 => parse_arm_15236(ins, pc),
        0x3b85 => parse_arm_15237(ins, pc),
        0x3b86 => parse_arm_15238(ins, pc),
        0x3b87 => parse_arm_15239(ins, pc),
        0x3b88 => parse_arm_15240(ins, pc),
        0x3b89 => parse_arm_15241(ins, pc),
        0x3b8a => parse_arm_15242(ins, pc),
        0x3b8b => parse_arm_15243(ins, pc),
        0x3b8c => parse_arm_15244(ins, pc),
        0x3b8d => parse_arm_15245(ins, pc),
        0x3b8e => parse_arm_15246(ins, pc),
        0x3b8f => parse_arm_15247(ins, pc),
        0x3b90 => parse_arm_15248(ins, pc),
        0x3b91 => parse_arm_15249(ins, pc),
        0x3b92 => parse_arm_15250(ins, pc),
        0x3b93 => parse_arm_15251(ins, pc),
        0x3b94 => parse_arm_15252(ins, pc),
        0x3b95 => parse_arm_15253(ins, pc),
        0x3b96 => parse_arm_15254(ins, pc),
        0x3b97 => parse_arm_15255(ins, pc),
        0x3b98 => parse_arm_15256(ins, pc),
        0x3b99 => parse_arm_15257(ins, pc),
        0x3b9a => parse_arm_15258(ins, pc),
        0x3b9b => parse_arm_15259(ins, pc),
        0x3b9c => parse_arm_15260(ins, pc),
        0x3b9d => parse_arm_15261(ins, pc),
        0x3b9e => parse_arm_15262(ins, pc),
        0x3b9f => parse_arm_15263(ins, pc),
        0x3ba0 => parse_arm_15264(ins, pc),
        0x3ba1 => parse_arm_15265(ins, pc),
        0x3ba2 => parse_arm_15266(ins, pc),
        0x3ba3 => parse_arm_15267(ins, pc),
        0x3ba4 => parse_arm_15268(ins, pc),
        0x3ba5 => parse_arm_15269(ins, pc),
        0x3ba6 => parse_arm_15270(ins, pc),
        0x3ba7 => parse_arm_15271(ins, pc),
        0x3ba8 => parse_arm_15272(ins, pc),
        0x3ba9 => parse_arm_15273(ins, pc),
        0x3baa => parse_arm_15274(ins, pc),
        0x3bab => parse_arm_15275(ins, pc),
        0x3bac => parse_arm_15276(ins, pc),
        0x3bad => parse_arm_15277(ins, pc),
        0x3bae => parse_arm_15278(ins, pc),
        0x3baf => parse_arm_15279(ins, pc),
        0x3bb0 => parse_arm_15280(ins, pc),
        0x3bb1 => parse_arm_15281(ins, pc),
        0x3bb2 => parse_arm_15282(ins, pc),
        0x3bb3 => parse_arm_15283(ins, pc),
        0x3bb4 => parse_arm_15284(ins, pc),
        0x3bb5 => parse_arm_15285(ins, pc),
        0x3bb6 => parse_arm_15286(ins, pc),
        0x3bb7 => parse_arm_15287(ins, pc),
        0x3bb8 => parse_arm_15288(ins, pc),
        0x3bb9 => parse_arm_15289(ins, pc),
        0x3bba => parse_arm_15290(ins, pc),
        0x3bbb => parse_arm_15291(ins, pc),
        0x3bbc => parse_arm_15292(ins, pc),
        0x3bbd => parse_arm_15293(ins, pc),
        0x3bbe => parse_arm_15294(ins, pc),
        0x3bbf => parse_arm_15295(ins, pc),
        0x3bc0 => parse_arm_15296(ins, pc),
        0x3bc1 => parse_arm_15297(ins, pc),
        0x3bc2 => parse_arm_15298(ins, pc),
        0x3bc3 => parse_arm_15299(ins, pc),
        0x3bc4 => parse_arm_15300(ins, pc),
        0x3bc5 => parse_arm_15301(ins, pc),
        0x3bc6 => parse_arm_15302(ins, pc),
        0x3bc7 => parse_arm_15303(ins, pc),
        0x3bc8 => parse_arm_15304(ins, pc),
        0x3bc9 => parse_arm_15305(ins, pc),
        0x3bca => parse_arm_15306(ins, pc),
        0x3bcb => parse_arm_15307(ins, pc),
        0x3bcc => parse_arm_15308(ins, pc),
        0x3bcd => parse_arm_15309(ins, pc),
        0x3bce => parse_arm_15310(ins, pc),
        0x3bcf => parse_arm_15311(ins, pc),
        0x3bd0 => parse_arm_15312(ins, pc),
        0x3bd1 => parse_arm_15313(ins, pc),
        0x3bd2 => parse_arm_15314(ins, pc),
        0x3bd3 => parse_arm_15315(ins, pc),
        0x3bd4 => parse_arm_15316(ins, pc),
        0x3bd5 => parse_arm_15317(ins, pc),
        0x3bd6 => parse_arm_15318(ins, pc),
        0x3bd7 => parse_arm_15319(ins, pc),
        0x3bd8 => parse_arm_15320(ins, pc),
        0x3bd9 => parse_arm_15321(ins, pc),
        0x3bda => parse_arm_15322(ins, pc),
        0x3bdb => parse_arm_15323(ins, pc),
        0x3bdc => parse_arm_15324(ins, pc),
        0x3bdd => parse_arm_15325(ins, pc),
        0x3bde => parse_arm_15326(ins, pc),
        0x3bdf => parse_arm_15327(ins, pc),
        0x3be0 => parse_arm_15328(ins, pc),
        0x3be1 => parse_arm_15329(ins, pc),
        0x3be2 => parse_arm_15330(ins, pc),
        0x3be3 => parse_arm_15331(ins, pc),
        0x3be4 => parse_arm_15332(ins, pc),
        0x3be5 => parse_arm_15333(ins, pc),
        0x3be6 => parse_arm_15334(ins, pc),
        0x3be7 => parse_arm_15335(ins, pc),
        0x3be8 => parse_arm_15336(ins, pc),
        0x3be9 => parse_arm_15337(ins, pc),
        0x3bea => parse_arm_15338(ins, pc),
        0x3beb => parse_arm_15339(ins, pc),
        0x3bec => parse_arm_15340(ins, pc),
        0x3bed => parse_arm_15341(ins, pc),
        0x3bee => parse_arm_15342(ins, pc),
        0x3bef => parse_arm_15343(ins, pc),
        0x3bf0 => parse_arm_15344(ins, pc),
        0x3bf1 => parse_arm_15345(ins, pc),
        0x3bf2 => parse_arm_15346(ins, pc),
        0x3bf3 => parse_arm_15347(ins, pc),
        0x3bf4 => parse_arm_15348(ins, pc),
        0x3bf5 => parse_arm_15349(ins, pc),
        0x3bf6 => parse_arm_15350(ins, pc),
        0x3bf7 => parse_arm_15351(ins, pc),
        0x3bf8 => parse_arm_15352(ins, pc),
        0x3bf9 => parse_arm_15353(ins, pc),
        0x3bfa => parse_arm_15354(ins, pc),
        0x3bfb => parse_arm_15355(ins, pc),
        0x3bfc => parse_arm_15356(ins, pc),
        0x3bfd => parse_arm_15357(ins, pc),
        0x3bfe => parse_arm_15358(ins, pc),
        0x3bff => parse_arm_15359(ins, pc),
        0x3c00 => parse_arm_15360(ins, pc),
        0x3c01 => parse_arm_15361(ins, pc),
        0x3c02 => parse_arm_15362(ins, pc),
        0x3c03 => parse_arm_15363(ins, pc),
        0x3c04 => parse_arm_15364(ins, pc),
        0x3c05 => parse_arm_15365(ins, pc),
        0x3c06 => parse_arm_15366(ins, pc),
        0x3c07 => parse_arm_15367(ins, pc),
        0x3c08 => parse_arm_15368(ins, pc),
        0x3c09 => parse_arm_15369(ins, pc),
        0x3c0a => parse_arm_15370(ins, pc),
        0x3c0b => parse_arm_15371(ins, pc),
        0x3c0c => parse_arm_15372(ins, pc),
        0x3c0d => parse_arm_15373(ins, pc),
        0x3c0e => parse_arm_15374(ins, pc),
        0x3c0f => parse_arm_15375(ins, pc),
        0x3c10 => parse_arm_15376(ins, pc),
        0x3c11 => parse_arm_15377(ins, pc),
        0x3c12 => parse_arm_15378(ins, pc),
        0x3c13 => parse_arm_15379(ins, pc),
        0x3c14 => parse_arm_15380(ins, pc),
        0x3c15 => parse_arm_15381(ins, pc),
        0x3c16 => parse_arm_15382(ins, pc),
        0x3c17 => parse_arm_15383(ins, pc),
        0x3c18 => parse_arm_15384(ins, pc),
        0x3c19 => parse_arm_15385(ins, pc),
        0x3c1a => parse_arm_15386(ins, pc),
        0x3c1b => parse_arm_15387(ins, pc),
        0x3c1c => parse_arm_15388(ins, pc),
        0x3c1d => parse_arm_15389(ins, pc),
        0x3c1e => parse_arm_15390(ins, pc),
        0x3c1f => parse_arm_15391(ins, pc),
        0x3c20 => parse_arm_15392(ins, pc),
        0x3c21 => parse_arm_15393(ins, pc),
        0x3c22 => parse_arm_15394(ins, pc),
        0x3c23 => parse_arm_15395(ins, pc),
        0x3c24 => parse_arm_15396(ins, pc),
        0x3c25 => parse_arm_15397(ins, pc),
        0x3c26 => parse_arm_15398(ins, pc),
        0x3c27 => parse_arm_15399(ins, pc),
        0x3c28 => parse_arm_15400(ins, pc),
        0x3c29 => parse_arm_15401(ins, pc),
        0x3c2a => parse_arm_15402(ins, pc),
        0x3c2b => parse_arm_15403(ins, pc),
        0x3c2c => parse_arm_15404(ins, pc),
        0x3c2d => parse_arm_15405(ins, pc),
        0x3c2e => parse_arm_15406(ins, pc),
        0x3c2f => parse_arm_15407(ins, pc),
        0x3c30 => parse_arm_15408(ins, pc),
        0x3c31 => parse_arm_15409(ins, pc),
        0x3c32 => parse_arm_15410(ins, pc),
        0x3c33 => parse_arm_15411(ins, pc),
        0x3c34 => parse_arm_15412(ins, pc),
        0x3c35 => parse_arm_15413(ins, pc),
        0x3c36 => parse_arm_15414(ins, pc),
        0x3c37 => parse_arm_15415(ins, pc),
        0x3c38 => parse_arm_15416(ins, pc),
        0x3c39 => parse_arm_15417(ins, pc),
        0x3c3a => parse_arm_15418(ins, pc),
        0x3c3b => parse_arm_15419(ins, pc),
        0x3c3c => parse_arm_15420(ins, pc),
        0x3c3d => parse_arm_15421(ins, pc),
        0x3c3e => parse_arm_15422(ins, pc),
        0x3c3f => parse_arm_15423(ins, pc),
        0x3c40 => parse_arm_15424(ins, pc),
        0x3c41 => parse_arm_15425(ins, pc),
        0x3c42 => parse_arm_15426(ins, pc),
        0x3c43 => parse_arm_15427(ins, pc),
        0x3c44 => parse_arm_15428(ins, pc),
        0x3c45 => parse_arm_15429(ins, pc),
        0x3c46 => parse_arm_15430(ins, pc),
        0x3c47 => parse_arm_15431(ins, pc),
        0x3c48 => parse_arm_15432(ins, pc),
        0x3c49 => parse_arm_15433(ins, pc),
        0x3c4a => parse_arm_15434(ins, pc),
        0x3c4b => parse_arm_15435(ins, pc),
        0x3c4c => parse_arm_15436(ins, pc),
        0x3c4d => parse_arm_15437(ins, pc),
        0x3c4e => parse_arm_15438(ins, pc),
        0x3c4f => parse_arm_15439(ins, pc),
        0x3c50 => parse_arm_15440(ins, pc),
        0x3c51 => parse_arm_15441(ins, pc),
        0x3c52 => parse_arm_15442(ins, pc),
        0x3c53 => parse_arm_15443(ins, pc),
        0x3c54 => parse_arm_15444(ins, pc),
        0x3c55 => parse_arm_15445(ins, pc),
        0x3c56 => parse_arm_15446(ins, pc),
        0x3c57 => parse_arm_15447(ins, pc),
        0x3c58 => parse_arm_15448(ins, pc),
        0x3c59 => parse_arm_15449(ins, pc),
        0x3c5a => parse_arm_15450(ins, pc),
        0x3c5b => parse_arm_15451(ins, pc),
        0x3c5c => parse_arm_15452(ins, pc),
        0x3c5d => parse_arm_15453(ins, pc),
        0x3c5e => parse_arm_15454(ins, pc),
        0x3c5f => parse_arm_15455(ins, pc),
        0x3c60 => parse_arm_15456(ins, pc),
        0x3c61 => parse_arm_15457(ins, pc),
        0x3c62 => parse_arm_15458(ins, pc),
        0x3c63 => parse_arm_15459(ins, pc),
        0x3c64 => parse_arm_15460(ins, pc),
        0x3c65 => parse_arm_15461(ins, pc),
        0x3c66 => parse_arm_15462(ins, pc),
        0x3c67 => parse_arm_15463(ins, pc),
        0x3c68 => parse_arm_15464(ins, pc),
        0x3c69 => parse_arm_15465(ins, pc),
        0x3c6a => parse_arm_15466(ins, pc),
        0x3c6b => parse_arm_15467(ins, pc),
        0x3c6c => parse_arm_15468(ins, pc),
        0x3c6d => parse_arm_15469(ins, pc),
        0x3c6e => parse_arm_15470(ins, pc),
        0x3c6f => parse_arm_15471(ins, pc),
        0x3c70 => parse_arm_15472(ins, pc),
        0x3c71 => parse_arm_15473(ins, pc),
        0x3c72 => parse_arm_15474(ins, pc),
        0x3c73 => parse_arm_15475(ins, pc),
        0x3c74 => parse_arm_15476(ins, pc),
        0x3c75 => parse_arm_15477(ins, pc),
        0x3c76 => parse_arm_15478(ins, pc),
        0x3c77 => parse_arm_15479(ins, pc),
        0x3c78 => parse_arm_15480(ins, pc),
        0x3c79 => parse_arm_15481(ins, pc),
        0x3c7a => parse_arm_15482(ins, pc),
        0x3c7b => parse_arm_15483(ins, pc),
        0x3c7c => parse_arm_15484(ins, pc),
        0x3c7d => parse_arm_15485(ins, pc),
        0x3c7e => parse_arm_15486(ins, pc),
        0x3c7f => parse_arm_15487(ins, pc),
        0x3c80 => parse_arm_15488(ins, pc),
        0x3c81 => parse_arm_15489(ins, pc),
        0x3c82 => parse_arm_15490(ins, pc),
        0x3c83 => parse_arm_15491(ins, pc),
        0x3c84 => parse_arm_15492(ins, pc),
        0x3c85 => parse_arm_15493(ins, pc),
        0x3c86 => parse_arm_15494(ins, pc),
        0x3c87 => parse_arm_15495(ins, pc),
        0x3c88 => parse_arm_15496(ins, pc),
        0x3c89 => parse_arm_15497(ins, pc),
        0x3c8a => parse_arm_15498(ins, pc),
        0x3c8b => parse_arm_15499(ins, pc),
        0x3c8c => parse_arm_15500(ins, pc),
        0x3c8d => parse_arm_15501(ins, pc),
        0x3c8e => parse_arm_15502(ins, pc),
        0x3c8f => parse_arm_15503(ins, pc),
        0x3c90 => parse_arm_15504(ins, pc),
        0x3c91 => parse_arm_15505(ins, pc),
        0x3c92 => parse_arm_15506(ins, pc),
        0x3c93 => parse_arm_15507(ins, pc),
        0x3c94 => parse_arm_15508(ins, pc),
        0x3c95 => parse_arm_15509(ins, pc),
        0x3c96 => parse_arm_15510(ins, pc),
        0x3c97 => parse_arm_15511(ins, pc),
        0x3c98 => parse_arm_15512(ins, pc),
        0x3c99 => parse_arm_15513(ins, pc),
        0x3c9a => parse_arm_15514(ins, pc),
        0x3c9b => parse_arm_15515(ins, pc),
        0x3c9c => parse_arm_15516(ins, pc),
        0x3c9d => parse_arm_15517(ins, pc),
        0x3c9e => parse_arm_15518(ins, pc),
        0x3c9f => parse_arm_15519(ins, pc),
        0x3ca0 => parse_arm_15520(ins, pc),
        0x3ca1 => parse_arm_15521(ins, pc),
        0x3ca2 => parse_arm_15522(ins, pc),
        0x3ca3 => parse_arm_15523(ins, pc),
        0x3ca4 => parse_arm_15524(ins, pc),
        0x3ca5 => parse_arm_15525(ins, pc),
        0x3ca6 => parse_arm_15526(ins, pc),
        0x3ca7 => parse_arm_15527(ins, pc),
        0x3ca8 => parse_arm_15528(ins, pc),
        0x3ca9 => parse_arm_15529(ins, pc),
        0x3caa => parse_arm_15530(ins, pc),
        0x3cab => parse_arm_15531(ins, pc),
        0x3cac => parse_arm_15532(ins, pc),
        0x3cad => parse_arm_15533(ins, pc),
        0x3cae => parse_arm_15534(ins, pc),
        0x3caf => parse_arm_15535(ins, pc),
        0x3cb0 => parse_arm_15536(ins, pc),
        0x3cb1 => parse_arm_15537(ins, pc),
        0x3cb2 => parse_arm_15538(ins, pc),
        0x3cb3 => parse_arm_15539(ins, pc),
        0x3cb4 => parse_arm_15540(ins, pc),
        0x3cb5 => parse_arm_15541(ins, pc),
        0x3cb6 => parse_arm_15542(ins, pc),
        0x3cb7 => parse_arm_15543(ins, pc),
        0x3cb8 => parse_arm_15544(ins, pc),
        0x3cb9 => parse_arm_15545(ins, pc),
        0x3cba => parse_arm_15546(ins, pc),
        0x3cbb => parse_arm_15547(ins, pc),
        0x3cbc => parse_arm_15548(ins, pc),
        0x3cbd => parse_arm_15549(ins, pc),
        0x3cbe => parse_arm_15550(ins, pc),
        0x3cbf => parse_arm_15551(ins, pc),
        0x3cc0 => parse_arm_15552(ins, pc),
        0x3cc1 => parse_arm_15553(ins, pc),
        0x3cc2 => parse_arm_15554(ins, pc),
        0x3cc3 => parse_arm_15555(ins, pc),
        0x3cc4 => parse_arm_15556(ins, pc),
        0x3cc5 => parse_arm_15557(ins, pc),
        0x3cc6 => parse_arm_15558(ins, pc),
        0x3cc7 => parse_arm_15559(ins, pc),
        0x3cc8 => parse_arm_15560(ins, pc),
        0x3cc9 => parse_arm_15561(ins, pc),
        0x3cca => parse_arm_15562(ins, pc),
        0x3ccb => parse_arm_15563(ins, pc),
        0x3ccc => parse_arm_15564(ins, pc),
        0x3ccd => parse_arm_15565(ins, pc),
        0x3cce => parse_arm_15566(ins, pc),
        0x3ccf => parse_arm_15567(ins, pc),
        0x3cd0 => parse_arm_15568(ins, pc),
        0x3cd1 => parse_arm_15569(ins, pc),
        0x3cd2 => parse_arm_15570(ins, pc),
        0x3cd3 => parse_arm_15571(ins, pc),
        0x3cd4 => parse_arm_15572(ins, pc),
        0x3cd5 => parse_arm_15573(ins, pc),
        0x3cd6 => parse_arm_15574(ins, pc),
        0x3cd7 => parse_arm_15575(ins, pc),
        0x3cd8 => parse_arm_15576(ins, pc),
        0x3cd9 => parse_arm_15577(ins, pc),
        0x3cda => parse_arm_15578(ins, pc),
        0x3cdb => parse_arm_15579(ins, pc),
        0x3cdc => parse_arm_15580(ins, pc),
        0x3cdd => parse_arm_15581(ins, pc),
        0x3cde => parse_arm_15582(ins, pc),
        0x3cdf => parse_arm_15583(ins, pc),
        0x3ce0 => parse_arm_15584(ins, pc),
        0x3ce1 => parse_arm_15585(ins, pc),
        0x3ce2 => parse_arm_15586(ins, pc),
        0x3ce3 => parse_arm_15587(ins, pc),
        0x3ce4 => parse_arm_15588(ins, pc),
        0x3ce5 => parse_arm_15589(ins, pc),
        0x3ce6 => parse_arm_15590(ins, pc),
        0x3ce7 => parse_arm_15591(ins, pc),
        0x3ce8 => parse_arm_15592(ins, pc),
        0x3ce9 => parse_arm_15593(ins, pc),
        0x3cea => parse_arm_15594(ins, pc),
        0x3ceb => parse_arm_15595(ins, pc),
        0x3cec => parse_arm_15596(ins, pc),
        0x3ced => parse_arm_15597(ins, pc),
        0x3cee => parse_arm_15598(ins, pc),
        0x3cef => parse_arm_15599(ins, pc),
        0x3cf0 => parse_arm_15600(ins, pc),
        0x3cf1 => parse_arm_15601(ins, pc),
        0x3cf2 => parse_arm_15602(ins, pc),
        0x3cf3 => parse_arm_15603(ins, pc),
        0x3cf4 => parse_arm_15604(ins, pc),
        0x3cf5 => parse_arm_15605(ins, pc),
        0x3cf6 => parse_arm_15606(ins, pc),
        0x3cf7 => parse_arm_15607(ins, pc),
        0x3cf8 => parse_arm_15608(ins, pc),
        0x3cf9 => parse_arm_15609(ins, pc),
        0x3cfa => parse_arm_15610(ins, pc),
        0x3cfb => parse_arm_15611(ins, pc),
        0x3cfc => parse_arm_15612(ins, pc),
        0x3cfd => parse_arm_15613(ins, pc),
        0x3cfe => parse_arm_15614(ins, pc),
        0x3cff => parse_arm_15615(ins, pc),
        0x3d00 => parse_arm_15616(ins, pc),
        0x3d01 => parse_arm_15617(ins, pc),
        0x3d02 => parse_arm_15618(ins, pc),
        0x3d03 => parse_arm_15619(ins, pc),
        0x3d04 => parse_arm_15620(ins, pc),
        0x3d05 => parse_arm_15621(ins, pc),
        0x3d06 => parse_arm_15622(ins, pc),
        0x3d07 => parse_arm_15623(ins, pc),
        0x3d08 => parse_arm_15624(ins, pc),
        0x3d09 => parse_arm_15625(ins, pc),
        0x3d0a => parse_arm_15626(ins, pc),
        0x3d0b => parse_arm_15627(ins, pc),
        0x3d0c => parse_arm_15628(ins, pc),
        0x3d0d => parse_arm_15629(ins, pc),
        0x3d0e => parse_arm_15630(ins, pc),
        0x3d0f => parse_arm_15631(ins, pc),
        0x3d10 => parse_arm_15632(ins, pc),
        0x3d11 => parse_arm_15633(ins, pc),
        0x3d12 => parse_arm_15634(ins, pc),
        0x3d13 => parse_arm_15635(ins, pc),
        0x3d14 => parse_arm_15636(ins, pc),
        0x3d15 => parse_arm_15637(ins, pc),
        0x3d16 => parse_arm_15638(ins, pc),
        0x3d17 => parse_arm_15639(ins, pc),
        0x3d18 => parse_arm_15640(ins, pc),
        0x3d19 => parse_arm_15641(ins, pc),
        0x3d1a => parse_arm_15642(ins, pc),
        0x3d1b => parse_arm_15643(ins, pc),
        0x3d1c => parse_arm_15644(ins, pc),
        0x3d1d => parse_arm_15645(ins, pc),
        0x3d1e => parse_arm_15646(ins, pc),
        0x3d1f => parse_arm_15647(ins, pc),
        0x3d20 => parse_arm_15648(ins, pc),
        0x3d21 => parse_arm_15649(ins, pc),
        0x3d22 => parse_arm_15650(ins, pc),
        0x3d23 => parse_arm_15651(ins, pc),
        0x3d24 => parse_arm_15652(ins, pc),
        0x3d25 => parse_arm_15653(ins, pc),
        0x3d26 => parse_arm_15654(ins, pc),
        0x3d27 => parse_arm_15655(ins, pc),
        0x3d28 => parse_arm_15656(ins, pc),
        0x3d29 => parse_arm_15657(ins, pc),
        0x3d2a => parse_arm_15658(ins, pc),
        0x3d2b => parse_arm_15659(ins, pc),
        0x3d2c => parse_arm_15660(ins, pc),
        0x3d2d => parse_arm_15661(ins, pc),
        0x3d2e => parse_arm_15662(ins, pc),
        0x3d2f => parse_arm_15663(ins, pc),
        0x3d30 => parse_arm_15664(ins, pc),
        0x3d31 => parse_arm_15665(ins, pc),
        0x3d32 => parse_arm_15666(ins, pc),
        0x3d33 => parse_arm_15667(ins, pc),
        0x3d34 => parse_arm_15668(ins, pc),
        0x3d35 => parse_arm_15669(ins, pc),
        0x3d36 => parse_arm_15670(ins, pc),
        0x3d37 => parse_arm_15671(ins, pc),
        0x3d38 => parse_arm_15672(ins, pc),
        0x3d39 => parse_arm_15673(ins, pc),
        0x3d3a => parse_arm_15674(ins, pc),
        0x3d3b => parse_arm_15675(ins, pc),
        0x3d3c => parse_arm_15676(ins, pc),
        0x3d3d => parse_arm_15677(ins, pc),
        0x3d3e => parse_arm_15678(ins, pc),
        0x3d3f => parse_arm_15679(ins, pc),
        0x3d40 => parse_arm_15680(ins, pc),
        0x3d41 => parse_arm_15681(ins, pc),
        0x3d42 => parse_arm_15682(ins, pc),
        0x3d43 => parse_arm_15683(ins, pc),
        0x3d44 => parse_arm_15684(ins, pc),
        0x3d45 => parse_arm_15685(ins, pc),
        0x3d46 => parse_arm_15686(ins, pc),
        0x3d47 => parse_arm_15687(ins, pc),
        0x3d48 => parse_arm_15688(ins, pc),
        0x3d49 => parse_arm_15689(ins, pc),
        0x3d4a => parse_arm_15690(ins, pc),
        0x3d4b => parse_arm_15691(ins, pc),
        0x3d4c => parse_arm_15692(ins, pc),
        0x3d4d => parse_arm_15693(ins, pc),
        0x3d4e => parse_arm_15694(ins, pc),
        0x3d4f => parse_arm_15695(ins, pc),
        0x3d50 => parse_arm_15696(ins, pc),
        0x3d51 => parse_arm_15697(ins, pc),
        0x3d52 => parse_arm_15698(ins, pc),
        0x3d53 => parse_arm_15699(ins, pc),
        0x3d54 => parse_arm_15700(ins, pc),
        0x3d55 => parse_arm_15701(ins, pc),
        0x3d56 => parse_arm_15702(ins, pc),
        0x3d57 => parse_arm_15703(ins, pc),
        0x3d58 => parse_arm_15704(ins, pc),
        0x3d59 => parse_arm_15705(ins, pc),
        0x3d5a => parse_arm_15706(ins, pc),
        0x3d5b => parse_arm_15707(ins, pc),
        0x3d5c => parse_arm_15708(ins, pc),
        0x3d5d => parse_arm_15709(ins, pc),
        0x3d5e => parse_arm_15710(ins, pc),
        0x3d5f => parse_arm_15711(ins, pc),
        0x3d60 => parse_arm_15712(ins, pc),
        0x3d61 => parse_arm_15713(ins, pc),
        0x3d62 => parse_arm_15714(ins, pc),
        0x3d63 => parse_arm_15715(ins, pc),
        0x3d64 => parse_arm_15716(ins, pc),
        0x3d65 => parse_arm_15717(ins, pc),
        0x3d66 => parse_arm_15718(ins, pc),
        0x3d67 => parse_arm_15719(ins, pc),
        0x3d68 => parse_arm_15720(ins, pc),
        0x3d69 => parse_arm_15721(ins, pc),
        0x3d6a => parse_arm_15722(ins, pc),
        0x3d6b => parse_arm_15723(ins, pc),
        0x3d6c => parse_arm_15724(ins, pc),
        0x3d6d => parse_arm_15725(ins, pc),
        0x3d6e => parse_arm_15726(ins, pc),
        0x3d6f => parse_arm_15727(ins, pc),
        0x3d70 => parse_arm_15728(ins, pc),
        0x3d71 => parse_arm_15729(ins, pc),
        0x3d72 => parse_arm_15730(ins, pc),
        0x3d73 => parse_arm_15731(ins, pc),
        0x3d74 => parse_arm_15732(ins, pc),
        0x3d75 => parse_arm_15733(ins, pc),
        0x3d76 => parse_arm_15734(ins, pc),
        0x3d77 => parse_arm_15735(ins, pc),
        0x3d78 => parse_arm_15736(ins, pc),
        0x3d79 => parse_arm_15737(ins, pc),
        0x3d7a => parse_arm_15738(ins, pc),
        0x3d7b => parse_arm_15739(ins, pc),
        0x3d7c => parse_arm_15740(ins, pc),
        0x3d7d => parse_arm_15741(ins, pc),
        0x3d7e => parse_arm_15742(ins, pc),
        0x3d7f => parse_arm_15743(ins, pc),
        0x3d80 => parse_arm_15744(ins, pc),
        0x3d81 => parse_arm_15745(ins, pc),
        0x3d82 => parse_arm_15746(ins, pc),
        0x3d83 => parse_arm_15747(ins, pc),
        0x3d84 => parse_arm_15748(ins, pc),
        0x3d85 => parse_arm_15749(ins, pc),
        0x3d86 => parse_arm_15750(ins, pc),
        0x3d87 => parse_arm_15751(ins, pc),
        0x3d88 => parse_arm_15752(ins, pc),
        0x3d89 => parse_arm_15753(ins, pc),
        0x3d8a => parse_arm_15754(ins, pc),
        0x3d8b => parse_arm_15755(ins, pc),
        0x3d8c => parse_arm_15756(ins, pc),
        0x3d8d => parse_arm_15757(ins, pc),
        0x3d8e => parse_arm_15758(ins, pc),
        0x3d8f => parse_arm_15759(ins, pc),
        0x3d90 => parse_arm_15760(ins, pc),
        0x3d91 => parse_arm_15761(ins, pc),
        0x3d92 => parse_arm_15762(ins, pc),
        0x3d93 => parse_arm_15763(ins, pc),
        0x3d94 => parse_arm_15764(ins, pc),
        0x3d95 => parse_arm_15765(ins, pc),
        0x3d96 => parse_arm_15766(ins, pc),
        0x3d97 => parse_arm_15767(ins, pc),
        0x3d98 => parse_arm_15768(ins, pc),
        0x3d99 => parse_arm_15769(ins, pc),
        0x3d9a => parse_arm_15770(ins, pc),
        0x3d9b => parse_arm_15771(ins, pc),
        0x3d9c => parse_arm_15772(ins, pc),
        0x3d9d => parse_arm_15773(ins, pc),
        0x3d9e => parse_arm_15774(ins, pc),
        0x3d9f => parse_arm_15775(ins, pc),
        0x3da0 => parse_arm_15776(ins, pc),
        0x3da1 => parse_arm_15777(ins, pc),
        0x3da2 => parse_arm_15778(ins, pc),
        0x3da3 => parse_arm_15779(ins, pc),
        0x3da4 => parse_arm_15780(ins, pc),
        0x3da5 => parse_arm_15781(ins, pc),
        0x3da6 => parse_arm_15782(ins, pc),
        0x3da7 => parse_arm_15783(ins, pc),
        0x3da8 => parse_arm_15784(ins, pc),
        0x3da9 => parse_arm_15785(ins, pc),
        0x3daa => parse_arm_15786(ins, pc),
        0x3dab => parse_arm_15787(ins, pc),
        0x3dac => parse_arm_15788(ins, pc),
        0x3dad => parse_arm_15789(ins, pc),
        0x3dae => parse_arm_15790(ins, pc),
        0x3daf => parse_arm_15791(ins, pc),
        0x3db0 => parse_arm_15792(ins, pc),
        0x3db1 => parse_arm_15793(ins, pc),
        0x3db2 => parse_arm_15794(ins, pc),
        0x3db3 => parse_arm_15795(ins, pc),
        0x3db4 => parse_arm_15796(ins, pc),
        0x3db5 => parse_arm_15797(ins, pc),
        0x3db6 => parse_arm_15798(ins, pc),
        0x3db7 => parse_arm_15799(ins, pc),
        0x3db8 => parse_arm_15800(ins, pc),
        0x3db9 => parse_arm_15801(ins, pc),
        0x3dba => parse_arm_15802(ins, pc),
        0x3dbb => parse_arm_15803(ins, pc),
        0x3dbc => parse_arm_15804(ins, pc),
        0x3dbd => parse_arm_15805(ins, pc),
        0x3dbe => parse_arm_15806(ins, pc),
        0x3dbf => parse_arm_15807(ins, pc),
        0x3dc0 => parse_arm_15808(ins, pc),
        0x3dc1 => parse_arm_15809(ins, pc),
        0x3dc2 => parse_arm_15810(ins, pc),
        0x3dc3 => parse_arm_15811(ins, pc),
        0x3dc4 => parse_arm_15812(ins, pc),
        0x3dc5 => parse_arm_15813(ins, pc),
        0x3dc6 => parse_arm_15814(ins, pc),
        0x3dc7 => parse_arm_15815(ins, pc),
        0x3dc8 => parse_arm_15816(ins, pc),
        0x3dc9 => parse_arm_15817(ins, pc),
        0x3dca => parse_arm_15818(ins, pc),
        0x3dcb => parse_arm_15819(ins, pc),
        0x3dcc => parse_arm_15820(ins, pc),
        0x3dcd => parse_arm_15821(ins, pc),
        0x3dce => parse_arm_15822(ins, pc),
        0x3dcf => parse_arm_15823(ins, pc),
        0x3dd0 => parse_arm_15824(ins, pc),
        0x3dd1 => parse_arm_15825(ins, pc),
        0x3dd2 => parse_arm_15826(ins, pc),
        0x3dd3 => parse_arm_15827(ins, pc),
        0x3dd4 => parse_arm_15828(ins, pc),
        0x3dd5 => parse_arm_15829(ins, pc),
        0x3dd6 => parse_arm_15830(ins, pc),
        0x3dd7 => parse_arm_15831(ins, pc),
        0x3dd8 => parse_arm_15832(ins, pc),
        0x3dd9 => parse_arm_15833(ins, pc),
        0x3dda => parse_arm_15834(ins, pc),
        0x3ddb => parse_arm_15835(ins, pc),
        0x3ddc => parse_arm_15836(ins, pc),
        0x3ddd => parse_arm_15837(ins, pc),
        0x3dde => parse_arm_15838(ins, pc),
        0x3ddf => parse_arm_15839(ins, pc),
        0x3de0 => parse_arm_15840(ins, pc),
        0x3de1 => parse_arm_15841(ins, pc),
        0x3de2 => parse_arm_15842(ins, pc),
        0x3de3 => parse_arm_15843(ins, pc),
        0x3de4 => parse_arm_15844(ins, pc),
        0x3de5 => parse_arm_15845(ins, pc),
        0x3de6 => parse_arm_15846(ins, pc),
        0x3de7 => parse_arm_15847(ins, pc),
        0x3de8 => parse_arm_15848(ins, pc),
        0x3de9 => parse_arm_15849(ins, pc),
        0x3dea => parse_arm_15850(ins, pc),
        0x3deb => parse_arm_15851(ins, pc),
        0x3dec => parse_arm_15852(ins, pc),
        0x3ded => parse_arm_15853(ins, pc),
        0x3dee => parse_arm_15854(ins, pc),
        0x3def => parse_arm_15855(ins, pc),
        0x3df0 => parse_arm_15856(ins, pc),
        0x3df1 => parse_arm_15857(ins, pc),
        0x3df2 => parse_arm_15858(ins, pc),
        0x3df3 => parse_arm_15859(ins, pc),
        0x3df4 => parse_arm_15860(ins, pc),
        0x3df5 => parse_arm_15861(ins, pc),
        0x3df6 => parse_arm_15862(ins, pc),
        0x3df7 => parse_arm_15863(ins, pc),
        0x3df8 => parse_arm_15864(ins, pc),
        0x3df9 => parse_arm_15865(ins, pc),
        0x3dfa => parse_arm_15866(ins, pc),
        0x3dfb => parse_arm_15867(ins, pc),
        0x3dfc => parse_arm_15868(ins, pc),
        0x3dfd => parse_arm_15869(ins, pc),
        0x3dfe => parse_arm_15870(ins, pc),
        0x3dff => parse_arm_15871(ins, pc),
        0x3e00 => parse_arm_15872(ins, pc),
        0x3e01 => parse_arm_15873(ins, pc),
        0x3e02 => parse_arm_15874(ins, pc),
        0x3e03 => parse_arm_15875(ins, pc),
        0x3e04 => parse_arm_15876(ins, pc),
        0x3e05 => parse_arm_15877(ins, pc),
        0x3e06 => parse_arm_15878(ins, pc),
        0x3e07 => parse_arm_15879(ins, pc),
        0x3e08 => parse_arm_15880(ins, pc),
        0x3e09 => parse_arm_15881(ins, pc),
        0x3e0a => parse_arm_15882(ins, pc),
        0x3e0b => parse_arm_15883(ins, pc),
        0x3e0c => parse_arm_15884(ins, pc),
        0x3e0d => parse_arm_15885(ins, pc),
        0x3e0e => parse_arm_15886(ins, pc),
        0x3e0f => parse_arm_15887(ins, pc),
        0x3e10 => parse_arm_15888(ins, pc),
        0x3e11 => parse_arm_15889(ins, pc),
        0x3e12 => parse_arm_15890(ins, pc),
        0x3e13 => parse_arm_15891(ins, pc),
        0x3e14 => parse_arm_15892(ins, pc),
        0x3e15 => parse_arm_15893(ins, pc),
        0x3e16 => parse_arm_15894(ins, pc),
        0x3e17 => parse_arm_15895(ins, pc),
        0x3e18 => parse_arm_15896(ins, pc),
        0x3e19 => parse_arm_15897(ins, pc),
        0x3e1a => parse_arm_15898(ins, pc),
        0x3e1b => parse_arm_15899(ins, pc),
        0x3e1c => parse_arm_15900(ins, pc),
        0x3e1d => parse_arm_15901(ins, pc),
        0x3e1e => parse_arm_15902(ins, pc),
        0x3e1f => parse_arm_15903(ins, pc),
        0x3e20 => parse_arm_15904(ins, pc),
        0x3e21 => parse_arm_15905(ins, pc),
        0x3e22 => parse_arm_15906(ins, pc),
        0x3e23 => parse_arm_15907(ins, pc),
        0x3e24 => parse_arm_15908(ins, pc),
        0x3e25 => parse_arm_15909(ins, pc),
        0x3e26 => parse_arm_15910(ins, pc),
        0x3e27 => parse_arm_15911(ins, pc),
        0x3e28 => parse_arm_15912(ins, pc),
        0x3e29 => parse_arm_15913(ins, pc),
        0x3e2a => parse_arm_15914(ins, pc),
        0x3e2b => parse_arm_15915(ins, pc),
        0x3e2c => parse_arm_15916(ins, pc),
        0x3e2d => parse_arm_15917(ins, pc),
        0x3e2e => parse_arm_15918(ins, pc),
        0x3e2f => parse_arm_15919(ins, pc),
        0x3e30 => parse_arm_15920(ins, pc),
        0x3e31 => parse_arm_15921(ins, pc),
        0x3e32 => parse_arm_15922(ins, pc),
        0x3e33 => parse_arm_15923(ins, pc),
        0x3e34 => parse_arm_15924(ins, pc),
        0x3e35 => parse_arm_15925(ins, pc),
        0x3e36 => parse_arm_15926(ins, pc),
        0x3e37 => parse_arm_15927(ins, pc),
        0x3e38 => parse_arm_15928(ins, pc),
        0x3e39 => parse_arm_15929(ins, pc),
        0x3e3a => parse_arm_15930(ins, pc),
        0x3e3b => parse_arm_15931(ins, pc),
        0x3e3c => parse_arm_15932(ins, pc),
        0x3e3d => parse_arm_15933(ins, pc),
        0x3e3e => parse_arm_15934(ins, pc),
        0x3e3f => parse_arm_15935(ins, pc),
        0x3e40 => parse_arm_15936(ins, pc),
        0x3e41 => parse_arm_15937(ins, pc),
        0x3e42 => parse_arm_15938(ins, pc),
        0x3e43 => parse_arm_15939(ins, pc),
        0x3e44 => parse_arm_15940(ins, pc),
        0x3e45 => parse_arm_15941(ins, pc),
        0x3e46 => parse_arm_15942(ins, pc),
        0x3e47 => parse_arm_15943(ins, pc),
        0x3e48 => parse_arm_15944(ins, pc),
        0x3e49 => parse_arm_15945(ins, pc),
        0x3e4a => parse_arm_15946(ins, pc),
        0x3e4b => parse_arm_15947(ins, pc),
        0x3e4c => parse_arm_15948(ins, pc),
        0x3e4d => parse_arm_15949(ins, pc),
        0x3e4e => parse_arm_15950(ins, pc),
        0x3e4f => parse_arm_15951(ins, pc),
        0x3e50 => parse_arm_15952(ins, pc),
        0x3e51 => parse_arm_15953(ins, pc),
        0x3e52 => parse_arm_15954(ins, pc),
        0x3e53 => parse_arm_15955(ins, pc),
        0x3e54 => parse_arm_15956(ins, pc),
        0x3e55 => parse_arm_15957(ins, pc),
        0x3e56 => parse_arm_15958(ins, pc),
        0x3e57 => parse_arm_15959(ins, pc),
        0x3e58 => parse_arm_15960(ins, pc),
        0x3e59 => parse_arm_15961(ins, pc),
        0x3e5a => parse_arm_15962(ins, pc),
        0x3e5b => parse_arm_15963(ins, pc),
        0x3e5c => parse_arm_15964(ins, pc),
        0x3e5d => parse_arm_15965(ins, pc),
        0x3e5e => parse_arm_15966(ins, pc),
        0x3e5f => parse_arm_15967(ins, pc),
        0x3e60 => parse_arm_15968(ins, pc),
        0x3e61 => parse_arm_15969(ins, pc),
        0x3e62 => parse_arm_15970(ins, pc),
        0x3e63 => parse_arm_15971(ins, pc),
        0x3e64 => parse_arm_15972(ins, pc),
        0x3e65 => parse_arm_15973(ins, pc),
        0x3e66 => parse_arm_15974(ins, pc),
        0x3e67 => parse_arm_15975(ins, pc),
        0x3e68 => parse_arm_15976(ins, pc),
        0x3e69 => parse_arm_15977(ins, pc),
        0x3e6a => parse_arm_15978(ins, pc),
        0x3e6b => parse_arm_15979(ins, pc),
        0x3e6c => parse_arm_15980(ins, pc),
        0x3e6d => parse_arm_15981(ins, pc),
        0x3e6e => parse_arm_15982(ins, pc),
        0x3e6f => parse_arm_15983(ins, pc),
        0x3e70 => parse_arm_15984(ins, pc),
        0x3e71 => parse_arm_15985(ins, pc),
        0x3e72 => parse_arm_15986(ins, pc),
        0x3e73 => parse_arm_15987(ins, pc),
        0x3e74 => parse_arm_15988(ins, pc),
        0x3e75 => parse_arm_15989(ins, pc),
        0x3e76 => parse_arm_15990(ins, pc),
        0x3e77 => parse_arm_15991(ins, pc),
        0x3e78 => parse_arm_15992(ins, pc),
        0x3e79 => parse_arm_15993(ins, pc),
        0x3e7a => parse_arm_15994(ins, pc),
        0x3e7b => parse_arm_15995(ins, pc),
        0x3e7c => parse_arm_15996(ins, pc),
        0x3e7d => parse_arm_15997(ins, pc),
        0x3e7e => parse_arm_15998(ins, pc),
        0x3e7f => parse_arm_15999(ins, pc),
        0x3e80 => parse_arm_16000(ins, pc),
        0x3e81 => parse_arm_16001(ins, pc),
        0x3e82 => parse_arm_16002(ins, pc),
        0x3e83 => parse_arm_16003(ins, pc),
        0x3e84 => parse_arm_16004(ins, pc),
        0x3e85 => parse_arm_16005(ins, pc),
        0x3e86 => parse_arm_16006(ins, pc),
        0x3e87 => parse_arm_16007(ins, pc),
        0x3e88 => parse_arm_16008(ins, pc),
        0x3e89 => parse_arm_16009(ins, pc),
        0x3e8a => parse_arm_16010(ins, pc),
        0x3e8b => parse_arm_16011(ins, pc),
        0x3e8c => parse_arm_16012(ins, pc),
        0x3e8d => parse_arm_16013(ins, pc),
        0x3e8e => parse_arm_16014(ins, pc),
        0x3e8f => parse_arm_16015(ins, pc),
        0x3e90 => parse_arm_16016(ins, pc),
        0x3e91 => parse_arm_16017(ins, pc),
        0x3e92 => parse_arm_16018(ins, pc),
        0x3e93 => parse_arm_16019(ins, pc),
        0x3e94 => parse_arm_16020(ins, pc),
        0x3e95 => parse_arm_16021(ins, pc),
        0x3e96 => parse_arm_16022(ins, pc),
        0x3e97 => parse_arm_16023(ins, pc),
        0x3e98 => parse_arm_16024(ins, pc),
        0x3e99 => parse_arm_16025(ins, pc),
        0x3e9a => parse_arm_16026(ins, pc),
        0x3e9b => parse_arm_16027(ins, pc),
        0x3e9c => parse_arm_16028(ins, pc),
        0x3e9d => parse_arm_16029(ins, pc),
        0x3e9e => parse_arm_16030(ins, pc),
        0x3e9f => parse_arm_16031(ins, pc),
        0x3ea0 => parse_arm_16032(ins, pc),
        0x3ea1 => parse_arm_16033(ins, pc),
        0x3ea2 => parse_arm_16034(ins, pc),
        0x3ea3 => parse_arm_16035(ins, pc),
        0x3ea4 => parse_arm_16036(ins, pc),
        0x3ea5 => parse_arm_16037(ins, pc),
        0x3ea6 => parse_arm_16038(ins, pc),
        0x3ea7 => parse_arm_16039(ins, pc),
        0x3ea8 => parse_arm_16040(ins, pc),
        0x3ea9 => parse_arm_16041(ins, pc),
        0x3eaa => parse_arm_16042(ins, pc),
        0x3eab => parse_arm_16043(ins, pc),
        0x3eac => parse_arm_16044(ins, pc),
        0x3ead => parse_arm_16045(ins, pc),
        0x3eae => parse_arm_16046(ins, pc),
        0x3eaf => parse_arm_16047(ins, pc),
        0x3eb0 => parse_arm_16048(ins, pc),
        0x3eb1 => parse_arm_16049(ins, pc),
        0x3eb2 => parse_arm_16050(ins, pc),
        0x3eb3 => parse_arm_16051(ins, pc),
        0x3eb4 => parse_arm_16052(ins, pc),
        0x3eb5 => parse_arm_16053(ins, pc),
        0x3eb6 => parse_arm_16054(ins, pc),
        0x3eb7 => parse_arm_16055(ins, pc),
        0x3eb8 => parse_arm_16056(ins, pc),
        0x3eb9 => parse_arm_16057(ins, pc),
        0x3eba => parse_arm_16058(ins, pc),
        0x3ebb => parse_arm_16059(ins, pc),
        0x3ebc => parse_arm_16060(ins, pc),
        0x3ebd => parse_arm_16061(ins, pc),
        0x3ebe => parse_arm_16062(ins, pc),
        0x3ebf => parse_arm_16063(ins, pc),
        0x3ec0 => parse_arm_16064(ins, pc),
        0x3ec1 => parse_arm_16065(ins, pc),
        0x3ec2 => parse_arm_16066(ins, pc),
        0x3ec3 => parse_arm_16067(ins, pc),
        0x3ec4 => parse_arm_16068(ins, pc),
        0x3ec5 => parse_arm_16069(ins, pc),
        0x3ec6 => parse_arm_16070(ins, pc),
        0x3ec7 => parse_arm_16071(ins, pc),
        0x3ec8 => parse_arm_16072(ins, pc),
        0x3ec9 => parse_arm_16073(ins, pc),
        0x3eca => parse_arm_16074(ins, pc),
        0x3ecb => parse_arm_16075(ins, pc),
        0x3ecc => parse_arm_16076(ins, pc),
        0x3ecd => parse_arm_16077(ins, pc),
        0x3ece => parse_arm_16078(ins, pc),
        0x3ecf => parse_arm_16079(ins, pc),
        0x3ed0 => parse_arm_16080(ins, pc),
        0x3ed1 => parse_arm_16081(ins, pc),
        0x3ed2 => parse_arm_16082(ins, pc),
        0x3ed3 => parse_arm_16083(ins, pc),
        0x3ed4 => parse_arm_16084(ins, pc),
        0x3ed5 => parse_arm_16085(ins, pc),
        0x3ed6 => parse_arm_16086(ins, pc),
        0x3ed7 => parse_arm_16087(ins, pc),
        0x3ed8 => parse_arm_16088(ins, pc),
        0x3ed9 => parse_arm_16089(ins, pc),
        0x3eda => parse_arm_16090(ins, pc),
        0x3edb => parse_arm_16091(ins, pc),
        0x3edc => parse_arm_16092(ins, pc),
        0x3edd => parse_arm_16093(ins, pc),
        0x3ede => parse_arm_16094(ins, pc),
        0x3edf => parse_arm_16095(ins, pc),
        0x3ee0 => parse_arm_16096(ins, pc),
        0x3ee1 => parse_arm_16097(ins, pc),
        0x3ee2 => parse_arm_16098(ins, pc),
        0x3ee3 => parse_arm_16099(ins, pc),
        0x3ee4 => parse_arm_16100(ins, pc),
        0x3ee5 => parse_arm_16101(ins, pc),
        0x3ee6 => parse_arm_16102(ins, pc),
        0x3ee7 => parse_arm_16103(ins, pc),
        0x3ee8 => parse_arm_16104(ins, pc),
        0x3ee9 => parse_arm_16105(ins, pc),
        0x3eea => parse_arm_16106(ins, pc),
        0x3eeb => parse_arm_16107(ins, pc),
        0x3eec => parse_arm_16108(ins, pc),
        0x3eed => parse_arm_16109(ins, pc),
        0x3eee => parse_arm_16110(ins, pc),
        0x3eef => parse_arm_16111(ins, pc),
        0x3ef0 => parse_arm_16112(ins, pc),
        0x3ef1 => parse_arm_16113(ins, pc),
        0x3ef2 => parse_arm_16114(ins, pc),
        0x3ef3 => parse_arm_16115(ins, pc),
        0x3ef4 => parse_arm_16116(ins, pc),
        0x3ef5 => parse_arm_16117(ins, pc),
        0x3ef6 => parse_arm_16118(ins, pc),
        0x3ef7 => parse_arm_16119(ins, pc),
        0x3ef8 => parse_arm_16120(ins, pc),
        0x3ef9 => parse_arm_16121(ins, pc),
        0x3efa => parse_arm_16122(ins, pc),
        0x3efb => parse_arm_16123(ins, pc),
        0x3efc => parse_arm_16124(ins, pc),
        0x3efd => parse_arm_16125(ins, pc),
        0x3efe => parse_arm_16126(ins, pc),
        0x3eff => parse_arm_16127(ins, pc),
        0x3f00 => parse_arm_16128(ins, pc),
        0x3f01 => parse_arm_16129(ins, pc),
        0x3f02 => parse_arm_16130(ins, pc),
        0x3f03 => parse_arm_16131(ins, pc),
        0x3f04 => parse_arm_16132(ins, pc),
        0x3f05 => parse_arm_16133(ins, pc),
        0x3f06 => parse_arm_16134(ins, pc),
        0x3f07 => parse_arm_16135(ins, pc),
        0x3f08 => parse_arm_16136(ins, pc),
        0x3f09 => parse_arm_16137(ins, pc),
        0x3f0a => parse_arm_16138(ins, pc),
        0x3f0b => parse_arm_16139(ins, pc),
        0x3f0c => parse_arm_16140(ins, pc),
        0x3f0d => parse_arm_16141(ins, pc),
        0x3f0e => parse_arm_16142(ins, pc),
        0x3f0f => parse_arm_16143(ins, pc),
        0x3f10 => parse_arm_16144(ins, pc),
        0x3f11 => parse_arm_16145(ins, pc),
        0x3f12 => parse_arm_16146(ins, pc),
        0x3f13 => parse_arm_16147(ins, pc),
        0x3f14 => parse_arm_16148(ins, pc),
        0x3f15 => parse_arm_16149(ins, pc),
        0x3f16 => parse_arm_16150(ins, pc),
        0x3f17 => parse_arm_16151(ins, pc),
        0x3f18 => parse_arm_16152(ins, pc),
        0x3f19 => parse_arm_16153(ins, pc),
        0x3f1a => parse_arm_16154(ins, pc),
        0x3f1b => parse_arm_16155(ins, pc),
        0x3f1c => parse_arm_16156(ins, pc),
        0x3f1d => parse_arm_16157(ins, pc),
        0x3f1e => parse_arm_16158(ins, pc),
        0x3f1f => parse_arm_16159(ins, pc),
        0x3f20 => parse_arm_16160(ins, pc),
        0x3f21 => parse_arm_16161(ins, pc),
        0x3f22 => parse_arm_16162(ins, pc),
        0x3f23 => parse_arm_16163(ins, pc),
        0x3f24 => parse_arm_16164(ins, pc),
        0x3f25 => parse_arm_16165(ins, pc),
        0x3f26 => parse_arm_16166(ins, pc),
        0x3f27 => parse_arm_16167(ins, pc),
        0x3f28 => parse_arm_16168(ins, pc),
        0x3f29 => parse_arm_16169(ins, pc),
        0x3f2a => parse_arm_16170(ins, pc),
        0x3f2b => parse_arm_16171(ins, pc),
        0x3f2c => parse_arm_16172(ins, pc),
        0x3f2d => parse_arm_16173(ins, pc),
        0x3f2e => parse_arm_16174(ins, pc),
        0x3f2f => parse_arm_16175(ins, pc),
        0x3f30 => parse_arm_16176(ins, pc),
        0x3f31 => parse_arm_16177(ins, pc),
        0x3f32 => parse_arm_16178(ins, pc),
        0x3f33 => parse_arm_16179(ins, pc),
        0x3f34 => parse_arm_16180(ins, pc),
        0x3f35 => parse_arm_16181(ins, pc),
        0x3f36 => parse_arm_16182(ins, pc),
        0x3f37 => parse_arm_16183(ins, pc),
        0x3f38 => parse_arm_16184(ins, pc),
        0x3f39 => parse_arm_16185(ins, pc),
        0x3f3a => parse_arm_16186(ins, pc),
        0x3f3b => parse_arm_16187(ins, pc),
        0x3f3c => parse_arm_16188(ins, pc),
        0x3f3d => parse_arm_16189(ins, pc),
        0x3f3e => parse_arm_16190(ins, pc),
        0x3f3f => parse_arm_16191(ins, pc),
        0x3f40 => parse_arm_16192(ins, pc),
        0x3f41 => parse_arm_16193(ins, pc),
        0x3f42 => parse_arm_16194(ins, pc),
        0x3f43 => parse_arm_16195(ins, pc),
        0x3f44 => parse_arm_16196(ins, pc),
        0x3f45 => parse_arm_16197(ins, pc),
        0x3f46 => parse_arm_16198(ins, pc),
        0x3f47 => parse_arm_16199(ins, pc),
        0x3f48 => parse_arm_16200(ins, pc),
        0x3f49 => parse_arm_16201(ins, pc),
        0x3f4a => parse_arm_16202(ins, pc),
        0x3f4b => parse_arm_16203(ins, pc),
        0x3f4c => parse_arm_16204(ins, pc),
        0x3f4d => parse_arm_16205(ins, pc),
        0x3f4e => parse_arm_16206(ins, pc),
        0x3f4f => parse_arm_16207(ins, pc),
        0x3f50 => parse_arm_16208(ins, pc),
        0x3f51 => parse_arm_16209(ins, pc),
        0x3f52 => parse_arm_16210(ins, pc),
        0x3f53 => parse_arm_16211(ins, pc),
        0x3f54 => parse_arm_16212(ins, pc),
        0x3f55 => parse_arm_16213(ins, pc),
        0x3f56 => parse_arm_16214(ins, pc),
        0x3f57 => parse_arm_16215(ins, pc),
        0x3f58 => parse_arm_16216(ins, pc),
        0x3f59 => parse_arm_16217(ins, pc),
        0x3f5a => parse_arm_16218(ins, pc),
        0x3f5b => parse_arm_16219(ins, pc),
        0x3f5c => parse_arm_16220(ins, pc),
        0x3f5d => parse_arm_16221(ins, pc),
        0x3f5e => parse_arm_16222(ins, pc),
        0x3f5f => parse_arm_16223(ins, pc),
        0x3f60 => parse_arm_16224(ins, pc),
        0x3f61 => parse_arm_16225(ins, pc),
        0x3f62 => parse_arm_16226(ins, pc),
        0x3f63 => parse_arm_16227(ins, pc),
        0x3f64 => parse_arm_16228(ins, pc),
        0x3f65 => parse_arm_16229(ins, pc),
        0x3f66 => parse_arm_16230(ins, pc),
        0x3f67 => parse_arm_16231(ins, pc),
        0x3f68 => parse_arm_16232(ins, pc),
        0x3f69 => parse_arm_16233(ins, pc),
        0x3f6a => parse_arm_16234(ins, pc),
        0x3f6b => parse_arm_16235(ins, pc),
        0x3f6c => parse_arm_16236(ins, pc),
        0x3f6d => parse_arm_16237(ins, pc),
        0x3f6e => parse_arm_16238(ins, pc),
        0x3f6f => parse_arm_16239(ins, pc),
        0x3f70 => parse_arm_16240(ins, pc),
        0x3f71 => parse_arm_16241(ins, pc),
        0x3f72 => parse_arm_16242(ins, pc),
        0x3f73 => parse_arm_16243(ins, pc),
        0x3f74 => parse_arm_16244(ins, pc),
        0x3f75 => parse_arm_16245(ins, pc),
        0x3f76 => parse_arm_16246(ins, pc),
        0x3f77 => parse_arm_16247(ins, pc),
        0x3f78 => parse_arm_16248(ins, pc),
        0x3f79 => parse_arm_16249(ins, pc),
        0x3f7a => parse_arm_16250(ins, pc),
        0x3f7b => parse_arm_16251(ins, pc),
        0x3f7c => parse_arm_16252(ins, pc),
        0x3f7d => parse_arm_16253(ins, pc),
        0x3f7e => parse_arm_16254(ins, pc),
        0x3f7f => parse_arm_16255(ins, pc),
        0x3f80 => parse_arm_16256(ins, pc),
        0x3f81 => parse_arm_16257(ins, pc),
        0x3f82 => parse_arm_16258(ins, pc),
        0x3f83 => parse_arm_16259(ins, pc),
        0x3f84 => parse_arm_16260(ins, pc),
        0x3f85 => parse_arm_16261(ins, pc),
        0x3f86 => parse_arm_16262(ins, pc),
        0x3f87 => parse_arm_16263(ins, pc),
        0x3f88 => parse_arm_16264(ins, pc),
        0x3f89 => parse_arm_16265(ins, pc),
        0x3f8a => parse_arm_16266(ins, pc),
        0x3f8b => parse_arm_16267(ins, pc),
        0x3f8c => parse_arm_16268(ins, pc),
        0x3f8d => parse_arm_16269(ins, pc),
        0x3f8e => parse_arm_16270(ins, pc),
        0x3f8f => parse_arm_16271(ins, pc),
        0x3f90 => parse_arm_16272(ins, pc),
        0x3f91 => parse_arm_16273(ins, pc),
        0x3f92 => parse_arm_16274(ins, pc),
        0x3f93 => parse_arm_16275(ins, pc),
        0x3f94 => parse_arm_16276(ins, pc),
        0x3f95 => parse_arm_16277(ins, pc),
        0x3f96 => parse_arm_16278(ins, pc),
        0x3f97 => parse_arm_16279(ins, pc),
        0x3f98 => parse_arm_16280(ins, pc),
        0x3f99 => parse_arm_16281(ins, pc),
        0x3f9a => parse_arm_16282(ins, pc),
        0x3f9b => parse_arm_16283(ins, pc),
        0x3f9c => parse_arm_16284(ins, pc),
        0x3f9d => parse_arm_16285(ins, pc),
        0x3f9e => parse_arm_16286(ins, pc),
        0x3f9f => parse_arm_16287(ins, pc),
        0x3fa0 => parse_arm_16288(ins, pc),
        0x3fa1 => parse_arm_16289(ins, pc),
        0x3fa2 => parse_arm_16290(ins, pc),
        0x3fa3 => parse_arm_16291(ins, pc),
        0x3fa4 => parse_arm_16292(ins, pc),
        0x3fa5 => parse_arm_16293(ins, pc),
        0x3fa6 => parse_arm_16294(ins, pc),
        0x3fa7 => parse_arm_16295(ins, pc),
        0x3fa8 => parse_arm_16296(ins, pc),
        0x3fa9 => parse_arm_16297(ins, pc),
        0x3faa => parse_arm_16298(ins, pc),
        0x3fab => parse_arm_16299(ins, pc),
        0x3fac => parse_arm_16300(ins, pc),
        0x3fad => parse_arm_16301(ins, pc),
        0x3fae => parse_arm_16302(ins, pc),
        0x3faf => parse_arm_16303(ins, pc),
        0x3fb0 => parse_arm_16304(ins, pc),
        0x3fb1 => parse_arm_16305(ins, pc),
        0x3fb2 => parse_arm_16306(ins, pc),
        0x3fb3 => parse_arm_16307(ins, pc),
        0x3fb4 => parse_arm_16308(ins, pc),
        0x3fb5 => parse_arm_16309(ins, pc),
        0x3fb6 => parse_arm_16310(ins, pc),
        0x3fb7 => parse_arm_16311(ins, pc),
        0x3fb8 => parse_arm_16312(ins, pc),
        0x3fb9 => parse_arm_16313(ins, pc),
        0x3fba => parse_arm_16314(ins, pc),
        0x3fbb => parse_arm_16315(ins, pc),
        0x3fbc => parse_arm_16316(ins, pc),
        0x3fbd => parse_arm_16317(ins, pc),
        0x3fbe => parse_arm_16318(ins, pc),
        0x3fbf => parse_arm_16319(ins, pc),
        0x3fc0 => parse_arm_16320(ins, pc),
        0x3fc1 => parse_arm_16321(ins, pc),
        0x3fc2 => parse_arm_16322(ins, pc),
        0x3fc3 => parse_arm_16323(ins, pc),
        0x3fc4 => parse_arm_16324(ins, pc),
        0x3fc5 => parse_arm_16325(ins, pc),
        0x3fc6 => parse_arm_16326(ins, pc),
        0x3fc7 => parse_arm_16327(ins, pc),
        0x3fc8 => parse_arm_16328(ins, pc),
        0x3fc9 => parse_arm_16329(ins, pc),
        0x3fca => parse_arm_16330(ins, pc),
        0x3fcb => parse_arm_16331(ins, pc),
        0x3fcc => parse_arm_16332(ins, pc),
        0x3fcd => parse_arm_16333(ins, pc),
        0x3fce => parse_arm_16334(ins, pc),
        0x3fcf => parse_arm_16335(ins, pc),
        0x3fd0 => parse_arm_16336(ins, pc),
        0x3fd1 => parse_arm_16337(ins, pc),
        0x3fd2 => parse_arm_16338(ins, pc),
        0x3fd3 => parse_arm_16339(ins, pc),
        0x3fd4 => parse_arm_16340(ins, pc),
        0x3fd5 => parse_arm_16341(ins, pc),
        0x3fd6 => parse_arm_16342(ins, pc),
        0x3fd7 => parse_arm_16343(ins, pc),
        0x3fd8 => parse_arm_16344(ins, pc),
        0x3fd9 => parse_arm_16345(ins, pc),
        0x3fda => parse_arm_16346(ins, pc),
        0x3fdb => parse_arm_16347(ins, pc),
        0x3fdc => parse_arm_16348(ins, pc),
        0x3fdd => parse_arm_16349(ins, pc),
        0x3fde => parse_arm_16350(ins, pc),
        0x3fdf => parse_arm_16351(ins, pc),
        0x3fe0 => parse_arm_16352(ins, pc),
        0x3fe1 => parse_arm_16353(ins, pc),
        0x3fe2 => parse_arm_16354(ins, pc),
        0x3fe3 => parse_arm_16355(ins, pc),
        0x3fe4 => parse_arm_16356(ins, pc),
        0x3fe5 => parse_arm_16357(ins, pc),
        0x3fe6 => parse_arm_16358(ins, pc),
        0x3fe7 => parse_arm_16359(ins, pc),
        0x3fe8 => parse_arm_16360(ins, pc),
        0x3fe9 => parse_arm_16361(ins, pc),
        0x3fea => parse_arm_16362(ins, pc),
        0x3feb => parse_arm_16363(ins, pc),
        0x3fec => parse_arm_16364(ins, pc),
        0x3fed => parse_arm_16365(ins, pc),
        0x3fee => parse_arm_16366(ins, pc),
        0x3fef => parse_arm_16367(ins, pc),
        0x3ff0 => parse_arm_16368(ins, pc),
        0x3ff1 => parse_arm_16369(ins, pc),
        0x3ff2 => parse_arm_16370(ins, pc),
        0x3ff3 => parse_arm_16371(ins, pc),
        0x3ff4 => parse_arm_16372(ins, pc),
        0x3ff5 => parse_arm_16373(ins, pc),
        0x3ff6 => parse_arm_16374(ins, pc),
        0x3ff7 => parse_arm_16375(ins, pc),
        0x3ff8 => parse_arm_16376(ins, pc),
        0x3ff9 => parse_arm_16377(ins, pc),
        0x3ffa => parse_arm_16378(ins, pc),
        0x3ffb => parse_arm_16379(ins, pc),
        0x3ffc => parse_arm_16380(ins, pc),
        0x3ffd => parse_arm_16381(ins, pc),
        0x3ffe => parse_arm_16382(ins, pc),
        0x3fff => parse_arm_16383(ins, pc),
        _ => unreachable!(),
    }
}
fn parse_arm_0(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_1(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_3(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_4(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_5(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_6(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_7(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_8(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_9(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0x90 {
        parse_arm_mul_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_11(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_13(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_15(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_16(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_17(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_18(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_19(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_20(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_21(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_22(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_23(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_24(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_25(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0x90 {
        parse_arm_mul_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_26(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_27(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_28(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_29(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_30(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_31(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_32(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_33(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_34(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_35(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_36(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_37(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_38(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_39(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_40(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_41(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0x90 {
        parse_arm_mul_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_42(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_43(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_44(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_45(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_46(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_47(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_48(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_49(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_50(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_51(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_52(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_53(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_54(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_55(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_56(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_57(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0x90 {
        parse_arm_mul_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_58(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_59(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_60(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_61(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_62(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_63(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_64(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_65(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_66(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_67(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_68(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_69(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_70(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_71(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_72(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_73(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0x90 {
        parse_arm_mul_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_74(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_75(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_76(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_77(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_78(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_79(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_80(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_81(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_82(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_83(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_84(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_85(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_86(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_87(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_88(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_89(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0x90 {
        parse_arm_mul_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_90(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_91(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_92(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_93(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_94(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_95(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_96(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_97(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_98(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_99(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_100(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_101(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_102(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_103(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_104(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_105(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0x90 {
        parse_arm_mul_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_106(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_107(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_108(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_109(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_110(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_111(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_112(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_113(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_114(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_115(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_116(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_117(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_118(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_119(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_120(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_121(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0x90 {
        parse_arm_mul_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_122(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_123(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_124(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_125(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_126(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_127(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x0 {
        parse_arm_and_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_128(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_129(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_130(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_131(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_132(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_133(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_134(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_135(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_136(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_137(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0x200090 {
        parse_arm_mla_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_138(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_139(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_140(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_141(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_142(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_143(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_144(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_145(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_146(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_147(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_148(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_149(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_150(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_151(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_152(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_153(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0x200090 {
        parse_arm_mla_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_154(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_155(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_156(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_157(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_158(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_159(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_160(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_161(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_162(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_163(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_164(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_165(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_166(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_167(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_168(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_169(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0x200090 {
        parse_arm_mla_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_170(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_171(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_172(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_173(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_174(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_175(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_176(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_177(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_178(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_179(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_180(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_181(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_182(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_183(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_184(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_185(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0x200090 {
        parse_arm_mla_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_186(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_187(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_188(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_189(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_190(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_191(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_192(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_193(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_194(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_195(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_196(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_197(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_198(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_199(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_200(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_201(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0x200090 {
        parse_arm_mla_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_202(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_203(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_204(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_205(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_206(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_207(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_208(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_209(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_210(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_211(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_212(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_213(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_214(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_215(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_216(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_217(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0x200090 {
        parse_arm_mla_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_218(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_219(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_220(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_221(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_222(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_223(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_224(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_225(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_226(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_227(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_228(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_229(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_230(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_231(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_232(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_233(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0x200090 {
        parse_arm_mla_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_234(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_235(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_236(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_237(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_238(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_239(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_240(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_241(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_242(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_243(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_244(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_245(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_246(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_247(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_248(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_249(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0x200090 {
        parse_arm_mla_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_250(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_251(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_252(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_253(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_254(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_255(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x200000 {
        parse_arm_eor_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_256(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_257(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_258(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_259(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_260(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_261(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_262(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_263(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_264(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_265(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x400090 {
        parse_arm_umaal_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_266(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_267(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_268(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_269(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_270(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_271(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_272(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_273(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_274(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_275(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_276(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_277(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_278(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_279(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_280(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_281(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x400090 {
        parse_arm_umaal_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_282(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_283(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_284(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_285(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_286(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_287(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_288(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_289(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_290(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_291(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_292(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_293(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_294(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_295(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_296(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_297(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x400090 {
        parse_arm_umaal_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_298(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_299(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_300(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_301(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe5f00f0) == 0x4f00d0 {
        parse_arm_ldrd_1(ins, pc)
    } else if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_302(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_303(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_304(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_305(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_306(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_307(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_308(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_309(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_310(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_311(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_312(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_313(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x400090 {
        parse_arm_umaal_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_314(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_315(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_316(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_317(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe5f00f0) == 0x4f00d0 {
        parse_arm_ldrd_1(ins, pc)
    } else if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_318(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_319(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_320(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_321(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_322(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_323(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_324(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_325(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_326(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_327(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_328(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_329(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_330(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_331(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_332(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_333(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_334(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_335(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_336(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_337(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_338(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_339(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_340(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_341(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_342(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_343(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_344(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_345(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_346(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_347(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_348(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_349(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_350(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_351(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_352(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_353(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_354(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_355(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_356(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_357(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_358(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_359(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_360(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_361(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_362(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_363(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_364(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_365(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_366(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_367(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_368(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_369(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_370(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_371(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_372(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_373(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_374(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_375(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_376(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_377(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_378(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_379(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_380(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_381(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_382(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_383(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x400000 {
        parse_arm_sub_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_384(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_385(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_386(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_387(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_388(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_389(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_390(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_391(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_392(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_393(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_394(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_395(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x600000 {
        parse_arm_rsb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_396(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_397(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x600000 {
        parse_arm_rsb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_398(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_399(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x600000 {
        parse_arm_rsb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_400(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_401(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_402(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_403(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_404(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_405(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_406(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_407(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_408(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_409(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_410(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_411(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x600000 {
        parse_arm_rsb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_412(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_413(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x600000 {
        parse_arm_rsb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_414(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_415(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x600000 {
        parse_arm_rsb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_416(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_417(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_418(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_419(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_420(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_421(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_422(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_423(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_424(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_425(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_426(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_427(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x600000 {
        parse_arm_rsb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_428(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_429(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe5f00f0) == 0x4f00d0 {
        parse_arm_ldrd_1(ins, pc)
    } else if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x600000 {
        parse_arm_rsb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_430(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_431(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x600000 {
        parse_arm_rsb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_432(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_433(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_434(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_435(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_436(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_437(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_438(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_439(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_440(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_441(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_442(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_443(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x600000 {
        parse_arm_rsb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_444(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_445(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe5f00f0) == 0x4f00d0 {
        parse_arm_ldrd_1(ins, pc)
    } else if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x600000 {
        parse_arm_rsb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_446(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_447(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x600000 {
        parse_arm_rsb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_448(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_449(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_450(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_451(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_452(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_453(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_454(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_455(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_456(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_457(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_458(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_459(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x600000 {
        parse_arm_rsb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_460(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_461(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x600000 {
        parse_arm_rsb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_462(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_463(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x600000 {
        parse_arm_rsb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_464(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_465(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_466(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_467(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_468(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_469(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_470(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_471(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_472(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_473(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_474(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_475(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x600000 {
        parse_arm_rsb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_476(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_477(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x600000 {
        parse_arm_rsb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_478(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_479(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x600000 {
        parse_arm_rsb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_480(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_481(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_482(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_483(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_484(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_485(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_486(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_487(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_488(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_489(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_490(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_491(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x600000 {
        parse_arm_rsb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_492(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_493(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x600000 {
        parse_arm_rsb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_494(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_495(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x600000 {
        parse_arm_rsb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_496(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_497(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_498(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_499(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_500(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_501(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_502(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_503(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_504(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_505(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_506(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_507(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x600000 {
        parse_arm_rsb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_508(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_509(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x600000 {
        parse_arm_rsb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_510(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_511(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x600000 {
        parse_arm_rsb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_512(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_513(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_514(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_515(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_516(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_517(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_518(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_519(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_520(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_521(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0x800090 {
        parse_arm_umull_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_522(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_523(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_524(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_525(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_526(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_527(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_528(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_529(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_530(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_531(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_532(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_533(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_534(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_535(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_536(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_537(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0x800090 {
        parse_arm_umull_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_538(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_539(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_540(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_541(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_542(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_543(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_544(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_545(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_546(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_547(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_548(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_549(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_550(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_551(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_552(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_553(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0x800090 {
        parse_arm_umull_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_554(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_555(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_556(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_557(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_558(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_559(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_560(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_561(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_562(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_563(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_564(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_565(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_566(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_567(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_568(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_569(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0x800090 {
        parse_arm_umull_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_570(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_571(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_572(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_573(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_574(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_575(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_576(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_577(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_578(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_579(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_580(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_581(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_582(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_583(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_584(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_585(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0x800090 {
        parse_arm_umull_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_586(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_587(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_588(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_589(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_590(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_591(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_592(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_593(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_594(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_595(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_596(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_597(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_598(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_599(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_600(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_601(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0x800090 {
        parse_arm_umull_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_602(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_603(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_604(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_605(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_606(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_607(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_608(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_609(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_610(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_611(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_612(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_613(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_614(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_615(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_616(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_617(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0x800090 {
        parse_arm_umull_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_618(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_619(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_620(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_621(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_622(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_623(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_624(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_625(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_626(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_627(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_628(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_629(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_630(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_631(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_632(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_633(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0x800090 {
        parse_arm_umull_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_634(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_635(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_636(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_637(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_638(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_639(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x800000 {
        parse_arm_add_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_640(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_641(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_642(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_643(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_644(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_645(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_646(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_647(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_648(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_649(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0xa00090 {
        parse_arm_umlal_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_650(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_651(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_652(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_653(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_654(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_655(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_656(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_657(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_658(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_659(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_660(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_661(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_662(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_663(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_664(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_665(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0xa00090 {
        parse_arm_umlal_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_666(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_667(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_668(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_669(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_670(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_671(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_672(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_673(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_674(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_675(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_676(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_677(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_678(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_679(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_680(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_681(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0xa00090 {
        parse_arm_umlal_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_682(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_683(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_684(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_685(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_686(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_687(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_688(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_689(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_690(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_691(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_692(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_693(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_694(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_695(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_696(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_697(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0xa00090 {
        parse_arm_umlal_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_698(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_699(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_700(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_701(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_702(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_703(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_704(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_705(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_706(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_707(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_708(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_709(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_710(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_711(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_712(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_713(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0xa00090 {
        parse_arm_umlal_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_714(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_715(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_716(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_717(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_718(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_719(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_720(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_721(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_722(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_723(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_724(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_725(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_726(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_727(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_728(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_729(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0xa00090 {
        parse_arm_umlal_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_730(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_731(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_732(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_733(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_734(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_735(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_736(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_737(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_738(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_739(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_740(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_741(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_742(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_743(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_744(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_745(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0xa00090 {
        parse_arm_umlal_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_746(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_747(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_748(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_749(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_750(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_751(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_752(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_753(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_754(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_755(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_756(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_757(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_758(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_759(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_760(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_761(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0xa00090 {
        parse_arm_umlal_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_762(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_763(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_764(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_765(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_766(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_767(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xa00000 {
        parse_arm_adc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_768(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_769(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_770(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_771(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_772(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_773(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_774(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_775(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_776(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_777(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0xc00090 {
        parse_arm_smull_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_778(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_779(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_780(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_781(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_782(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_783(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_784(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_785(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_786(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_787(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_788(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_789(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_790(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_791(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_792(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_793(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0xc00090 {
        parse_arm_smull_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_794(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_795(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_796(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_797(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_798(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_799(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_800(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_801(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_802(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_803(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_804(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_805(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_806(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_807(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_808(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_809(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0xc00090 {
        parse_arm_smull_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_810(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_811(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_812(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_813(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe5f00f0) == 0x4f00d0 {
        parse_arm_ldrd_1(ins, pc)
    } else if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_814(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_815(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_816(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_817(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_818(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_819(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_820(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_821(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_822(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_823(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_824(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_825(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0xc00090 {
        parse_arm_smull_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_826(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_827(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_828(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_829(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe5f00f0) == 0x4f00d0 {
        parse_arm_ldrd_1(ins, pc)
    } else if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_830(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_831(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_832(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_833(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_834(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_835(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_836(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_837(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_838(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_839(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_840(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_841(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0xc00090 {
        parse_arm_smull_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_842(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_843(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_844(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_845(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_846(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_847(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_848(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_849(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_850(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_851(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_852(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_853(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_854(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_855(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_856(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_857(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0xc00090 {
        parse_arm_smull_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_858(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_859(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_860(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_861(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_862(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_863(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_864(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_865(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_866(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_867(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_868(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_869(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_870(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_871(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_872(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_873(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0xc00090 {
        parse_arm_smull_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_874(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_875(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_876(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_877(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_878(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_879(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_880(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_881(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_882(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_883(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_884(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_885(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_886(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_887(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_888(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_889(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0xc00090 {
        parse_arm_smull_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_890(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_891(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_892(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_893(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_894(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_895(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xc00000 {
        parse_arm_sbc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_896(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_897(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_898(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_899(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_900(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_901(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_902(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_903(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_904(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_905(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0xe00090 {
        parse_arm_smlal_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_906(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_907(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_908(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_909(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_910(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_911(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_912(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_913(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_914(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_915(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_916(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_917(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_918(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_919(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_920(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_921(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0xe00090 {
        parse_arm_smlal_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_922(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_923(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_924(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_925(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_926(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_927(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_928(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_929(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_930(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_931(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_932(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_933(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_934(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_935(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_936(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_937(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0xe00090 {
        parse_arm_smlal_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_938(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_939(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_940(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_941(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe5f00f0) == 0x4f00d0 {
        parse_arm_ldrd_1(ins, pc)
    } else if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_942(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_943(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_944(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_945(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_946(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_947(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_948(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_949(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_950(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_951(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_952(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_953(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0xe00090 {
        parse_arm_smlal_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_954(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_955(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_956(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_957(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe5f00f0) == 0x4f00d0 {
        parse_arm_ldrd_1(ins, pc)
    } else if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_958(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_959(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_960(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_961(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_962(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_963(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_964(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_965(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_966(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_967(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_968(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_969(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0xe00090 {
        parse_arm_smlal_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_970(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_971(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_972(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_973(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_974(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_975(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_976(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_977(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_978(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_979(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_980(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_981(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_982(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_983(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_984(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_985(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0xe00090 {
        parse_arm_smlal_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_986(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_987(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_988(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_989(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_990(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_991(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_992(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_993(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_994(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_995(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_996(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_997(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_998(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_999(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_1000(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_1001(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0xe00090 {
        parse_arm_smlal_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1002(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_1003(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1004(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_1005(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1006(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_1007(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1008(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_1009(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_1010(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_1011(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_1012(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_1013(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_1014(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_1015(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_1016(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_1017(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000f0) == 0xe00090 {
        parse_arm_smlal_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1018(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_1019(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1020(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_1021(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1022(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_1023(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0xe00000 {
        parse_arm_rsc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1024(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff100f0) == 0xf1010000 {
        parse_arm_setend_0(ins, pc)
    } else if (ins & 0xfff10020) == 0xf1000000 {
        parse_arm_cps_0(ins, pc)
    } else if (ins & 0xfb002f0) == 0x1000000 {
        parse_arm_mrs_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1025(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cps_0(ins, pc)
}
fn parse_arm_1026(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1027(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1028(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cps_0(ins, pc)
}
fn parse_arm_1029(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff10020) == 0xf1000000 {
        parse_arm_cps_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x1000050 {
        parse_arm_qadd_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1030(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1031(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1032(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff10020) == 0xf1000000 {
        parse_arm_cps_0(ins, pc)
    } else if (ins & 0xff00090) == 0x1000080 {
        parse_arm_smla_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1033(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff10020) == 0xf1000000 {
        parse_arm_cps_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x1000090 {
        parse_arm_swp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1034(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_smla_0(ins, pc)
}
fn parse_arm_1035(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strh_0(ins, pc)
}
fn parse_arm_1036(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff10020) == 0xf1000000 {
        parse_arm_cps_0(ins, pc)
    } else if (ins & 0xff00090) == 0x1000080 {
        parse_arm_smla_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1037(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff10020) == 0xf1000000 {
        parse_arm_cps_0(ins, pc)
    } else if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1038(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_smla_0(ins, pc)
}
fn parse_arm_1039(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strd_0(ins, pc)
}
fn parse_arm_1040(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff100f0) == 0xf1010000 {
        parse_arm_setend_0(ins, pc)
    } else if (ins & 0xfff10020) == 0xf1000000 {
        parse_arm_cps_0(ins, pc)
    } else if (ins & 0xfb002f0) == 0x1000000 {
        parse_arm_mrs_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1041(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cps_0(ins, pc)
}
fn parse_arm_1042(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1043(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1044(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cps_0(ins, pc)
}
fn parse_arm_1045(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff10020) == 0xf1000000 {
        parse_arm_cps_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x1000050 {
        parse_arm_qadd_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1046(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1047(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1048(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff10020) == 0xf1000000 {
        parse_arm_cps_0(ins, pc)
    } else if (ins & 0xff00090) == 0x1000080 {
        parse_arm_smla_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1049(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff10020) == 0xf1000000 {
        parse_arm_cps_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x1000090 {
        parse_arm_swp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1050(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_smla_0(ins, pc)
}
fn parse_arm_1051(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strh_0(ins, pc)
}
fn parse_arm_1052(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff10020) == 0xf1000000 {
        parse_arm_cps_0(ins, pc)
    } else if (ins & 0xff00090) == 0x1000080 {
        parse_arm_smla_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1053(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff10020) == 0xf1000000 {
        parse_arm_cps_0(ins, pc)
    } else if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1054(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_smla_0(ins, pc)
}
fn parse_arm_1055(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strd_0(ins, pc)
}
fn parse_arm_1056(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff100f0) == 0xf1010000 {
        parse_arm_setend_0(ins, pc)
    } else if (ins & 0xfff10020) == 0xf1000000 {
        parse_arm_cps_0(ins, pc)
    } else if (ins & 0xfb002f0) == 0x1000000 {
        parse_arm_mrs_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1057(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cps_0(ins, pc)
}
fn parse_arm_1058(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1059(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1060(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cps_0(ins, pc)
}
fn parse_arm_1061(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff10020) == 0xf1000000 {
        parse_arm_cps_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x1000050 {
        parse_arm_qadd_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1062(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1063(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1064(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff10020) == 0xf1000000 {
        parse_arm_cps_0(ins, pc)
    } else if (ins & 0xff00090) == 0x1000080 {
        parse_arm_smla_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1065(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff10020) == 0xf1000000 {
        parse_arm_cps_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x1000090 {
        parse_arm_swp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1066(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_smla_0(ins, pc)
}
fn parse_arm_1067(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strh_0(ins, pc)
}
fn parse_arm_1068(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff10020) == 0xf1000000 {
        parse_arm_cps_0(ins, pc)
    } else if (ins & 0xff00090) == 0x1000080 {
        parse_arm_smla_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1069(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff10020) == 0xf1000000 {
        parse_arm_cps_0(ins, pc)
    } else if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1070(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_smla_0(ins, pc)
}
fn parse_arm_1071(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strd_0(ins, pc)
}
fn parse_arm_1072(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff100f0) == 0xf1010000 {
        parse_arm_setend_0(ins, pc)
    } else if (ins & 0xfff10020) == 0xf1000000 {
        parse_arm_cps_0(ins, pc)
    } else if (ins & 0xfb002f0) == 0x1000000 {
        parse_arm_mrs_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1073(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cps_0(ins, pc)
}
fn parse_arm_1074(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1075(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1076(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cps_0(ins, pc)
}
fn parse_arm_1077(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff10020) == 0xf1000000 {
        parse_arm_cps_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x1000050 {
        parse_arm_qadd_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1078(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1079(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1080(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff10020) == 0xf1000000 {
        parse_arm_cps_0(ins, pc)
    } else if (ins & 0xff00090) == 0x1000080 {
        parse_arm_smla_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1081(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff10020) == 0xf1000000 {
        parse_arm_cps_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x1000090 {
        parse_arm_swp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1082(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_smla_0(ins, pc)
}
fn parse_arm_1083(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strh_0(ins, pc)
}
fn parse_arm_1084(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff10020) == 0xf1000000 {
        parse_arm_cps_0(ins, pc)
    } else if (ins & 0xff00090) == 0x1000080 {
        parse_arm_smla_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1085(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff10020) == 0xf1000000 {
        parse_arm_cps_0(ins, pc)
    } else if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1086(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_smla_0(ins, pc)
}
fn parse_arm_1087(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strd_0(ins, pc)
}
fn parse_arm_1088(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1089(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1090(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1091(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1092(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1093(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1094(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1095(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1096(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1097(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1098(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1099(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1100000 {
        parse_arm_tst_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1100(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1101(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1100000 {
        parse_arm_tst_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1102(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1103(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1100000 {
        parse_arm_tst_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1104(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1105(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1106(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1107(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1108(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1109(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1110(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1111(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1112(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1113(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1114(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1115(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1100000 {
        parse_arm_tst_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1116(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1117(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1100000 {
        parse_arm_tst_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1118(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1119(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1100000 {
        parse_arm_tst_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1120(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1121(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1122(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1123(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1124(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1125(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1126(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1127(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1128(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1129(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1130(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1131(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1100000 {
        parse_arm_tst_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1132(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1133(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1100000 {
        parse_arm_tst_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1134(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1135(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1100000 {
        parse_arm_tst_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1136(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1137(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1138(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1139(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1140(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1141(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1142(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1143(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1144(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1145(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1146(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1147(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1100000 {
        parse_arm_tst_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1148(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1149(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1100000 {
        parse_arm_tst_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1150(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_1151(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1100000 {
        parse_arm_tst_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1152(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1153(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1200010 {
        parse_arm_bx_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1154(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1200020 {
        parse_arm_bxj_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1155(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1200030 {
        parse_arm_blx_1(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1156(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1157(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1200050 {
        parse_arm_qsub_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1158(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1159(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff000f0) == 0xe1200070 {
        parse_arm_bkpt_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1160(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000b0) == 0x1200080 {
        parse_arm_smlaw_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1161(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1162(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000b0) == 0x12000a0 {
        parse_arm_smulw_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1163(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1164(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000b0) == 0x1200080 {
        parse_arm_smlaw_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1165(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1166(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000b0) == 0x12000a0 {
        parse_arm_smulw_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1167(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1168(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1169(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1200010 {
        parse_arm_bx_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1170(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1200020 {
        parse_arm_bxj_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1171(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1200030 {
        parse_arm_blx_1(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1172(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1173(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1200050 {
        parse_arm_qsub_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1174(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1175(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff000f0) == 0xe1200070 {
        parse_arm_bkpt_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1176(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000b0) == 0x1200080 {
        parse_arm_smlaw_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1177(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1178(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000b0) == 0x12000a0 {
        parse_arm_smulw_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1179(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1180(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000b0) == 0x1200080 {
        parse_arm_smlaw_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1181(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1182(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000b0) == 0x12000a0 {
        parse_arm_smulw_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1183(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1184(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1185(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1200010 {
        parse_arm_bx_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1186(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1200020 {
        parse_arm_bxj_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1187(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1200030 {
        parse_arm_blx_1(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1188(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1189(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1200050 {
        parse_arm_qsub_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1190(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1191(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff000f0) == 0xe1200070 {
        parse_arm_bkpt_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1192(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000b0) == 0x1200080 {
        parse_arm_smlaw_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1193(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1194(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000b0) == 0x12000a0 {
        parse_arm_smulw_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1195(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1196(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000b0) == 0x1200080 {
        parse_arm_smlaw_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1197(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1198(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000b0) == 0x12000a0 {
        parse_arm_smulw_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1199(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1200(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1201(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1200010 {
        parse_arm_bx_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1202(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1200020 {
        parse_arm_bxj_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1203(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1200030 {
        parse_arm_blx_1(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1204(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1205(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1200050 {
        parse_arm_qsub_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1206(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1207(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff000f0) == 0xe1200070 {
        parse_arm_bkpt_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1208(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000b0) == 0x1200080 {
        parse_arm_smlaw_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1209(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1210(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000b0) == 0x12000a0 {
        parse_arm_smulw_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1211(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1212(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000b0) == 0x1200080 {
        parse_arm_smlaw_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1213(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1214(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000b0) == 0x12000a0 {
        parse_arm_smulw_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1215(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1216(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1217(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1218(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1219(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1220(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1221(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1222(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1223(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1224(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1225(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1226(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1227(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1300000 {
        parse_arm_teq_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1228(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1229(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1300000 {
        parse_arm_teq_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1230(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1231(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1300000 {
        parse_arm_teq_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1232(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1233(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1234(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1235(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1236(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1237(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1238(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1239(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1240(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1241(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1242(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1243(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1300000 {
        parse_arm_teq_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1244(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1245(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1300000 {
        parse_arm_teq_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1246(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1247(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1300000 {
        parse_arm_teq_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1248(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1249(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1250(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1251(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1252(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1253(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1254(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1255(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1256(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1257(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1258(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1259(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1300000 {
        parse_arm_teq_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1260(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1261(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1300000 {
        parse_arm_teq_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1262(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1263(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1300000 {
        parse_arm_teq_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1264(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1265(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1266(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1267(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1268(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1269(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1270(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1271(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1272(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1273(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1274(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1275(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1300000 {
        parse_arm_teq_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1276(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1277(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1300000 {
        parse_arm_teq_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1278(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_1279(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1300000 {
        parse_arm_teq_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1280(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mrs_0(ins, pc)
}
fn parse_arm_1281(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1282(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1283(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1284(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1285(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_qdadd_0(ins, pc)
}
fn parse_arm_1286(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1287(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1288(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_smlal_half_0(ins, pc)
}
fn parse_arm_1289(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_swpb_0(ins, pc)
}
fn parse_arm_1290(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_smlal_half_0(ins, pc)
}
fn parse_arm_1291(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strh_0(ins, pc)
}
fn parse_arm_1292(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_smlal_half_0(ins, pc)
}
fn parse_arm_1293(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrd_0(ins, pc)
}
fn parse_arm_1294(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_smlal_half_0(ins, pc)
}
fn parse_arm_1295(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strd_0(ins, pc)
}
fn parse_arm_1296(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mrs_0(ins, pc)
}
fn parse_arm_1297(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1298(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1299(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1300(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1301(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_qdadd_0(ins, pc)
}
fn parse_arm_1302(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1303(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1304(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_smlal_half_0(ins, pc)
}
fn parse_arm_1305(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_swpb_0(ins, pc)
}
fn parse_arm_1306(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_smlal_half_0(ins, pc)
}
fn parse_arm_1307(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strh_0(ins, pc)
}
fn parse_arm_1308(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_smlal_half_0(ins, pc)
}
fn parse_arm_1309(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrd_0(ins, pc)
}
fn parse_arm_1310(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_smlal_half_0(ins, pc)
}
fn parse_arm_1311(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strd_0(ins, pc)
}
fn parse_arm_1312(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mrs_0(ins, pc)
}
fn parse_arm_1313(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1314(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1315(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1316(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1317(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_qdadd_0(ins, pc)
}
fn parse_arm_1318(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1319(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1320(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_smlal_half_0(ins, pc)
}
fn parse_arm_1321(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_swpb_0(ins, pc)
}
fn parse_arm_1322(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_smlal_half_0(ins, pc)
}
fn parse_arm_1323(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strh_0(ins, pc)
}
fn parse_arm_1324(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_smlal_half_0(ins, pc)
}
fn parse_arm_1325(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe5f00f0) == 0x4f00d0 {
        parse_arm_ldrd_1(ins, pc)
    } else if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1326(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_smlal_half_0(ins, pc)
}
fn parse_arm_1327(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strd_0(ins, pc)
}
fn parse_arm_1328(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mrs_0(ins, pc)
}
fn parse_arm_1329(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1330(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1331(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1332(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1333(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_qdadd_0(ins, pc)
}
fn parse_arm_1334(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1335(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1336(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_smlal_half_0(ins, pc)
}
fn parse_arm_1337(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_swpb_0(ins, pc)
}
fn parse_arm_1338(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_smlal_half_0(ins, pc)
}
fn parse_arm_1339(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strh_0(ins, pc)
}
fn parse_arm_1340(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_smlal_half_0(ins, pc)
}
fn parse_arm_1341(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe5f00f0) == 0x4f00d0 {
        parse_arm_ldrd_1(ins, pc)
    } else if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1342(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_smlal_half_0(ins, pc)
}
fn parse_arm_1343(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strd_0(ins, pc)
}
fn parse_arm_1344(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1345(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1346(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1347(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1348(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1349(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1350(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1351(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1352(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1353(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1354(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1355(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1500000 {
        parse_arm_cmp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1356(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1357(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1500000 {
        parse_arm_cmp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1358(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1359(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1500000 {
        parse_arm_cmp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1360(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1361(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1362(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1363(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1364(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1365(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1366(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1367(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1368(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1369(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1370(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1371(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1500000 {
        parse_arm_cmp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1372(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1373(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1500000 {
        parse_arm_cmp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1374(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1375(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1500000 {
        parse_arm_cmp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1376(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1377(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1378(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1379(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1380(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1381(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1382(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1383(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1384(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1385(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1386(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1387(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1500000 {
        parse_arm_cmp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1388(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1389(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1500000 {
        parse_arm_cmp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1390(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1391(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1500000 {
        parse_arm_cmp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1392(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1393(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1394(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1395(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1396(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1397(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1398(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1399(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1400(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1401(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1402(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1403(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1500000 {
        parse_arm_cmp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1404(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1405(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1500000 {
        parse_arm_cmp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1406(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_1407(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1500000 {
        parse_arm_cmp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1408(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1409(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1600010 {
        parse_arm_clz_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1410(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1411(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1412(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1413(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1600050 {
        parse_arm_qdsub_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1414(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1415(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1416(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00090) == 0x1600080 {
        parse_arm_smul_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1417(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1418(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00090) == 0x1600080 {
        parse_arm_smul_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1419(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1420(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00090) == 0x1600080 {
        parse_arm_smul_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1421(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1422(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00090) == 0x1600080 {
        parse_arm_smul_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1423(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1424(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1425(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1600010 {
        parse_arm_clz_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1426(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1427(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1428(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1429(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1600050 {
        parse_arm_qdsub_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1430(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1431(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1432(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00090) == 0x1600080 {
        parse_arm_smul_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1433(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1434(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00090) == 0x1600080 {
        parse_arm_smul_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1435(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1436(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00090) == 0x1600080 {
        parse_arm_smul_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1437(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1438(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00090) == 0x1600080 {
        parse_arm_smul_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1439(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1440(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1441(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1600010 {
        parse_arm_clz_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1442(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1443(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1444(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1445(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1600050 {
        parse_arm_qdsub_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1446(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1447(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1448(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00090) == 0x1600080 {
        parse_arm_smul_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1449(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1450(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00090) == 0x1600080 {
        parse_arm_smul_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1451(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1452(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00090) == 0x1600080 {
        parse_arm_smul_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1453(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe5f00f0) == 0x4f00d0 {
        parse_arm_ldrd_1(ins, pc)
    } else if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1454(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00090) == 0x1600080 {
        parse_arm_smul_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1455(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1456(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1457(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1600010 {
        parse_arm_clz_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1458(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1459(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1460(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1461(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1600050 {
        parse_arm_qdsub_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1462(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1463(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1464(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00090) == 0x1600080 {
        parse_arm_smul_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1465(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_1466(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00090) == 0x1600080 {
        parse_arm_smul_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1467(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1468(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00090) == 0x1600080 {
        parse_arm_smul_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1469(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe5f00f0) == 0x4f00d0 {
        parse_arm_ldrd_1(ins, pc)
    } else if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1470(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00090) == 0x1600080 {
        parse_arm_smul_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1471(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1472(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1473(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1474(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1475(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1476(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1477(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1478(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1479(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1480(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1481(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1482(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1483(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1700000 {
        parse_arm_cmn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1484(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1485(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1700000 {
        parse_arm_cmn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1486(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1487(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1700000 {
        parse_arm_cmn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1488(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1489(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1490(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1491(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1492(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1493(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1494(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1495(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1496(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1497(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1498(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1499(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1700000 {
        parse_arm_cmn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1500(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1501(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1700000 {
        parse_arm_cmn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1502(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1503(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1700000 {
        parse_arm_cmn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1504(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1505(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1506(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1507(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1508(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1509(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1510(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1511(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1512(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1513(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1514(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1515(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1700000 {
        parse_arm_cmn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1516(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1517(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1700000 {
        parse_arm_cmn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1518(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1519(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1700000 {
        parse_arm_cmn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1520(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1521(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1522(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1523(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1524(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1525(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1526(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1527(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1528(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1529(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1530(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1531(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1700000 {
        parse_arm_cmn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1532(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1533(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1700000 {
        parse_arm_cmn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1534(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_1535(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xdf00000) == 0x1700000 {
        parse_arm_cmn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1536(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1537(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1538(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1539(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1540(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1541(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1542(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1543(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1544(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1545(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1800090 {
        parse_arm_strex_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1546(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1547(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1548(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1549(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1550(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1551(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1552(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1553(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1554(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1555(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1556(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1557(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1558(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1559(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1560(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1561(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1800090 {
        parse_arm_strex_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1562(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1563(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1564(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1565(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1566(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1567(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1568(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1569(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1570(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1571(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1572(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1573(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1574(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1575(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1576(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1577(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1800090 {
        parse_arm_strex_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1578(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1579(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1580(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1581(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1582(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1583(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1584(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1585(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1586(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1587(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1588(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1589(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1590(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1591(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1592(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1593(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1800090 {
        parse_arm_strex_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1594(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1595(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1596(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1597(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1598(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1599(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1600(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1601(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1602(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1603(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1604(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1605(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1606(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1607(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1608(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1609(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1900090 {
        parse_arm_ldrex_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1610(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1611(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1612(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1613(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1614(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1615(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1616(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1617(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1618(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1619(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1620(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1621(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1622(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1623(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1624(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1625(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1900090 {
        parse_arm_ldrex_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1626(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1627(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1628(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1629(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1630(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1631(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1632(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1633(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1634(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1635(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1636(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1637(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1638(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1639(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1640(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1641(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1900090 {
        parse_arm_ldrex_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1642(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1643(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1644(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1645(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1646(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1647(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1648(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1649(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1650(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1651(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1652(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1653(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1654(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1655(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1656(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1657(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1900090 {
        parse_arm_ldrex_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1658(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1659(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1660(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1661(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1662(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_1663(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1800000 {
        parse_arm_orr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1664(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00ff0) == 0x1a00000 {
        parse_arm_mov_1(ins, pc)
    } else if (ins & 0xfef0060) == 0x1a00000 {
        parse_arm_lsl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1665(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_lsl_0(ins, pc)
}
fn parse_arm_1666(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_lsr_0(ins, pc)
}
fn parse_arm_1667(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_lsr_0(ins, pc)
}
fn parse_arm_1668(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_asr_0(ins, pc)
}
fn parse_arm_1669(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_asr_0(ins, pc)
}
fn parse_arm_1670(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00ff0) == 0x1a00060 {
        parse_arm_rrx_0(ins, pc)
    } else if (ins & 0xfef0060) == 0x1a00060 {
        parse_arm_ror_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1671(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ror_0(ins, pc)
}
fn parse_arm_1672(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_lsl_0(ins, pc)
}
fn parse_arm_1673(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfef0060) == 0x1a00000 {
        parse_arm_lsl_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x1a00090 {
        parse_arm_strexd_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1674(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_lsr_0(ins, pc)
}
fn parse_arm_1675(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfef0060) == 0x1a00020 {
        parse_arm_lsr_0(ins, pc)
    } else if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1676(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_asr_0(ins, pc)
}
fn parse_arm_1677(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfef0060) == 0x1a00040 {
        parse_arm_asr_0(ins, pc)
    } else if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1678(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ror_0(ins, pc)
}
fn parse_arm_1679(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfef0060) == 0x1a00060 {
        parse_arm_ror_0(ins, pc)
    } else if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1680(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_lsl_0(ins, pc)
}
fn parse_arm_1681(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_lsl_0(ins, pc)
}
fn parse_arm_1682(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_lsr_0(ins, pc)
}
fn parse_arm_1683(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_lsr_0(ins, pc)
}
fn parse_arm_1684(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_asr_0(ins, pc)
}
fn parse_arm_1685(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_asr_0(ins, pc)
}
fn parse_arm_1686(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ror_0(ins, pc)
}
fn parse_arm_1687(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ror_0(ins, pc)
}
fn parse_arm_1688(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_lsl_0(ins, pc)
}
fn parse_arm_1689(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfef0060) == 0x1a00000 {
        parse_arm_lsl_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x1a00090 {
        parse_arm_strexd_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1690(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_lsr_0(ins, pc)
}
fn parse_arm_1691(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfef0060) == 0x1a00020 {
        parse_arm_lsr_0(ins, pc)
    } else if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1692(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_asr_0(ins, pc)
}
fn parse_arm_1693(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfef0060) == 0x1a00040 {
        parse_arm_asr_0(ins, pc)
    } else if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1694(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ror_0(ins, pc)
}
fn parse_arm_1695(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfef0060) == 0x1a00060 {
        parse_arm_ror_0(ins, pc)
    } else if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1696(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_1(ins, pc)
}
fn parse_arm_1697(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1698(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1699(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1700(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1701(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1702(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rrx_0(ins, pc)
}
fn parse_arm_1703(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1704(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1705(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strexd_0(ins, pc)
}
fn parse_arm_1706(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1707(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strh_0(ins, pc)
}
fn parse_arm_1708(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1709(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrd_0(ins, pc)
}
fn parse_arm_1710(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1711(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strd_0(ins, pc)
}
fn parse_arm_1712(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1713(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1714(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1715(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1716(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1717(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1718(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1719(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1720(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1721(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strexd_0(ins, pc)
}
fn parse_arm_1722(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1723(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strh_0(ins, pc)
}
fn parse_arm_1724(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1725(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrd_0(ins, pc)
}
fn parse_arm_1726(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1727(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strd_0(ins, pc)
}
fn parse_arm_1728(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00ff0) == 0x1a00000 {
        parse_arm_mov_1(ins, pc)
    } else if (ins & 0xfef0060) == 0x1a00000 {
        parse_arm_lsl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1729(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_lsl_0(ins, pc)
}
fn parse_arm_1730(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_lsr_0(ins, pc)
}
fn parse_arm_1731(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_lsr_0(ins, pc)
}
fn parse_arm_1732(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_asr_0(ins, pc)
}
fn parse_arm_1733(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_asr_0(ins, pc)
}
fn parse_arm_1734(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00ff0) == 0x1a00060 {
        parse_arm_rrx_0(ins, pc)
    } else if (ins & 0xfef0060) == 0x1a00060 {
        parse_arm_ror_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1735(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ror_0(ins, pc)
}
fn parse_arm_1736(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_lsl_0(ins, pc)
}
fn parse_arm_1737(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfef0060) == 0x1a00000 {
        parse_arm_lsl_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x1b00090 {
        parse_arm_ldrexd_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1738(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_lsr_0(ins, pc)
}
fn parse_arm_1739(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfef0060) == 0x1a00020 {
        parse_arm_lsr_0(ins, pc)
    } else if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1740(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_asr_0(ins, pc)
}
fn parse_arm_1741(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfef0060) == 0x1a00040 {
        parse_arm_asr_0(ins, pc)
    } else if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1742(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ror_0(ins, pc)
}
fn parse_arm_1743(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfef0060) == 0x1a00060 {
        parse_arm_ror_0(ins, pc)
    } else if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1744(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_lsl_0(ins, pc)
}
fn parse_arm_1745(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_lsl_0(ins, pc)
}
fn parse_arm_1746(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_lsr_0(ins, pc)
}
fn parse_arm_1747(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_lsr_0(ins, pc)
}
fn parse_arm_1748(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_asr_0(ins, pc)
}
fn parse_arm_1749(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_asr_0(ins, pc)
}
fn parse_arm_1750(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ror_0(ins, pc)
}
fn parse_arm_1751(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ror_0(ins, pc)
}
fn parse_arm_1752(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_lsl_0(ins, pc)
}
fn parse_arm_1753(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfef0060) == 0x1a00000 {
        parse_arm_lsl_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x1b00090 {
        parse_arm_ldrexd_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1754(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_lsr_0(ins, pc)
}
fn parse_arm_1755(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfef0060) == 0x1a00020 {
        parse_arm_lsr_0(ins, pc)
    } else if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1756(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_asr_0(ins, pc)
}
fn parse_arm_1757(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfef0060) == 0x1a00040 {
        parse_arm_asr_0(ins, pc)
    } else if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1758(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ror_0(ins, pc)
}
fn parse_arm_1759(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfef0060) == 0x1a00060 {
        parse_arm_ror_0(ins, pc)
    } else if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1760(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_1(ins, pc)
}
fn parse_arm_1761(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1762(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1763(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1764(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1765(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1766(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rrx_0(ins, pc)
}
fn parse_arm_1767(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1768(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1769(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrexd_0(ins, pc)
}
fn parse_arm_1770(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1771(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrh_0(ins, pc)
}
fn parse_arm_1772(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1773(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrsb_0(ins, pc)
}
fn parse_arm_1774(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1775(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrsh_0(ins, pc)
}
fn parse_arm_1776(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1777(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1778(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1779(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1780(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1781(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1782(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1783(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1784(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1785(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrexd_0(ins, pc)
}
fn parse_arm_1786(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1787(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrh_0(ins, pc)
}
fn parse_arm_1788(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1789(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrsb_0(ins, pc)
}
fn parse_arm_1790(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_1791(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrsh_0(ins, pc)
}
fn parse_arm_1792(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1793(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1794(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1795(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1796(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1797(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1798(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1799(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1800(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1801(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1c00090 {
        parse_arm_strexb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1802(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1803(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1804(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1805(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1806(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1807(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1808(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1809(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1810(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1811(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1812(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1813(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1814(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1815(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1816(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1817(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1c00090 {
        parse_arm_strexb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1818(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1819(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1820(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1821(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1822(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1823(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1824(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1825(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1826(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1827(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1828(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1829(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1830(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1831(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1832(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1833(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1c00090 {
        parse_arm_strexb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1834(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1835(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1836(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1837(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe5f00f0) == 0x4f00d0 {
        parse_arm_ldrd_1(ins, pc)
    } else if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1838(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1839(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1840(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1841(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1842(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1843(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1844(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1845(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1846(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1847(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1848(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1849(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1c00090 {
        parse_arm_strexb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1850(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1851(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1852(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1853(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe5f00f0) == 0x4f00d0 {
        parse_arm_ldrd_1(ins, pc)
    } else if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1854(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1855(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1856(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1857(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1858(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1859(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1860(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1861(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1862(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1863(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1864(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1865(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1d00090 {
        parse_arm_ldrexb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1866(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1867(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1868(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1869(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1870(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1871(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1872(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1873(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1874(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1875(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1876(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1877(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1878(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1879(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1880(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1881(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1d00090 {
        parse_arm_ldrexb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1882(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1883(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1884(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1885(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1886(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1887(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1888(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1889(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1890(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1891(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1892(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1893(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1894(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1895(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1896(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1897(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1d00090 {
        parse_arm_ldrexb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1898(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1899(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1900(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1901(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1902(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1903(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1904(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1905(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1906(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1907(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1908(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1909(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1910(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1911(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1912(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1913(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1d00090 {
        parse_arm_ldrexb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1914(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1915(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1916(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1917(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1918(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_1919(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1c00000 {
        parse_arm_bic_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1920(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1921(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1922(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1923(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1924(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1925(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1926(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1927(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1928(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1929(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1e00090 {
        parse_arm_strexh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1930(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1931(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1932(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1933(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1934(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1935(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1936(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1937(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1938(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1939(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1940(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1941(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1942(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1943(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1944(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1945(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1e00090 {
        parse_arm_strexh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1946(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1947(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1948(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1949(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1950(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1951(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1952(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1953(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1954(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1955(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1956(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1957(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1958(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1959(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1960(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1961(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1e00090 {
        parse_arm_strexh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1962(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1963(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1964(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1965(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe5f00f0) == 0x4f00d0 {
        parse_arm_ldrd_1(ins, pc)
    } else if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1966(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1967(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1968(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1969(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1970(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1971(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1972(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1973(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1974(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1975(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1976(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1977(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1e00090 {
        parse_arm_strexh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1978(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1979(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xb0 {
        parse_arm_strh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1980(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1981(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe5f00f0) == 0x4f00d0 {
        parse_arm_ldrd_1(ins, pc)
    } else if (ins & 0xe1000f0) == 0xd0 {
        parse_arm_ldrd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1982(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1983(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0xf0 {
        parse_arm_strd_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1984(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1985(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1986(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1987(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1988(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1989(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1990(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1991(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1992(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1993(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1f00090 {
        parse_arm_ldrexh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1994(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1995(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1996(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1997(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_1998(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_1999(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_2000(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2001(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2002(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2003(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2004(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2005(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2006(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2007(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2008(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2009(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1f00090 {
        parse_arm_ldrexh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_2010(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2011(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_2012(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2013(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_2014(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2015(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_2016(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2017(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2018(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2019(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2020(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2021(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2022(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2023(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2024(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2025(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1f00090 {
        parse_arm_ldrexh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_2026(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2027(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_2028(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2029(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_2030(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2031(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_2032(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2033(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2034(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2035(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2036(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2037(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2038(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2039(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2040(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2041(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x1f00090 {
        parse_arm_ldrexh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_2042(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2043(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000b0 {
        parse_arm_ldrh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_2044(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2045(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000d0 {
        parse_arm_ldrsb_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_2046(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_2047(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe1000f0) == 0x1000f0 {
        parse_arm_ldrsh_0(ins, pc)
    } else if (ins & 0xde00000) == 0x1e00000 {
        parse_arm_mvn_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_2048(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2049(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2050(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2051(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2052(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2053(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2054(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2055(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2056(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2057(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2058(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2059(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2060(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2061(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2062(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2063(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2064(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2065(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2066(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2067(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2068(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2069(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2070(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2071(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2072(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2073(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2074(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2075(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2076(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2077(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2078(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2079(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2080(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2081(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2082(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2083(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2084(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2085(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2086(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2087(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2088(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2089(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2090(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2091(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2092(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2093(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2094(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2095(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2096(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2097(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2098(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2099(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2100(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2101(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2102(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2103(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2104(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2105(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2106(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2107(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2108(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2109(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2110(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2111(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2112(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2113(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2114(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2115(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2116(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2117(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2118(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2119(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2120(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2121(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2122(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2123(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2124(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2125(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2126(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2127(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2128(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2129(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2130(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2131(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2132(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2133(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2134(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2135(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2136(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2137(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2138(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2139(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2140(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2141(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2142(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2143(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2144(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2145(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2146(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2147(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2148(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2149(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2150(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2151(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2152(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2153(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2154(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2155(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2156(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2157(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2158(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2159(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2160(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2161(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2162(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2163(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2164(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2165(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2166(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2167(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2168(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2169(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2170(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2171(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2172(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2173(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2174(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2175(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_and_0(ins, pc)
}
fn parse_arm_2176(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2177(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2178(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2179(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2180(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2181(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2182(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2183(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2184(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2185(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2186(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2187(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2188(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2189(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2190(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2191(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2192(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2193(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2194(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2195(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2196(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2197(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2198(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2199(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2200(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2201(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2202(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2203(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2204(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2205(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2206(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2207(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2208(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2209(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2210(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2211(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2212(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2213(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2214(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2215(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2216(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2217(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2218(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2219(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2220(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2221(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2222(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2223(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2224(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2225(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2226(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2227(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2228(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2229(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2230(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2231(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2232(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2233(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2234(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2235(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2236(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2237(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2238(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2239(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2240(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2241(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2242(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2243(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2244(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2245(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2246(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2247(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2248(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2249(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2250(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2251(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2252(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2253(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2254(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2255(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2256(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2257(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2258(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2259(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2260(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2261(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2262(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2263(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2264(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2265(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2266(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2267(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2268(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2269(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2270(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2271(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2272(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2273(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2274(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2275(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2276(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2277(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2278(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2279(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2280(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2281(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2282(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2283(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2284(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2285(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2286(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2287(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2288(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2289(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2290(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2291(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2292(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2293(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2294(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2295(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2296(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2297(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2298(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2299(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2300(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2301(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2302(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2303(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_eor_0(ins, pc)
}
fn parse_arm_2304(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2305(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2306(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2307(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2308(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2309(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2310(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2311(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2312(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2313(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2314(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2315(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2316(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2317(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2318(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2319(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2320(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2321(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2322(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2323(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2324(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2325(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2326(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2327(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2328(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2329(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2330(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2331(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2332(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2333(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2334(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2335(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2336(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2337(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2338(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2339(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2340(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2341(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2342(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2343(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2344(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2345(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2346(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2347(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2348(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2349(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2350(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2351(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2352(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2353(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2354(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2355(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2356(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2357(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2358(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2359(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2360(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2361(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2362(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2363(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2364(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2365(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2366(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2367(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2368(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2369(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2370(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2371(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2372(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2373(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2374(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2375(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2376(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2377(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2378(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2379(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2380(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2381(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2382(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2383(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2384(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2385(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2386(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2387(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2388(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2389(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2390(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2391(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2392(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2393(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2394(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2395(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2396(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2397(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2398(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2399(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2400(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2401(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2402(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2403(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2404(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2405(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2406(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2407(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2408(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2409(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2410(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2411(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2412(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2413(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2414(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2415(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2416(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2417(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2418(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2419(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2420(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2421(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2422(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2423(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2424(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2425(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2426(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2427(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2428(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2429(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2430(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2431(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sub_0(ins, pc)
}
fn parse_arm_2432(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2433(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2434(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2435(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2436(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2437(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2438(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2439(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2440(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2441(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2442(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2443(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2444(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2445(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2446(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2447(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2448(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2449(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2450(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2451(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2452(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2453(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2454(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2455(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2456(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2457(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2458(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2459(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2460(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2461(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2462(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2463(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2464(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2465(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2466(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2467(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2468(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2469(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2470(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2471(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2472(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2473(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2474(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2475(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2476(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2477(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2478(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2479(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2480(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2481(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2482(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2483(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2484(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2485(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2486(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2487(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2488(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2489(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2490(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2491(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2492(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2493(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2494(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2495(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2496(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2497(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2498(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2499(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2500(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2501(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2502(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2503(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2504(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2505(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2506(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2507(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2508(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2509(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2510(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2511(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2512(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2513(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2514(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2515(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2516(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2517(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2518(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2519(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2520(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2521(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2522(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2523(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2524(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2525(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2526(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2527(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2528(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2529(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2530(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2531(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2532(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2533(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2534(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2535(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2536(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2537(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2538(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2539(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2540(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2541(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2542(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2543(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2544(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2545(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2546(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2547(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2548(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2549(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2550(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2551(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2552(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2553(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2554(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2555(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2556(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2557(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2558(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2559(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsb_0(ins, pc)
}
fn parse_arm_2560(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2561(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2562(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2563(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2564(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2565(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2566(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2567(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2568(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2569(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2570(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2571(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2572(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2573(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2574(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2575(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2576(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2577(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2578(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2579(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2580(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2581(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2582(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2583(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2584(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2585(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2586(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2587(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2588(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2589(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2590(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2591(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2592(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2593(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2594(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2595(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2596(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2597(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2598(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2599(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2600(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2601(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2602(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2603(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2604(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2605(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2606(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2607(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2608(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2609(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2610(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2611(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2612(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2613(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2614(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2615(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2616(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2617(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2618(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2619(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2620(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2621(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2622(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2623(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2624(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2625(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2626(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2627(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2628(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2629(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2630(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2631(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2632(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2633(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2634(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2635(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2636(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2637(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2638(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2639(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2640(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2641(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2642(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2643(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2644(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2645(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2646(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2647(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2648(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2649(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2650(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2651(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2652(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2653(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2654(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2655(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2656(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2657(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2658(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2659(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2660(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2661(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2662(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2663(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2664(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2665(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2666(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2667(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2668(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2669(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2670(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2671(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2672(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2673(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2674(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2675(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2676(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2677(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2678(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2679(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2680(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2681(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2682(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2683(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2684(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2685(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2686(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2687(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_add_0(ins, pc)
}
fn parse_arm_2688(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2689(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2690(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2691(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2692(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2693(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2694(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2695(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2696(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2697(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2698(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2699(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2700(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2701(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2702(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2703(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2704(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2705(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2706(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2707(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2708(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2709(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2710(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2711(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2712(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2713(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2714(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2715(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2716(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2717(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2718(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2719(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2720(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2721(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2722(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2723(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2724(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2725(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2726(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2727(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2728(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2729(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2730(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2731(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2732(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2733(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2734(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2735(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2736(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2737(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2738(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2739(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2740(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2741(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2742(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2743(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2744(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2745(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2746(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2747(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2748(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2749(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2750(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2751(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2752(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2753(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2754(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2755(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2756(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2757(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2758(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2759(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2760(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2761(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2762(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2763(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2764(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2765(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2766(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2767(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2768(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2769(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2770(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2771(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2772(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2773(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2774(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2775(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2776(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2777(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2778(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2779(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2780(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2781(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2782(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2783(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2784(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2785(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2786(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2787(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2788(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2789(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2790(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2791(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2792(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2793(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2794(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2795(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2796(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2797(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2798(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2799(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2800(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2801(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2802(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2803(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2804(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2805(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2806(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2807(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2808(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2809(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2810(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2811(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2812(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2813(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2814(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2815(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_adc_0(ins, pc)
}
fn parse_arm_2816(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2817(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2818(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2819(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2820(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2821(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2822(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2823(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2824(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2825(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2826(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2827(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2828(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2829(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2830(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2831(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2832(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2833(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2834(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2835(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2836(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2837(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2838(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2839(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2840(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2841(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2842(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2843(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2844(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2845(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2846(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2847(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2848(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2849(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2850(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2851(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2852(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2853(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2854(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2855(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2856(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2857(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2858(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2859(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2860(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2861(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2862(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2863(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2864(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2865(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2866(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2867(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2868(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2869(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2870(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2871(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2872(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2873(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2874(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2875(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2876(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2877(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2878(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2879(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2880(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2881(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2882(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2883(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2884(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2885(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2886(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2887(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2888(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2889(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2890(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2891(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2892(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2893(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2894(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2895(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2896(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2897(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2898(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2899(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2900(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2901(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2902(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2903(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2904(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2905(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2906(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2907(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2908(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2909(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2910(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2911(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2912(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2913(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2914(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2915(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2916(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2917(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2918(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2919(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2920(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2921(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2922(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2923(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2924(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2925(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2926(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2927(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2928(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2929(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2930(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2931(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2932(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2933(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2934(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2935(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2936(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2937(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2938(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2939(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2940(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2941(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2942(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2943(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_sbc_0(ins, pc)
}
fn parse_arm_2944(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2945(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2946(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2947(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2948(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2949(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2950(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2951(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2952(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2953(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2954(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2955(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2956(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2957(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2958(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2959(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2960(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2961(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2962(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2963(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2964(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2965(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2966(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2967(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2968(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2969(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2970(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2971(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2972(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2973(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2974(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2975(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2976(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2977(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2978(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2979(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2980(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2981(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2982(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2983(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2984(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2985(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2986(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2987(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2988(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2989(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2990(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2991(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2992(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2993(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2994(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2995(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2996(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2997(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2998(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_2999(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3000(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3001(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3002(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3003(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3004(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3005(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3006(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3007(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3008(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3009(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3010(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3011(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3012(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3013(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3014(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3015(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3016(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3017(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3018(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3019(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3020(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3021(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3022(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3023(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3024(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3025(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3026(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3027(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3028(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3029(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3030(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3031(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3032(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3033(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3034(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3035(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3036(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3037(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3038(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3039(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3040(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3041(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3042(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3043(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3044(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3045(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3046(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3047(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3048(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3049(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3050(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3051(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3052(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3053(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3054(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3055(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3056(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3057(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3058(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3059(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3060(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3061(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3062(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3063(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3064(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3065(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3066(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3067(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3068(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3069(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3070(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3071(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_rsc_0(ins, pc)
}
fn parse_arm_3072(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3073(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3074(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3075(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3076(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3077(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3078(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3079(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3080(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3081(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3082(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3083(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3084(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3085(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3086(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3087(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3088(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3089(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3090(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3091(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3092(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3093(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3094(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3095(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3096(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3097(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3098(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3099(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3100(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3101(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3102(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3103(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3104(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3105(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3106(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3107(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3108(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3109(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3110(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3111(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3112(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3113(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3114(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3115(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3116(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3117(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3118(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3119(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3120(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3121(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3122(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3123(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3124(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3125(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3126(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3127(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3128(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3129(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3130(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3131(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3132(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3133(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3134(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3135(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3136(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3137(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3138(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3139(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3140(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3141(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3142(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3143(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3144(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3145(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3146(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3147(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3148(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3149(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3150(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3151(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3152(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3153(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3154(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3155(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3156(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3157(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3158(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3159(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3160(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3161(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3162(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3163(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3164(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3165(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3166(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3167(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3168(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3169(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3170(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3171(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3172(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3173(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3174(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3175(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3176(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3177(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3178(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3179(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3180(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3181(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3182(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3183(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3184(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3185(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3186(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3187(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3188(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3189(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3190(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3191(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3192(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3193(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3194(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3195(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3196(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3197(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3198(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3199(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_tst_0(ins, pc)
}
fn parse_arm_3200(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00ff) == 0x3200000 {
        parse_arm_nop_0(ins, pc)
    } else if (ins & 0xfff00ff) == 0x3200004 {
        parse_arm_sev_0(ins, pc)
    } else if (ins & 0xfff00ff) == 0x3200002 {
        parse_arm_wfe_0(ins, pc)
    } else if (ins & 0xfff00ff) == 0x3200003 {
        parse_arm_wfi_0(ins, pc)
    } else if (ins & 0xfff00ff) == 0x3200001 {
        parse_arm_yield_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_3201(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00ff) == 0x3200014 {
        parse_arm_csdb_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_3202(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3203(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3204(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3205(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3206(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3207(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3208(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3209(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3210(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3211(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3212(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3213(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3214(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3215(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3216(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00ff) == 0x3200000 {
        parse_arm_nop_0(ins, pc)
    } else if (ins & 0xfff00ff) == 0x3200004 {
        parse_arm_sev_0(ins, pc)
    } else if (ins & 0xfff00ff) == 0x3200002 {
        parse_arm_wfe_0(ins, pc)
    } else if (ins & 0xfff00ff) == 0x3200003 {
        parse_arm_wfi_0(ins, pc)
    } else if (ins & 0xfff00ff) == 0x3200001 {
        parse_arm_yield_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_3217(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00ff) == 0x3200014 {
        parse_arm_csdb_0(ins, pc)
    } else if (ins & 0xdb00000) == 0x1200000 {
        parse_arm_msr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_3218(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3219(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3220(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3221(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3222(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3223(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3224(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3225(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3226(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3227(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3228(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3229(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3230(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3231(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3232(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3233(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3234(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3235(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3236(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3237(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3238(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3239(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3240(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3241(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3242(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3243(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3244(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3245(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3246(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3247(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3248(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3249(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3250(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3251(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3252(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3253(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3254(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3255(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3256(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3257(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3258(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3259(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3260(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3261(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3262(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3263(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3264(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3265(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3266(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3267(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3268(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3269(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3270(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3271(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3272(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3273(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3274(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3275(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3276(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3277(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3278(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3279(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3280(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3281(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3282(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3283(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3284(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3285(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3286(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3287(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3288(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3289(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3290(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3291(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3292(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3293(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3294(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3295(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3296(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3297(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3298(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3299(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3300(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3301(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3302(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3303(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3304(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3305(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3306(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3307(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3308(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3309(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3310(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3311(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3312(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3313(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3314(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3315(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3316(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3317(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3318(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3319(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3320(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3321(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3322(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3323(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3324(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3325(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3326(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3327(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_teq_0(ins, pc)
}
fn parse_arm_3328(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3329(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3330(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3331(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3332(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3333(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3334(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3335(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3336(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3337(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3338(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3339(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3340(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3341(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3342(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3343(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3344(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3345(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3346(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3347(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3348(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3349(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3350(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3351(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3352(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3353(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3354(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3355(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3356(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3357(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3358(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3359(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3360(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3361(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3362(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3363(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3364(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3365(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3366(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3367(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3368(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3369(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3370(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3371(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3372(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3373(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3374(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3375(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3376(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3377(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3378(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3379(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3380(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3381(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3382(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3383(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3384(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3385(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3386(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3387(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3388(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3389(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3390(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3391(ins: u32, pc: u32) -> Option<Ins> {
    None
}
fn parse_arm_3392(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3393(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3394(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3395(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3396(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3397(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3398(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3399(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3400(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3401(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3402(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3403(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3404(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3405(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3406(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3407(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3408(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3409(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3410(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3411(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3412(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3413(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3414(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3415(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3416(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3417(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3418(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3419(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3420(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3421(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3422(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3423(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3424(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3425(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3426(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3427(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3428(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3429(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3430(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3431(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3432(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3433(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3434(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3435(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3436(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3437(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3438(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3439(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3440(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3441(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3442(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3443(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3444(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3445(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3446(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3447(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3448(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3449(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3450(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3451(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3452(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3453(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3454(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3455(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmp_0(ins, pc)
}
fn parse_arm_3456(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3457(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3458(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3459(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3460(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3461(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3462(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3463(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3464(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3465(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3466(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3467(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3468(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3469(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3470(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3471(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3472(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3473(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3474(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3475(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3476(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3477(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3478(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3479(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3480(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3481(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3482(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3483(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3484(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3485(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3486(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3487(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3488(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3489(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3490(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3491(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3492(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3493(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3494(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3495(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3496(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3497(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3498(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3499(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3500(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3501(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3502(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3503(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3504(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3505(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3506(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3507(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3508(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3509(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3510(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3511(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3512(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3513(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3514(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3515(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3516(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3517(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3518(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3519(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_msr_0(ins, pc)
}
fn parse_arm_3520(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3521(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3522(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3523(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3524(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3525(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3526(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3527(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3528(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3529(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3530(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3531(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3532(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3533(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3534(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3535(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3536(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3537(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3538(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3539(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3540(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3541(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3542(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3543(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3544(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3545(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3546(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3547(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3548(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3549(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3550(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3551(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3552(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3553(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3554(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3555(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3556(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3557(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3558(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3559(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3560(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3561(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3562(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3563(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3564(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3565(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3566(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3567(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3568(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3569(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3570(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3571(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3572(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3573(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3574(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3575(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3576(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3577(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3578(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3579(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3580(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3581(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3582(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3583(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_cmn_0(ins, pc)
}
fn parse_arm_3584(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3585(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3586(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3587(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3588(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3589(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3590(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3591(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3592(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3593(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3594(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3595(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3596(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3597(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3598(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3599(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3600(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3601(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3602(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3603(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3604(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3605(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3606(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3607(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3608(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3609(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3610(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3611(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3612(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3613(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3614(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3615(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3616(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3617(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3618(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3619(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3620(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3621(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3622(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3623(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3624(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3625(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3626(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3627(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3628(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3629(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3630(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3631(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3632(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3633(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3634(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3635(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3636(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3637(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3638(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3639(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3640(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3641(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3642(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3643(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3644(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3645(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3646(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3647(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3648(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3649(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3650(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3651(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3652(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3653(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3654(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3655(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3656(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3657(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3658(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3659(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3660(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3661(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3662(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3663(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3664(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3665(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3666(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3667(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3668(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3669(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3670(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3671(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3672(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3673(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3674(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3675(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3676(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3677(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3678(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3679(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3680(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3681(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3682(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3683(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3684(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3685(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3686(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3687(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3688(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3689(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3690(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3691(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3692(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3693(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3694(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3695(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3696(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3697(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3698(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3699(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3700(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3701(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3702(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3703(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3704(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3705(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3706(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3707(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3708(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3709(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3710(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3711(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_orr_0(ins, pc)
}
fn parse_arm_3712(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3713(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3714(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3715(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3716(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3717(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3718(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3719(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3720(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3721(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3722(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3723(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3724(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3725(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3726(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3727(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3728(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3729(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3730(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3731(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3732(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3733(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3734(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3735(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3736(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3737(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3738(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3739(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3740(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3741(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3742(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3743(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3744(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3745(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3746(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3747(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3748(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3749(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3750(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3751(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3752(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3753(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3754(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3755(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3756(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3757(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3758(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3759(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3760(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3761(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3762(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3763(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3764(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3765(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3766(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3767(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3768(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3769(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3770(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3771(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3772(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3773(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3774(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3775(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3776(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3777(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3778(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3779(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3780(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3781(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3782(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3783(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3784(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3785(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3786(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3787(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3788(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3789(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3790(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3791(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3792(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3793(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3794(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3795(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3796(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3797(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3798(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3799(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3800(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3801(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3802(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3803(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3804(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3805(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3806(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3807(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3808(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3809(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3810(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3811(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3812(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3813(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3814(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3815(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3816(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3817(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3818(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3819(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3820(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3821(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3822(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3823(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3824(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3825(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3826(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3827(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3828(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3829(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3830(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3831(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3832(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3833(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3834(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3835(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3836(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3837(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3838(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3839(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mov_0(ins, pc)
}
fn parse_arm_3840(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3841(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3842(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3843(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3844(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3845(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3846(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3847(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3848(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3849(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3850(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3851(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3852(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3853(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3854(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3855(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3856(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3857(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3858(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3859(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3860(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3861(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3862(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3863(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3864(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3865(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3866(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3867(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3868(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3869(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3870(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3871(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3872(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3873(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3874(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3875(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3876(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3877(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3878(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3879(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3880(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3881(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3882(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3883(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3884(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3885(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3886(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3887(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3888(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3889(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3890(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3891(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3892(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3893(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3894(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3895(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3896(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3897(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3898(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3899(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3900(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3901(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3902(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3903(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3904(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3905(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3906(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3907(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3908(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3909(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3910(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3911(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3912(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3913(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3914(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3915(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3916(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3917(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3918(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3919(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3920(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3921(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3922(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3923(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3924(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3925(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3926(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3927(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3928(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3929(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3930(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3931(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3932(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3933(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3934(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3935(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3936(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3937(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3938(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3939(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3940(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3941(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3942(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3943(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3944(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3945(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3946(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3947(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3948(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3949(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3950(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3951(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3952(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3953(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3954(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3955(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3956(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3957(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3958(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3959(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3960(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3961(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3962(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3963(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3964(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3965(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3966(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3967(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_bic_0(ins, pc)
}
fn parse_arm_3968(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3969(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3970(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3971(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3972(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3973(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3974(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3975(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3976(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3977(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3978(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3979(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3980(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3981(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3982(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3983(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3984(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3985(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3986(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3987(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3988(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3989(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3990(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3991(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3992(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3993(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3994(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3995(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3996(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3997(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3998(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_3999(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4000(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4001(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4002(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4003(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4004(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4005(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4006(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4007(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4008(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4009(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4010(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4011(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4012(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4013(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4014(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4015(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4016(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4017(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4018(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4019(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4020(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4021(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4022(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4023(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4024(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4025(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4026(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4027(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4028(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4029(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4030(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4031(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4032(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4033(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4034(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4035(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4036(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4037(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4038(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4039(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4040(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4041(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4042(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4043(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4044(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4045(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4046(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4047(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4048(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4049(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4050(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4051(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4052(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4053(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4054(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4055(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4056(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4057(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4058(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4059(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4060(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4061(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4062(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4063(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4064(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4065(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4066(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4067(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4068(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4069(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4070(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4071(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4072(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4073(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4074(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4075(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4076(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4077(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4078(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4079(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4080(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4081(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4082(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4083(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4084(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4085(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4086(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4087(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4088(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4089(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4090(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4091(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4092(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4093(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4094(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4095(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_mvn_0(ins, pc)
}
fn parse_arm_4096(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4097(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4098(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4099(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4100(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4101(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4102(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4103(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4104(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4105(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4106(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4107(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4108(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4109(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4110(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4111(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4112(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4113(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4114(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4115(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4116(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4117(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4118(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4119(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4120(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4121(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4122(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4123(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4124(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4125(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4126(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4127(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4128(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4129(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4130(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4131(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4132(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4133(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4134(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4135(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4136(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4137(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4138(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4139(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4140(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4141(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4142(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4143(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4144(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4145(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4146(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4147(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4148(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4149(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4150(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4151(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4152(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4153(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4154(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4155(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4156(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4157(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4158(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4159(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4160(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4161(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4162(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4163(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4164(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4165(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4166(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4167(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4168(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4169(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4170(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4171(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4172(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4173(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4174(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4175(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4176(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4177(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4178(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4179(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4180(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4181(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4182(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4183(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4184(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4185(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4186(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4187(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4188(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4189(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4190(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4191(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4192(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4193(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4194(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4195(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4196(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4197(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4198(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4199(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4200(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4201(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4202(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4203(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4204(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4205(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4206(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4207(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4208(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4209(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4210(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4211(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4212(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4213(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4214(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4215(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4216(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4217(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4218(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4219(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4220(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4221(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4222(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4223(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4224(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4225(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4226(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4227(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4228(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4229(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4230(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4231(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4232(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4233(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4234(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4235(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4236(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4237(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4238(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4239(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4240(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4241(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4242(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4243(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4244(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4245(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4246(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4247(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4248(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4249(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4250(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4251(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4252(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4253(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4254(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4255(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4256(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4257(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4258(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4259(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4260(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4261(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4262(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4263(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4264(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4265(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4266(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4267(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4268(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4269(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4270(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4271(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4272(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4273(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4274(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4275(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4276(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4277(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4278(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4279(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4280(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4281(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4282(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4283(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4284(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4285(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4286(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4287(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4288(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4289(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4290(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4291(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4292(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4293(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4294(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4295(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4296(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4297(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4298(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4299(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4300(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4301(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4302(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4303(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4304(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4305(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4306(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4307(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4308(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4309(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4310(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4311(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4312(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4313(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4314(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4315(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4316(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4317(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4318(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4319(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4320(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4321(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4322(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4323(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4324(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4325(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4326(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4327(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4328(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4329(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4330(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4331(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4332(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4333(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4334(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4335(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4336(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4337(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4338(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4339(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4340(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4341(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4342(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4343(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4344(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4345(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4346(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4347(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4348(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4349(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4350(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4351(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4352(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4353(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4354(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4355(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4356(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4357(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4358(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4359(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4360(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4361(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4362(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4363(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4364(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4365(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4366(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4367(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4368(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4369(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4370(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4371(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4372(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4373(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4374(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4375(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4376(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4377(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4378(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4379(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4380(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4381(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4382(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4383(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4384(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4385(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4386(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4387(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4388(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4389(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4390(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4391(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4392(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4393(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4394(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4395(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4396(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4397(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4398(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4399(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4400(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4401(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4402(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4403(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4404(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4405(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4406(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4407(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4408(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4409(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4410(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4411(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4412(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4413(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4414(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4415(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4416(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4417(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4418(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4419(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4420(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4421(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4422(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4423(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4424(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4425(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4426(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4427(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4428(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4429(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4430(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4431(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4432(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4433(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4434(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4435(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4436(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4437(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4438(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4439(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4440(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4441(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4442(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4443(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4444(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4445(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4446(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4447(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4448(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4449(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4450(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4451(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4452(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4453(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4454(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4455(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4456(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4457(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4458(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4459(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4460(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4461(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4462(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4463(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4464(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4465(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4466(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4467(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4468(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4469(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4470(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4471(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4472(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4473(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4474(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4475(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4476(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4477(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4478(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4479(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4480(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4481(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4482(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4483(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4484(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4485(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4486(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4487(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4488(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4489(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4490(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4491(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4492(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4493(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4494(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4495(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4496(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4497(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4498(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4499(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4500(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4501(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4502(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4503(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4504(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4505(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4506(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4507(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4508(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4509(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4510(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4511(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4512(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4513(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4514(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4515(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4516(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4517(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4518(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4519(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4520(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4521(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4522(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4523(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4524(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4525(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4526(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4527(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4528(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4529(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4530(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4531(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4532(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4533(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4534(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4535(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4536(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4537(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4538(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4539(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4540(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4541(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4542(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4543(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4544(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4545(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4546(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4547(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4548(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4549(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4550(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4551(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4552(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4553(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4554(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4555(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4556(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4557(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4558(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4559(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4560(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4561(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4562(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4563(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4564(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4565(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4566(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4567(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4568(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4569(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4570(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4571(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4572(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4573(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4574(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4575(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4576(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4577(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4578(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4579(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4580(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4581(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4582(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4583(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4584(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4585(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4586(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4587(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4588(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4589(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4590(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4591(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4592(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4593(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4594(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4595(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4596(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4597(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4598(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4599(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4600(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4601(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4602(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4603(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4604(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4605(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4606(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4607(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4608(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4609(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4610(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4611(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4612(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4613(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4614(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4615(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4616(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4617(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4618(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4619(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4620(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4621(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4622(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4623(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4624(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4625(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4626(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4627(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4628(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4629(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4630(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4631(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4632(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4633(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4634(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4635(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4636(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4637(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4638(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4639(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4640(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4641(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4642(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4643(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4644(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4645(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4646(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4647(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4648(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4649(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4650(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4651(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4652(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4653(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4654(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4655(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4656(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4657(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4658(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4659(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4660(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4661(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4662(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4663(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4664(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4665(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4666(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4667(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4668(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4669(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4670(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4671(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_4672(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4673(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4674(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4675(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4676(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4677(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4678(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4679(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4680(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4681(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4682(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4683(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4684(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4685(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4686(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4687(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4688(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4689(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4690(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4691(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4692(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4693(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4694(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4695(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4696(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4697(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4698(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4699(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4700(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4701(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4702(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4703(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4704(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0fff) == 0x49d0004 {
        parse_arm_pop_1(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4705(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4706(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4707(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4708(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4709(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4710(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4711(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4712(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4713(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4714(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4715(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4716(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4717(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4718(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4719(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4720(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4721(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4722(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4723(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4724(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4725(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4726(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4727(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4728(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4729(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4730(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4731(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4732(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4733(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4734(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4735(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_4736(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4737(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4738(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4739(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4740(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4741(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4742(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4743(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4744(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4745(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4746(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4747(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4748(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4749(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4750(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4751(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4752(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4753(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4754(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4755(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4756(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4757(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4758(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4759(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4760(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4761(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4762(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4763(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4764(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4765(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4766(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4767(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4768(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4769(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4770(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4771(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4772(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4773(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4774(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4775(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4776(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4777(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4778(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4779(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4780(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4781(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4782(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4783(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4784(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4785(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4786(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4787(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4788(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4789(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4790(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4791(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4792(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4793(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4794(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4795(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4796(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4797(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4798(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4799(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4800(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4801(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4802(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4803(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4804(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4805(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4806(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4807(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4808(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4809(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4810(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4811(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4812(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4813(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4814(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4815(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4816(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4817(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4818(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4819(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4820(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4821(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4822(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4823(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4824(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4825(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4826(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4827(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4828(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4829(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4830(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4831(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4832(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4833(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4834(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4835(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4836(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4837(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4838(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4839(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4840(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4841(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4842(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4843(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4844(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4845(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4846(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4847(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4848(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4849(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4850(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4851(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4852(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4853(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4854(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4855(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4856(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4857(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4858(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4859(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4860(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4861(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4862(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4863(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4864(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4865(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4866(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4867(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4868(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4869(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4870(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4871(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4872(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4873(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4874(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4875(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4876(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4877(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4878(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4879(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4880(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4881(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4882(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4883(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4884(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4885(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4886(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4887(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4888(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4889(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4890(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4891(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4892(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4893(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4894(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4895(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4896(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4897(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4898(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4899(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4900(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4901(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4902(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4903(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4904(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4905(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4906(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4907(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4908(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4909(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4910(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4911(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4912(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4913(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4914(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4915(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4916(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4917(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4918(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4919(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4920(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4921(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4922(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4923(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4924(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4925(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4926(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4927(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_4928(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4929(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4930(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4931(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4932(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4933(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4934(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4935(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4936(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4937(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4938(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4939(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4940(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4941(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4942(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4943(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4944(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4945(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4946(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4947(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4948(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4949(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4950(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4951(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4952(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4953(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4954(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4955(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4956(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4957(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4958(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4959(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4960(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4961(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4962(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4963(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4964(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4965(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4966(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4967(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4968(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4969(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4970(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4971(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4972(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4973(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4974(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4975(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4976(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4977(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4978(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4979(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4980(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4981(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4982(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4983(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4984(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4985(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4986(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4987(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4988(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4989(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4990(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4991(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_4992(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4993(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4994(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4995(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4996(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4997(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4998(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_4999(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5000(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5001(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5002(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5003(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5004(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5005(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5006(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5007(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5008(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5009(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5010(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5011(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5012(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5013(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5014(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5015(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5016(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5017(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5018(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5019(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5020(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5021(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5022(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5023(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5024(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5025(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5026(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5027(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5028(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5029(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5030(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5031(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5032(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5033(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5034(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5035(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5036(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5037(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5038(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5039(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5040(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5041(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5042(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5043(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5044(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5045(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5046(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5047(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5048(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5049(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5050(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5051(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5052(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5053(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5054(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5055(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5056(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5057(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5058(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5059(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5060(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5061(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5062(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5063(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5064(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5065(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5066(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5067(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5068(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5069(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5070(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5071(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5072(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5073(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5074(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5075(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5076(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5077(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5078(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5079(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5080(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5081(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5082(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5083(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5084(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5085(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5086(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5087(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5088(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5089(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5090(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5091(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5092(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5093(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5094(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5095(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5096(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5097(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5098(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5099(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5100(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5101(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5102(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5103(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5104(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5105(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5106(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5107(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5108(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5109(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5110(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5111(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5112(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5113(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5114(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5115(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5116(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5117(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5118(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5119(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5120(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5121(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5122(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5123(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5124(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5125(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5126(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5127(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5128(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5129(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5130(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5131(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5132(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5133(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5134(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5135(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5136(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5137(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5138(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5139(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5140(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5141(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5142(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5143(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5144(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5145(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5146(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5147(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5148(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5149(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5150(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5151(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5152(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5153(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5154(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5155(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5156(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5157(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5158(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5159(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5160(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5161(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5162(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5163(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5164(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5165(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5166(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5167(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5168(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5169(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5170(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5171(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5172(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5173(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5174(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5175(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5176(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5177(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5178(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5179(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5180(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5181(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5182(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5183(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5184(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5185(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5186(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5187(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5188(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5189(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5190(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5191(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5192(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5193(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5194(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5195(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5196(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5197(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5198(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5199(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5200(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5201(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5202(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5203(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5204(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5205(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5206(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5207(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5208(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5209(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5210(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5211(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5212(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5213(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5214(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5215(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5216(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5217(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5218(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5219(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5220(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5221(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5222(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5223(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5224(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5225(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5226(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5227(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5228(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5229(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5230(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5231(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5232(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5233(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5234(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5235(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5236(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5237(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5238(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5239(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5240(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5241(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5242(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5243(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5244(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5245(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5246(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5247(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5248(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5249(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5250(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5251(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5252(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5253(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5254(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5255(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5256(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5257(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5258(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5259(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5260(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5261(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5262(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5263(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5264(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5265(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5266(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5267(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5268(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5269(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5270(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5271(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5272(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5273(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5274(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5275(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5276(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5277(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5278(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5279(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5280(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0fff) == 0x52d0004 {
        parse_arm_push_1(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5281(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5282(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5283(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5284(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5285(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5286(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5287(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5288(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5289(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5290(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5291(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5292(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5293(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5294(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5295(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5296(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5297(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5298(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5299(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5300(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5301(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5302(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5303(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5304(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5305(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5306(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5307(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5308(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5309(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5310(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5311(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5312(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5313(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5314(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5315(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5316(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5317(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5318(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5319(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5320(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5321(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5322(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5323(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5324(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5325(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5326(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5327(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5328(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5329(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5330(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5331(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5332(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5333(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5334(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5335(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5336(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5337(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5338(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5339(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5340(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5341(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5342(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5343(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5344(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5345(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5346(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5347(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5348(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5349(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5350(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5351(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5352(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5353(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5354(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5355(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5356(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5357(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5358(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5359(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5360(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5361(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5362(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5363(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5364(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5365(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5366(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5367(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5368(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5369(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5370(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5371(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5372(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5373(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5374(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5375(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5376(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5377(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5378(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5379(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5380(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5381(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5382(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5383(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5384(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5385(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5386(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5387(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5388(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5389(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5390(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5391(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5392(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5393(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5394(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5395(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5396(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5397(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5398(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5399(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5400(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5401(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5402(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5403(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5404(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5405(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5406(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5407(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5408(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5409(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5410(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5411(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5412(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5413(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5414(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5415(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5416(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5417(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5418(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5419(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5420(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5421(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5422(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5423(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5424(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5425(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5426(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5427(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5428(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5429(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5430(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5431(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5432(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5433(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5434(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5435(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5436(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5437(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5438(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5439(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5440(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5441(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5442(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5443(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5444(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5445(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5446(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5447(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5448(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5449(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5450(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5451(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5452(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5453(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5454(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5455(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5456(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5457(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5458(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5459(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5460(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5461(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5462(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5463(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5464(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5465(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5466(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5467(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5468(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5469(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5470(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5471(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5472(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5473(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5474(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5475(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5476(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5477(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5478(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5479(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5480(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5481(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5482(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5483(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5484(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5485(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5486(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5487(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5488(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5489(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5490(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5491(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5492(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5493(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5494(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5495(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5496(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5497(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5498(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5499(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5500(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5501(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5502(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5503(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5504(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5505(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5506(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5507(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5508(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5509(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5510(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5511(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5512(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5513(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5514(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5515(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5516(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5517(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5518(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5519(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5520(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5521(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5522(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5523(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5524(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5525(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5526(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5527(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5528(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5529(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5530(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5531(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5532(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5533(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5534(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5535(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5536(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5537(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5538(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5539(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5540(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5541(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5542(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5543(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5544(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5545(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5546(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5547(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5548(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5549(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5550(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5551(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5552(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5553(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5554(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5555(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5556(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5557(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5558(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5559(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5560(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5561(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5562(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5563(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5564(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5565(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5566(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5567(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5568(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5569(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff000f0) == 0xf5700010 {
        parse_arm_clrex_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5570(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5571(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5572(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5573(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5574(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5575(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5576(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5577(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5578(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5579(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5580(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5581(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5582(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5583(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5584(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5585(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff000f0) == 0xf5700010 {
        parse_arm_clrex_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5586(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5587(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5588(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5589(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5590(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5591(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5592(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5593(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5594(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5595(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5596(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5597(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5598(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5599(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5600(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5601(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff000f0) == 0xf5700010 {
        parse_arm_clrex_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5602(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5603(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5604(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5605(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5606(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5607(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5608(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5609(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5610(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5611(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5612(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5613(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5614(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5615(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5616(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5617(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff000f0) == 0xf5700010 {
        parse_arm_clrex_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5618(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5619(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5620(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5621(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5622(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5623(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5624(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5625(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5626(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5627(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5628(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5629(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5630(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5631(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_5632(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5633(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5634(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5635(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5636(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5637(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5638(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5639(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5640(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5641(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5642(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5643(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5644(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5645(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5646(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5647(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5648(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5649(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5650(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5651(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5652(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5653(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5654(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5655(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5656(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5657(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5658(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5659(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5660(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5661(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5662(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5663(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5664(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5665(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5666(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5667(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5668(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5669(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5670(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5671(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5672(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5673(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5674(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5675(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5676(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5677(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5678(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5679(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5680(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5681(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5682(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5683(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5684(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5685(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5686(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5687(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5688(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5689(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5690(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5691(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5692(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5693(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5694(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5695(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5696(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5697(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5698(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5699(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5700(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5701(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5702(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5703(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5704(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5705(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5706(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5707(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5708(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5709(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5710(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5711(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5712(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5713(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5714(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5715(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5716(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5717(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5718(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5719(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5720(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5721(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5722(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5723(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5724(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5725(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5726(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5727(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5728(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5729(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5730(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5731(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5732(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5733(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5734(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5735(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5736(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5737(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5738(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5739(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5740(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5741(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5742(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5743(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5744(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5745(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5746(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5747(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5748(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5749(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5750(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5751(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5752(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5753(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5754(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5755(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5756(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5757(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5758(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5759(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5760(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5761(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5762(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5763(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5764(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5765(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5766(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5767(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5768(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5769(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5770(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5771(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5772(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5773(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5774(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5775(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5776(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5777(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5778(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5779(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5780(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5781(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5782(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5783(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5784(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5785(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5786(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5787(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5788(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5789(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5790(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5791(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5792(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5793(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5794(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5795(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5796(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5797(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5798(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5799(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5800(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5801(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5802(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5803(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5804(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5805(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5806(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5807(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5808(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5809(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5810(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5811(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5812(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5813(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5814(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5815(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5816(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5817(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5818(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5819(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5820(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5821(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5822(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5823(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_5824(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5825(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5826(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5827(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5828(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5829(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5830(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5831(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5832(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5833(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5834(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5835(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5836(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5837(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5838(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5839(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5840(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5841(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5842(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5843(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5844(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5845(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5846(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5847(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5848(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5849(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5850(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5851(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5852(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5853(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5854(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5855(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5856(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5857(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5858(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5859(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5860(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5861(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5862(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5863(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5864(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5865(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5866(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5867(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5868(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5869(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5870(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5871(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5872(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5873(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5874(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5875(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5876(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5877(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5878(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5879(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5880(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5881(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5882(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5883(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5884(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5885(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5886(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5887(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_5888(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5889(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5890(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5891(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5892(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5893(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5894(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5895(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5896(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5897(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5898(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5899(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5900(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5901(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5902(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5903(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5904(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5905(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5906(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5907(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5908(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5909(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5910(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5911(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5912(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5913(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5914(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5915(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5916(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5917(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5918(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5919(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5920(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5921(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5922(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5923(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5924(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5925(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5926(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5927(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5928(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5929(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5930(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5931(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5932(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5933(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5934(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5935(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5936(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5937(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5938(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5939(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5940(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5941(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5942(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5943(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5944(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5945(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5946(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5947(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5948(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5949(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5950(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5951(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_5952(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5953(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5954(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5955(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5956(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5957(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5958(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5959(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5960(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5961(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5962(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5963(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5964(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5965(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5966(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5967(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5968(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5969(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5970(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5971(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5972(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5973(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5974(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5975(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5976(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5977(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5978(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5979(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5980(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5981(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5982(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5983(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5984(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5985(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5986(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5987(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5988(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5989(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5990(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5991(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5992(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5993(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5994(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5995(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5996(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5997(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5998(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_5999(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6000(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6001(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6002(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6003(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6004(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6005(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6006(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6007(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6008(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6009(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6010(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6011(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6012(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6013(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6014(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6015(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6016(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6017(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6018(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6019(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6020(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6021(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6022(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6023(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6024(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6025(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6026(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6027(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6028(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6029(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6030(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6031(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6032(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6033(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6034(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6035(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6036(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6037(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6038(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6039(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6040(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6041(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6042(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6043(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6044(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6045(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6046(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6047(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6048(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6049(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6050(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6051(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6052(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6053(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6054(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6055(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6056(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6057(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6058(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6059(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6060(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6061(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6062(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6063(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6064(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6065(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6066(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6067(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6068(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6069(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6070(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6071(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6072(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6073(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6074(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6075(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6076(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6077(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6078(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6079(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6080(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6081(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6082(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6083(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6084(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6085(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6086(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6087(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6088(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6089(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6090(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6091(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6092(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6093(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6094(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6095(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6096(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6097(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6098(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6099(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6100(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6101(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6102(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6103(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6104(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6105(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6106(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6107(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6108(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6109(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6110(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6111(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6112(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6113(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6114(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6115(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6116(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6117(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6118(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6119(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6120(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6121(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6122(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6123(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6124(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6125(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6126(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6127(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6128(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6129(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6130(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6131(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6132(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6133(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6134(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6135(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6136(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6137(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6138(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6139(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6140(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6141(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6142(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6143(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6144(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6145(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6146(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6147(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6148(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6149(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6150(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6151(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6152(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6153(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6154(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6155(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6156(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6157(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6158(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6159(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6160(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6161(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6162(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6163(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6164(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6165(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6166(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6167(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6168(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6169(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6170(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6171(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6172(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6173(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6174(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6175(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6176(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6177(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6178(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6179(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6180(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6181(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6182(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6183(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6184(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6185(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6186(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6187(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6188(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6189(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6190(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6191(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6192(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6193(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6194(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6195(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6196(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6197(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6198(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6199(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6200(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6201(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6202(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6203(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6204(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6205(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6206(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6207(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6208(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6209(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6100010 {
        parse_arm_sadd16_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6210(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6211(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6100030 {
        parse_arm_sasx_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6212(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6213(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6100050 {
        parse_arm_ssax_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6214(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6215(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6100070 {
        parse_arm_ssub16_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6216(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6217(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6100090 {
        parse_arm_sadd8_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6218(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6219(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6220(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6221(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6222(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6223(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x61000f0 {
        parse_arm_ssub8_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6224(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6225(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6100010 {
        parse_arm_sadd16_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6226(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6227(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6100030 {
        parse_arm_sasx_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6228(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6229(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6100050 {
        parse_arm_ssax_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6230(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6231(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6100070 {
        parse_arm_ssub16_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6232(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6233(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6100090 {
        parse_arm_sadd8_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6234(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6235(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6236(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6237(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6238(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6239(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x61000f0 {
        parse_arm_ssub8_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6240(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6241(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6100010 {
        parse_arm_sadd16_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6242(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6243(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6100030 {
        parse_arm_sasx_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6244(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6245(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6100050 {
        parse_arm_ssax_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6246(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6247(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6100070 {
        parse_arm_ssub16_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6248(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6249(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6100090 {
        parse_arm_sadd8_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6250(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6251(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6252(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6253(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6254(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6255(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x61000f0 {
        parse_arm_ssub8_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6256(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6257(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6100010 {
        parse_arm_sadd16_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6258(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6259(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6100030 {
        parse_arm_sasx_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6260(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6261(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6100050 {
        parse_arm_ssax_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6262(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6263(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6100070 {
        parse_arm_ssub16_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6264(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6265(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6100090 {
        parse_arm_sadd8_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6266(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6267(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6268(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6269(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6270(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6271(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x61000f0 {
        parse_arm_ssub8_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6272(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6273(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6200010 {
        parse_arm_qadd16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6274(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6275(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6200030 {
        parse_arm_qasx_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6276(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6277(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6200050 {
        parse_arm_qsax_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6278(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6279(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6200070 {
        parse_arm_qsub16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6280(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6281(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6200090 {
        parse_arm_qadd8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6282(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6283(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6284(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6285(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6286(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6287(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x62000f0 {
        parse_arm_qsub8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6288(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6289(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6200010 {
        parse_arm_qadd16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6290(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6291(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6200030 {
        parse_arm_qasx_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6292(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6293(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6200050 {
        parse_arm_qsax_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6294(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6295(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6200070 {
        parse_arm_qsub16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6296(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6297(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6200090 {
        parse_arm_qadd8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6298(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6299(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6300(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6301(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6302(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6303(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x62000f0 {
        parse_arm_qsub8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6304(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6305(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6200010 {
        parse_arm_qadd16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6306(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6307(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6200030 {
        parse_arm_qasx_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6308(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6309(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6200050 {
        parse_arm_qsax_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6310(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6311(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6200070 {
        parse_arm_qsub16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6312(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6313(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6200090 {
        parse_arm_qadd8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6314(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6315(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6316(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6317(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6318(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6319(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x62000f0 {
        parse_arm_qsub8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6320(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6321(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6200010 {
        parse_arm_qadd16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6322(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6323(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6200030 {
        parse_arm_qasx_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6324(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6325(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6200050 {
        parse_arm_qsax_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6326(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6327(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6200070 {
        parse_arm_qsub16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6328(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6329(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6200090 {
        parse_arm_qadd8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6330(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6331(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6332(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6333(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6334(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6335(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x62000f0 {
        parse_arm_qsub8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6336(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6337(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6300010 {
        parse_arm_shadd16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6338(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6339(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6300030 {
        parse_arm_shasx_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6340(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6341(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6300050 {
        parse_arm_shsax_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6342(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6343(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6300070 {
        parse_arm_shsub16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6344(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6345(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6300090 {
        parse_arm_shadd8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6346(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6347(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6348(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6349(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6350(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6351(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x63000f0 {
        parse_arm_shsub8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6352(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6353(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6300010 {
        parse_arm_shadd16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6354(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6355(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6300030 {
        parse_arm_shasx_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6356(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6357(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6300050 {
        parse_arm_shsax_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6358(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6359(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6300070 {
        parse_arm_shsub16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6360(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6361(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6300090 {
        parse_arm_shadd8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6362(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6363(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6364(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6365(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6366(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6367(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x63000f0 {
        parse_arm_shsub8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6368(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6369(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6300010 {
        parse_arm_shadd16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6370(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6371(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6300030 {
        parse_arm_shasx_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6372(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6373(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6300050 {
        parse_arm_shsax_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6374(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6375(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6300070 {
        parse_arm_shsub16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6376(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6377(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6300090 {
        parse_arm_shadd8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6378(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6379(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6380(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6381(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6382(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6383(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x63000f0 {
        parse_arm_shsub8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6384(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6385(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6300010 {
        parse_arm_shadd16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6386(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6387(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6300030 {
        parse_arm_shasx_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6388(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6389(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6300050 {
        parse_arm_shsax_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6390(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6391(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6300070 {
        parse_arm_shsub16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6392(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6393(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6300090 {
        parse_arm_shadd8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6394(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6395(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6396(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6397(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6398(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6399(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x63000f0 {
        parse_arm_shsub8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6400(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6401(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6402(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6403(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6404(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6405(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6406(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6407(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6408(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6409(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6410(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6411(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6412(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6413(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6414(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6415(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6416(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6417(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6418(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6419(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6420(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6421(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6422(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6423(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6424(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6425(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6426(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6427(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6428(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6429(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6430(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6431(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6432(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6433(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6434(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6435(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6436(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6437(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6438(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6439(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6440(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6441(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6442(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6443(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6444(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6445(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6446(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6447(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6448(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6449(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6450(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6451(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6452(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6453(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6454(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6455(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6456(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6457(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6458(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6459(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6460(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6461(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6462(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6463(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6464(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6465(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6500010 {
        parse_arm_uadd16_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6466(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6467(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6500030 {
        parse_arm_uasx_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6468(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6469(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6500050 {
        parse_arm_usax_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6470(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6471(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6500070 {
        parse_arm_usub16_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6472(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6473(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6500090 {
        parse_arm_uadd8_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6474(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6475(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6476(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6477(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6478(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6479(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x65000f0 {
        parse_arm_usub8_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6480(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6481(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6500010 {
        parse_arm_uadd16_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6482(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6483(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6500030 {
        parse_arm_uasx_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6484(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6485(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6500050 {
        parse_arm_usax_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6486(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6487(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6500070 {
        parse_arm_usub16_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6488(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6489(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6500090 {
        parse_arm_uadd8_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6490(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6491(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6492(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6493(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6494(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6495(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x65000f0 {
        parse_arm_usub8_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6496(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6497(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6500010 {
        parse_arm_uadd16_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6498(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6499(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6500030 {
        parse_arm_uasx_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6500(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6501(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6500050 {
        parse_arm_usax_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6502(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6503(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6500070 {
        parse_arm_usub16_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6504(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6505(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6500090 {
        parse_arm_uadd8_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6506(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6507(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6508(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6509(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6510(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6511(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x65000f0 {
        parse_arm_usub8_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6512(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6513(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6500010 {
        parse_arm_uadd16_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6514(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6515(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6500030 {
        parse_arm_uasx_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6516(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6517(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6500050 {
        parse_arm_usax_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6518(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6519(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6500070 {
        parse_arm_usub16_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6520(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6521(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6500090 {
        parse_arm_uadd8_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6522(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6523(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6524(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6525(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6526(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6527(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x65000f0 {
        parse_arm_usub8_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6528(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6529(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6600010 {
        parse_arm_uqadd16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6530(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6531(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6600030 {
        parse_arm_uqasx_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6532(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6533(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6600050 {
        parse_arm_uqsax_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6534(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6535(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6600070 {
        parse_arm_uqsub16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6536(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6537(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6600090 {
        parse_arm_uqadd8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6538(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6539(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6540(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6541(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6542(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6543(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x66000f0 {
        parse_arm_uqsub8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6544(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6545(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6600010 {
        parse_arm_uqadd16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6546(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6547(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6600030 {
        parse_arm_uqasx_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6548(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6549(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6600050 {
        parse_arm_uqsax_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6550(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6551(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6600070 {
        parse_arm_uqsub16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6552(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6553(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6600090 {
        parse_arm_uqadd8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6554(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6555(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6556(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6557(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6558(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6559(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x66000f0 {
        parse_arm_uqsub8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6560(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6561(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6600010 {
        parse_arm_uqadd16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6562(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6563(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6600030 {
        parse_arm_uqasx_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6564(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6565(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6600050 {
        parse_arm_uqsax_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6566(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6567(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6600070 {
        parse_arm_uqsub16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6568(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6569(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6600090 {
        parse_arm_uqadd8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6570(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6571(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6572(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6573(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6574(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6575(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x66000f0 {
        parse_arm_uqsub8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6576(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6577(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6600010 {
        parse_arm_uqadd16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6578(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6579(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6600030 {
        parse_arm_uqasx_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6580(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6581(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6600050 {
        parse_arm_uqsax_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6582(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6583(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6600070 {
        parse_arm_uqsub16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6584(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6585(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6600090 {
        parse_arm_uqadd8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6586(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6587(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6588(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6589(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6590(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6591(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x66000f0 {
        parse_arm_uqsub8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6592(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6593(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6700010 {
        parse_arm_uhadd16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6594(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6595(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6700030 {
        parse_arm_uhasx_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6596(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6597(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6700050 {
        parse_arm_uhsax_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6598(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6599(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6700070 {
        parse_arm_uhsub16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6600(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6601(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6700090 {
        parse_arm_uhadd8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6602(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6603(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6604(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6605(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6606(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6607(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x67000f0 {
        parse_arm_uhsub8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6608(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6609(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6700010 {
        parse_arm_uhadd16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6610(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6611(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6700030 {
        parse_arm_uhasx_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6612(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6613(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6700050 {
        parse_arm_uhsax_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6614(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6615(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6700070 {
        parse_arm_uhsub16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6616(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6617(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6700090 {
        parse_arm_uhadd8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6618(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6619(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6620(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6621(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6622(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6623(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x67000f0 {
        parse_arm_uhsub8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6624(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6625(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6700010 {
        parse_arm_uhadd16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6626(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6627(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6700030 {
        parse_arm_uhasx_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6628(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6629(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6700050 {
        parse_arm_uhsax_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6630(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6631(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6700070 {
        parse_arm_uhsub16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6632(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6633(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6700090 {
        parse_arm_uhadd8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6634(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6635(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6636(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6637(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6638(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6639(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x67000f0 {
        parse_arm_uhsub8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6640(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6641(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6700010 {
        parse_arm_uhadd16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6642(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6643(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6700030 {
        parse_arm_uhasx_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6644(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6645(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6700050 {
        parse_arm_uhsax_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6646(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6647(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6700070 {
        parse_arm_uhsub16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6648(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6649(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6700090 {
        parse_arm_uhadd8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6650(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6651(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6652(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6653(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6654(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6655(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x67000f0 {
        parse_arm_uhsub8_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6656(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6657(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00070) == 0x6800010 {
        parse_arm_pkhbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6658(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6659(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6660(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6661(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00070) == 0x6800050 {
        parse_arm_pkhtb_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6662(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6663(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6800070 {
        parse_arm_sxtab16_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6664(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6665(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00070) == 0x6800010 {
        parse_arm_pkhbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6666(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6667(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x68000b0 {
        parse_arm_sel_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6668(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6669(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00070) == 0x6800050 {
        parse_arm_pkhtb_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6670(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6671(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6672(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6673(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00070) == 0x6800010 {
        parse_arm_pkhbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6674(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6675(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6676(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6677(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00070) == 0x6800050 {
        parse_arm_pkhtb_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6678(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6679(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6800070 {
        parse_arm_sxtab16_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6680(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6681(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00070) == 0x6800010 {
        parse_arm_pkhbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6682(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6683(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x68000b0 {
        parse_arm_sel_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6684(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6685(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00070) == 0x6800050 {
        parse_arm_pkhtb_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6686(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6687(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6688(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6689(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00070) == 0x6800010 {
        parse_arm_pkhbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6690(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6691(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6692(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6693(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00070) == 0x6800050 {
        parse_arm_pkhtb_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6694(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6695(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00f0) == 0x68f0070 {
        parse_arm_sxtb16_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x6800070 {
        parse_arm_sxtab16_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6696(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6697(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00070) == 0x6800010 {
        parse_arm_pkhbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6698(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6699(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x68000b0 {
        parse_arm_sel_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6700(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6701(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00070) == 0x6800050 {
        parse_arm_pkhtb_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6702(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6703(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6704(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6705(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00070) == 0x6800010 {
        parse_arm_pkhbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6706(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6707(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6708(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6709(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00070) == 0x6800050 {
        parse_arm_pkhtb_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6710(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6711(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00f0) == 0x68f0070 {
        parse_arm_sxtb16_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x6800070 {
        parse_arm_sxtab16_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6712(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6713(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00070) == 0x6800010 {
        parse_arm_pkhbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6714(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6715(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x68000b0 {
        parse_arm_sel_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6716(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6717(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00070) == 0x6800050 {
        parse_arm_pkhtb_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6718(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6719(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_6720(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6721(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6722(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6723(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6724(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6725(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6726(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6727(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6728(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6729(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6730(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6731(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6732(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6733(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6734(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6735(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6736(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6737(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6738(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6739(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6740(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6741(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6742(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6743(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6744(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6745(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6746(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6747(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6748(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6749(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6750(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6751(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6752(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6753(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6754(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6755(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6756(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6757(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6758(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6759(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6760(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6761(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6762(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6763(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6764(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6765(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6766(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6767(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6768(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6769(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6770(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6771(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6772(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6773(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6774(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6775(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6776(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6777(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6778(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6779(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6780(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6781(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6782(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6783(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_6784(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6785(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6786(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6787(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6a00030 {
        parse_arm_ssat16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6788(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6789(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6790(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6791(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6a00070 {
        parse_arm_sxtab_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6792(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6793(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6794(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6795(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6796(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6797(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6798(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6799(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6800(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6801(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6802(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6803(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6a00030 {
        parse_arm_ssat16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6804(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6805(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6806(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6807(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6a00070 {
        parse_arm_sxtab_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6808(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6809(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6810(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6811(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6812(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6813(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6814(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6815(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6816(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6817(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6818(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6819(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6a00030 {
        parse_arm_ssat16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6820(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6821(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6822(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6823(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00f0) == 0x6af0070 {
        parse_arm_sxtb_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x6a00070 {
        parse_arm_sxtab_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6824(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6825(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6826(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6827(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6828(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6829(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6830(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6831(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6832(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6833(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6834(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6835(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6a00030 {
        parse_arm_ssat16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6836(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6837(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6838(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6839(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00f0) == 0x6af0070 {
        parse_arm_sxtb_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x6a00070 {
        parse_arm_sxtab_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6840(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6841(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6842(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6843(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6844(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6845(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6846(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6847(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4200000 {
        parse_arm_strt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6848(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6849(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6850(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6851(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6b00030 {
        parse_arm_rev_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6852(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6853(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6854(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6855(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6b00070 {
        parse_arm_sxtah_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6856(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6857(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6858(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6859(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6b000b0 {
        parse_arm_rev16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6860(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6861(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6862(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6863(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6864(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6865(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6866(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6867(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6b00030 {
        parse_arm_rev_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6868(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6869(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6870(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6871(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6b00070 {
        parse_arm_sxtah_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6872(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6873(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6874(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6875(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6b000b0 {
        parse_arm_rev16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6876(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6877(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6878(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6879(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6880(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6881(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6882(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6883(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6b00030 {
        parse_arm_rev_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6884(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6885(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6886(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6887(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00f0) == 0x6bf0070 {
        parse_arm_sxth_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x6b00070 {
        parse_arm_sxtah_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6888(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6889(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6890(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6891(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6b000b0 {
        parse_arm_rev16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6892(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6893(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6894(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6895(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6896(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6897(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6898(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6899(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6b00030 {
        parse_arm_rev_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6900(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6901(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6902(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6903(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00f0) == 0x6bf0070 {
        parse_arm_sxth_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x6b00070 {
        parse_arm_sxtah_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6904(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6905(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6906(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6907(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6b000b0 {
        parse_arm_rev16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6908(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6909(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6a00010 {
        parse_arm_ssat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6910(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6911(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4300000 {
        parse_arm_ldrt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4100000 {
        parse_arm_ldr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6912(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6913(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6914(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6915(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6916(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6917(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6918(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6919(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6c00070 {
        parse_arm_uxtab16_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6920(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6921(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6922(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6923(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6924(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6925(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6926(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6927(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6928(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6929(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6930(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6931(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6932(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6933(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6934(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6935(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6c00070 {
        parse_arm_uxtab16_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6936(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6937(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6938(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6939(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6940(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6941(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6942(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6943(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6944(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6945(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6946(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6947(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6948(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6949(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6950(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6951(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00f0) == 0x6cf0070 {
        parse_arm_uxtb16_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x6c00070 {
        parse_arm_uxtab16_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6952(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6953(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6954(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6955(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6956(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6957(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6958(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6959(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6960(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6961(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6962(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6963(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6964(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6965(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6966(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6967(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00f0) == 0x6cf0070 {
        parse_arm_uxtb16_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x6c00070 {
        parse_arm_uxtab16_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_6968(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6969(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6970(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6971(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6972(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6973(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6974(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6975(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_6976(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6977(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6978(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6979(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6980(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6981(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6982(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6983(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6984(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6985(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6986(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6987(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6988(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6989(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6990(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6991(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6992(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6993(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6994(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6995(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6996(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6997(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6998(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_6999(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7000(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7001(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7002(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7003(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7004(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7005(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7006(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7007(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7008(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7009(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7010(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7011(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7012(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7013(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7014(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7015(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7016(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7017(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7018(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7019(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7020(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7021(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7022(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7023(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7024(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7025(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7026(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7027(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7028(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7029(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7030(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7031(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7032(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7033(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7034(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7035(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7036(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7037(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7038(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7039(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7040(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7041(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7042(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7043(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6e00030 {
        parse_arm_usat16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7044(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7045(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7046(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7047(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6e00070 {
        parse_arm_uxtab_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7048(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7049(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7050(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7051(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7052(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7053(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7054(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7055(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7056(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7057(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7058(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7059(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6e00030 {
        parse_arm_usat16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7060(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7061(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7062(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7063(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6e00070 {
        parse_arm_uxtab_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7064(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7065(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7066(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7067(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7068(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7069(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7070(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7071(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7072(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7073(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7074(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7075(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6e00030 {
        parse_arm_usat16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7076(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7077(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7078(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7079(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00f0) == 0x6ef0070 {
        parse_arm_uxtb_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x6e00070 {
        parse_arm_uxtab_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7080(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7081(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7082(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7083(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7084(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7085(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7086(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7087(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7088(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7089(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7090(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7091(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6e00030 {
        parse_arm_usat16_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7092(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7093(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7094(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7095(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00f0) == 0x6ef0070 {
        parse_arm_uxtb_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x6e00070 {
        parse_arm_uxtab_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7096(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7097(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7098(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7099(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7100(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7101(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7102(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7103(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4600000 {
        parse_arm_strbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7104(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7105(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7106(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7107(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7108(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7109(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7110(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7111(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6f00070 {
        parse_arm_uxtah_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7112(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7113(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7114(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7115(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6f000b0 {
        parse_arm_revsh_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7116(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7117(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7118(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7119(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7120(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7121(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7122(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7123(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7124(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7125(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7126(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7127(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6f00070 {
        parse_arm_uxtah_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7128(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7129(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7130(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7131(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6f000b0 {
        parse_arm_revsh_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7132(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7133(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7134(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7135(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7136(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7137(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7138(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7139(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7140(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7141(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7142(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7143(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00f0) == 0x6ff0070 {
        parse_arm_uxth_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x6f00070 {
        parse_arm_uxtah_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7144(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7145(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7146(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7147(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6f000b0 {
        parse_arm_revsh_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7148(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7149(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7150(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7151(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7152(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7153(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7154(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7155(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7156(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7157(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7158(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7159(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00f0) == 0x6ff0070 {
        parse_arm_uxth_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x6f00070 {
        parse_arm_uxtah_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7160(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7161(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7162(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7163(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000f0) == 0x6f000b0 {
        parse_arm_revsh_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7164(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7165(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe00030) == 0x6e00010 {
        parse_arm_usat_0(ins, pc)
    } else if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7166(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7167(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xd700000) == 0x4700000 {
        parse_arm_ldrbt_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7168(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7169(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0d0) == 0x700f010 {
        parse_arm_smuad_0(ins, pc)
    } else if (ins & 0xff000d0) == 0x7000010 {
        parse_arm_smlad_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7170(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7171(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0d0) == 0x700f010 {
        parse_arm_smuad_0(ins, pc)
    } else if (ins & 0xff000d0) == 0x7000010 {
        parse_arm_smlad_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7172(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7173(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0d0) == 0x700f050 {
        parse_arm_smusd_0(ins, pc)
    } else if (ins & 0xff000d0) == 0x7000050 {
        parse_arm_smlsd_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7174(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7175(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0d0) == 0x700f050 {
        parse_arm_smusd_0(ins, pc)
    } else if (ins & 0xff000d0) == 0x7000050 {
        parse_arm_smlsd_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7176(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7177(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7178(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7179(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7180(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7181(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7182(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7183(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7184(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7185(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0d0) == 0x700f010 {
        parse_arm_smuad_0(ins, pc)
    } else if (ins & 0xff000d0) == 0x7000010 {
        parse_arm_smlad_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7186(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7187(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0d0) == 0x700f010 {
        parse_arm_smuad_0(ins, pc)
    } else if (ins & 0xff000d0) == 0x7000010 {
        parse_arm_smlad_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7188(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7189(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0d0) == 0x700f050 {
        parse_arm_smusd_0(ins, pc)
    } else if (ins & 0xff000d0) == 0x7000050 {
        parse_arm_smlsd_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7190(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7191(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0d0) == 0x700f050 {
        parse_arm_smusd_0(ins, pc)
    } else if (ins & 0xff000d0) == 0x7000050 {
        parse_arm_smlsd_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7192(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7193(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7194(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7195(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7196(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7197(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7198(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7199(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7200(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7201(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0d0) == 0x700f010 {
        parse_arm_smuad_0(ins, pc)
    } else if (ins & 0xff000d0) == 0x7000010 {
        parse_arm_smlad_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7202(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7203(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0d0) == 0x700f010 {
        parse_arm_smuad_0(ins, pc)
    } else if (ins & 0xff000d0) == 0x7000010 {
        parse_arm_smlad_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7204(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7205(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0d0) == 0x700f050 {
        parse_arm_smusd_0(ins, pc)
    } else if (ins & 0xff000d0) == 0x7000050 {
        parse_arm_smlsd_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7206(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7207(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0d0) == 0x700f050 {
        parse_arm_smusd_0(ins, pc)
    } else if (ins & 0xff000d0) == 0x7000050 {
        parse_arm_smlsd_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7208(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7209(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7210(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7211(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7212(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7213(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7214(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7215(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7216(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7217(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0d0) == 0x700f010 {
        parse_arm_smuad_0(ins, pc)
    } else if (ins & 0xff000d0) == 0x7000010 {
        parse_arm_smlad_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7218(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7219(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0d0) == 0x700f010 {
        parse_arm_smuad_0(ins, pc)
    } else if (ins & 0xff000d0) == 0x7000010 {
        parse_arm_smlad_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7220(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7221(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0d0) == 0x700f050 {
        parse_arm_smusd_0(ins, pc)
    } else if (ins & 0xff000d0) == 0x7000050 {
        parse_arm_smlsd_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7222(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7223(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0d0) == 0x700f050 {
        parse_arm_smusd_0(ins, pc)
    } else if (ins & 0xff000d0) == 0x7000050 {
        parse_arm_smlsd_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7224(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7225(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7226(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7227(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7228(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7229(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7230(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7231(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7232(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7233(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7234(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7235(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7236(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7237(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7238(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7239(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7240(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7241(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7242(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7243(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7244(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7245(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7246(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7247(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7248(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7249(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7250(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7251(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7252(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7253(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7254(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7255(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7256(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7257(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7258(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7259(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7260(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7261(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7262(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7263(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7264(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7265(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7266(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7267(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7268(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7269(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7270(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7271(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7272(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7273(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7274(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7275(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7276(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7277(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7278(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7279(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7280(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7281(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7282(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7283(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7284(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7285(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7286(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7287(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7288(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7289(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7290(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7291(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7292(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7293(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7294(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7295(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7296(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7297(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7298(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7299(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7300(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7301(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7302(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7303(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7304(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7305(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7306(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7307(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7308(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7309(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7310(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7311(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7312(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7313(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7314(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7315(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7316(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7317(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7318(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7319(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7320(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7321(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7322(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7323(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7324(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7325(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7326(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7327(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7328(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7329(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7330(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7331(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7332(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7333(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7334(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7335(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7336(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7337(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7338(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7339(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7340(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7341(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7342(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7343(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7344(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7345(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7346(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7347(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7348(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7349(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7350(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7351(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7352(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7353(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7354(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7355(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7356(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7357(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7358(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7359(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7360(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7361(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7362(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7363(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7364(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7365(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7366(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7367(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7368(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7369(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7370(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7371(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7372(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7373(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7374(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7375(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7376(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7377(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7378(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7379(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7380(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7381(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7382(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7383(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7384(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7385(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7386(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7387(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7388(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7389(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7390(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7391(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7392(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7393(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7394(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7395(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7396(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7397(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7398(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7399(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7400(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7401(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7402(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7403(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7404(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7405(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7406(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7407(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7408(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7409(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7410(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7411(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7412(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7413(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7414(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7415(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7416(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7417(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7418(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7419(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7420(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7421(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7422(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7423(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7424(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7425(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000d0) == 0x7400010 {
        parse_arm_smlald_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7426(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7427(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000d0) == 0x7400010 {
        parse_arm_smlald_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7428(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7429(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000d0) == 0x7400050 {
        parse_arm_smlsld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7430(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7431(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000d0) == 0x7400050 {
        parse_arm_smlsld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7432(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7433(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7434(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7435(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7436(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7437(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7438(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7439(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7440(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7441(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000d0) == 0x7400010 {
        parse_arm_smlald_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7442(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7443(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000d0) == 0x7400010 {
        parse_arm_smlald_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7444(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7445(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000d0) == 0x7400050 {
        parse_arm_smlsld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7446(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7447(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000d0) == 0x7400050 {
        parse_arm_smlsld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7448(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7449(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7450(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7451(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7452(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7453(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7454(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7455(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7456(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7457(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000d0) == 0x7400010 {
        parse_arm_smlald_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7458(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7459(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000d0) == 0x7400010 {
        parse_arm_smlald_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7460(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7461(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000d0) == 0x7400050 {
        parse_arm_smlsld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7462(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7463(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000d0) == 0x7400050 {
        parse_arm_smlsld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7464(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7465(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7466(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7467(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7468(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7469(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7470(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7471(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7472(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7473(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000d0) == 0x7400010 {
        parse_arm_smlald_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7474(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7475(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000d0) == 0x7400010 {
        parse_arm_smlald_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7476(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7477(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000d0) == 0x7400050 {
        parse_arm_smlsld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7478(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7479(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000d0) == 0x7400050 {
        parse_arm_smlsld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4400000 {
        parse_arm_strb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7480(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7481(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7482(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7483(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7484(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7485(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7486(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7487(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7488(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7489(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0d0) == 0x750f010 {
        parse_arm_smmul_0(ins, pc)
    } else if (ins & 0xff000d0) == 0x7500010 {
        parse_arm_smmla_0(ins, pc)
    } else if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7490(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7491(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0d0) == 0x750f010 {
        parse_arm_smmul_0(ins, pc)
    } else if (ins & 0xff000d0) == 0x7500010 {
        parse_arm_smmla_0(ins, pc)
    } else if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7492(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7493(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7494(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7495(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7496(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7497(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7498(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7499(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7500(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7501(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000d0) == 0x75000d0 {
        parse_arm_smmls_0(ins, pc)
    } else if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7502(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7503(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000d0) == 0x75000d0 {
        parse_arm_smmls_0(ins, pc)
    } else if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7504(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7505(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0d0) == 0x750f010 {
        parse_arm_smmul_0(ins, pc)
    } else if (ins & 0xff000d0) == 0x7500010 {
        parse_arm_smmla_0(ins, pc)
    } else if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7506(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7507(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0d0) == 0x750f010 {
        parse_arm_smmul_0(ins, pc)
    } else if (ins & 0xff000d0) == 0x7500010 {
        parse_arm_smmla_0(ins, pc)
    } else if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7508(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7509(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7510(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7511(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7512(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7513(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7514(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7515(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7516(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7517(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000d0) == 0x75000d0 {
        parse_arm_smmls_0(ins, pc)
    } else if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7518(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7519(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000d0) == 0x75000d0 {
        parse_arm_smmls_0(ins, pc)
    } else if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7520(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7521(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0d0) == 0x750f010 {
        parse_arm_smmul_0(ins, pc)
    } else if (ins & 0xff000d0) == 0x7500010 {
        parse_arm_smmla_0(ins, pc)
    } else if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7522(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7523(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0d0) == 0x750f010 {
        parse_arm_smmul_0(ins, pc)
    } else if (ins & 0xff000d0) == 0x7500010 {
        parse_arm_smmla_0(ins, pc)
    } else if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7524(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7525(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7526(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7527(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7528(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7529(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7530(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7531(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7532(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7533(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000d0) == 0x75000d0 {
        parse_arm_smmls_0(ins, pc)
    } else if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7534(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7535(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000d0) == 0x75000d0 {
        parse_arm_smmls_0(ins, pc)
    } else if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7536(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7537(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0d0) == 0x750f010 {
        parse_arm_smmul_0(ins, pc)
    } else if (ins & 0xff000d0) == 0x7500010 {
        parse_arm_smmla_0(ins, pc)
    } else if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7538(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7539(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0d0) == 0x750f010 {
        parse_arm_smmul_0(ins, pc)
    } else if (ins & 0xff000d0) == 0x7500010 {
        parse_arm_smmla_0(ins, pc)
    } else if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7540(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7541(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7542(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7543(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7544(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7545(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7546(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7547(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7548(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7549(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000d0) == 0x75000d0 {
        parse_arm_smmls_0(ins, pc)
    } else if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7550(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7551(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000d0) == 0x75000d0 {
        parse_arm_smmls_0(ins, pc)
    } else if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7552(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7553(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7554(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7555(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7556(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7557(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7558(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7559(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7560(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7561(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7562(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7563(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7564(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7565(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7566(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7567(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7568(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7569(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7570(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7571(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7572(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7573(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7574(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7575(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7576(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7577(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7578(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7579(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7580(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7581(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7582(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7583(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7584(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7585(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7586(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7587(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7588(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7589(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7590(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7591(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7592(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7593(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7594(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7595(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7596(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7597(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7598(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7599(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7600(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7601(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7602(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7603(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7604(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7605(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7606(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7607(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7608(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7609(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7610(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7611(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7612(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7613(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7614(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7615(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7616(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7617(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7618(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7619(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7620(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7621(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7622(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7623(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7624(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7625(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7626(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7627(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7628(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7629(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7630(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7631(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7632(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7633(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7634(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7635(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7636(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7637(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7638(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7639(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7640(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7641(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7642(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7643(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7644(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7645(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7646(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7647(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7648(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7649(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7650(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7651(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7652(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7653(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7654(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7655(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7656(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7657(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7658(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7659(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7660(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7661(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7662(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7663(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7664(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7665(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7666(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7667(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7668(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7669(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7670(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7671(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7672(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7673(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7674(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7675(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7676(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7677(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7678(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7679(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_7680(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7681(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0f0) == 0x780f010 {
        parse_arm_usad8_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x7800010 {
        parse_arm_usada8_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7682(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7683(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7684(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7685(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7686(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7687(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7688(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7689(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7690(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7691(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7692(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7693(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7694(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7695(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7696(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7697(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0f0) == 0x780f010 {
        parse_arm_usad8_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x7800010 {
        parse_arm_usada8_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7698(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7699(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7700(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7701(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7702(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7703(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7704(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7705(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7706(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7707(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7708(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7709(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7710(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7711(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7712(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7713(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0f0) == 0x780f010 {
        parse_arm_usad8_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x7800010 {
        parse_arm_usada8_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7714(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7715(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7716(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7717(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7718(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7719(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7720(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7721(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7722(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7723(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7724(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7725(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7726(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7727(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7728(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7729(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff0f0f0) == 0x780f010 {
        parse_arm_usad8_0(ins, pc)
    } else if (ins & 0xff000f0) == 0x7800010 {
        parse_arm_usada8_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4000000 {
        parse_arm_str_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_7730(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7731(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7732(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7733(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7734(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7735(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7736(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7737(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7738(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7739(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7740(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7741(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7742(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7743(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7744(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7745(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7746(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7747(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7748(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7749(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7750(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7751(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7752(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7753(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7754(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7755(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7756(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7757(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7758(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7759(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7760(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7761(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7762(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7763(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7764(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7765(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7766(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7767(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7768(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7769(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7770(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7771(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7772(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7773(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7774(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7775(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7776(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7777(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7778(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7779(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7780(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7781(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7782(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7783(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7784(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7785(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7786(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7787(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7788(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7789(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7790(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7791(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7792(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7793(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7794(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7795(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7796(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7797(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7798(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7799(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7800(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7801(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7802(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7803(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7804(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7805(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7806(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7807(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7808(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7809(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7810(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7811(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7812(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7813(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7814(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7815(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7816(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7817(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7818(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7819(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7820(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7821(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7822(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7823(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7824(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7825(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7826(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7827(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7828(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7829(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7830(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7831(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7832(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7833(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7834(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7835(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7836(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7837(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7838(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7839(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7840(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7841(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7842(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7843(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7844(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7845(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7846(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7847(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7848(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7849(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7850(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7851(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7852(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7853(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7854(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7855(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7856(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7857(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7858(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7859(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7860(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7861(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7862(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7863(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7864(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7865(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7866(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7867(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7868(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7869(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7870(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7871(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_str_0(ins, pc)
}
fn parse_arm_7872(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7873(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7874(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7875(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7876(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7877(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7878(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7879(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7880(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7881(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7882(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7883(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7884(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7885(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7886(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7887(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7888(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7889(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7890(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7891(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7892(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7893(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7894(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7895(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7896(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7897(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7898(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7899(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7900(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7901(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7902(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7903(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7904(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7905(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7906(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7907(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7908(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7909(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7910(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7911(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7912(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7913(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7914(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7915(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7916(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7917(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7918(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7919(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7920(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7921(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7922(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7923(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7924(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7925(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7926(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7927(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7928(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7929(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7930(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7931(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7932(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7933(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7934(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7935(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldr_0(ins, pc)
}
fn parse_arm_7936(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7937(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7938(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7939(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7940(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7941(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7942(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7943(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7944(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7945(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7946(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7947(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7948(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7949(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7950(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7951(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7952(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7953(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7954(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7955(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7956(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7957(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7958(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7959(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7960(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7961(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7962(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7963(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7964(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7965(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7966(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7967(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7968(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7969(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7970(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7971(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7972(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7973(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7974(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7975(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7976(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7977(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7978(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7979(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7980(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7981(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7982(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7983(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7984(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7985(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7986(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7987(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7988(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7989(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7990(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7991(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7992(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7993(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7994(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7995(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7996(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7997(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7998(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_7999(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8000(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8001(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8002(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8003(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8004(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8005(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8006(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8007(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8008(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8009(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8010(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8011(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8012(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8013(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8014(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8015(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8016(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8017(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8018(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8019(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8020(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8021(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8022(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8023(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8024(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8025(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8026(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8027(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8028(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8029(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8030(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8031(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8032(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8033(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8034(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8035(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8036(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8037(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8038(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8039(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8040(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8041(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8042(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8043(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8044(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8045(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8046(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8047(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8048(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8049(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8050(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8051(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8052(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8053(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8054(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8055(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8056(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8057(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8058(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8059(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8060(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8061(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8062(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8063(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd700000) == 0xf5500000 {
        parse_arm_pld_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8064(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8065(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8066(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8067(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8068(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8069(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8070(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8071(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8072(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8073(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8074(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8075(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8076(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8077(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8078(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8079(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8080(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8081(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8082(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8083(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8084(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8085(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8086(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8087(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8088(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8089(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8090(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8091(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8092(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8093(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8094(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8095(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8096(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8097(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8098(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8099(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8100(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8101(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8102(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8103(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8104(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8105(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8106(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8107(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8108(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8109(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8110(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8111(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8112(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8113(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8114(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8115(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8116(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8117(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8118(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8119(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8120(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8121(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8122(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8123(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8124(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8125(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8126(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8127(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_strb_0(ins, pc)
}
fn parse_arm_8128(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8129(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8130(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8131(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8132(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8133(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8134(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8135(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8136(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8137(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8138(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8139(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8140(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8141(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8142(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8143(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff000f0) == 0xe7f000f0 {
        parse_arm_udf_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8144(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8145(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8146(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8147(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8148(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8149(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8150(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8151(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8152(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8153(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8154(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8155(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8156(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8157(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8158(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8159(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff000f0) == 0xe7f000f0 {
        parse_arm_udf_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8160(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8161(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8162(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8163(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8164(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8165(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8166(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8167(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8168(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8169(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8170(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8171(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8172(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8173(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8174(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8175(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff000f0) == 0xe7f000f0 {
        parse_arm_udf_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8176(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8177(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8178(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8179(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8180(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8181(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8182(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8183(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8184(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8185(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8186(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8187(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8188(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8189(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8190(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldrb_0(ins, pc)
}
fn parse_arm_8191(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff000f0) == 0xe7f000f0 {
        parse_arm_udf_0(ins, pc)
    } else if (ins & 0xc500000) == 0x4500000 {
        parse_arm_ldrb_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8192(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8193(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8194(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8195(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8196(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8197(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8198(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8199(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8200(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8201(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8202(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8203(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8204(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8205(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8206(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8207(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8208(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8209(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8210(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8211(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8212(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8213(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8214(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8215(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8216(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8217(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8218(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8219(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8220(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8221(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8222(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8223(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8224(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8225(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8226(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8227(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8228(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8229(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8230(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8231(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8232(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8233(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8234(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8235(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8236(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8237(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8238(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8239(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8240(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8241(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8242(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8243(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8244(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8245(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8246(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8247(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8248(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8249(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8250(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8251(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8252(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8253(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8254(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8255(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8256(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8257(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8258(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8259(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8260(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8261(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8262(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8263(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8264(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8265(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8266(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8267(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8268(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8269(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8270(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8271(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8272(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8273(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8274(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8275(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8276(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8277(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8278(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8279(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8280(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8281(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8282(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8283(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8284(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8285(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8286(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8287(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8288(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8289(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8290(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8291(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8292(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8293(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8294(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8295(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8296(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8297(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8298(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8299(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8300(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8301(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8302(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8303(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8304(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8305(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8306(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8307(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8308(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8309(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8310(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8311(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8312(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8313(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8314(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8315(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8316(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8317(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8318(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8319(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8320(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8321(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8322(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8323(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8324(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8325(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8326(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8327(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8328(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8329(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8330(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8331(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8332(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8333(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8334(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8335(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8336(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8337(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8338(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8339(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8340(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8341(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8342(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8343(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8344(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8345(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8346(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8347(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8348(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8349(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8350(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8351(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8352(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8353(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8354(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8355(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8356(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8357(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8358(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8359(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8360(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8361(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8362(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8363(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8364(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8365(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8366(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8367(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8368(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8369(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8370(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8371(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8372(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8373(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8374(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8375(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8376(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8377(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8378(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8379(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8380(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8381(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8382(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8383(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8384(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8385(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8386(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8387(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8388(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8389(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8390(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8391(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8392(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8393(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8394(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8395(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8396(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8397(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8398(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8399(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8400(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8401(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8402(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8403(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8404(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8405(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8406(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8407(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8408(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8409(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8410(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8411(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8412(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8413(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8414(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8415(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8416(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8417(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8418(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8419(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8420(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8421(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8422(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8423(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8424(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8425(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8426(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8427(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8428(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8429(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8430(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8431(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8432(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8433(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8434(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8435(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8436(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8437(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8438(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8439(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8440(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8441(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8442(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8443(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8444(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8445(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8446(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8447(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8448(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8449(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8450(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8451(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8452(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8453(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8454(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8455(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8456(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8457(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8458(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8459(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8460(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8461(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8462(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8463(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8464(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8465(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8466(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8467(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8468(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8469(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8470(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8471(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8472(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8473(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8474(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8475(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8476(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8477(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8478(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8479(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8480(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8481(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8482(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8483(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8484(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8485(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8486(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8487(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8488(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8489(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8490(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8491(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8492(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8493(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8494(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8495(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8496(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8497(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8498(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8499(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8500(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8501(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8502(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8503(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8504(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8505(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8506(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8507(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8508(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8509(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8510(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8511(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8512(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8513(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8514(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8515(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8516(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8517(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8518(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8519(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8520(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8521(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8522(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8523(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8524(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8525(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8526(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8527(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8528(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8529(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8530(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8531(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8532(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8533(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8534(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8535(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8536(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8537(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8538(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8539(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8540(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8541(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8542(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8543(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8544(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8545(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8546(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8547(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8548(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8549(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8550(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8551(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8552(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8553(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8554(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8555(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8556(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8557(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8558(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8559(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8560(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8561(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8562(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8563(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8564(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8565(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8566(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8567(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8568(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8569(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8570(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8571(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8572(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8573(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8574(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8575(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8576(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8577(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8578(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8579(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8580(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8581(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8582(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8583(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8584(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8585(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8586(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8587(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8588(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8589(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8590(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8591(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8592(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8593(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8594(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8595(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8596(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8597(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8598(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8599(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8600(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8601(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8602(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8603(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8604(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8605(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8606(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8607(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8608(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8609(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8610(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8611(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8612(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8613(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8614(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8615(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8616(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8617(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8618(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8619(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8620(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8621(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8622(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8623(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8624(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8625(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8626(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8627(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8628(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8629(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8630(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8631(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8632(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8633(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8634(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8635(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8636(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8637(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8638(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8639(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8640(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8641(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8642(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8643(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8644(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8645(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8646(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8647(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8648(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8649(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8650(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8651(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8652(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8653(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8654(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8655(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8656(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8657(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8658(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8659(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8660(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8661(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8662(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8663(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8664(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8665(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8666(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8667(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8668(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8669(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8670(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8671(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8672(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8673(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8674(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8675(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8676(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8677(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8678(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8679(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8680(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8681(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8682(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8683(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8684(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8685(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8686(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8687(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8688(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8689(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8690(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8691(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8692(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8693(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8694(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8695(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8696(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8697(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8698(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8699(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8700(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8701(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8702(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8703(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_8704(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8705(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8706(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8707(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8708(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8709(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8710(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8711(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8712(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8713(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8714(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8715(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8716(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8717(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8718(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8719(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8720(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8721(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8722(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8723(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8724(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8725(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8726(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8727(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8728(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8729(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8730(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8731(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8732(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8733(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8734(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8735(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8736(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8737(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8738(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8739(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8740(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8741(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8742(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8743(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8744(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8745(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8746(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8747(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8748(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8749(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8750(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8751(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8752(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8753(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8754(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8755(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8756(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8757(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8758(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8759(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8760(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8761(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8762(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8763(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8764(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8765(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8766(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8767(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8768(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8769(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8770(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8771(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8772(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8773(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8774(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8775(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8776(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8777(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8778(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8779(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8780(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8781(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8782(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8783(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8784(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8785(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8786(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8787(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8788(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8789(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8790(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8791(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8792(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8793(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8794(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8795(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8796(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8797(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8798(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8799(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8800(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8801(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8802(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8803(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8804(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8805(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8806(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8807(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8808(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8809(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8810(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8811(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8812(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8813(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8814(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8815(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8816(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8817(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8818(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8819(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8820(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8821(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8822(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8823(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8824(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8825(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8826(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8827(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8828(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8829(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8830(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8831(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8832(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8833(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8834(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8835(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8836(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8837(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8838(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8839(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8840(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8841(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8842(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8843(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8844(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8845(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8846(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8847(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8848(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8849(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8850(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8851(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8852(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8853(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8854(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8855(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8856(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8857(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8858(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8859(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8860(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8861(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8862(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8863(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8864(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8865(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8866(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8867(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8868(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8869(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8870(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8871(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8872(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8873(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8874(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8875(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8876(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8877(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8878(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8879(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8880(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8881(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8882(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8883(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8884(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8885(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8886(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8887(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8888(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8889(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8890(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8891(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8892(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8893(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8894(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8895(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_8896(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8897(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8898(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8899(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8900(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8901(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8902(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8903(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8904(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8905(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8906(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8907(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8908(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8909(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8910(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8911(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8912(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8913(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8914(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8915(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8916(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8917(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8918(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8919(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8920(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8921(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8922(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8923(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8924(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8925(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8926(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8927(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8928(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8929(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8930(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8931(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8932(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8933(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8934(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8935(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8936(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8937(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8938(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8939(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8940(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8941(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8942(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8943(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8944(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8945(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8946(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8947(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8948(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8949(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8950(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8951(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8952(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8953(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8954(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8955(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8956(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8957(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8958(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8959(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x8bd0000 {
        parse_arm_pop_0(ins, pc)
    } else if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8960(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8961(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8962(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8963(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8964(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8965(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8966(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8967(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8968(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8969(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8970(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8971(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8972(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8973(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8974(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8975(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8976(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8977(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8978(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8979(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8980(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8981(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8982(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8983(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8984(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8985(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8986(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8987(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8988(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8989(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8990(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8991(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8992(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8993(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8994(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8995(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8996(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8997(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8998(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_8999(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9000(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9001(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9002(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9003(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9004(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9005(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9006(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9007(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9008(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9009(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9010(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9011(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9012(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9013(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9014(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9015(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9016(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9017(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9018(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9019(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9020(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9021(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9022(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9023(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9024(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9025(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9026(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9027(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9028(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9029(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9030(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9031(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9032(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9033(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9034(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9035(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9036(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9037(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9038(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9039(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9040(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9041(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9042(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9043(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9044(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9045(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9046(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9047(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9048(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9049(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9050(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9051(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9052(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9053(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9054(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9055(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9056(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9057(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9058(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9059(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9060(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9061(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9062(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9063(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9064(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9065(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9066(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9067(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9068(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9069(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9070(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9071(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9072(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9073(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9074(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9075(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9076(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9077(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9078(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9079(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9080(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9081(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9082(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9083(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9084(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9085(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9086(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9087(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9088(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9089(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9090(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9091(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9092(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9093(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9094(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9095(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9096(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9097(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9098(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9099(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9100(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9101(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9102(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9103(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9104(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9105(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9106(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9107(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9108(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9109(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9110(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9111(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9112(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9113(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9114(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9115(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9116(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9117(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9118(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9119(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9120(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9121(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9122(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9123(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9124(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9125(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9126(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9127(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9128(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9129(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9130(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9131(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9132(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9133(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9134(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9135(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9136(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9137(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9138(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9139(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9140(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9141(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9142(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9143(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9144(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9145(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9146(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9147(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9148(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9149(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9150(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9151(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9152(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9153(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9154(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9155(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9156(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9157(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9158(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9159(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9160(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9161(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9162(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9163(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9164(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9165(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9166(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9167(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9168(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9169(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9170(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9171(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9172(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9173(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9174(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9175(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9176(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9177(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9178(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9179(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9180(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9181(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9182(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9183(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9184(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9185(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9186(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9187(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9188(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9189(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9190(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9191(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9192(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9193(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9194(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9195(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9196(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9197(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9198(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9199(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9200(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9201(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9202(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9203(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9204(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9205(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9206(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9207(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9208(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9209(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9210(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9211(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9212(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9213(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9214(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9215(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9216(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9217(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9218(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9219(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9220(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9221(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9222(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9223(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9224(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9225(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9226(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9227(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9228(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9229(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9230(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9231(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9232(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9233(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9234(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9235(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9236(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9237(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9238(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9239(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9240(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9241(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9242(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9243(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9244(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9245(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9246(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9247(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9248(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9249(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9250(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9251(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9252(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9253(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9254(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9255(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9256(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9257(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9258(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9259(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9260(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9261(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9262(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9263(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9264(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9265(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9266(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9267(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9268(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9269(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9270(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9271(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9272(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9273(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9274(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9275(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9276(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9277(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9278(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9279(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9280(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9281(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9282(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9283(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9284(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9285(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9286(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9287(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9288(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9289(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9290(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9291(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9292(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9293(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9294(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9295(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9296(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9297(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9298(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9299(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9300(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9301(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9302(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9303(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9304(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9305(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9306(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9307(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9308(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9309(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9310(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9311(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9312(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9313(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9314(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9315(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9316(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9317(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9318(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9319(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9320(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9321(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9322(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9323(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9324(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9325(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9326(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9327(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9328(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9329(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9330(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9331(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9332(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9333(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9334(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9335(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9336(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9337(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9338(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9339(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9340(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9341(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9342(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9343(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9344(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9345(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9346(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9347(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9348(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9349(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9350(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9351(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9352(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9353(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9354(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9355(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9356(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9357(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9358(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9359(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9360(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9361(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9362(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9363(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9364(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9365(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9366(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9367(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9368(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9369(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9370(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9371(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9372(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9373(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9374(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9375(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9376(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9377(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9378(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9379(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9380(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9381(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9382(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9383(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9384(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9385(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9386(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9387(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9388(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9389(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9390(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9391(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9392(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9393(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9394(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9395(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9396(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9397(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9398(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9399(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9400(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9401(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9402(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9403(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9404(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9405(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9406(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9407(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0000) == 0x92d0000 {
        parse_arm_push_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9408(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9409(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9410(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9411(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9412(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9413(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9414(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9415(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9416(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9417(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9418(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9419(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9420(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9421(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9422(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9423(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9424(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9425(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9426(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9427(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9428(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9429(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9430(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9431(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9432(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9433(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9434(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9435(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9436(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9437(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9438(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9439(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9440(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9441(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9442(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9443(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9444(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9445(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9446(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9447(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9448(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9449(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9450(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9451(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9452(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9453(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9454(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9455(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9456(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9457(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9458(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9459(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9460(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9461(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9462(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9463(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9464(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9465(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9466(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9467(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9468(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9469(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9470(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9471(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9472(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9473(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9474(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9475(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9476(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9477(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9478(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9479(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9480(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9481(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9482(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9483(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9484(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9485(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9486(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9487(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9488(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9489(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9490(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9491(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9492(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9493(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9494(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9495(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9496(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9497(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9498(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9499(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9500(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9501(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9502(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9503(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9504(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9505(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9506(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9507(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9508(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9509(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9510(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9511(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9512(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9513(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9514(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9515(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9516(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9517(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9518(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9519(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9520(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9521(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9522(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9523(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9524(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9525(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9526(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9527(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9528(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9529(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9530(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9531(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9532(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9533(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9534(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9535(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9536(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9537(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9538(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9539(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9540(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9541(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9542(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9543(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9544(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9545(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9546(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9547(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9548(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9549(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9550(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9551(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9552(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9553(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9554(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9555(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9556(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9557(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9558(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9559(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9560(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9561(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9562(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9563(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9564(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9565(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9566(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9567(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9568(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9569(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9570(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9571(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9572(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9573(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9574(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9575(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9576(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9577(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9578(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9579(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9580(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9581(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9582(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9583(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9584(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9585(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9586(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9587(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9588(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9589(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9590(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9591(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9592(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9593(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9594(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9595(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9596(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9597(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9598(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9599(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9600(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9601(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9602(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9603(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9604(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9605(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9606(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9607(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9608(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9609(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9610(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9611(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9612(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9613(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9614(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9615(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9616(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9617(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9618(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9619(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9620(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9621(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9622(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9623(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9624(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9625(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9626(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9627(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9628(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9629(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9630(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9631(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9632(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9633(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9634(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9635(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9636(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9637(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9638(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9639(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9640(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9641(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9642(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9643(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9644(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9645(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9646(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9647(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9648(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9649(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9650(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9651(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9652(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9653(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9654(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9655(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9656(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9657(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9658(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9659(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9660(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9661(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9662(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9663(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9664(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9665(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9666(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9667(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9668(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9669(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9670(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9671(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9672(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9673(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9674(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9675(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9676(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9677(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9678(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9679(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9680(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9681(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9682(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9683(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9684(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9685(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9686(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9687(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9688(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9689(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9690(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9691(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9692(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9693(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9694(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9695(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9696(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9697(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9698(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9699(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9700(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9701(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9702(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9703(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9704(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9705(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9706(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9707(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9708(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9709(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9710(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9711(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9712(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9713(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9714(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9715(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9716(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9717(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9718(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9719(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9720(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9721(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9722(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9723(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9724(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9725(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9726(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9727(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_9728(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9729(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9730(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9731(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9732(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9733(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9734(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9735(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9736(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9737(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9738(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9739(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9740(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9741(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9742(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9743(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9744(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9745(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9746(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9747(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9748(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9749(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9750(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9751(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9752(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9753(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9754(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9755(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9756(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9757(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9758(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9759(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9760(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9761(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9762(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9763(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9764(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9765(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9766(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9767(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9768(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9769(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9770(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9771(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9772(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9773(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9774(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9775(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9776(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9777(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9778(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9779(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9780(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9781(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9782(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9783(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9784(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9785(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9786(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9787(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9788(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9789(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9790(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9791(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9792(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9793(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9794(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9795(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9796(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9797(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9798(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9799(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9800(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9801(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9802(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9803(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9804(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9805(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9806(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9807(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9808(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9809(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9810(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9811(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9812(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9813(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9814(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9815(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9816(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9817(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9818(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9819(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9820(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9821(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9822(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9823(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9824(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9825(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9826(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9827(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9828(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9829(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9830(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9831(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9832(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9833(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9834(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9835(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9836(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9837(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9838(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9839(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9840(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9841(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9842(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9843(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9844(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9845(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9846(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9847(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9848(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9849(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9850(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9851(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9852(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9853(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9854(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9855(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9856(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9857(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9858(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9859(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9860(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9861(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9862(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9863(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9864(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9865(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9866(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9867(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9868(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9869(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9870(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9871(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9872(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9873(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9874(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9875(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9876(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9877(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9878(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9879(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9880(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9881(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9882(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9883(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9884(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9885(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9886(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9887(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9888(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9889(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9890(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9891(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9892(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9893(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9894(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9895(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9896(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9897(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9898(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9899(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9900(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9901(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9902(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9903(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9904(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9905(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9906(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9907(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9908(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9909(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9910(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9911(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9912(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9913(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9914(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9915(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9916(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9917(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9918(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9919(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_stm_0(ins, pc)
}
fn parse_arm_9920(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9921(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9922(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9923(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9924(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9925(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9926(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9927(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9928(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9929(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9930(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9931(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9932(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9933(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9934(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9935(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9936(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9937(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9938(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9939(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9940(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9941(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9942(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9943(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9944(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9945(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9946(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9947(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9948(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9949(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9950(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9951(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9952(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9953(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9954(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9955(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9956(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9957(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9958(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9959(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9960(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9961(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9962(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9963(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9964(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9965(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9966(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9967(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9968(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9969(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9970(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9971(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9972(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9973(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9974(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9975(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9976(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9977(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9978(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9979(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9980(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9981(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9982(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9983(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8100000 {
        parse_arm_rfe_0(ins, pc)
    } else if (ins & 0xe500000) == 0x8100000 {
        parse_arm_ldm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9984(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9985(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9986(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9987(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9988(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9989(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9990(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9991(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9992(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9993(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9994(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9995(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9996(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9997(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9998(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_9999(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10000(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10001(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10002(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10003(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10004(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10005(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10006(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10007(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10008(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10009(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10010(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10011(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10012(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10013(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10014(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10015(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10016(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10017(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10018(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10019(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10020(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10021(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10022(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10023(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10024(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10025(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10026(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10027(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10028(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10029(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10030(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10031(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10032(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10033(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10034(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10035(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10036(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10037(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10038(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10039(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10040(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10041(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10042(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10043(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10044(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10045(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10046(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10047(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10048(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10049(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10050(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10051(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10052(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10053(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10054(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10055(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10056(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10057(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10058(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10059(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10060(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10061(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10062(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10063(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10064(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10065(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10066(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10067(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10068(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10069(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10070(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10071(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10072(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10073(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10074(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10075(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10076(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10077(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10078(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10079(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10080(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10081(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10082(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10083(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10084(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10085(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10086(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10087(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10088(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10089(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10090(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10091(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10092(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10093(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10094(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10095(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10096(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10097(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10098(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10099(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10100(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10101(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10102(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10103(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10104(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10105(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10106(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10107(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10108(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10109(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10110(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10111(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xe708000) == 0x8500000 {
        parse_arm_ldm_1(ins, pc)
    } else if (ins & 0xe508000) == 0x8508000 {
        parse_arm_ldm_2(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10112(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10113(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10114(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10115(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10116(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10117(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10118(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10119(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10120(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10121(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10122(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10123(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10124(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10125(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10126(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10127(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10128(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10129(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10130(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10131(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10132(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10133(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10134(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10135(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10136(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10137(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10138(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10139(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10140(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10141(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10142(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10143(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10144(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10145(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10146(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10147(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10148(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10149(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10150(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10151(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10152(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10153(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10154(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10155(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10156(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10157(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10158(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10159(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10160(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10161(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10162(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10163(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10164(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10165(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10166(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10167(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10168(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10169(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10170(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10171(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10172(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10173(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10174(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10175(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe500000) == 0xf8400000 {
        parse_arm_srs_0(ins, pc)
    } else if (ins & 0xe100000) == 0x8000000 {
        parse_arm_stm_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10176(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10177(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10178(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10179(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10180(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10181(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10182(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10183(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10184(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10185(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10186(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10187(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10188(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10189(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10190(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10191(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10192(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10193(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10194(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10195(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10196(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10197(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10198(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10199(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10200(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10201(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10202(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10203(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10204(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10205(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10206(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10207(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10208(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10209(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10210(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10211(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10212(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10213(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10214(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10215(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10216(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10217(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10218(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10219(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10220(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10221(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10222(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10223(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10224(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10225(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10226(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10227(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10228(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10229(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10230(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10231(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10232(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10233(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10234(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10235(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10236(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10237(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10238(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10239(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_ldm_2(ins, pc)
}
fn parse_arm_10240(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10241(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10242(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10243(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10244(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10245(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10246(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10247(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10248(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10249(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10250(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10251(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10252(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10253(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10254(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10255(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10256(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10257(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10258(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10259(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10260(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10261(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10262(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10263(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10264(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10265(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10266(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10267(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10268(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10269(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10270(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10271(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10272(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10273(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10274(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10275(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10276(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10277(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10278(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10279(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10280(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10281(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10282(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10283(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10284(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10285(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10286(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10287(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10288(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10289(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10290(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10291(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10292(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10293(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10294(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10295(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10296(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10297(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10298(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10299(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10300(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10301(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10302(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10303(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10304(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10305(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10306(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10307(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10308(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10309(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10310(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10311(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10312(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10313(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10314(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10315(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10316(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10317(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10318(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10319(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10320(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10321(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10322(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10323(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10324(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10325(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10326(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10327(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10328(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10329(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10330(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10331(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10332(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10333(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10334(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10335(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10336(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10337(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10338(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10339(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10340(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10341(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10342(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10343(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10344(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10345(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10346(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10347(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10348(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10349(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10350(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10351(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10352(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10353(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10354(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10355(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10356(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10357(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10358(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10359(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10360(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10361(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10362(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10363(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10364(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10365(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10366(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10367(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10368(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10369(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10370(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10371(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10372(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10373(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10374(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10375(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10376(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10377(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10378(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10379(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10380(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10381(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10382(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10383(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10384(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10385(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10386(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10387(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10388(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10389(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10390(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10391(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10392(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10393(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10394(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10395(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10396(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10397(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10398(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10399(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10400(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10401(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10402(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10403(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10404(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10405(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10406(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10407(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10408(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10409(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10410(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10411(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10412(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10413(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10414(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10415(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10416(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10417(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10418(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10419(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10420(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10421(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10422(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10423(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10424(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10425(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10426(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10427(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10428(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10429(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10430(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10431(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10432(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10433(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10434(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10435(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10436(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10437(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10438(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10439(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10440(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10441(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10442(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10443(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10444(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10445(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10446(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10447(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10448(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10449(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10450(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10451(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10452(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10453(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10454(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10455(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10456(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10457(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10458(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10459(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10460(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10461(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10462(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10463(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10464(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10465(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10466(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10467(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10468(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10469(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10470(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10471(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10472(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10473(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10474(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10475(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10476(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10477(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10478(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10479(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10480(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10481(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10482(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10483(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10484(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10485(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10486(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10487(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10488(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10489(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10490(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10491(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10492(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10493(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10494(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10495(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10496(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10497(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10498(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10499(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10500(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10501(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10502(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10503(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10504(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10505(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10506(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10507(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10508(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10509(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10510(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10511(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10512(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10513(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10514(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10515(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10516(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10517(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10518(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10519(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10520(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10521(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10522(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10523(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10524(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10525(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10526(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10527(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10528(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10529(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10530(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10531(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10532(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10533(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10534(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10535(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10536(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10537(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10538(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10539(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10540(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10541(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10542(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10543(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10544(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10545(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10546(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10547(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10548(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10549(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10550(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10551(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10552(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10553(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10554(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10555(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10556(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10557(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10558(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10559(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10560(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10561(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10562(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10563(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10564(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10565(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10566(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10567(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10568(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10569(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10570(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10571(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10572(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10573(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10574(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10575(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10576(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10577(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10578(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10579(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10580(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10581(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10582(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10583(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10584(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10585(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10586(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10587(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10588(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10589(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10590(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10591(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10592(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10593(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10594(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10595(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10596(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10597(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10598(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10599(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10600(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10601(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10602(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10603(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10604(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10605(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10606(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10607(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10608(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10609(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10610(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10611(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10612(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10613(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10614(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10615(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10616(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10617(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10618(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10619(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10620(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10621(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10622(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10623(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10624(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10625(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10626(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10627(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10628(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10629(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10630(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10631(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10632(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10633(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10634(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10635(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10636(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10637(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10638(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10639(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10640(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10641(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10642(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10643(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10644(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10645(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10646(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10647(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10648(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10649(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10650(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10651(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10652(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10653(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10654(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10655(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10656(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10657(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10658(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10659(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10660(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10661(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10662(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10663(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10664(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10665(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10666(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10667(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10668(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10669(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10670(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10671(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10672(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10673(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10674(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10675(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10676(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10677(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10678(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10679(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10680(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10681(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10682(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10683(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10684(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10685(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10686(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10687(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10688(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10689(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10690(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10691(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10692(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10693(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10694(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10695(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10696(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10697(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10698(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10699(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10700(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10701(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10702(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10703(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10704(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10705(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10706(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10707(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10708(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10709(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10710(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10711(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10712(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10713(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10714(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10715(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10716(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10717(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10718(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10719(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10720(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10721(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10722(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10723(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10724(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10725(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10726(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10727(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10728(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10729(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10730(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10731(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10732(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10733(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10734(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10735(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10736(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10737(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10738(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10739(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10740(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10741(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10742(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10743(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10744(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10745(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10746(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10747(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10748(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10749(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10750(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10751(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10752(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10753(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10754(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10755(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10756(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10757(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10758(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10759(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10760(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10761(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10762(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10763(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10764(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10765(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10766(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10767(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10768(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10769(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10770(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10771(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10772(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10773(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10774(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10775(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10776(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10777(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10778(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10779(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10780(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10781(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10782(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10783(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10784(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10785(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10786(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10787(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10788(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10789(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10790(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10791(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10792(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10793(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10794(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10795(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10796(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10797(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10798(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10799(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10800(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10801(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10802(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10803(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10804(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10805(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10806(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10807(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10808(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10809(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10810(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10811(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10812(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10813(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10814(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10815(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10816(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10817(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10818(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10819(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10820(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10821(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10822(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10823(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10824(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10825(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10826(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10827(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10828(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10829(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10830(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10831(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10832(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10833(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10834(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10835(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10836(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10837(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10838(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10839(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10840(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10841(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10842(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10843(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10844(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10845(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10846(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10847(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10848(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10849(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10850(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10851(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10852(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10853(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10854(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10855(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10856(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10857(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10858(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10859(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10860(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10861(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10862(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10863(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10864(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10865(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10866(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10867(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10868(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10869(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10870(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10871(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10872(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10873(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10874(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10875(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10876(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10877(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10878(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10879(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10880(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10881(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10882(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10883(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10884(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10885(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10886(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10887(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10888(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10889(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10890(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10891(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10892(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10893(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10894(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10895(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10896(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10897(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10898(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10899(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10900(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10901(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10902(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10903(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10904(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10905(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10906(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10907(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10908(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10909(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10910(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10911(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10912(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10913(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10914(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10915(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10916(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10917(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10918(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10919(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10920(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10921(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10922(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10923(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10924(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10925(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10926(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10927(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10928(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10929(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10930(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10931(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10932(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10933(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10934(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10935(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10936(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10937(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10938(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10939(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10940(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10941(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10942(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10943(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10944(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10945(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10946(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10947(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10948(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10949(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10950(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10951(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10952(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10953(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10954(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10955(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10956(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10957(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10958(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10959(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10960(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10961(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10962(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10963(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10964(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10965(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10966(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10967(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10968(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10969(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10970(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10971(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10972(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10973(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10974(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10975(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10976(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10977(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10978(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10979(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10980(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10981(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10982(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10983(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10984(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10985(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10986(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10987(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10988(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10989(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10990(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10991(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10992(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10993(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10994(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10995(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10996(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10997(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10998(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_10999(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11000(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11001(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11002(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11003(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11004(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11005(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11006(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11007(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11008(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11009(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11010(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11011(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11012(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11013(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11014(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11015(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11016(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11017(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11018(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11019(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11020(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11021(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11022(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11023(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11024(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11025(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11026(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11027(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11028(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11029(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11030(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11031(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11032(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11033(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11034(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11035(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11036(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11037(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11038(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11039(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11040(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11041(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11042(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11043(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11044(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11045(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11046(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11047(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11048(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11049(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11050(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11051(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11052(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11053(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11054(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11055(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11056(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11057(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11058(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11059(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11060(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11061(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11062(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11063(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11064(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11065(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11066(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11067(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11068(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11069(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11070(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11071(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11072(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11073(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11074(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11075(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11076(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11077(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11078(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11079(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11080(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11081(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11082(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11083(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11084(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11085(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11086(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11087(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11088(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11089(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11090(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11091(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11092(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11093(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11094(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11095(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11096(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11097(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11098(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11099(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11100(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11101(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11102(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11103(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11104(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11105(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11106(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11107(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11108(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11109(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11110(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11111(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11112(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11113(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11114(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11115(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11116(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11117(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11118(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11119(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11120(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11121(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11122(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11123(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11124(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11125(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11126(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11127(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11128(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11129(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11130(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11131(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11132(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11133(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11134(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11135(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11136(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11137(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11138(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11139(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11140(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11141(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11142(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11143(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11144(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11145(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11146(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11147(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11148(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11149(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11150(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11151(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11152(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11153(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11154(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11155(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11156(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11157(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11158(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11159(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11160(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11161(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11162(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11163(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11164(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11165(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11166(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11167(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11168(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11169(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11170(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11171(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11172(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11173(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11174(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11175(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11176(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11177(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11178(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11179(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11180(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11181(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11182(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11183(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11184(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11185(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11186(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11187(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11188(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11189(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11190(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11191(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11192(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11193(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11194(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11195(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11196(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11197(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11198(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11199(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11200(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11201(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11202(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11203(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11204(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11205(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11206(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11207(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11208(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11209(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11210(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11211(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11212(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11213(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11214(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11215(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11216(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11217(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11218(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11219(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11220(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11221(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11222(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11223(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11224(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11225(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11226(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11227(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11228(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11229(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11230(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11231(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11232(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11233(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11234(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11235(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11236(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11237(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11238(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11239(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11240(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11241(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11242(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11243(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11244(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11245(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11246(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11247(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11248(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11249(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11250(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11251(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11252(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11253(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11254(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11255(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11256(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11257(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11258(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11259(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11260(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11261(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11262(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11263(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xa000000 {
        parse_arm_b_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11264(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11265(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11266(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11267(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11268(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11269(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11270(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11271(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11272(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11273(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11274(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11275(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11276(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11277(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11278(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11279(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11280(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11281(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11282(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11283(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11284(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11285(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11286(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11287(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11288(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11289(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11290(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11291(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11292(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11293(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11294(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11295(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11296(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11297(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11298(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11299(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11300(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11301(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11302(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11303(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11304(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11305(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11306(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11307(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11308(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11309(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11310(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11311(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11312(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11313(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11314(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11315(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11316(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11317(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11318(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11319(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11320(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11321(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11322(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11323(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11324(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11325(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11326(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11327(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11328(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11329(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11330(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11331(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11332(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11333(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11334(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11335(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11336(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11337(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11338(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11339(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11340(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11341(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11342(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11343(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11344(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11345(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11346(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11347(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11348(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11349(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11350(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11351(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11352(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11353(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11354(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11355(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11356(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11357(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11358(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11359(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11360(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11361(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11362(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11363(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11364(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11365(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11366(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11367(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11368(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11369(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11370(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11371(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11372(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11373(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11374(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11375(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11376(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11377(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11378(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11379(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11380(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11381(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11382(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11383(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11384(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11385(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11386(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11387(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11388(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11389(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11390(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11391(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11392(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11393(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11394(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11395(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11396(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11397(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11398(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11399(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11400(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11401(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11402(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11403(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11404(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11405(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11406(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11407(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11408(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11409(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11410(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11411(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11412(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11413(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11414(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11415(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11416(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11417(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11418(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11419(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11420(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11421(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11422(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11423(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11424(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11425(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11426(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11427(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11428(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11429(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11430(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11431(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11432(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11433(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11434(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11435(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11436(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11437(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11438(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11439(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11440(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11441(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11442(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11443(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11444(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11445(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11446(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11447(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11448(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11449(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11450(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11451(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11452(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11453(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11454(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11455(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11456(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11457(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11458(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11459(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11460(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11461(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11462(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11463(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11464(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11465(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11466(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11467(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11468(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11469(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11470(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11471(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11472(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11473(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11474(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11475(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11476(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11477(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11478(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11479(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11480(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11481(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11482(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11483(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11484(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11485(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11486(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11487(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11488(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11489(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11490(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11491(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11492(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11493(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11494(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11495(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11496(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11497(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11498(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11499(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11500(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11501(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11502(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11503(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11504(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11505(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11506(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11507(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11508(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11509(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11510(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11511(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11512(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11513(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11514(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11515(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11516(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11517(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11518(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11519(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11520(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11521(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11522(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11523(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11524(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11525(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11526(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11527(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11528(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11529(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11530(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11531(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11532(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11533(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11534(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11535(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11536(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11537(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11538(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11539(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11540(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11541(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11542(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11543(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11544(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11545(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11546(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11547(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11548(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11549(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11550(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11551(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11552(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11553(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11554(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11555(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11556(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11557(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11558(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11559(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11560(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11561(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11562(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11563(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11564(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11565(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11566(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11567(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11568(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11569(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11570(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11571(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11572(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11573(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11574(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11575(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11576(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11577(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11578(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11579(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11580(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11581(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11582(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11583(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11584(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11585(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11586(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11587(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11588(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11589(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11590(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11591(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11592(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11593(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11594(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11595(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11596(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11597(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11598(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11599(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11600(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11601(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11602(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11603(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11604(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11605(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11606(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11607(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11608(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11609(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11610(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11611(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11612(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11613(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11614(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11615(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11616(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11617(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11618(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11619(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11620(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11621(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11622(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11623(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11624(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11625(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11626(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11627(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11628(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11629(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11630(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11631(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11632(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11633(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11634(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11635(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11636(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11637(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11638(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11639(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11640(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11641(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11642(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11643(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11644(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11645(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11646(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11647(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11648(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11649(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11650(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11651(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11652(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11653(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11654(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11655(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11656(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11657(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11658(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11659(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11660(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11661(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11662(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11663(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11664(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11665(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11666(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11667(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11668(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11669(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11670(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11671(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11672(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11673(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11674(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11675(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11676(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11677(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11678(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11679(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11680(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11681(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11682(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11683(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11684(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11685(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11686(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11687(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11688(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11689(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11690(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11691(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11692(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11693(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11694(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11695(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11696(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11697(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11698(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11699(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11700(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11701(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11702(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11703(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11704(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11705(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11706(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11707(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11708(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11709(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11710(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11711(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11712(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11713(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11714(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11715(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11716(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11717(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11718(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11719(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11720(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11721(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11722(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11723(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11724(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11725(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11726(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11727(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11728(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11729(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11730(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11731(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11732(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11733(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11734(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11735(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11736(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11737(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11738(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11739(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11740(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11741(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11742(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11743(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11744(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11745(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11746(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11747(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11748(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11749(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11750(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11751(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11752(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11753(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11754(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11755(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11756(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11757(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11758(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11759(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11760(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11761(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11762(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11763(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11764(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11765(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11766(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11767(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11768(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11769(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11770(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11771(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11772(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11773(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11774(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11775(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11776(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11777(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11778(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11779(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11780(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11781(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11782(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11783(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11784(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11785(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11786(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11787(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11788(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11789(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11790(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11791(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11792(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11793(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11794(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11795(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11796(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11797(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11798(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11799(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11800(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11801(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11802(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11803(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11804(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11805(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11806(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11807(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11808(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11809(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11810(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11811(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11812(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11813(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11814(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11815(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11816(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11817(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11818(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11819(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11820(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11821(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11822(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11823(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11824(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11825(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11826(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11827(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11828(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11829(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11830(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11831(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11832(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11833(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11834(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11835(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11836(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11837(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11838(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11839(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11840(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11841(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11842(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11843(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11844(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11845(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11846(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11847(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11848(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11849(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11850(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11851(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11852(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11853(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11854(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11855(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11856(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11857(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11858(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11859(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11860(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11861(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11862(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11863(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11864(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11865(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11866(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11867(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11868(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11869(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11870(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11871(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11872(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11873(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11874(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11875(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11876(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11877(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11878(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11879(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11880(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11881(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11882(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11883(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11884(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11885(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11886(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11887(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11888(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11889(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11890(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11891(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11892(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11893(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11894(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11895(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11896(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11897(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11898(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11899(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11900(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11901(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11902(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11903(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11904(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11905(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11906(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11907(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11908(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11909(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11910(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11911(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11912(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11913(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11914(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11915(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11916(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11917(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11918(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11919(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11920(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11921(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11922(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11923(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11924(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11925(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11926(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11927(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11928(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11929(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11930(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11931(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11932(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11933(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11934(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11935(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11936(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11937(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11938(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11939(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11940(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11941(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11942(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11943(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11944(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11945(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11946(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11947(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11948(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11949(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11950(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11951(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11952(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11953(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11954(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11955(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11956(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11957(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11958(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11959(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11960(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11961(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11962(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11963(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11964(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11965(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11966(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11967(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11968(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11969(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11970(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11971(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11972(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11973(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11974(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11975(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11976(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11977(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11978(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11979(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11980(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11981(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11982(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11983(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11984(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11985(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11986(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11987(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11988(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11989(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11990(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11991(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11992(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11993(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11994(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11995(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11996(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11997(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11998(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_11999(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12000(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12001(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12002(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12003(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12004(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12005(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12006(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12007(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12008(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12009(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12010(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12011(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12012(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12013(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12014(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12015(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12016(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12017(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12018(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12019(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12020(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12021(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12022(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12023(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12024(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12025(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12026(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12027(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12028(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12029(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12030(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12031(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12032(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12033(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12034(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12035(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12036(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12037(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12038(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12039(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12040(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12041(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12042(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12043(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12044(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12045(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12046(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12047(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12048(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12049(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12050(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12051(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12052(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12053(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12054(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12055(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12056(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12057(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12058(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12059(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12060(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12061(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12062(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12063(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12064(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12065(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12066(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12067(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12068(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12069(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12070(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12071(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12072(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12073(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12074(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12075(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12076(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12077(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12078(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12079(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12080(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12081(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12082(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12083(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12084(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12085(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12086(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12087(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12088(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12089(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12090(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12091(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12092(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12093(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12094(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12095(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12096(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12097(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12098(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12099(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12100(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12101(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12102(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12103(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12104(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12105(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12106(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12107(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12108(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12109(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12110(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12111(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12112(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12113(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12114(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12115(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12116(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12117(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12118(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12119(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12120(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12121(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12122(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12123(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12124(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12125(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12126(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12127(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12128(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12129(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12130(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12131(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12132(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12133(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12134(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12135(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12136(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12137(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12138(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12139(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12140(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12141(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12142(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12143(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12144(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12145(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12146(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12147(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12148(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12149(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12150(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12151(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12152(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12153(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12154(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12155(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12156(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12157(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12158(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12159(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12160(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12161(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12162(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12163(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12164(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12165(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12166(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12167(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12168(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12169(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12170(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12171(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12172(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12173(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12174(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12175(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12176(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12177(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12178(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12179(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12180(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12181(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12182(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12183(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12184(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12185(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12186(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12187(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12188(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12189(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12190(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12191(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12192(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12193(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12194(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12195(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12196(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12197(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12198(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12199(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12200(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12201(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12202(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12203(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12204(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12205(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12206(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12207(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12208(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12209(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12210(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12211(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12212(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12213(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12214(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12215(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12216(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12217(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12218(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12219(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12220(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12221(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12222(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12223(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12224(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12225(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12226(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12227(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12228(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12229(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12230(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12231(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12232(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12233(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12234(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12235(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12236(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12237(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12238(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12239(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12240(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12241(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12242(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12243(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12244(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12245(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12246(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12247(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12248(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12249(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12250(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12251(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12252(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12253(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12254(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12255(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12256(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12257(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12258(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12259(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12260(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12261(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12262(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12263(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12264(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12265(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12266(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12267(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12268(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12269(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12270(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12271(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12272(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12273(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12274(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12275(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12276(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12277(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12278(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12279(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12280(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12281(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12282(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12283(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12284(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12285(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12286(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12287(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe000000) == 0xfa000000 {
        parse_arm_blx_0(ins, pc)
    } else if (ins & 0xf000000) == 0xb000000 {
        parse_arm_bl_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12288(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12289(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12290(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12291(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12292(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12293(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12294(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12295(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12296(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12297(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12298(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12299(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12300(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12301(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12302(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12303(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12304(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12305(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12306(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12307(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12308(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12309(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12310(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12311(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12312(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12313(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12314(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12315(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12316(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12317(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12318(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12319(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12320(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12321(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12322(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12323(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12324(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12325(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12326(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12327(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12328(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12329(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12330(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12331(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12332(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12333(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12334(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12335(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12336(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12337(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12338(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12339(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12340(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12341(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12342(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12343(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12344(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12345(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12346(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12347(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12348(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12349(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12350(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12351(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12352(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12353(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12354(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12355(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12356(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12357(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12358(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12359(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12360(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12361(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12362(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12363(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12364(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12365(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12366(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12367(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12368(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12369(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12370(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12371(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12372(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12373(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12374(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12375(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12376(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12377(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12378(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12379(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12380(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12381(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12382(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12383(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12384(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12385(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12386(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12387(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12388(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12389(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12390(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12391(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12392(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12393(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12394(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12395(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12396(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12397(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12398(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12399(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12400(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12401(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12402(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12403(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12404(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12405(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12406(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12407(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12408(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12409(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12410(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12411(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12412(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12413(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12414(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12415(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12416(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12417(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12418(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12419(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12420(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12421(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12422(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12423(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12424(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12425(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12426(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12427(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12428(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12429(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12430(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12431(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12432(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12433(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12434(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12435(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12436(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12437(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12438(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12439(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12440(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12441(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12442(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12443(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12444(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12445(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12446(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12447(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12448(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12449(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12450(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12451(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12452(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12453(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12454(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12455(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12456(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12457(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12458(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12459(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12460(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12461(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12462(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12463(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12464(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12465(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12466(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12467(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12468(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12469(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12470(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12471(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12472(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12473(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12474(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12475(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12476(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12477(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12478(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12479(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12480(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12481(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12482(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12483(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12484(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12485(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12486(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12487(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12488(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12489(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12490(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12491(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12492(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12493(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12494(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12495(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12496(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12497(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12498(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12499(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12500(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12501(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12502(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12503(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12504(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12505(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12506(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12507(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12508(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12509(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12510(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12511(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12512(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12513(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12514(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12515(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12516(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12517(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12518(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12519(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12520(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12521(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12522(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12523(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12524(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12525(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12526(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12527(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12528(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12529(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12530(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12531(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12532(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12533(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12534(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12535(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12536(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12537(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12538(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12539(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12540(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12541(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12542(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12543(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12544(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12545(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00fd0) == 0xc400a10 {
        parse_arm_vmov_f32_reg_dual_0(ins, pc)
    } else if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12546(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12547(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00fd0) == 0xc400a10 {
        parse_arm_vmov_f32_reg_dual_0(ins, pc)
    } else if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12548(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12549(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12550(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12551(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12552(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12553(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12554(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12555(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12556(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12557(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12558(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12559(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12560(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12561(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00fd0) == 0xc400b10 {
        parse_arm_vmov_f64_reg_0(ins, pc)
    } else if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12562(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12563(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00fd0) == 0xc400b10 {
        parse_arm_vmov_f64_reg_0(ins, pc)
    } else if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12564(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12565(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12566(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12567(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12568(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12569(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12570(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12571(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12572(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12573(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12574(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12575(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12576(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12577(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00fd0) == 0xc400a10 {
        parse_arm_vmov_f32_reg_dual_0(ins, pc)
    } else if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12578(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12579(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00fd0) == 0xc400a10 {
        parse_arm_vmov_f32_reg_dual_0(ins, pc)
    } else if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12580(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12581(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12582(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12583(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12584(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12585(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12586(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12587(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12588(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12589(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12590(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12591(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12592(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12593(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00fd0) == 0xc400b10 {
        parse_arm_vmov_f64_reg_0(ins, pc)
    } else if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12594(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12595(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00fd0) == 0xc400b10 {
        parse_arm_vmov_f64_reg_0(ins, pc)
    } else if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12596(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12597(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12598(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12599(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12600(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12601(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12602(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12603(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12604(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12605(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12606(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12607(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc400000 {
        parse_arm_mcrr2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc400000 {
        parse_arm_mcrr_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12608(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12609(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00fd0) == 0xc500a10 {
        parse_arm_vmov_reg_f32_dual_0(ins, pc)
    } else if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12610(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12611(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00fd0) == 0xc500a10 {
        parse_arm_vmov_reg_f32_dual_0(ins, pc)
    } else if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12612(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12613(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12614(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12615(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12616(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12617(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12618(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12619(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12620(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12621(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12622(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12623(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12624(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12625(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00fd0) == 0xc500b10 {
        parse_arm_vmov_reg_f64_0(ins, pc)
    } else if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12626(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12627(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00fd0) == 0xc500b10 {
        parse_arm_vmov_reg_f64_0(ins, pc)
    } else if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12628(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12629(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12630(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12631(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12632(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12633(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12634(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12635(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12636(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12637(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12638(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12639(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12640(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12641(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00fd0) == 0xc500a10 {
        parse_arm_vmov_reg_f32_dual_0(ins, pc)
    } else if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12642(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12643(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00fd0) == 0xc500a10 {
        parse_arm_vmov_reg_f32_dual_0(ins, pc)
    } else if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12644(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12645(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12646(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12647(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12648(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12649(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12650(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12651(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12652(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12653(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12654(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12655(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12656(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12657(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00fd0) == 0xc500b10 {
        parse_arm_vmov_reg_f64_0(ins, pc)
    } else if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12658(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12659(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00fd0) == 0xc500b10 {
        parse_arm_vmov_reg_f64_0(ins, pc)
    } else if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12660(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12661(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12662(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12663(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12664(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12665(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12666(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12667(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12668(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12669(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12670(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12671(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff00000) == 0xfc500000 {
        parse_arm_mrrc2_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xff00000) == 0xc500000 {
        parse_arm_mrrc_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12672(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12673(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12674(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12675(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12676(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12677(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12678(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12679(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12680(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12681(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12682(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12683(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12684(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12685(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12686(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12687(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12688(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12689(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12690(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12691(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12692(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12693(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12694(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12695(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12696(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12697(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12698(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12699(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12700(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12701(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12702(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12703(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12704(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12705(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12706(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12707(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12708(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12709(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12710(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12711(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12712(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12713(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12714(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12715(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12716(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12717(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12718(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12719(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12720(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12721(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12722(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12723(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12724(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12725(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12726(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12727(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12728(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12729(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12730(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12731(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12732(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12733(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12734(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12735(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12736(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12737(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12738(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12739(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12740(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12741(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12742(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12743(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12744(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12745(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12746(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12747(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12748(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12749(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12750(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12751(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12752(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12753(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12754(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12755(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12756(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12757(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12758(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12759(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12760(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12761(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12762(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12763(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12764(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12765(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12766(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12767(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12768(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12769(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12770(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12771(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12772(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12773(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12774(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12775(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12776(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12777(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12778(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12779(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12780(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12781(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12782(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12783(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12784(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12785(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12786(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12787(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12788(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12789(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12790(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12791(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12792(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12793(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12794(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12795(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12796(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12797(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12798(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12799(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12800(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12801(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12802(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12803(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12804(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12805(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12806(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12807(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12808(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12809(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12810(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12811(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12812(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12813(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12814(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12815(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12816(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12817(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12818(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12819(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12820(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12821(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12822(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12823(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12824(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12825(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12826(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12827(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12828(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12829(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12830(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12831(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12832(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12833(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12834(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12835(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12836(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12837(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12838(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12839(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12840(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12841(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12842(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12843(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12844(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12845(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12846(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12847(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12848(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12849(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12850(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12851(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12852(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12853(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12854(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12855(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12856(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12857(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12858(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12859(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12860(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12861(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12862(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12863(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12864(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12865(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12866(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12867(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12868(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12869(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12870(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12871(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12872(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12873(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12874(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12875(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12876(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12877(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12878(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12879(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12880(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12881(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12882(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12883(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12884(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12885(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12886(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12887(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12888(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12889(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12890(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12891(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12892(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12893(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12894(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12895(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12896(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12897(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12898(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12899(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12900(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12901(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12902(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12903(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12904(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12905(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12906(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12907(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12908(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12909(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12910(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12911(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12912(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12913(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12914(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12915(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12916(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12917(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12918(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12919(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12920(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12921(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12922(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12923(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12924(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12925(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12926(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12927(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12928(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12929(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12930(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12931(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12932(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12933(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12934(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12935(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12936(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12937(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12938(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12939(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12940(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12941(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12942(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12943(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12944(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12945(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12946(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12947(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12948(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12949(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12950(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12951(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12952(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12953(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12954(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12955(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12956(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12957(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12958(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12959(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12960(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12961(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12962(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12963(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12964(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12965(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12966(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12967(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12968(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12969(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12970(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12971(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12972(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12973(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12974(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12975(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12976(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12977(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12978(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12979(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12980(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12981(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12982(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12983(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12984(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12985(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12986(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12987(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12988(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12989(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12990(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12991(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12992(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12993(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12994(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12995(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12996(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12997(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12998(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_12999(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13000(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13001(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13002(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13003(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13004(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13005(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13006(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13007(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13008(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13009(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13010(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13011(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13012(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13013(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13014(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13015(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13016(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13017(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13018(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13019(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13020(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13021(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13022(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13023(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13024(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13025(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13026(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13027(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13028(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13029(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13030(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13031(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13032(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13033(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13034(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13035(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13036(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13037(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13038(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13039(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13040(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13041(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13042(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13043(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13044(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13045(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13046(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13047(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13048(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13049(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13050(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13051(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13052(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13053(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13054(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13055(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13056(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13057(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13058(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13059(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13060(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13061(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13062(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13063(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13064(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13065(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13066(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13067(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13068(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13069(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13070(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13071(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13072(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13073(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13074(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13075(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13076(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13077(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13078(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13079(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13080(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13081(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13082(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13083(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13084(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13085(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13086(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13087(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13088(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13089(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13090(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13091(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13092(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13093(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13094(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13095(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13096(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13097(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13098(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13099(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13100(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13101(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13102(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13103(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13104(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13105(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13106(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13107(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13108(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13109(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13110(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13111(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13112(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13113(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13114(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13115(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13116(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13117(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13118(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13119(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13120(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13121(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13122(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13123(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13124(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13125(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13126(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13127(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13128(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13129(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13130(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13131(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13132(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13133(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13134(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13135(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13136(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13137(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13138(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13139(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13140(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13141(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13142(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13143(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13144(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13145(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13146(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13147(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13148(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13149(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13150(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13151(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13152(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13153(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13154(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13155(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13156(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13157(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13158(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13159(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13160(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13161(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13162(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13163(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13164(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13165(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13166(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13167(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13168(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13169(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13170(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13171(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13172(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13173(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13174(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13175(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13176(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13177(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13178(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13179(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13180(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13181(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13182(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13183(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13184(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13185(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13186(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13187(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13188(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13189(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13190(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13191(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13192(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13193(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13194(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13195(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13196(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13197(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13198(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13199(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13200(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13201(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13202(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13203(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13204(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13205(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13206(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13207(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13208(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13209(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13210(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13211(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13212(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13213(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13214(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13215(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13216(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13217(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13218(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13219(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13220(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13221(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13222(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13223(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13224(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13225(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13226(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13227(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13228(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13229(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13230(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13231(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13232(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13233(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13234(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13235(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13236(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13237(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13238(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13239(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13240(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13241(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13242(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13243(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13244(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13245(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13246(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13247(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13248(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13249(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13250(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13251(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13252(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13253(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13254(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13255(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13256(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13257(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13258(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13259(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13260(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13261(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13262(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13263(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13264(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13265(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13266(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13267(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13268(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13269(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13270(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13271(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13272(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13273(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13274(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13275(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13276(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13277(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13278(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13279(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13280(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13281(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13282(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13283(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13284(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13285(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13286(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13287(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13288(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13289(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13290(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13291(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13292(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13293(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13294(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13295(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0a00 {
        parse_arm_vpop_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13296(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13297(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13298(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13299(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13300(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13301(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13302(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13303(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13304(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13305(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13306(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13307(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13308(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13309(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13310(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13311(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xcbd0b00 {
        parse_arm_vpop_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13312(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13313(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13314(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13315(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13316(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13317(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13318(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13319(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13320(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13321(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13322(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13323(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13324(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13325(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13326(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13327(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13328(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13329(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13330(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13331(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13332(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13333(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13334(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13335(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13336(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13337(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13338(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13339(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13340(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13341(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13342(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13343(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13344(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13345(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13346(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13347(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13348(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13349(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13350(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13351(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13352(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13353(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13354(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13355(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13356(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13357(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13358(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13359(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13360(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13361(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13362(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13363(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13364(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13365(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13366(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13367(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13368(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13369(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13370(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13371(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13372(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13373(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13374(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13375(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13376(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13377(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13378(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13379(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13380(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13381(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13382(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13383(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13384(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13385(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13386(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13387(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13388(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13389(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13390(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13391(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13392(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13393(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13394(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13395(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13396(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13397(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13398(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13399(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13400(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13401(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13402(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13403(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13404(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13405(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13406(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13407(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13408(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13409(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13410(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13411(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13412(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13413(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13414(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13415(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13416(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13417(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13418(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13419(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13420(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13421(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13422(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13423(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13424(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13425(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13426(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13427(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13428(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13429(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13430(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13431(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13432(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13433(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13434(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13435(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13436(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13437(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13438(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13439(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13440(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13441(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13442(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13443(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13444(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13445(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13446(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13447(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13448(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13449(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13450(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13451(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13452(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13453(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13454(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13455(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13456(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13457(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13458(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13459(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13460(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13461(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13462(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13463(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13464(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13465(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13466(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13467(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13468(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13469(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13470(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13471(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13472(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13473(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13474(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13475(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13476(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13477(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13478(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13479(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13480(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13481(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13482(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13483(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13484(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13485(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13486(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13487(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13488(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13489(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13490(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13491(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13492(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13493(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13494(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13495(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13496(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13497(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13498(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13499(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13500(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13501(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13502(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13503(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13504(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13505(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13506(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13507(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13508(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13509(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13510(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13511(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13512(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13513(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13514(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13515(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13516(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13517(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13518(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13519(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13520(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13521(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13522(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13523(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13524(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13525(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13526(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13527(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13528(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13529(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13530(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13531(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13532(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13533(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13534(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13535(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13536(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13537(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13538(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13539(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13540(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13541(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13542(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13543(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13544(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13545(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13546(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13547(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13548(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13549(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13550(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13551(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13552(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13553(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13554(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13555(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13556(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13557(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13558(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13559(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13560(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13561(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13562(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13563(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13564(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13565(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13566(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13567(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13568(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13569(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13570(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13571(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13572(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13573(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13574(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13575(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13576(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13577(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13578(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13579(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13580(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13581(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13582(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13583(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13584(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13585(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13586(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13587(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13588(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13589(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13590(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13591(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13592(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13593(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13594(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13595(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13596(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13597(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13598(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13599(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13600(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13601(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13602(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13603(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13604(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13605(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13606(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13607(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13608(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13609(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13610(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13611(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13612(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13613(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13614(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13615(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13616(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13617(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13618(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13619(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13620(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13621(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13622(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13623(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13624(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13625(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13626(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13627(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13628(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13629(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13630(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13631(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13632(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13633(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13634(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13635(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13636(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13637(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13638(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13639(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13640(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13641(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13642(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13643(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13644(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13645(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13646(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13647(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13648(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13649(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13650(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13651(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13652(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13653(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13654(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13655(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13656(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13657(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13658(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13659(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13660(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13661(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13662(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13663(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13664(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13665(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13666(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13667(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13668(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13669(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13670(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13671(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13672(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13673(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13674(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13675(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13676(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13677(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13678(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13679(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13680(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13681(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13682(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13683(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13684(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13685(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13686(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13687(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13688(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13689(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13690(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13691(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13692(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13693(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13694(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13695(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13696(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13697(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13698(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13699(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13700(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13701(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13702(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13703(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13704(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13705(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13706(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13707(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13708(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13709(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13710(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13711(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13712(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13713(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13714(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13715(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13716(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13717(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13718(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13719(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13720(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13721(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13722(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13723(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13724(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13725(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13726(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13727(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13728(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13729(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13730(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13731(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13732(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13733(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13734(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13735(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13736(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13737(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13738(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13739(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13740(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13741(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13742(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13743(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0a00 {
        parse_arm_vpush_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13744(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13745(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13746(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13747(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13748(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13749(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13750(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13751(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13752(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13753(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13754(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13755(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13756(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13757(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13758(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13759(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0f00) == 0xd2d0b00 {
        parse_arm_vpush_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13760(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13761(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13762(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13763(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13764(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13765(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13766(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13767(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13768(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13769(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13770(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13771(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13772(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13773(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13774(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13775(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13776(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13777(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13778(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13779(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13780(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13781(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13782(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13783(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13784(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13785(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13786(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13787(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13788(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13789(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13790(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13791(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13792(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13793(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13794(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13795(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13796(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13797(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13798(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13799(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13800(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13801(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13802(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13803(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13804(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13805(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13806(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13807(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13808(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13809(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13810(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13811(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13812(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13813(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13814(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13815(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13816(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13817(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13818(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13819(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13820(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13821(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13822(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13823(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13824(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13825(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13826(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13827(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13828(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13829(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13830(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13831(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13832(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13833(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13834(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13835(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13836(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13837(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13838(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13839(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13840(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13841(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13842(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13843(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13844(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13845(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13846(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13847(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13848(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13849(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13850(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13851(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13852(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13853(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13854(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13855(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13856(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13857(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13858(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13859(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13860(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13861(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13862(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13863(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13864(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13865(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13866(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13867(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13868(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13869(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13870(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13871(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13872(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13873(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13874(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13875(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13876(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13877(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13878(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13879(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13880(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13881(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13882(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13883(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13884(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13885(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13886(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13887(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13888(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13889(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13890(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13891(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13892(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13893(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13894(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13895(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13896(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13897(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13898(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13899(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13900(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13901(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13902(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13903(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13904(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13905(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13906(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13907(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13908(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13909(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13910(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13911(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13912(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13913(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13914(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13915(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13916(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13917(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13918(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13919(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13920(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13921(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13922(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13923(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13924(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13925(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13926(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13927(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13928(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13929(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13930(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13931(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13932(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13933(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13934(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13935(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13936(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13937(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13938(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13939(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13940(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13941(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13942(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13943(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13944(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13945(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13946(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13947(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13948(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13949(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13950(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13951(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13952(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13953(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13954(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13955(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13956(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13957(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13958(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13959(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13960(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13961(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13962(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13963(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13964(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13965(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13966(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13967(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13968(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13969(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13970(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13971(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13972(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13973(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13974(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13975(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13976(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13977(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13978(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13979(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13980(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13981(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13982(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13983(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13984(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13985(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13986(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13987(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13988(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13989(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13990(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13991(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13992(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13993(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13994(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13995(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13996(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13997(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13998(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_13999(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14000(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14001(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14002(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14003(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14004(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14005(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14006(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14007(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14008(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14009(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14010(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14011(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14012(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14013(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14014(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14015(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14016(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14017(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14018(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14019(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14020(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14021(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14022(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14023(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14024(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14025(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14026(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14027(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14028(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14029(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14030(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14031(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14032(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14033(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14034(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14035(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14036(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14037(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14038(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14039(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14040(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14041(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14042(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14043(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14044(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14045(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14046(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14047(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14048(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14049(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14050(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14051(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14052(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14053(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14054(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14055(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14056(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14057(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14058(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14059(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14060(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14061(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14062(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14063(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14064(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14065(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14066(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14067(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14068(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14069(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14070(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14071(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14072(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14073(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14074(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14075(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14076(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14077(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14078(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14079(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14080(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14081(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14082(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14083(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14084(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14085(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14086(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14087(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14088(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14089(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14090(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14091(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14092(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14093(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14094(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14095(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14096(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14097(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14098(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14099(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14100(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14101(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14102(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14103(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14104(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14105(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14106(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14107(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14108(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14109(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14110(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14111(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14112(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14113(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14114(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14115(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14116(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14117(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14118(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14119(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14120(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14121(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14122(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14123(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14124(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14125(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14126(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14127(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000a00 {
        parse_arm_vstr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14128(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14129(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14130(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14131(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14132(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14133(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14134(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14135(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14136(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14137(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14138(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14139(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14140(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14141(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14142(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14143(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd000b00 {
        parse_arm_vstr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14144(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14145(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14146(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14147(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14148(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14149(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14150(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14151(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14152(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14153(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14154(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14155(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14156(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14157(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14158(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14159(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14160(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14161(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14162(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14163(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14164(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14165(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14166(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14167(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14168(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14169(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14170(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14171(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14172(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14173(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14174(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14175(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14176(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14177(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14178(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14179(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14180(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14181(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14182(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14183(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14184(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14185(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14186(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14187(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14188(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14189(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14190(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14191(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100a00 {
        parse_arm_vldr_f32_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14192(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14193(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14194(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14195(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14196(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14197(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14198(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14199(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14200(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14201(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14202(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14203(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14204(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14205(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14206(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14207(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xf300f00) == 0xd100b00 {
        parse_arm_vldr_f64_0(ins, pc)
    } else if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14208(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14209(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14210(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14211(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14212(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14213(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14214(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14215(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14216(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14217(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14218(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14219(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14220(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14221(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14222(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14223(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14224(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14225(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14226(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14227(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14228(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14229(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14230(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14231(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14232(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14233(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14234(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14235(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14236(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14237(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14238(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14239(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14240(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14241(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14242(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14243(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14244(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14245(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14246(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14247(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14248(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14249(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14250(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14251(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14252(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14253(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14254(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14255(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000a00 {
        parse_arm_vstm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14256(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14257(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14258(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14259(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14260(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14261(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14262(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14263(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14264(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14265(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14266(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14267(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14268(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14269(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14270(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14271(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc000000 {
        parse_arm_stc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc000b00 {
        parse_arm_vstm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc000000 {
        parse_arm_stc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14272(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14273(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14274(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14275(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14276(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14277(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14278(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14279(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14280(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14281(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14282(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14283(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14284(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14285(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14286(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14287(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14288(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14289(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14290(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14291(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14292(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14293(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14294(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14295(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14296(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14297(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14298(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14299(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14300(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14301(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14302(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14303(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14304(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14305(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14306(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14307(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14308(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14309(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14310(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14311(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14312(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14313(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14314(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14315(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14316(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14317(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14318(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14319(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100a00 {
        parse_arm_vldm_f32_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14320(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14321(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14322(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14323(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14324(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14325(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14326(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14327(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14328(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14329(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14330(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14331(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14332(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14333(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14334(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14335(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfe100000) == 0xfc100000 {
        parse_arm_ldc2_0(ins, pc)
    } else if (ins & 0xe100f00) == 0xc100b00 {
        parse_arm_vldm_f64_0(ins, pc)
    } else if (ins & 0xe100000) == 0xc100000 {
        parse_arm_ldc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14336(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a00 {
        parse_arm_vmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14337(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe000a10 {
        parse_arm_vmov_f32_reg_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14338(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a00 {
        parse_arm_vmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14339(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe000a10 {
        parse_arm_vmov_f32_reg_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14340(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a40 {
        parse_arm_vmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14341(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe000a10 {
        parse_arm_vmov_f32_reg_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14342(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a40 {
        parse_arm_vmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14343(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe000a10 {
        parse_arm_vmov_f32_reg_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14344(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a00 {
        parse_arm_vmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14345(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe000a10 {
        parse_arm_vmov_f32_reg_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14346(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a00 {
        parse_arm_vmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14347(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe000a10 {
        parse_arm_vmov_f32_reg_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14348(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a40 {
        parse_arm_vmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14349(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe000a10 {
        parse_arm_vmov_f32_reg_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14350(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a40 {
        parse_arm_vmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14351(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe000a10 {
        parse_arm_vmov_f32_reg_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14352(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b00 {
        parse_arm_vmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14353(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd00f70) == 0xe000b10 {
        parse_arm_vmov_32_reg_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14354(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b00 {
        parse_arm_vmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14355(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14356(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b40 {
        parse_arm_vmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14357(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14358(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b40 {
        parse_arm_vmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14359(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14360(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b00 {
        parse_arm_vmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14361(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd00f70) == 0xe000b10 {
        parse_arm_vmov_32_reg_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14362(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b00 {
        parse_arm_vmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14363(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14364(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b40 {
        parse_arm_vmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14365(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14366(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b40 {
        parse_arm_vmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14367(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14368(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a00 {
        parse_arm_vmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14369(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe000a10 {
        parse_arm_vmov_f32_reg_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14370(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a00 {
        parse_arm_vmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14371(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe000a10 {
        parse_arm_vmov_f32_reg_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14372(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a40 {
        parse_arm_vmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14373(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe000a10 {
        parse_arm_vmov_f32_reg_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14374(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a40 {
        parse_arm_vmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14375(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe000a10 {
        parse_arm_vmov_f32_reg_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14376(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a00 {
        parse_arm_vmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14377(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe000a10 {
        parse_arm_vmov_f32_reg_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14378(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a00 {
        parse_arm_vmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14379(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe000a10 {
        parse_arm_vmov_f32_reg_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14380(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a40 {
        parse_arm_vmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14381(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe000a10 {
        parse_arm_vmov_f32_reg_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14382(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a40 {
        parse_arm_vmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14383(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe000a10 {
        parse_arm_vmov_f32_reg_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14384(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b00 {
        parse_arm_vmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14385(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd00f70) == 0xe000b10 {
        parse_arm_vmov_32_reg_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14386(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b00 {
        parse_arm_vmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14387(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14388(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b40 {
        parse_arm_vmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14389(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14390(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b40 {
        parse_arm_vmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14391(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14392(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b00 {
        parse_arm_vmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14393(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd00f70) == 0xe000b10 {
        parse_arm_vmov_32_reg_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14394(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b00 {
        parse_arm_vmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14395(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14396(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b40 {
        parse_arm_vmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14397(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14398(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b40 {
        parse_arm_vmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14399(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14400(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a00 {
        parse_arm_vnmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14401(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe100a10 {
        parse_arm_vmov_reg_f32_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14402(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a00 {
        parse_arm_vnmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14403(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe100a10 {
        parse_arm_vmov_reg_f32_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14404(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a40 {
        parse_arm_vnmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14405(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe100a10 {
        parse_arm_vmov_reg_f32_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14406(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a40 {
        parse_arm_vnmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14407(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe100a10 {
        parse_arm_vmov_reg_f32_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14408(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a00 {
        parse_arm_vnmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14409(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe100a10 {
        parse_arm_vmov_reg_f32_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14410(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a00 {
        parse_arm_vnmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14411(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe100a10 {
        parse_arm_vmov_reg_f32_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14412(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a40 {
        parse_arm_vnmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14413(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe100a10 {
        parse_arm_vmov_reg_f32_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14414(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a40 {
        parse_arm_vnmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14415(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe100a10 {
        parse_arm_vmov_reg_f32_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14416(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b00 {
        parse_arm_vnmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14417(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd00f70) == 0xe100b10 {
        parse_arm_vmov_reg_32_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14418(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b00 {
        parse_arm_vnmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14419(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14420(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b40 {
        parse_arm_vnmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14421(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14422(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b40 {
        parse_arm_vnmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14423(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14424(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b00 {
        parse_arm_vnmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14425(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd00f70) == 0xe100b10 {
        parse_arm_vmov_reg_32_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14426(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b00 {
        parse_arm_vnmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14427(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14428(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b40 {
        parse_arm_vnmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14429(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14430(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b40 {
        parse_arm_vnmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14431(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14432(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a00 {
        parse_arm_vnmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14433(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe100a10 {
        parse_arm_vmov_reg_f32_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14434(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a00 {
        parse_arm_vnmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14435(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe100a10 {
        parse_arm_vmov_reg_f32_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14436(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a40 {
        parse_arm_vnmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14437(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe100a10 {
        parse_arm_vmov_reg_f32_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14438(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a40 {
        parse_arm_vnmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14439(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe100a10 {
        parse_arm_vmov_reg_f32_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14440(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a00 {
        parse_arm_vnmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14441(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe100a10 {
        parse_arm_vmov_reg_f32_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14442(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a00 {
        parse_arm_vnmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14443(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe100a10 {
        parse_arm_vmov_reg_f32_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14444(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a40 {
        parse_arm_vnmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14445(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe100a10 {
        parse_arm_vmov_reg_f32_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14446(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a40 {
        parse_arm_vnmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14447(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff00f10) == 0xe100a10 {
        parse_arm_vmov_reg_f32_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14448(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b00 {
        parse_arm_vnmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14449(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd00f70) == 0xe100b10 {
        parse_arm_vmov_reg_32_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14450(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b00 {
        parse_arm_vnmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14451(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14452(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b40 {
        parse_arm_vnmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14453(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14454(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b40 {
        parse_arm_vnmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14455(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14456(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b00 {
        parse_arm_vnmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14457(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd00f70) == 0xe100b10 {
        parse_arm_vmov_reg_32_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14458(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b00 {
        parse_arm_vnmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14459(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14460(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b40 {
        parse_arm_vnmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14461(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14462(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b40 {
        parse_arm_vnmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14463(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14464(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a00 {
        parse_arm_vmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14465(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14466(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a00 {
        parse_arm_vmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14467(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14468(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a40 {
        parse_arm_vnmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14469(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14470(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a40 {
        parse_arm_vnmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14471(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14472(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a00 {
        parse_arm_vmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14473(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14474(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a00 {
        parse_arm_vmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14475(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14476(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a40 {
        parse_arm_vnmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14477(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14478(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a40 {
        parse_arm_vnmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14479(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14480(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b00 {
        parse_arm_vmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14481(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd00f70) == 0xe000b10 {
        parse_arm_vmov_32_reg_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14482(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b00 {
        parse_arm_vmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14483(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14484(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b40 {
        parse_arm_vnmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14485(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14486(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b40 {
        parse_arm_vnmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14487(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14488(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b00 {
        parse_arm_vmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14489(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd00f70) == 0xe000b10 {
        parse_arm_vmov_32_reg_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14490(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b00 {
        parse_arm_vmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14491(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14492(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b40 {
        parse_arm_vnmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14493(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14494(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b40 {
        parse_arm_vnmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14495(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14496(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a00 {
        parse_arm_vmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14497(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14498(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a00 {
        parse_arm_vmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14499(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14500(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a40 {
        parse_arm_vnmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14501(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14502(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a40 {
        parse_arm_vnmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14503(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14504(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a00 {
        parse_arm_vmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14505(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14506(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a00 {
        parse_arm_vmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14507(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14508(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a40 {
        parse_arm_vnmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14509(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14510(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a40 {
        parse_arm_vnmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14511(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14512(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b00 {
        parse_arm_vmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14513(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd00f70) == 0xe000b10 {
        parse_arm_vmov_32_reg_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14514(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b00 {
        parse_arm_vmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14515(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14516(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b40 {
        parse_arm_vnmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14517(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14518(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b40 {
        parse_arm_vnmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14519(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14520(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b00 {
        parse_arm_vmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14521(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd00f70) == 0xe000b10 {
        parse_arm_vmov_32_reg_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14522(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b00 {
        parse_arm_vmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14523(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14524(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b40 {
        parse_arm_vnmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14525(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14526(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b40 {
        parse_arm_vnmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14527(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14528(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a00 {
        parse_arm_vadd_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14529(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14530(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a00 {
        parse_arm_vadd_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14531(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14532(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a40 {
        parse_arm_vsub_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14533(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14534(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a40 {
        parse_arm_vsub_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14535(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14536(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a00 {
        parse_arm_vadd_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14537(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14538(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a00 {
        parse_arm_vadd_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14539(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14540(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a40 {
        parse_arm_vsub_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14541(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14542(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a40 {
        parse_arm_vsub_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14543(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14544(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b00 {
        parse_arm_vadd_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14545(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd00f70) == 0xe100b10 {
        parse_arm_vmov_reg_32_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14546(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b00 {
        parse_arm_vadd_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14547(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14548(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b40 {
        parse_arm_vsub_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14549(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14550(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b40 {
        parse_arm_vsub_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14551(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14552(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b00 {
        parse_arm_vadd_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14553(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd00f70) == 0xe100b10 {
        parse_arm_vmov_reg_32_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14554(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b00 {
        parse_arm_vadd_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14555(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14556(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b40 {
        parse_arm_vsub_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14557(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14558(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b40 {
        parse_arm_vsub_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14559(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14560(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a00 {
        parse_arm_vadd_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14561(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14562(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a00 {
        parse_arm_vadd_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14563(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14564(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a40 {
        parse_arm_vsub_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14565(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14566(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a40 {
        parse_arm_vsub_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14567(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14568(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a00 {
        parse_arm_vadd_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14569(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14570(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a00 {
        parse_arm_vadd_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14571(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14572(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a40 {
        parse_arm_vsub_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14573(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14574(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a40 {
        parse_arm_vsub_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14575(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14576(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b00 {
        parse_arm_vadd_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14577(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd00f70) == 0xe100b10 {
        parse_arm_vmov_reg_32_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14578(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b00 {
        parse_arm_vadd_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14579(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14580(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b40 {
        parse_arm_vsub_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14581(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14582(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b40 {
        parse_arm_vsub_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14583(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14584(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b00 {
        parse_arm_vadd_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14585(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfd00f70) == 0xe100b10 {
        parse_arm_vmov_reg_32_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14586(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b00 {
        parse_arm_vadd_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14587(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14588(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b40 {
        parse_arm_vsub_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14589(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14590(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b40 {
        parse_arm_vsub_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14591(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14592(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a00 {
        parse_arm_vmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14593(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14594(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a00 {
        parse_arm_vmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14595(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14596(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a40 {
        parse_arm_vmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14597(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14598(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a40 {
        parse_arm_vmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14599(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14600(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a00 {
        parse_arm_vmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14601(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14602(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a00 {
        parse_arm_vmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14603(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14604(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a40 {
        parse_arm_vmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14605(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14606(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a40 {
        parse_arm_vmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14607(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14608(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b00 {
        parse_arm_vmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14609(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14610(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b00 {
        parse_arm_vmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14611(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14612(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b40 {
        parse_arm_vmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14613(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14614(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b40 {
        parse_arm_vmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14615(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14616(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b00 {
        parse_arm_vmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14617(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14618(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b00 {
        parse_arm_vmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14619(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14620(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b40 {
        parse_arm_vmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14621(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14622(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b40 {
        parse_arm_vmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14623(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14624(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a00 {
        parse_arm_vmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14625(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14626(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a00 {
        parse_arm_vmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14627(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14628(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a40 {
        parse_arm_vmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14629(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14630(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a40 {
        parse_arm_vmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14631(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14632(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a00 {
        parse_arm_vmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14633(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14634(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a00 {
        parse_arm_vmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14635(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14636(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a40 {
        parse_arm_vmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14637(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14638(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000a40 {
        parse_arm_vmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14639(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14640(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b00 {
        parse_arm_vmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14641(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14642(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b00 {
        parse_arm_vmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14643(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14644(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b40 {
        parse_arm_vmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14645(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14646(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b40 {
        parse_arm_vmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14647(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14648(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b00 {
        parse_arm_vmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14649(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14650(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b00 {
        parse_arm_vmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14651(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14652(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b40 {
        parse_arm_vmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14653(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14654(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe000b40 {
        parse_arm_vmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14655(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14656(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a00 {
        parse_arm_vnmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14657(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14658(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a00 {
        parse_arm_vnmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14659(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14660(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a40 {
        parse_arm_vnmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14661(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14662(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a40 {
        parse_arm_vnmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14663(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14664(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a00 {
        parse_arm_vnmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14665(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14666(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a00 {
        parse_arm_vnmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14667(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14668(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a40 {
        parse_arm_vnmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14669(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14670(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a40 {
        parse_arm_vnmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14671(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14672(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b00 {
        parse_arm_vnmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14673(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14674(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b00 {
        parse_arm_vnmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14675(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14676(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b40 {
        parse_arm_vnmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14677(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14678(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b40 {
        parse_arm_vnmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14679(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14680(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b00 {
        parse_arm_vnmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14681(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14682(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b00 {
        parse_arm_vnmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14683(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14684(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b40 {
        parse_arm_vnmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14685(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14686(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b40 {
        parse_arm_vnmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14687(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14688(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a00 {
        parse_arm_vnmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14689(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14690(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a00 {
        parse_arm_vnmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14691(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14692(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a40 {
        parse_arm_vnmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14693(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14694(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a40 {
        parse_arm_vnmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14695(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14696(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a00 {
        parse_arm_vnmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14697(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14698(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a00 {
        parse_arm_vnmls_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14699(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14700(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a40 {
        parse_arm_vnmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14701(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14702(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100a40 {
        parse_arm_vnmla_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14703(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14704(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b00 {
        parse_arm_vnmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14705(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14706(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b00 {
        parse_arm_vnmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14707(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14708(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b40 {
        parse_arm_vnmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14709(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14710(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b40 {
        parse_arm_vnmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14711(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14712(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b00 {
        parse_arm_vnmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14713(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14714(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b00 {
        parse_arm_vnmls_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14715(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14716(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b40 {
        parse_arm_vnmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14717(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14718(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe100b40 {
        parse_arm_vnmla_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14719(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14720(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a00 {
        parse_arm_vmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14721(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14722(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a00 {
        parse_arm_vmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14723(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14724(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a40 {
        parse_arm_vnmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14725(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14726(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a40 {
        parse_arm_vnmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14727(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14728(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a00 {
        parse_arm_vmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14729(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14730(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a00 {
        parse_arm_vmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14731(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14732(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a40 {
        parse_arm_vnmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14733(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14734(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a40 {
        parse_arm_vnmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14735(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14736(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b00 {
        parse_arm_vmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14737(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14738(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b00 {
        parse_arm_vmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14739(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14740(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b40 {
        parse_arm_vnmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14741(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14742(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b40 {
        parse_arm_vnmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14743(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14744(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b00 {
        parse_arm_vmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14745(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14746(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b00 {
        parse_arm_vmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14747(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14748(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b40 {
        parse_arm_vnmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14749(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14750(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b40 {
        parse_arm_vnmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14751(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14752(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a00 {
        parse_arm_vmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14753(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14754(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a00 {
        parse_arm_vmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14755(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14756(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a40 {
        parse_arm_vnmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14757(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14758(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a40 {
        parse_arm_vnmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14759(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14760(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a00 {
        parse_arm_vmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14761(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14762(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a00 {
        parse_arm_vmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14763(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14764(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a40 {
        parse_arm_vnmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14765(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14766(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200a40 {
        parse_arm_vnmul_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14767(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14768(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b00 {
        parse_arm_vmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14769(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14770(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b00 {
        parse_arm_vmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14771(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14772(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b40 {
        parse_arm_vnmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14773(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14774(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b40 {
        parse_arm_vnmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14775(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14776(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b00 {
        parse_arm_vmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14777(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14778(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b00 {
        parse_arm_vmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14779(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14780(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b40 {
        parse_arm_vnmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14781(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14782(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe200b40 {
        parse_arm_vnmul_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14783(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14784(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a00 {
        parse_arm_vadd_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14785(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14786(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a00 {
        parse_arm_vadd_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14787(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14788(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a40 {
        parse_arm_vsub_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14789(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14790(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a40 {
        parse_arm_vsub_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14791(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14792(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a00 {
        parse_arm_vadd_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14793(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14794(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a00 {
        parse_arm_vadd_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14795(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14796(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a40 {
        parse_arm_vsub_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14797(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14798(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a40 {
        parse_arm_vsub_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14799(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14800(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b00 {
        parse_arm_vadd_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14801(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14802(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b00 {
        parse_arm_vadd_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14803(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14804(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b40 {
        parse_arm_vsub_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14805(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14806(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b40 {
        parse_arm_vsub_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14807(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14808(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b00 {
        parse_arm_vadd_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14809(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14810(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b00 {
        parse_arm_vadd_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14811(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14812(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b40 {
        parse_arm_vsub_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14813(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14814(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b40 {
        parse_arm_vsub_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14815(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14816(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a00 {
        parse_arm_vadd_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14817(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14818(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a00 {
        parse_arm_vadd_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14819(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14820(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a40 {
        parse_arm_vsub_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14821(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14822(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a40 {
        parse_arm_vsub_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14823(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14824(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a00 {
        parse_arm_vadd_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14825(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14826(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a00 {
        parse_arm_vadd_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14827(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14828(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a40 {
        parse_arm_vsub_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14829(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14830(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300a40 {
        parse_arm_vsub_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14831(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14832(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b00 {
        parse_arm_vadd_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14833(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14834(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b00 {
        parse_arm_vadd_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14835(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14836(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b40 {
        parse_arm_vsub_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14837(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14838(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b40 {
        parse_arm_vsub_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14839(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14840(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b00 {
        parse_arm_vadd_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14841(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14842(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b00 {
        parse_arm_vadd_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14843(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14844(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b40 {
        parse_arm_vsub_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14845(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14846(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe300b40 {
        parse_arm_vsub_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14847(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14848(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800a00 {
        parse_arm_vdiv_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14849(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14850(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800a00 {
        parse_arm_vdiv_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14851(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14852(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14853(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14854(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14855(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14856(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800a00 {
        parse_arm_vdiv_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14857(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14858(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800a00 {
        parse_arm_vdiv_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14859(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14860(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14861(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14862(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14863(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14864(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800b00 {
        parse_arm_vdiv_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14865(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14866(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800b00 {
        parse_arm_vdiv_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14867(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14868(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14869(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14870(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14871(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14872(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800b00 {
        parse_arm_vdiv_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14873(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14874(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800b00 {
        parse_arm_vdiv_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14875(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14876(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14877(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14878(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14879(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14880(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800a00 {
        parse_arm_vdiv_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14881(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14882(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800a00 {
        parse_arm_vdiv_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14883(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14884(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14885(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14886(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14887(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14888(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800a00 {
        parse_arm_vdiv_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14889(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14890(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800a00 {
        parse_arm_vdiv_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14891(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14892(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14893(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14894(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14895(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14896(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800b00 {
        parse_arm_vdiv_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14897(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14898(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800b00 {
        parse_arm_vdiv_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14899(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14900(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14901(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14902(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14903(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14904(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800b00 {
        parse_arm_vdiv_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14905(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14906(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800b00 {
        parse_arm_vdiv_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14907(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14908(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14909(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14910(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14911(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14912(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14913(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14914(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14915(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14916(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14917(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14918(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14919(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14920(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14921(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14922(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14923(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14924(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14925(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14926(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14927(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14928(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14929(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14930(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14931(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14932(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14933(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14934(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14935(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14936(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14937(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14938(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14939(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14940(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14941(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14942(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14943(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14944(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14945(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14946(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14947(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14948(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14949(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14950(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14951(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14952(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14953(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14954(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14955(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14956(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14957(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14958(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14959(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14960(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14961(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14962(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14963(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14964(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14965(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14966(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14967(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14968(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14969(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14970(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14971(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14972(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14973(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14974(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14975(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14976(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14977(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14978(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14979(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14980(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14981(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14982(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14983(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14984(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14985(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14986(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14987(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14988(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14989(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14990(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14991(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14992(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14993(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14994(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14995(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14996(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14997(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14998(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_14999(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15000(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15001(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15002(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15003(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15004(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15005(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15006(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15007(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15008(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15009(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15010(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15011(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15012(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15013(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15014(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15015(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15016(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15017(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15018(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15019(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15020(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15021(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15022(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15023(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15024(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15025(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15026(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15027(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15028(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15029(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15030(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15031(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15032(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15033(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15034(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15035(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15036(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15037(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15038(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15039(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15040(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15041(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15042(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15043(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15044(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0fd0) == 0xeb00a40 {
        parse_arm_vmov_f32_0(ins, pc)
    } else if (ins & 0xfbf0fd0) == 0xeb10a40 {
        parse_arm_vneg_f32_0(ins, pc)
    } else if (ins & 0xfbf0f50) == 0xeb40a40 {
        parse_arm_vcmp_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15045(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15046(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0fd0) == 0xeb00a40 {
        parse_arm_vmov_f32_0(ins, pc)
    } else if (ins & 0xfbf0fd0) == 0xeb10a40 {
        parse_arm_vneg_f32_0(ins, pc)
    } else if (ins & 0xfbf0f50) == 0xeb40a40 {
        parse_arm_vcmp_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15047(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15048(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15049(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15050(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15051(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15052(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0fd0) == 0xeb00ac0 {
        parse_arm_vabs_f32_0(ins, pc)
    } else if (ins & 0xfbf0fd0) == 0xeb70ac0 {
        parse_arm_vcvt_f64_f32_0(ins, pc)
    } else if (ins & 0xfbf0fd0) == 0xeb10ac0 {
        parse_arm_vsqrt_f32_0(ins, pc)
    } else if (ins & 0xfbf0f50) == 0xeb40a40 {
        parse_arm_vcmp_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15053(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15054(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0fd0) == 0xeb00ac0 {
        parse_arm_vabs_f32_0(ins, pc)
    } else if (ins & 0xfbf0fd0) == 0xeb70ac0 {
        parse_arm_vcvt_f64_f32_0(ins, pc)
    } else if (ins & 0xfbf0fd0) == 0xeb10ac0 {
        parse_arm_vsqrt_f32_0(ins, pc)
    } else if (ins & 0xfbf0f50) == 0xeb40a40 {
        parse_arm_vcmp_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15055(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15056(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15057(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15058(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15059(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15060(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0fd0) == 0xeb00b40 {
        parse_arm_vmov_f64_0(ins, pc)
    } else if (ins & 0xfbf0fd0) == 0xeb10b40 {
        parse_arm_vneg_f64_0(ins, pc)
    } else if (ins & 0xfbf0f50) == 0xeb40b40 {
        parse_arm_vcmp_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15061(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15062(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0fd0) == 0xeb00b40 {
        parse_arm_vmov_f64_0(ins, pc)
    } else if (ins & 0xfbf0fd0) == 0xeb10b40 {
        parse_arm_vneg_f64_0(ins, pc)
    } else if (ins & 0xfbf0f50) == 0xeb40b40 {
        parse_arm_vcmp_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15063(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15064(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15065(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15066(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15067(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15068(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0fd0) == 0xeb00bc0 {
        parse_arm_vabs_f64_0(ins, pc)
    } else if (ins & 0xfbf0fd0) == 0xeb70bc0 {
        parse_arm_vcvt_f32_f64_0(ins, pc)
    } else if (ins & 0xfbf0fd0) == 0xeb10bc0 {
        parse_arm_vsqrt_f64_0(ins, pc)
    } else if (ins & 0xfbf0f50) == 0xeb40b40 {
        parse_arm_vcmp_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15069(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15070(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0fd0) == 0xeb00bc0 {
        parse_arm_vabs_f64_0(ins, pc)
    } else if (ins & 0xfbf0fd0) == 0xeb70bc0 {
        parse_arm_vcvt_f32_f64_0(ins, pc)
    } else if (ins & 0xfbf0fd0) == 0xeb10bc0 {
        parse_arm_vsqrt_f64_0(ins, pc)
    } else if (ins & 0xfbf0f50) == 0xeb40b40 {
        parse_arm_vcmp_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15071(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15072(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15073(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15074(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15075(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15076(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbc0fd0) == 0xeb80a40 {
        parse_arm_vcvt_f32_u32_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebd0a40 {
        parse_arm_vcvt_s32_f32_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebc0a40 {
        parse_arm_vcvt_u32_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15077(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15078(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbc0fd0) == 0xeb80a40 {
        parse_arm_vcvt_f32_u32_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebd0a40 {
        parse_arm_vcvt_s32_f32_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebc0a40 {
        parse_arm_vcvt_u32_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15079(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15080(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15081(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15082(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15083(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15084(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbc0fd0) == 0xeb80ac0 {
        parse_arm_vcvt_f32_s32_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebd0a40 {
        parse_arm_vcvt_s32_f32_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebc0a40 {
        parse_arm_vcvt_u32_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15085(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15086(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbc0fd0) == 0xeb80ac0 {
        parse_arm_vcvt_f32_s32_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebd0a40 {
        parse_arm_vcvt_s32_f32_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebc0a40 {
        parse_arm_vcvt_u32_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15087(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15088(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15089(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15090(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15091(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15092(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbc0fd0) == 0xeb80b40 {
        parse_arm_vcvt_f64_u32_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebd0b40 {
        parse_arm_vcvt_s32_f64_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebc0b40 {
        parse_arm_vcvt_u32_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15093(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15094(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbc0fd0) == 0xeb80b40 {
        parse_arm_vcvt_f64_u32_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebd0b40 {
        parse_arm_vcvt_s32_f64_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebc0b40 {
        parse_arm_vcvt_u32_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15095(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15096(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15097(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15098(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15099(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15100(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbc0fd0) == 0xeb80bc0 {
        parse_arm_vcvt_f64_s32_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebd0b40 {
        parse_arm_vcvt_s32_f64_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebc0b40 {
        parse_arm_vcvt_u32_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15101(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15102(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbc0fd0) == 0xeb80bc0 {
        parse_arm_vcvt_f64_s32_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebd0b40 {
        parse_arm_vcvt_s32_f64_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebc0b40 {
        parse_arm_vcvt_u32_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15103(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15104(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800a00 {
        parse_arm_vdiv_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15105(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15106(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800a00 {
        parse_arm_vdiv_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15107(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15108(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15109(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15110(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15111(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15112(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800a00 {
        parse_arm_vdiv_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15113(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15114(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800a00 {
        parse_arm_vdiv_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15115(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15116(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15117(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15118(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15119(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15120(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800b00 {
        parse_arm_vdiv_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15121(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15122(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800b00 {
        parse_arm_vdiv_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15123(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15124(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15125(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15126(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15127(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15128(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800b00 {
        parse_arm_vdiv_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15129(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15130(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800b00 {
        parse_arm_vdiv_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15131(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15132(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15133(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15134(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15135(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15136(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800a00 {
        parse_arm_vdiv_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15137(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15138(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800a00 {
        parse_arm_vdiv_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15139(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15140(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15141(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15142(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15143(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15144(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800a00 {
        parse_arm_vdiv_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15145(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15146(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800a00 {
        parse_arm_vdiv_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15147(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15148(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15149(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15150(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15151(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15152(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800b00 {
        parse_arm_vdiv_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15153(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15154(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800b00 {
        parse_arm_vdiv_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15155(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15156(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15157(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15158(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15159(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15160(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800b00 {
        parse_arm_vdiv_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15161(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15162(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfb00f50) == 0xe800b00 {
        parse_arm_vdiv_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15163(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15164(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15165(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15166(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15167(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15168(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15169(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15170(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15171(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15172(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15173(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15174(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15175(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15176(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15177(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15178(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15179(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15180(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15181(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15182(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15183(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15184(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15185(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15186(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15187(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15188(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15189(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15190(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15191(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15192(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15193(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15194(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15195(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15196(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15197(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15198(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15199(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15200(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15201(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15202(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15203(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15204(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15205(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15206(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15207(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15208(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15209(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15210(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15211(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15212(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15213(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15214(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15215(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15216(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15217(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15218(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15219(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15220(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15221(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15222(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15223(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15224(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15225(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15226(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15227(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15228(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15229(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15230(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15231(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15232(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15233(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0f10) == 0xee10a10 {
        parse_arm_vmsr_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15234(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15235(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0f10) == 0xee10a10 {
        parse_arm_vmsr_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15236(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15237(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0f10) == 0xee10a10 {
        parse_arm_vmsr_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15238(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15239(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0f10) == 0xee10a10 {
        parse_arm_vmsr_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15240(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15241(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0f10) == 0xee10a10 {
        parse_arm_vmsr_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15242(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15243(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0f10) == 0xee10a10 {
        parse_arm_vmsr_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15244(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15245(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0f10) == 0xee10a10 {
        parse_arm_vmsr_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15246(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15247(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0f10) == 0xee10a10 {
        parse_arm_vmsr_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15248(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15249(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15250(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15251(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15252(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15253(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15254(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15255(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15256(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15257(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15258(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15259(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15260(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15261(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15262(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15263(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15264(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15265(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15266(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15267(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15268(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15269(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15270(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15271(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15272(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15273(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15274(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15275(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15276(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15277(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15278(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15279(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15280(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15281(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15282(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15283(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15284(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15285(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15286(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15287(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15288(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15289(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15290(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15291(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15292(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15293(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15294(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15295(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe000010 {
        parse_arm_mcr2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe000010 {
        parse_arm_mcr_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15296(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15297(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0f10) == 0xef10a10 {
        parse_arm_vmrs_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15298(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15299(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0f10) == 0xef10a10 {
        parse_arm_vmrs_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15300(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0fd0) == 0xeb00a40 {
        parse_arm_vmov_f32_0(ins, pc)
    } else if (ins & 0xfbf0fd0) == 0xeb10a40 {
        parse_arm_vneg_f32_0(ins, pc)
    } else if (ins & 0xfbf0f50) == 0xeb40a40 {
        parse_arm_vcmp_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15301(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0f10) == 0xef10a10 {
        parse_arm_vmrs_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15302(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0fd0) == 0xeb00a40 {
        parse_arm_vmov_f32_0(ins, pc)
    } else if (ins & 0xfbf0fd0) == 0xeb10a40 {
        parse_arm_vneg_f32_0(ins, pc)
    } else if (ins & 0xfbf0f50) == 0xeb40a40 {
        parse_arm_vcmp_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15303(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0f10) == 0xef10a10 {
        parse_arm_vmrs_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15304(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15305(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0f10) == 0xef10a10 {
        parse_arm_vmrs_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15306(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15307(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0f10) == 0xef10a10 {
        parse_arm_vmrs_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15308(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0fd0) == 0xeb00ac0 {
        parse_arm_vabs_f32_0(ins, pc)
    } else if (ins & 0xfbf0fd0) == 0xeb70ac0 {
        parse_arm_vcvt_f64_f32_0(ins, pc)
    } else if (ins & 0xfbf0fd0) == 0xeb10ac0 {
        parse_arm_vsqrt_f32_0(ins, pc)
    } else if (ins & 0xfbf0f50) == 0xeb40a40 {
        parse_arm_vcmp_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15309(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0f10) == 0xef10a10 {
        parse_arm_vmrs_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15310(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0fd0) == 0xeb00ac0 {
        parse_arm_vabs_f32_0(ins, pc)
    } else if (ins & 0xfbf0fd0) == 0xeb70ac0 {
        parse_arm_vcvt_f64_f32_0(ins, pc)
    } else if (ins & 0xfbf0fd0) == 0xeb10ac0 {
        parse_arm_vsqrt_f32_0(ins, pc)
    } else if (ins & 0xfbf0f50) == 0xeb40a40 {
        parse_arm_vcmp_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15311(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfff0f10) == 0xef10a10 {
        parse_arm_vmrs_0(ins, pc)
    } else if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15312(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15313(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15314(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15315(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15316(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0fd0) == 0xeb00b40 {
        parse_arm_vmov_f64_0(ins, pc)
    } else if (ins & 0xfbf0fd0) == 0xeb10b40 {
        parse_arm_vneg_f64_0(ins, pc)
    } else if (ins & 0xfbf0f50) == 0xeb40b40 {
        parse_arm_vcmp_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15317(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15318(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0fd0) == 0xeb00b40 {
        parse_arm_vmov_f64_0(ins, pc)
    } else if (ins & 0xfbf0fd0) == 0xeb10b40 {
        parse_arm_vneg_f64_0(ins, pc)
    } else if (ins & 0xfbf0f50) == 0xeb40b40 {
        parse_arm_vcmp_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15319(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15320(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15321(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15322(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15323(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15324(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0fd0) == 0xeb00bc0 {
        parse_arm_vabs_f64_0(ins, pc)
    } else if (ins & 0xfbf0fd0) == 0xeb70bc0 {
        parse_arm_vcvt_f32_f64_0(ins, pc)
    } else if (ins & 0xfbf0fd0) == 0xeb10bc0 {
        parse_arm_vsqrt_f64_0(ins, pc)
    } else if (ins & 0xfbf0f50) == 0xeb40b40 {
        parse_arm_vcmp_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15325(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15326(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbf0fd0) == 0xeb00bc0 {
        parse_arm_vabs_f64_0(ins, pc)
    } else if (ins & 0xfbf0fd0) == 0xeb70bc0 {
        parse_arm_vcvt_f32_f64_0(ins, pc)
    } else if (ins & 0xfbf0fd0) == 0xeb10bc0 {
        parse_arm_vsqrt_f64_0(ins, pc)
    } else if (ins & 0xfbf0f50) == 0xeb40b40 {
        parse_arm_vcmp_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15327(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15328(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15329(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15330(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15331(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15332(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbc0fd0) == 0xeb80a40 {
        parse_arm_vcvt_f32_u32_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebd0a40 {
        parse_arm_vcvt_s32_f32_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebc0a40 {
        parse_arm_vcvt_u32_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15333(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15334(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbc0fd0) == 0xeb80a40 {
        parse_arm_vcvt_f32_u32_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebd0a40 {
        parse_arm_vcvt_s32_f32_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebc0a40 {
        parse_arm_vcvt_u32_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15335(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15336(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15337(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15338(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15339(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15340(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbc0fd0) == 0xeb80ac0 {
        parse_arm_vcvt_f32_s32_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebd0a40 {
        parse_arm_vcvt_s32_f32_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebc0a40 {
        parse_arm_vcvt_u32_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15341(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15342(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbc0fd0) == 0xeb80ac0 {
        parse_arm_vcvt_f32_s32_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebd0a40 {
        parse_arm_vcvt_s32_f32_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebc0a40 {
        parse_arm_vcvt_u32_f32_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15343(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15344(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15345(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15346(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15347(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15348(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbc0fd0) == 0xeb80b40 {
        parse_arm_vcvt_f64_u32_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebd0b40 {
        parse_arm_vcvt_s32_f64_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebc0b40 {
        parse_arm_vcvt_u32_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15349(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15350(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbc0fd0) == 0xeb80b40 {
        parse_arm_vcvt_f64_u32_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebd0b40 {
        parse_arm_vcvt_s32_f64_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebc0b40 {
        parse_arm_vcvt_u32_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15351(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15352(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15353(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15354(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15355(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15356(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbc0fd0) == 0xeb80bc0 {
        parse_arm_vcvt_f64_s32_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebd0b40 {
        parse_arm_vcvt_s32_f64_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebc0b40 {
        parse_arm_vcvt_u32_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15357(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15358(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xfbc0fd0) == 0xeb80bc0 {
        parse_arm_vcvt_f64_s32_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebd0b40 {
        parse_arm_vcvt_s32_f64_0(ins, pc)
    } else if (ins & 0xfbd0f50) == 0xebc0b40 {
        parse_arm_vcvt_u32_f64_0(ins, pc)
    } else if (ins & 0xff000010) == 0xfe000000 {
        parse_arm_cdp2_0(ins, pc)
    } else if (ins & 0xf000010) == 0xe000000 {
        parse_arm_cdp_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15359(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0xff100010) == 0xfe100010 {
        parse_arm_mrc2_0(ins, pc)
    } else if (ins & 0xf100010) == 0xe100010 {
        parse_arm_mrc_0(ins, pc)
    } else {
        None
    }
}
fn parse_arm_15360(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15361(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15362(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15363(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15364(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15365(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15366(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15367(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15368(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15369(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15370(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15371(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15372(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15373(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15374(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15375(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15376(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15377(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15378(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15379(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15380(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15381(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15382(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15383(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15384(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15385(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15386(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15387(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15388(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15389(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15390(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15391(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15392(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15393(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15394(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15395(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15396(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15397(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15398(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15399(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15400(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15401(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15402(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15403(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15404(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15405(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15406(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15407(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15408(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15409(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15410(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15411(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15412(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15413(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15414(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15415(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15416(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15417(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15418(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15419(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15420(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15421(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15422(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15423(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15424(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15425(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15426(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15427(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15428(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15429(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15430(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15431(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15432(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15433(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15434(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15435(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15436(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15437(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15438(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15439(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15440(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15441(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15442(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15443(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15444(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15445(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15446(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15447(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15448(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15449(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15450(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15451(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15452(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15453(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15454(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15455(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15456(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15457(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15458(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15459(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15460(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15461(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15462(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15463(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15464(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15465(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15466(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15467(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15468(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15469(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15470(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15471(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15472(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15473(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15474(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15475(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15476(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15477(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15478(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15479(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15480(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15481(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15482(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15483(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15484(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15485(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15486(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15487(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15488(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15489(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15490(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15491(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15492(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15493(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15494(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15495(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15496(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15497(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15498(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15499(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15500(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15501(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15502(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15503(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15504(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15505(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15506(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15507(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15508(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15509(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15510(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15511(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15512(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15513(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15514(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15515(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15516(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15517(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15518(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15519(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15520(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15521(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15522(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15523(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15524(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15525(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15526(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15527(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15528(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15529(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15530(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15531(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15532(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15533(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15534(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15535(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15536(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15537(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15538(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15539(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15540(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15541(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15542(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15543(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15544(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15545(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15546(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15547(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15548(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15549(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15550(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15551(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15552(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15553(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15554(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15555(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15556(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15557(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15558(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15559(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15560(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15561(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15562(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15563(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15564(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15565(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15566(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15567(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15568(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15569(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15570(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15571(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15572(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15573(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15574(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15575(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15576(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15577(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15578(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15579(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15580(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15581(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15582(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15583(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15584(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15585(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15586(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15587(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15588(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15589(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15590(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15591(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15592(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15593(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15594(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15595(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15596(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15597(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15598(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15599(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15600(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15601(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15602(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15603(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15604(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15605(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15606(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15607(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15608(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15609(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15610(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15611(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15612(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15613(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15614(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15615(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15616(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15617(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15618(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15619(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15620(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15621(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15622(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15623(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15624(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15625(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15626(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15627(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15628(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15629(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15630(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15631(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15632(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15633(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15634(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15635(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15636(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15637(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15638(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15639(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15640(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15641(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15642(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15643(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15644(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15645(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15646(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15647(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15648(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15649(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15650(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15651(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15652(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15653(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15654(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15655(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15656(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15657(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15658(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15659(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15660(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15661(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15662(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15663(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15664(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15665(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15666(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15667(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15668(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15669(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15670(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15671(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15672(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15673(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15674(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15675(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15676(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15677(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15678(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15679(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15680(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15681(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15682(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15683(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15684(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15685(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15686(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15687(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15688(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15689(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15690(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15691(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15692(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15693(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15694(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15695(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15696(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15697(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15698(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15699(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15700(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15701(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15702(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15703(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15704(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15705(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15706(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15707(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15708(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15709(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15710(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15711(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15712(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15713(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15714(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15715(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15716(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15717(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15718(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15719(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15720(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15721(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15722(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15723(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15724(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15725(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15726(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15727(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15728(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15729(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15730(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15731(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15732(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15733(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15734(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15735(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15736(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15737(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15738(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15739(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15740(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15741(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15742(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15743(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15744(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15745(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15746(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15747(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15748(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15749(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15750(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15751(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15752(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15753(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15754(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15755(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15756(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15757(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15758(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15759(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15760(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15761(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15762(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15763(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15764(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15765(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15766(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15767(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15768(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15769(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15770(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15771(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15772(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15773(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15774(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15775(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15776(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15777(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15778(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15779(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15780(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15781(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15782(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15783(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15784(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15785(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15786(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15787(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15788(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15789(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15790(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15791(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15792(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15793(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15794(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15795(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15796(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15797(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15798(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15799(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15800(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15801(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15802(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15803(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15804(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15805(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15806(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15807(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15808(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15809(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15810(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15811(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15812(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15813(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15814(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15815(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15816(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15817(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15818(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15819(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15820(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15821(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15822(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15823(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15824(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15825(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15826(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15827(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15828(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15829(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15830(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15831(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15832(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15833(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15834(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15835(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15836(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15837(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15838(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15839(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15840(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15841(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15842(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15843(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15844(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15845(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15846(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15847(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15848(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15849(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15850(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15851(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15852(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15853(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15854(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15855(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15856(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15857(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15858(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15859(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15860(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15861(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15862(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15863(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15864(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15865(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15866(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15867(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15868(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15869(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15870(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15871(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15872(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15873(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15874(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15875(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15876(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15877(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15878(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15879(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15880(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15881(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15882(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15883(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15884(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15885(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15886(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15887(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15888(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15889(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15890(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15891(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15892(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15893(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15894(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15895(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15896(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15897(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15898(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15899(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15900(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15901(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15902(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15903(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15904(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15905(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15906(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15907(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15908(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15909(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15910(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15911(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15912(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15913(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15914(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15915(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15916(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15917(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15918(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15919(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15920(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15921(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15922(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15923(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15924(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15925(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15926(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15927(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15928(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15929(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15930(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15931(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15932(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15933(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15934(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15935(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15936(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15937(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15938(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15939(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15940(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15941(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15942(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15943(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15944(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15945(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15946(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15947(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15948(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15949(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15950(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15951(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15952(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15953(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15954(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15955(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15956(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15957(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15958(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15959(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15960(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15961(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15962(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15963(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15964(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15965(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15966(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15967(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15968(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15969(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15970(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15971(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15972(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15973(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15974(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15975(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15976(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15977(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15978(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15979(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15980(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15981(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15982(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15983(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15984(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15985(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15986(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15987(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15988(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15989(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15990(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15991(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15992(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15993(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15994(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15995(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15996(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15997(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15998(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_15999(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16000(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16001(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16002(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16003(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16004(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16005(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16006(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16007(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16008(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16009(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16010(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16011(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16012(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16013(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16014(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16015(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16016(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16017(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16018(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16019(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16020(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16021(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16022(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16023(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16024(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16025(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16026(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16027(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16028(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16029(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16030(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16031(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16032(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16033(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16034(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16035(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16036(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16037(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16038(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16039(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16040(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16041(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16042(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16043(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16044(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16045(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16046(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16047(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16048(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16049(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16050(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16051(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16052(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16053(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16054(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16055(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16056(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16057(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16058(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16059(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16060(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16061(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16062(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16063(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16064(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16065(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16066(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16067(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16068(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16069(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16070(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16071(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16072(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16073(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16074(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16075(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16076(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16077(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16078(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16079(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16080(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16081(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16082(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16083(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16084(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16085(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16086(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16087(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16088(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16089(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16090(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16091(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16092(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16093(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16094(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16095(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16096(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16097(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16098(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16099(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16100(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16101(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16102(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16103(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16104(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16105(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16106(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16107(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16108(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16109(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16110(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16111(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16112(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16113(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16114(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16115(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16116(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16117(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16118(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16119(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16120(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16121(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16122(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16123(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16124(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16125(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16126(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16127(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16128(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16129(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16130(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16131(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16132(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16133(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16134(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16135(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16136(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16137(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16138(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16139(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16140(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16141(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16142(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16143(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16144(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16145(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16146(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16147(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16148(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16149(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16150(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16151(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16152(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16153(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16154(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16155(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16156(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16157(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16158(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16159(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16160(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16161(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16162(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16163(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16164(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16165(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16166(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16167(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16168(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16169(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16170(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16171(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16172(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16173(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16174(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16175(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16176(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16177(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16178(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16179(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16180(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16181(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16182(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16183(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16184(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16185(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16186(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16187(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16188(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16189(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16190(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16191(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16192(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16193(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16194(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16195(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16196(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16197(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16198(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16199(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16200(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16201(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16202(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16203(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16204(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16205(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16206(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16207(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16208(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16209(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16210(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16211(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16212(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16213(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16214(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16215(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16216(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16217(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16218(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16219(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16220(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16221(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16222(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16223(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16224(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16225(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16226(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16227(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16228(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16229(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16230(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16231(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16232(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16233(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16234(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16235(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16236(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16237(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16238(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16239(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16240(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16241(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16242(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16243(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16244(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16245(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16246(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16247(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16248(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16249(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16250(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16251(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16252(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16253(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16254(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16255(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16256(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16257(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16258(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16259(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16260(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16261(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16262(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16263(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16264(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16265(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16266(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16267(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16268(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16269(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16270(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16271(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16272(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16273(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16274(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16275(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16276(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16277(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16278(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16279(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16280(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16281(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16282(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16283(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16284(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16285(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16286(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16287(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16288(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16289(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16290(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16291(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16292(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16293(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16294(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16295(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16296(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16297(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16298(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16299(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16300(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16301(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16302(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16303(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16304(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16305(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16306(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16307(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16308(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16309(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16310(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16311(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16312(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16313(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16314(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16315(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16316(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16317(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16318(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16319(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16320(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16321(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16322(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16323(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16324(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16325(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16326(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16327(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16328(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16329(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16330(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16331(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16332(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16333(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16334(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16335(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16336(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16337(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16338(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16339(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16340(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16341(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16342(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16343(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16344(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16345(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16346(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16347(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16348(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16349(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16350(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16351(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16352(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16353(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16354(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16355(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16356(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16357(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16358(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16359(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16360(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16361(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16362(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16363(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16364(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16365(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16366(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16367(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16368(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16369(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16370(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16371(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16372(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16373(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16374(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16375(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16376(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16377(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16378(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16379(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16380(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16381(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16382(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
fn parse_arm_16383(ins: u32, pc: u32) -> Option<Ins> {
    parse_arm_svc_0(ins, pc)
}
pub fn parse_thumb(ins: u32, pc: u32) -> Option<Ins> {
    if (ins & 0x1000) == 0 {
        if (ins & 0x100) == 0 {
            if (ins & 0x4000) == 0 {
                if (ins & 0x800) == 0 {
                    if (ins & 0x2000) == 0 {
                        if (ins & 0x8000) == 0 {
                            if (ins & 0xffc0) == 0x0 {
                                parse_thumb_mov_2(ins, pc)
                            } else if (ins & 0xf800) == 0x0 {
                                parse_thumb_lsl_0(ins, pc)
                            } else {
                                None
                            }
                        } else {
                            parse_thumb_strh_0(ins, pc)
                        }
                    } else {
                        if (ins & 0xf800) == 0xa000 {
                            parse_thumb_add_8(ins, pc)
                        } else if (ins & 0xf800) == 0x2000 {
                            parse_thumb_mov_0(ins, pc)
                        } else {
                            None
                        }
                    }
                } else {
                    if (ins & 0x2000) == 0 {
                        if (ins & 0xf800) == 0x8800 {
                            parse_thumb_ldrh_0(ins, pc)
                        } else if (ins & 0xf800) == 0x800 {
                            parse_thumb_lsr_0(ins, pc)
                        } else {
                            None
                        }
                    } else {
                        if (ins & 0xf800) == 0xa800 {
                            parse_thumb_add_4(ins, pc)
                        } else if (ins & 0xf800) == 0x2800 {
                            parse_thumb_cmp_0(ins, pc)
                        } else {
                            None
                        }
                    }
                }
            } else {
                if (ins & 0x40) == 0 {
                    if (ins & 0x80) == 0 {
                        if (ins & 0x800) == 0 {
                            if (ins & 0x200) == 0 {
                                if (ins & 0x2000) == 0 {
                                    if (ins & 0x400) == 0 {
                                        if (ins & 0xffc0) == 0x4000 {
                                            parse_thumb_and_0(ins, pc)
                                        } else if (ins & 0xf800) == 0xc000 {
                                            parse_thumb_stm_0(ins, pc)
                                        } else {
                                            None
                                        }
                                    } else {
                                        if (ins & 0xff00) == 0x4400 {
                                            parse_thumb_add_3(ins, pc)
                                        } else if (ins & 0xf800) == 0xc000 {
                                            parse_thumb_stm_0(ins, pc)
                                        } else {
                                            None
                                        }
                                    }
                                } else {
                                    if (ins & 0xf800) == 0xe000 {
                                        parse_thumb_b_1(ins, pc)
                                    } else if (ins & 0xf800) == 0x6000 {
                                        parse_thumb_str_0(ins, pc)
                                    } else {
                                        None
                                    }
                                }
                            } else {
                                if (ins & 0x2000) == 0 {
                                    if (ins & 0x400) == 0 {
                                        if (ins & 0xffc0) == 0x4200 {
                                            parse_thumb_tst_0(ins, pc)
                                        } else if (ins & 0xf800) == 0xc000 {
                                            parse_thumb_stm_0(ins, pc)
                                        } else {
                                            None
                                        }
                                    } else {
                                        if (ins & 0xff00) == 0x4600 {
                                            parse_thumb_mov_1(ins, pc)
                                        } else if (ins & 0xf800) == 0xc000 {
                                            parse_thumb_stm_0(ins, pc)
                                        } else {
                                            None
                                        }
                                    }
                                } else {
                                    if (ins & 0xf800) == 0xe000 {
                                        parse_thumb_b_1(ins, pc)
                                    } else if (ins & 0xf800) == 0x6000 {
                                        parse_thumb_str_0(ins, pc)
                                    } else {
                                        None
                                    }
                                }
                            }
                        } else {
                            if (ins & 0x2000) == 0 {
                                if (ins & 0xf800) == 0xc800 {
                                    parse_thumb_ldm_0(ins, pc)
                                } else if (ins & 0xf800) == 0x4800 {
                                    parse_thumb_ldr_2(ins, pc)
                                } else {
                                    None
                                }
                            } else {
                                parse_thumb_ldr_0(ins, pc)
                            }
                        }
                    } else {
                        if (ins & 0x400) == 0 {
                            if (ins & 0x800) == 0 {
                                if (ins & 0x2000) == 0 {
                                    if (ins & 0x200) == 0 {
                                        if (ins & 0xffc0) == 0x4080 {
                                            parse_thumb_lsl_1(ins, pc)
                                        } else if (ins & 0xf800) == 0xc000 {
                                            parse_thumb_stm_0(ins, pc)
                                        } else {
                                            None
                                        }
                                    } else {
                                        if (ins & 0xffc0) == 0x4280 {
                                            parse_thumb_cmp_1(ins, pc)
                                        } else if (ins & 0xf800) == 0xc000 {
                                            parse_thumb_stm_0(ins, pc)
                                        } else {
                                            None
                                        }
                                    }
                                } else {
                                    if (ins & 0xf800) == 0xe000 {
                                        parse_thumb_b_1(ins, pc)
                                    } else if (ins & 0xf800) == 0x6000 {
                                        parse_thumb_str_0(ins, pc)
                                    } else {
                                        None
                                    }
                                }
                            } else {
                                if (ins & 0x2000) == 0 {
                                    if (ins & 0xf800) == 0xc800 {
                                        parse_thumb_ldm_0(ins, pc)
                                    } else if (ins & 0xf800) == 0x4800 {
                                        parse_thumb_ldr_2(ins, pc)
                                    } else {
                                        None
                                    }
                                } else {
                                    parse_thumb_ldr_0(ins, pc)
                                }
                            }
                        } else {
                            if (ins & 0x800) == 0 {
                                if (ins & 0x2000) == 0 {
                                    if (ins & 0x1) == 0 {
                                        if (ins & 0x200) == 0 {
                                            if (ins & 0xff00) == 0x4400 {
                                                parse_thumb_add_3(ins, pc)
                                            } else if (ins & 0xf800) == 0xc000 {
                                                parse_thumb_stm_0(ins, pc)
                                            } else {
                                                None
                                            }
                                        } else {
                                            if (ins & 0xff00) == 0x4600 {
                                                parse_thumb_mov_1(ins, pc)
                                            } else if (ins & 0xf800) == 0xc000 {
                                                parse_thumb_stm_0(ins, pc)
                                            } else {
                                                None
                                            }
                                        }
                                    } else {
                                        if (ins & 0x4) == 0 {
                                            if (ins & 0x200) == 0 {
                                                if (ins & 0xff00) == 0x4400 {
                                                    parse_thumb_add_3(ins, pc)
                                                } else if (ins & 0xf800) == 0xc000 {
                                                    parse_thumb_stm_0(ins, pc)
                                                } else {
                                                    None
                                                }
                                            } else {
                                                if (ins & 0xff00) == 0x4600 {
                                                    parse_thumb_mov_1(ins, pc)
                                                } else if (ins & 0xf800) == 0xc000 {
                                                    parse_thumb_stm_0(ins, pc)
                                                } else {
                                                    None
                                                }
                                            }
                                        } else {
                                            if (ins & 0x200) == 0 {
                                                if (ins & 0x8000) == 0 {
                                                    if (ins & 0xff87) == 0x4485 {
                                                        parse_thumb_add_7(ins, pc)
                                                    } else if (ins & 0xff00) == 0x4400 {
                                                        parse_thumb_add_3(ins, pc)
                                                    } else {
                                                        None
                                                    }
                                                } else {
                                                    parse_thumb_stm_0(ins, pc)
                                                }
                                            } else {
                                                if (ins & 0xff00) == 0x4600 {
                                                    parse_thumb_mov_1(ins, pc)
                                                } else if (ins & 0xf800) == 0xc000 {
                                                    parse_thumb_stm_0(ins, pc)
                                                } else {
                                                    None
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if (ins & 0xf800) == 0xe000 {
                                        parse_thumb_b_1(ins, pc)
                                    } else if (ins & 0xf800) == 0x6000 {
                                        parse_thumb_str_0(ins, pc)
                                    } else {
                                        None
                                    }
                                }
                            } else {
                                if (ins & 0x2000) == 0 {
                                    if (ins & 0xf800) == 0xc800 {
                                        parse_thumb_ldm_0(ins, pc)
                                    } else if (ins & 0xf800) == 0x4800 {
                                        parse_thumb_ldr_2(ins, pc)
                                    } else {
                                        None
                                    }
                                } else {
                                    parse_thumb_ldr_0(ins, pc)
                                }
                            }
                        }
                    }
                } else {
                    if (ins & 0x400) == 0 {
                        if (ins & 0x800) == 0 {
                            if (ins & 0x80) == 0 {
                                if (ins & 0x2000) == 0 {
                                    if (ins & 0x200) == 0 {
                                        if (ins & 0xffc0) == 0x4040 {
                                            parse_thumb_eor_0(ins, pc)
                                        } else if (ins & 0xf800) == 0xc000 {
                                            parse_thumb_stm_0(ins, pc)
                                        } else {
                                            None
                                        }
                                    } else {
                                        if (ins & 0xffc0) == 0x4240 {
                                            parse_thumb_rsb_0(ins, pc)
                                        } else if (ins & 0xf800) == 0xc000 {
                                            parse_thumb_stm_0(ins, pc)
                                        } else {
                                            None
                                        }
                                    }
                                } else {
                                    if (ins & 0xf800) == 0xe000 {
                                        parse_thumb_b_1(ins, pc)
                                    } else if (ins & 0xf800) == 0x6000 {
                                        parse_thumb_str_0(ins, pc)
                                    } else {
                                        None
                                    }
                                }
                            } else {
                                if (ins & 0x2000) == 0 {
                                    if (ins & 0x200) == 0 {
                                        if (ins & 0xffc0) == 0x40c0 {
                                            parse_thumb_lsr_1(ins, pc)
                                        } else if (ins & 0xf800) == 0xc000 {
                                            parse_thumb_stm_0(ins, pc)
                                        } else {
                                            None
                                        }
                                    } else {
                                        if (ins & 0xffc0) == 0x42c0 {
                                            parse_thumb_cmn_0(ins, pc)
                                        } else if (ins & 0xf800) == 0xc000 {
                                            parse_thumb_stm_0(ins, pc)
                                        } else {
                                            None
                                        }
                                    }
                                } else {
                                    if (ins & 0xf800) == 0xe000 {
                                        parse_thumb_b_1(ins, pc)
                                    } else if (ins & 0xf800) == 0x6000 {
                                        parse_thumb_str_0(ins, pc)
                                    } else {
                                        None
                                    }
                                }
                            }
                        } else {
                            if (ins & 0x2000) == 0 {
                                if (ins & 0xf800) == 0xc800 {
                                    parse_thumb_ldm_0(ins, pc)
                                } else if (ins & 0xf800) == 0x4800 {
                                    parse_thumb_ldr_2(ins, pc)
                                } else {
                                    None
                                }
                            } else {
                                parse_thumb_ldr_0(ins, pc)
                            }
                        }
                    } else {
                        if (ins & 0x800) == 0 {
                            if (ins & 0x2000) == 0 {
                                if (ins & 0x1) == 0 {
                                    if (ins & 0x8) == 0 {
                                        if (ins & 0x200) == 0 {
                                            if (ins & 0xff00) == 0x4400 {
                                                parse_thumb_add_3(ins, pc)
                                            } else if (ins & 0xf800) == 0xc000 {
                                                parse_thumb_stm_0(ins, pc)
                                            } else {
                                                None
                                            }
                                        } else {
                                            if (ins & 0xff00) == 0x4600 {
                                                parse_thumb_mov_1(ins, pc)
                                            } else if (ins & 0xf800) == 0xc000 {
                                                parse_thumb_stm_0(ins, pc)
                                            } else {
                                                None
                                            }
                                        }
                                    } else {
                                        if (ins & 0x20) == 0 {
                                            if (ins & 0x200) == 0 {
                                                if (ins & 0xff00) == 0x4400 {
                                                    parse_thumb_add_3(ins, pc)
                                                } else if (ins & 0xf800) == 0xc000 {
                                                    parse_thumb_stm_0(ins, pc)
                                                } else {
                                                    None
                                                }
                                            } else {
                                                if (ins & 0xff00) == 0x4600 {
                                                    parse_thumb_mov_1(ins, pc)
                                                } else if (ins & 0xf800) == 0xc000 {
                                                    parse_thumb_stm_0(ins, pc)
                                                } else {
                                                    None
                                                }
                                            }
                                        } else {
                                            if (ins & 0x200) == 0 {
                                                if (ins & 0x8000) == 0 {
                                                    if (ins & 0xff78) == 0x4468 {
                                                        parse_thumb_add_6(ins, pc)
                                                    } else if (ins & 0xff00) == 0x4400 {
                                                        parse_thumb_add_3(ins, pc)
                                                    } else {
                                                        None
                                                    }
                                                } else {
                                                    parse_thumb_stm_0(ins, pc)
                                                }
                                            } else {
                                                if (ins & 0xff00) == 0x4600 {
                                                    parse_thumb_mov_1(ins, pc)
                                                } else if (ins & 0xf800) == 0xc000 {
                                                    parse_thumb_stm_0(ins, pc)
                                                } else {
                                                    None
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if (ins & 0x4) == 0 {
                                        if (ins & 0x8) == 0 {
                                            if (ins & 0x200) == 0 {
                                                if (ins & 0xff00) == 0x4400 {
                                                    parse_thumb_add_3(ins, pc)
                                                } else if (ins & 0xf800) == 0xc000 {
                                                    parse_thumb_stm_0(ins, pc)
                                                } else {
                                                    None
                                                }
                                            } else {
                                                if (ins & 0xff00) == 0x4600 {
                                                    parse_thumb_mov_1(ins, pc)
                                                } else if (ins & 0xf800) == 0xc000 {
                                                    parse_thumb_stm_0(ins, pc)
                                                } else {
                                                    None
                                                }
                                            }
                                        } else {
                                            if (ins & 0x20) == 0 {
                                                if (ins & 0x200) == 0 {
                                                    if (ins & 0xff00) == 0x4400 {
                                                        parse_thumb_add_3(ins, pc)
                                                    } else if (ins & 0xf800) == 0xc000 {
                                                        parse_thumb_stm_0(ins, pc)
                                                    } else {
                                                        None
                                                    }
                                                } else {
                                                    if (ins & 0xff00) == 0x4600 {
                                                        parse_thumb_mov_1(ins, pc)
                                                    } else if (ins & 0xf800) == 0xc000 {
                                                        parse_thumb_stm_0(ins, pc)
                                                    } else {
                                                        None
                                                    }
                                                }
                                            } else {
                                                if (ins & 0x200) == 0 {
                                                    if (ins & 0x8000) == 0 {
                                                        if (ins & 0xff78) == 0x4468 {
                                                            parse_thumb_add_6(ins, pc)
                                                        } else if (ins & 0xff00) == 0x4400 {
                                                            parse_thumb_add_3(ins, pc)
                                                        } else {
                                                            None
                                                        }
                                                    } else {
                                                        parse_thumb_stm_0(ins, pc)
                                                    }
                                                } else {
                                                    if (ins & 0xff00) == 0x4600 {
                                                        parse_thumb_mov_1(ins, pc)
                                                    } else if (ins & 0xf800) == 0xc000 {
                                                        parse_thumb_stm_0(ins, pc)
                                                    } else {
                                                        None
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if (ins & 0x8) == 0 {
                                            if (ins & 0x80) == 0 {
                                                if (ins & 0x200) == 0 {
                                                    if (ins & 0xff00) == 0x4400 {
                                                        parse_thumb_add_3(ins, pc)
                                                    } else if (ins & 0xf800) == 0xc000 {
                                                        parse_thumb_stm_0(ins, pc)
                                                    } else {
                                                        None
                                                    }
                                                } else {
                                                    if (ins & 0xff00) == 0x4600 {
                                                        parse_thumb_mov_1(ins, pc)
                                                    } else if (ins & 0xf800) == 0xc000 {
                                                        parse_thumb_stm_0(ins, pc)
                                                    } else {
                                                        None
                                                    }
                                                }
                                            } else {
                                                if (ins & 0x200) == 0 {
                                                    if (ins & 0x8000) == 0 {
                                                        if (ins & 0xff87) == 0x4485 {
                                                            parse_thumb_add_7(ins, pc)
                                                        } else if (ins & 0xff00) == 0x4400 {
                                                            parse_thumb_add_3(ins, pc)
                                                        } else {
                                                            None
                                                        }
                                                    } else {
                                                        parse_thumb_stm_0(ins, pc)
                                                    }
                                                } else {
                                                    if (ins & 0xff00) == 0x4600 {
                                                        parse_thumb_mov_1(ins, pc)
                                                    } else if (ins & 0xf800) == 0xc000 {
                                                        parse_thumb_stm_0(ins, pc)
                                                    } else {
                                                        None
                                                    }
                                                }
                                            }
                                        } else {
                                            if (ins & 0x20) == 0 {
                                                if (ins & 0x80) == 0 {
                                                    if (ins & 0x200) == 0 {
                                                        if (ins & 0xff00) == 0x4400 {
                                                            parse_thumb_add_3(ins, pc)
                                                        } else if (ins & 0xf800) == 0xc000 {
                                                            parse_thumb_stm_0(ins, pc)
                                                        } else {
                                                            None
                                                        }
                                                    } else {
                                                        if (ins & 0xff00) == 0x4600 {
                                                            parse_thumb_mov_1(ins, pc)
                                                        } else if (ins & 0xf800) == 0xc000 {
                                                            parse_thumb_stm_0(ins, pc)
                                                        } else {
                                                            None
                                                        }
                                                    }
                                                } else {
                                                    if (ins & 0x200) == 0 {
                                                        if (ins & 0x8000) == 0 {
                                                            if (ins & 0xff87) == 0x4485 {
                                                                parse_thumb_add_7(ins, pc)
                                                            } else if (ins & 0xff00) == 0x4400 {
                                                                parse_thumb_add_3(ins, pc)
                                                            } else {
                                                                None
                                                            }
                                                        } else {
                                                            parse_thumb_stm_0(ins, pc)
                                                        }
                                                    } else {
                                                        if (ins & 0xff00) == 0x4600 {
                                                            parse_thumb_mov_1(ins, pc)
                                                        } else if (ins & 0xf800) == 0xc000 {
                                                            parse_thumb_stm_0(ins, pc)
                                                        } else {
                                                            None
                                                        }
                                                    }
                                                }
                                            } else {
                                                if (ins & 0x80) == 0 {
                                                    if (ins & 0x200) == 0 {
                                                        if (ins & 0x8000) == 0 {
                                                            if (ins & 0xff78) == 0x4468 {
                                                                parse_thumb_add_6(ins, pc)
                                                            } else if (ins & 0xff00) == 0x4400 {
                                                                parse_thumb_add_3(ins, pc)
                                                            } else {
                                                                None
                                                            }
                                                        } else {
                                                            parse_thumb_stm_0(ins, pc)
                                                        }
                                                    } else {
                                                        if (ins & 0xff00) == 0x4600 {
                                                            parse_thumb_mov_1(ins, pc)
                                                        } else if (ins & 0xf800) == 0xc000 {
                                                            parse_thumb_stm_0(ins, pc)
                                                        } else {
                                                            None
                                                        }
                                                    }
                                                } else {
                                                    if (ins & 0x200) == 0 {
                                                        if (ins & 0x8000) == 0 {
                                                            if (ins & 0xff78) == 0x4468 {
                                                                parse_thumb_add_6(ins, pc)
                                                            } else if (ins & 0xff87) == 0x4485 {
                                                                parse_thumb_add_7(ins, pc)
                                                            } else if (ins & 0xff00) == 0x4400 {
                                                                parse_thumb_add_3(ins, pc)
                                                            } else {
                                                                None
                                                            }
                                                        } else {
                                                            parse_thumb_stm_0(ins, pc)
                                                        }
                                                    } else {
                                                        if (ins & 0xff00) == 0x4600 {
                                                            parse_thumb_mov_1(ins, pc)
                                                        } else if (ins & 0xf800) == 0xc000 {
                                                            parse_thumb_stm_0(ins, pc)
                                                        } else {
                                                            None
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if (ins & 0xf800) == 0xe000 {
                                    parse_thumb_b_1(ins, pc)
                                } else if (ins & 0xf800) == 0x6000 {
                                    parse_thumb_str_0(ins, pc)
                                } else {
                                    None
                                }
                            }
                        } else {
                            if (ins & 0x2000) == 0 {
                                if (ins & 0xf800) == 0xc800 {
                                    parse_thumb_ldm_0(ins, pc)
                                } else if (ins & 0xf800) == 0x4800 {
                                    parse_thumb_ldr_2(ins, pc)
                                } else {
                                    None
                                }
                            } else {
                                parse_thumb_ldr_0(ins, pc)
                            }
                        }
                    }
                }
            }
        } else {
            if (ins & 0x4000) == 0 {
                if (ins & 0x800) == 0 {
                    if (ins & 0x2000) == 0 {
                        if (ins & 0xf800) == 0x0 {
                            parse_thumb_lsl_0(ins, pc)
                        } else if (ins & 0xf800) == 0x8000 {
                            parse_thumb_strh_0(ins, pc)
                        } else {
                            None
                        }
                    } else {
                        if (ins & 0xf800) == 0xa000 {
                            parse_thumb_add_8(ins, pc)
                        } else if (ins & 0xf800) == 0x2000 {
                            parse_thumb_mov_0(ins, pc)
                        } else {
                            None
                        }
                    }
                } else {
                    if (ins & 0x2000) == 0 {
                        if (ins & 0xf800) == 0x8800 {
                            parse_thumb_ldrh_0(ins, pc)
                        } else if (ins & 0xf800) == 0x800 {
                            parse_thumb_lsr_0(ins, pc)
                        } else {
                            None
                        }
                    } else {
                        if (ins & 0xf800) == 0xa800 {
                            parse_thumb_add_4(ins, pc)
                        } else if (ins & 0xf800) == 0x2800 {
                            parse_thumb_cmp_0(ins, pc)
                        } else {
                            None
                        }
                    }
                }
            } else {
                if (ins & 0x200) == 0 {
                    if (ins & 0x800) == 0 {
                        if (ins & 0x40) == 0 {
                            if (ins & 0x2000) == 0 {
                                if (ins & 0x80) == 0 {
                                    if (ins & 0x400) == 0 {
                                        if (ins & 0xffc0) == 0x4100 {
                                            parse_thumb_asr_1(ins, pc)
                                        } else if (ins & 0xf800) == 0xc000 {
                                            parse_thumb_stm_0(ins, pc)
                                        } else {
                                            None
                                        }
                                    } else {
                                        if (ins & 0xff00) == 0x4500 {
                                            parse_thumb_cmp_2(ins, pc)
                                        } else if (ins & 0xf800) == 0xc000 {
                                            parse_thumb_stm_0(ins, pc)
                                        } else {
                                            None
                                        }
                                    }
                                } else {
                                    if (ins & 0x400) == 0 {
                                        if (ins & 0xffc0) == 0x4180 {
                                            parse_thumb_sbc_0(ins, pc)
                                        } else if (ins & 0xf800) == 0xc000 {
                                            parse_thumb_stm_0(ins, pc)
                                        } else {
                                            None
                                        }
                                    } else {
                                        if (ins & 0xff00) == 0x4500 {
                                            parse_thumb_cmp_2(ins, pc)
                                        } else if (ins & 0xf800) == 0xc000 {
                                            parse_thumb_stm_0(ins, pc)
                                        } else {
                                            None
                                        }
                                    }
                                }
                            } else {
                                if (ins & 0xf800) == 0xe000 {
                                    parse_thumb_b_1(ins, pc)
                                } else if (ins & 0xf800) == 0x6000 {
                                    parse_thumb_str_0(ins, pc)
                                } else {
                                    None
                                }
                            }
                        } else {
                            if (ins & 0x2000) == 0 {
                                if (ins & 0x80) == 0 {
                                    if (ins & 0x400) == 0 {
                                        if (ins & 0xffc0) == 0x4140 {
                                            parse_thumb_adc_0(ins, pc)
                                        } else if (ins & 0xf800) == 0xc000 {
                                            parse_thumb_stm_0(ins, pc)
                                        } else {
                                            None
                                        }
                                    } else {
                                        if (ins & 0xff00) == 0x4500 {
                                            parse_thumb_cmp_2(ins, pc)
                                        } else if (ins & 0xf800) == 0xc000 {
                                            parse_thumb_stm_0(ins, pc)
                                        } else {
                                            None
                                        }
                                    }
                                } else {
                                    if (ins & 0x400) == 0 {
                                        if (ins & 0xffc0) == 0x41c0 {
                                            parse_thumb_ror_0(ins, pc)
                                        } else if (ins & 0xf800) == 0xc000 {
                                            parse_thumb_stm_0(ins, pc)
                                        } else {
                                            None
                                        }
                                    } else {
                                        if (ins & 0xff00) == 0x4500 {
                                            parse_thumb_cmp_2(ins, pc)
                                        } else if (ins & 0xf800) == 0xc000 {
                                            parse_thumb_stm_0(ins, pc)
                                        } else {
                                            None
                                        }
                                    }
                                }
                            } else {
                                if (ins & 0xf800) == 0xe000 {
                                    parse_thumb_b_1(ins, pc)
                                } else if (ins & 0xf800) == 0x6000 {
                                    parse_thumb_str_0(ins, pc)
                                } else {
                                    None
                                }
                            }
                        }
                    } else {
                        if (ins & 0x2000) == 0 {
                            if (ins & 0xf800) == 0xc800 {
                                parse_thumb_ldm_0(ins, pc)
                            } else if (ins & 0xf800) == 0x4800 {
                                parse_thumb_ldr_2(ins, pc)
                            } else {
                                None
                            }
                        } else {
                            parse_thumb_ldr_0(ins, pc)
                        }
                    }
                } else {
                    if (ins & 0x80) == 0 {
                        if (ins & 0x800) == 0 {
                            if (ins & 0x2000) == 0 {
                                if (ins & 0x40) == 0 {
                                    if (ins & 0x400) == 0 {
                                        if (ins & 0xffc0) == 0x4300 {
                                            parse_thumb_orr_0(ins, pc)
                                        } else if (ins & 0xf800) == 0xc000 {
                                            parse_thumb_stm_0(ins, pc)
                                        } else {
                                            None
                                        }
                                    } else {
                                        if (ins & 0xff87) == 0x4700 {
                                            parse_thumb_bx_0(ins, pc)
                                        } else if (ins & 0xf800) == 0xc000 {
                                            parse_thumb_stm_0(ins, pc)
                                        } else {
                                            None
                                        }
                                    }
                                } else {
                                    if (ins & 0x400) == 0 {
                                        if (ins & 0xffc0) == 0x4340 {
                                            parse_thumb_mul_0(ins, pc)
                                        } else if (ins & 0xf800) == 0xc000 {
                                            parse_thumb_stm_0(ins, pc)
                                        } else {
                                            None
                                        }
                                    } else {
                                        if (ins & 0xff87) == 0x4700 {
                                            parse_thumb_bx_0(ins, pc)
                                        } else if (ins & 0xf800) == 0xc000 {
                                            parse_thumb_stm_0(ins, pc)
                                        } else {
                                            None
                                        }
                                    }
                                }
                            } else {
                                if (ins & 0xf800) == 0xe000 {
                                    parse_thumb_b_1(ins, pc)
                                } else if (ins & 0xf800) == 0x6000 {
                                    parse_thumb_str_0(ins, pc)
                                } else {
                                    None
                                }
                            }
                        } else {
                            if (ins & 0x2000) == 0 {
                                if (ins & 0xf800) == 0xc800 {
                                    parse_thumb_ldm_0(ins, pc)
                                } else if (ins & 0xf800) == 0x4800 {
                                    parse_thumb_ldr_2(ins, pc)
                                } else {
                                    None
                                }
                            } else {
                                parse_thumb_ldr_0(ins, pc)
                            }
                        }
                    } else {
                        if (ins & 0x800) == 0 {
                            if (ins & 0x2000) == 0 {
                                if (ins & 0x40) == 0 {
                                    if (ins & 0x400) == 0 {
                                        if (ins & 0xffc0) == 0x4380 {
                                            parse_thumb_bic_0(ins, pc)
                                        } else if (ins & 0xf800) == 0xc000 {
                                            parse_thumb_stm_0(ins, pc)
                                        } else {
                                            None
                                        }
                                    } else {
                                        if (ins & 0xff87) == 0x4780 {
                                            parse_thumb_blx_1(ins, pc)
                                        } else if (ins & 0xf800) == 0xc000 {
                                            parse_thumb_stm_0(ins, pc)
                                        } else {
                                            None
                                        }
                                    }
                                } else {
                                    if (ins & 0x400) == 0 {
                                        if (ins & 0xffc0) == 0x43c0 {
                                            parse_thumb_mvn_0(ins, pc)
                                        } else if (ins & 0xf800) == 0xc000 {
                                            parse_thumb_stm_0(ins, pc)
                                        } else {
                                            None
                                        }
                                    } else {
                                        if (ins & 0xff87) == 0x4780 {
                                            parse_thumb_blx_1(ins, pc)
                                        } else if (ins & 0xf800) == 0xc000 {
                                            parse_thumb_stm_0(ins, pc)
                                        } else {
                                            None
                                        }
                                    }
                                }
                            } else {
                                if (ins & 0xf800) == 0xe000 {
                                    parse_thumb_b_1(ins, pc)
                                } else if (ins & 0xf800) == 0x6000 {
                                    parse_thumb_str_0(ins, pc)
                                } else {
                                    None
                                }
                            }
                        } else {
                            if (ins & 0x2000) == 0 {
                                if (ins & 0xf800) == 0xc800 {
                                    parse_thumb_ldm_0(ins, pc)
                                } else if (ins & 0xf800) == 0x4800 {
                                    parse_thumb_ldr_2(ins, pc)
                                } else {
                                    None
                                }
                            } else {
                                parse_thumb_ldr_0(ins, pc)
                            }
                        }
                    }
                }
            }
        }
    } else {
        if (ins & 0x200) == 0 {
            if (ins & 0x2000) == 0 {
                if (ins & 0x800) == 0 {
                    if (ins & 0x4000) == 0 {
                        if (ins & 0xf800) == 0x1000 {
                            parse_thumb_asr_0(ins, pc)
                        } else if (ins & 0xf800) == 0x9000 {
                            parse_thumb_str_1(ins, pc)
                        } else {
                            None
                        }
                    } else {
                        if (ins & 0x400) == 0 {
                            if (ins & 0xfe00) == 0x5000 {
                                parse_thumb_str_2(ins, pc)
                            } else if (ins & 0xf000) == 0xd000 {
                                parse_thumb_b_0(ins, pc)
                            } else {
                                None
                            }
                        } else {
                            if (ins & 0xfe00) == 0x5400 {
                                parse_thumb_strb_1(ins, pc)
                            } else if (ins & 0xf000) == 0xd000 {
                                parse_thumb_b_0(ins, pc)
                            } else {
                                None
                            }
                        }
                    }
                } else {
                    if (ins & 0x4000) == 0 {
                        if (ins & 0x400) == 0 {
                            if (ins & 0xfe00) == 0x1800 {
                                parse_thumb_add_2(ins, pc)
                            } else if (ins & 0xf800) == 0x9800 {
                                parse_thumb_ldr_1(ins, pc)
                            } else {
                                None
                            }
                        } else {
                            if (ins & 0xfe00) == 0x1c00 {
                                parse_thumb_add_0(ins, pc)
                            } else if (ins & 0xf800) == 0x9800 {
                                parse_thumb_ldr_1(ins, pc)
                            } else {
                                None
                            }
                        }
                    } else {
                        if (ins & 0x400) == 0 {
                            if (ins & 0xfe00) == 0x5800 {
                                parse_thumb_ldr_3(ins, pc)
                            } else if (ins & 0xf000) == 0xd000 {
                                parse_thumb_b_0(ins, pc)
                            } else {
                                None
                            }
                        } else {
                            if (ins & 0xfe00) == 0x5c00 {
                                parse_thumb_ldrb_1(ins, pc)
                            } else if (ins & 0xf000) == 0xd000 {
                                parse_thumb_b_0(ins, pc)
                            } else {
                                None
                            }
                        }
                    }
                }
            } else {
                if (ins & 0x4000) == 0 {
                    if (ins & 0x400) == 0 {
                        if (ins & 0x8000) == 0 {
                            if (ins & 0xf800) == 0x3000 {
                                parse_thumb_add_1(ins, pc)
                            } else if (ins & 0xf800) == 0x3800 {
                                parse_thumb_sub_1(ins, pc)
                            } else {
                                None
                            }
                        } else {
                            if (ins & 0xff80) == 0xb000 {
                                parse_thumb_add_5(ins, pc)
                            } else if (ins & 0xff80) == 0xb080 {
                                parse_thumb_sub_3(ins, pc)
                            } else {
                                None
                            }
                        }
                    } else {
                        if (ins & 0x800) == 0 {
                            if (ins & 0xfe00) == 0xb400 {
                                parse_thumb_push_0(ins, pc)
                            } else if (ins & 0xf800) == 0x3000 {
                                parse_thumb_add_1(ins, pc)
                            } else {
                                None
                            }
                        } else {
                            if (ins & 0xfe00) == 0xbc00 {
                                parse_thumb_pop_0(ins, pc)
                            } else if (ins & 0xf800) == 0x3800 {
                                parse_thumb_sub_1(ins, pc)
                            } else {
                                None
                            }
                        }
                    }
                } else {
                    if (ins & 0x8000) == 0 {
                        if (ins & 0xf800) == 0x7800 {
                            parse_thumb_ldrb_0(ins, pc)
                        } else if (ins & 0xf800) == 0x7000 {
                            parse_thumb_strb_0(ins, pc)
                        } else {
                            None
                        }
                    } else {
                        if (ins & 0xd000f800) == 0xd000f000 {
                            parse_thumb_bl_0(ins, pc)
                        } else if (ins & 0xd000f800) == 0xc000f000 {
                            parse_thumb_blx_0(ins, pc)
                        } else {
                            None
                        }
                    }
                }
            }
        } else {
            if (ins & 0x800) == 0 {
                if (ins & 0x4000) == 0 {
                    if (ins & 0x40) == 0 {
                        if (ins & 0x2000) == 0 {
                            if (ins & 0xf800) == 0x1000 {
                                parse_thumb_asr_0(ins, pc)
                            } else if (ins & 0xf800) == 0x9000 {
                                parse_thumb_str_1(ins, pc)
                            } else {
                                None
                            }
                        } else {
                            if (ins & 0x80) == 0 {
                                if (ins & 0xffc0) == 0xb200 {
                                    parse_thumb_sxth_0(ins, pc)
                                } else if (ins & 0xf800) == 0x3000 {
                                    parse_thumb_add_1(ins, pc)
                                } else {
                                    None
                                }
                            } else {
                                if (ins & 0xffc0) == 0xb280 {
                                    parse_thumb_uxth_0(ins, pc)
                                } else if (ins & 0xf800) == 0x3000 {
                                    parse_thumb_add_1(ins, pc)
                                } else {
                                    None
                                }
                            }
                        }
                    } else {
                        if (ins & 0x400) == 0 {
                            if (ins & 0x2000) == 0 {
                                if (ins & 0xf800) == 0x1000 {
                                    parse_thumb_asr_0(ins, pc)
                                } else if (ins & 0xf800) == 0x9000 {
                                    parse_thumb_str_1(ins, pc)
                                } else {
                                    None
                                }
                            } else {
                                if (ins & 0x80) == 0 {
                                    if (ins & 0xffc0) == 0xb240 {
                                        parse_thumb_sxtb_0(ins, pc)
                                    } else if (ins & 0xf800) == 0x3000 {
                                        parse_thumb_add_1(ins, pc)
                                    } else {
                                        None
                                    }
                                } else {
                                    if (ins & 0xffc0) == 0xb2c0 {
                                        parse_thumb_uxtb_0(ins, pc)
                                    } else if (ins & 0xf800) == 0x3000 {
                                        parse_thumb_add_1(ins, pc)
                                    } else {
                                        None
                                    }
                                }
                            }
                        } else {
                            if (ins & 0x2000) == 0 {
                                if (ins & 0xf800) == 0x1000 {
                                    parse_thumb_asr_0(ins, pc)
                                } else if (ins & 0xf800) == 0x9000 {
                                    parse_thumb_str_1(ins, pc)
                                } else {
                                    None
                                }
                            } else {
                                if (ins & 0x20) == 0 {
                                    if (ins & 0xffe0) == 0xb640 {
                                        parse_thumb_setend_0(ins, pc)
                                    } else if (ins & 0xf800) == 0x3000 {
                                        parse_thumb_add_1(ins, pc)
                                    } else {
                                        None
                                    }
                                } else {
                                    if (ins & 0xffe8) == 0xb660 {
                                        parse_thumb_cps_0(ins, pc)
                                    } else if (ins & 0xf800) == 0x3000 {
                                        parse_thumb_add_1(ins, pc)
                                    } else {
                                        None
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if (ins & 0x2000) == 0 {
                        if (ins & 0x400) == 0 {
                            if (ins & 0xfe00) == 0x5200 {
                                parse_thumb_strh_1(ins, pc)
                            } else if (ins & 0xf000) == 0xd000 {
                                parse_thumb_b_0(ins, pc)
                            } else {
                                None
                            }
                        } else {
                            if (ins & 0xfe00) == 0x5600 {
                                parse_thumb_ldrsb_0(ins, pc)
                            } else if (ins & 0xf000) == 0xd000 {
                                parse_thumb_b_0(ins, pc)
                            } else {
                                None
                            }
                        }
                    } else {
                        if (ins & 0x8000) == 0 {
                            parse_thumb_strb_0(ins, pc)
                        } else {
                            if (ins & 0xd000f800) == 0xd000f000 {
                                parse_thumb_bl_0(ins, pc)
                            } else if (ins & 0xd000f800) == 0xc000f000 {
                                parse_thumb_blx_0(ins, pc)
                            } else {
                                None
                            }
                        }
                    }
                }
            } else {
                if (ins & 0x2000) == 0 {
                    if (ins & 0x400) == 0 {
                        if (ins & 0x4000) == 0 {
                            if (ins & 0xfe00) == 0x1a00 {
                                parse_thumb_sub_2(ins, pc)
                            } else if (ins & 0xf800) == 0x9800 {
                                parse_thumb_ldr_1(ins, pc)
                            } else {
                                None
                            }
                        } else {
                            if (ins & 0xfe00) == 0x5a00 {
                                parse_thumb_ldrh_1(ins, pc)
                            } else if (ins & 0xf000) == 0xd000 {
                                parse_thumb_b_0(ins, pc)
                            } else {
                                None
                            }
                        }
                    } else {
                        if (ins & 0x4000) == 0 {
                            if (ins & 0xfe00) == 0x1e00 {
                                parse_thumb_sub_0(ins, pc)
                            } else if (ins & 0xf800) == 0x9800 {
                                parse_thumb_ldr_1(ins, pc)
                            } else {
                                None
                            }
                        } else {
                            if (ins & 0x100) == 0 {
                                if (ins & 0x8000) == 0 {
                                    parse_thumb_ldrsh_0(ins, pc)
                                } else {
                                    if (ins & 0xff00) == 0xde00 {
                                        parse_thumb_udf_0(ins, pc)
                                    } else if (ins & 0xf000) == 0xd000 {
                                        parse_thumb_b_0(ins, pc)
                                    } else {
                                        None
                                    }
                                }
                            } else {
                                if (ins & 0x8000) == 0 {
                                    parse_thumb_ldrsh_0(ins, pc)
                                } else {
                                    if (ins & 0xff00) == 0xdf00 {
                                        parse_thumb_svc_0(ins, pc)
                                    } else if (ins & 0xf000) == 0xd000 {
                                        parse_thumb_b_0(ins, pc)
                                    } else {
                                        None
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if (ins & 0x40) == 0 {
                        if (ins & 0x400) == 0 {
                            if (ins & 0x4000) == 0 {
                                if (ins & 0xffc0) == 0xba00 {
                                    parse_thumb_rev_0(ins, pc)
                                } else if (ins & 0xf800) == 0x3800 {
                                    parse_thumb_sub_1(ins, pc)
                                } else {
                                    None
                                }
                            } else {
                                parse_thumb_ldrb_0(ins, pc)
                            }
                        } else {
                            if (ins & 0x8000) == 0 {
                                if (ins & 0xf800) == 0x7800 {
                                    parse_thumb_ldrb_0(ins, pc)
                                } else if (ins & 0xf800) == 0x3800 {
                                    parse_thumb_sub_1(ins, pc)
                                } else {
                                    None
                                }
                            } else {
                                if (ins & 0xffff) == 0xbf00 {
                                    parse_thumb_nop_0(ins, pc)
                                } else if (ins & 0xff00) == 0xbe00 {
                                    parse_thumb_bkpt_0(ins, pc)
                                } else {
                                    None
                                }
                            }
                        }
                    } else {
                        if (ins & 0x8000) == 0 {
                            if (ins & 0xf800) == 0x7800 {
                                parse_thumb_ldrb_0(ins, pc)
                            } else if (ins & 0xf800) == 0x3800 {
                                parse_thumb_sub_1(ins, pc)
                            } else {
                                None
                            }
                        } else {
                            if (ins & 0x80) == 0 {
                                if (ins & 0xffc0) == 0xba40 {
                                    parse_thumb_rev16_0(ins, pc)
                                } else if (ins & 0xff00) == 0xbe00 {
                                    parse_thumb_bkpt_0(ins, pc)
                                } else {
                                    None
                                }
                            } else {
                                if (ins & 0xffc0) == 0xbac0 {
                                    parse_thumb_revsh_0(ins, pc)
                                } else if (ins & 0xff00) == 0xbe00 {
                                    parse_thumb_bkpt_0(ins, pc)
                                } else {
                                    None
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_arm_adc_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let s = (((value) >> 20) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let op2 = Op2::parse(value, pc)?;
    Some(Ins::Adc { s, cond, rd, rn, op2 })
}
fn parse_thumb_adc_0(value: u32, pc: u32) -> Option<Ins> {
    let s = (1) != 0;
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let rn = Reg::parse((value) & 0x7, pc);
    let op2 = Op2::ShiftImm(ShiftImm {
        rm: Reg::parse(((value) >> 3) & 0x7, pc),
        shift_op: ShiftOp::default(),
        imm: 0,
    });
    Some(Ins::Adc { s, cond, rd, rn, op2 })
}
fn parse_arm_add_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let s = (((value) >> 20) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let op2 = Op2::parse(value, pc)?;
    Some(Ins::Add { s, cond, rd, rn, op2 })
}
fn parse_thumb_add_0(value: u32, pc: u32) -> Option<Ins> {
    let s = (1) != 0;
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let rn = Reg::parse(((value) >> 3) & 0x7, pc);
    let op2 = Op2::Imm(((value) >> 6) & 0x7);
    Some(Ins::Add { s, cond, rd, rn, op2 })
}
fn parse_thumb_add_1(value: u32, pc: u32) -> Option<Ins> {
    let s = (1) != 0;
    let cond = Cond::default();
    let rd = Reg::parse(((value) >> 8) & 0x7, pc);
    let rn = Reg::parse(((value) >> 8) & 0x7, pc);
    let op2 = Op2::Imm((value) & 0xff);
    Some(Ins::Add { s, cond, rd, rn, op2 })
}
fn parse_thumb_add_2(value: u32, pc: u32) -> Option<Ins> {
    let s = (1) != 0;
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let rn = Reg::parse(((value) >> 3) & 0x7, pc);
    let op2 = Op2::ShiftImm(ShiftImm {
        rm: Reg::parse(((value) >> 6) & 0x7, pc),
        shift_op: ShiftOp::default(),
        imm: 0,
    });
    Some(Ins::Add { s, cond, rd, rn, op2 })
}
fn parse_thumb_add_3(value: u32, pc: u32) -> Option<Ins> {
    let s = false;
    let cond = Cond::default();
    let rd = Reg::parse(((((value) >> 7) & 0x1) << 3) | ((value) & 0x7), pc);
    let rn = Reg::parse(((((value) >> 7) & 0x1) << 3) | ((value) & 0x7), pc);
    let op2 = Op2::ShiftImm(ShiftImm {
        rm: Reg::parse(((value) >> 3) & 0xf, pc),
        shift_op: ShiftOp::default(),
        imm: 0,
    });
    Some(Ins::Add { s, cond, rd, rn, op2 })
}
fn parse_thumb_add_4(value: u32, pc: u32) -> Option<Ins> {
    let s = false;
    let cond = Cond::default();
    let rd = Reg::parse(((value) >> 8) & 0x7, pc);
    let rn = Reg::parse(13, pc);
    let op2 = Op2::Imm(((value) & 0xff) << 2);
    Some(Ins::Add { s, cond, rd, rn, op2 })
}
fn parse_thumb_add_5(value: u32, pc: u32) -> Option<Ins> {
    let s = false;
    let cond = Cond::default();
    let rd = Reg::parse(13, pc);
    let rn = Reg::parse(13, pc);
    let op2 = Op2::Imm(((value) & 0x7f) << 2);
    Some(Ins::Add { s, cond, rd, rn, op2 })
}
fn parse_thumb_add_6(value: u32, pc: u32) -> Option<Ins> {
    let s = false;
    let cond = Cond::default();
    let rd = Reg::parse(((((value) >> 7) & 0x1) << 3) | ((value) & 0x7), pc);
    let rn = Reg::parse(13, pc);
    let op2 = Op2::ShiftImm(ShiftImm {
        rm: Reg::parse(((((value) >> 7) & 0x1) << 3) | ((value) & 0x7), pc),
        shift_op: ShiftOp::default(),
        imm: 0,
    });
    Some(Ins::Add { s, cond, rd, rn, op2 })
}
fn parse_thumb_add_7(value: u32, pc: u32) -> Option<Ins> {
    let s = false;
    let cond = Cond::default();
    let rd = Reg::parse(13, pc);
    let rn = Reg::parse(13, pc);
    let op2 = Op2::ShiftImm(ShiftImm {
        rm: Reg::parse(((value) >> 3) & 0xf, pc),
        shift_op: ShiftOp::default(),
        imm: 0,
    });
    Some(Ins::Add { s, cond, rd, rn, op2 })
}
fn parse_thumb_add_8(value: u32, pc: u32) -> Option<Ins> {
    let s = false;
    let cond = Cond::default();
    let rd = Reg::parse(((value) >> 8) & 0x7, pc);
    let rn = Reg::parse(15, pc);
    let op2 = Op2::Imm(((value) & 0xff) << 2);
    Some(Ins::Add { s, cond, rd, rn, op2 })
}
fn parse_arm_and_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let s = (((value) >> 20) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let op2 = Op2::parse(value, pc)?;
    Some(Ins::And { s, cond, rd, rn, op2 })
}
fn parse_thumb_and_0(value: u32, pc: u32) -> Option<Ins> {
    let s = (1) != 0;
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let rn = Reg::parse((value) & 0x7, pc);
    let op2 = Op2::ShiftImm(ShiftImm {
        rm: Reg::parse(((value) >> 3) & 0x7, pc),
        shift_op: ShiftOp::default(),
        imm: 0,
    });
    Some(Ins::And { s, cond, rd, rn, op2 })
}
fn parse_arm_asr_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let s = (((value) >> 20) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse((value) & 0xf, pc);
    let op2 = Op2Shift::parse(value, pc)?;
    Some(Ins::Asr { s, cond, rd, rn, op2 })
}
fn parse_thumb_asr_0(value: u32, pc: u32) -> Option<Ins> {
    let s = (1) != 0;
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let rn = Reg::parse(((value) >> 3) & 0x7, pc);
    let op2 = Op2Shift::Imm(
        if (((value) >> 6) & 0x1f) != 0 { (((value) >> 6) & 0x1f) } else { 32 },
    );
    Some(Ins::Asr { s, cond, rd, rn, op2 })
}
fn parse_thumb_asr_1(value: u32, pc: u32) -> Option<Ins> {
    let s = (1) != 0;
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let rn = Reg::parse((value) & 0x7, pc);
    let op2 = Op2Shift::Reg(Reg::parse(((value) >> 3) & 0x7, pc));
    Some(Ins::Asr { s, cond, rd, rn, op2 })
}
fn parse_arm_b_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let target = BranchTarget::parse(
        ((((((value) & 0xffffff) << 2) as i32) << 6 >> 6) as u32).wrapping_add(8),
        pc,
    );
    Some(Ins::B { cond, target })
}
fn parse_thumb_b_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 == 0xf00 {
        return None;
    }
    let cond = Cond::parse(((value) >> 8) & 0xf, pc);
    let target = BranchTarget::parse(
        ((((((value) & 0xff) << 1) as i32) << 23 >> 23) as u32).wrapping_add(4),
        pc,
    );
    Some(Ins::B { cond, target })
}
fn parse_thumb_b_1(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let target = BranchTarget::parse(
        ((((((value) & 0x7ff) << 1) as i32) << 20 >> 20) as u32).wrapping_add(4),
        pc,
    );
    Some(Ins::B { cond, target })
}
fn parse_arm_bic_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let s = (((value) >> 20) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let op2 = Op2::parse(value, pc)?;
    Some(Ins::Bic { s, cond, rd, rn, op2 })
}
fn parse_thumb_bic_0(value: u32, pc: u32) -> Option<Ins> {
    let s = (1) != 0;
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let rn = Reg::parse((value) & 0x7, pc);
    let op2 = Op2::ShiftImm(ShiftImm {
        rm: Reg::parse(((value) >> 3) & 0x7, pc),
        shift_op: ShiftOp::default(),
        imm: 0,
    });
    Some(Ins::Bic { s, cond, rd, rn, op2 })
}
fn parse_arm_bkpt_0(value: u32, pc: u32) -> Option<Ins> {
    let imm = ((((value) >> 8) & 0xfff) << 4) | ((value) & 0xf);
    Some(Ins::Bkpt { imm })
}
fn parse_thumb_bkpt_0(value: u32, pc: u32) -> Option<Ins> {
    let imm = (value) & 0xff;
    Some(Ins::Bkpt { imm })
}
fn parse_arm_bl_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let target = BranchTarget::parse(
        ((((((value) & 0xffffff) << 2) as i32) << 6 >> 6) as u32).wrapping_add(8),
        pc,
    );
    Some(Ins::Bl { cond, target })
}
fn parse_thumb_bl_0(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let target = BranchTarget::parse(
        (((((((value) & 0x7ff) << 12) | ((((value) >> 16) & 0x7ff) << 1)) as i32) << 9
            >> 9) as u32)
            .wrapping_add(4),
        pc,
    );
    Some(Ins::Bl { cond, target })
}
fn parse_arm_blx_0(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let target = BlxTarget::Direct(
        BranchTarget::parse(
            (((((((value) & 0xffffff) << 2) | ((((value) >> 24) & 0x1) << 1)) as i32)
                << 6 >> 6) as u32)
                .wrapping_add(8),
            pc,
        ),
    );
    Some(Ins::Blx { cond, target })
}
fn parse_arm_blx_1(value: u32, pc: u32) -> Option<Ins> {
    if (((value) >> 8) & 0xfff) != 0xfff {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let target = BlxTarget::Indirect(Reg::parse((value) & 0xf, pc));
    Some(Ins::Blx { cond, target })
}
fn parse_thumb_blx_0(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let target = BlxTarget::Direct(
        BranchTarget::parse(
            (((((((value) & 0x7ff) << 12) | ((((value) >> 17) & 0x3ff) << 2)) as i32)
                << 9 >> 9) as u32)
                .wrapping_add(4),
            pc,
        ),
    );
    Some(Ins::Blx { cond, target })
}
fn parse_thumb_blx_1(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let target = BlxTarget::Indirect(Reg::parse(((value) >> 3) & 0xf, pc));
    Some(Ins::Blx { cond, target })
}
fn parse_arm_bx_0(value: u32, pc: u32) -> Option<Ins> {
    if (((value) >> 8) & 0xfff) != 0xfff {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Bx { cond, rm })
}
fn parse_thumb_bx_0(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let rm = Reg::parse(((value) >> 3) & 0xf, pc);
    Some(Ins::Bx { cond, rm })
}
fn parse_arm_bxj_0(value: u32, pc: u32) -> Option<Ins> {
    if (((value) >> 8) & 0xfff) != 0xfff {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Bxj { cond, rm })
}
fn parse_arm_cdp_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let coproc = Coproc::parse(((value) >> 8) & 0xf, pc);
    let opc1 = ((value) >> 20) & 0xf;
    let crd = CoReg::parse(((value) >> 12) & 0xf, pc);
    let crn = CoReg::parse(((value) >> 16) & 0xf, pc);
    let crm = CoReg::parse((value) & 0xf, pc);
    let opc2 = ((value) >> 5) & 0x7;
    Some(Ins::Cdp {
        cond,
        coproc,
        opc1,
        crd,
        crn,
        crm,
        opc2,
    })
}
fn parse_arm_cdp2_0(value: u32, pc: u32) -> Option<Ins> {
    let coproc = Coproc::parse(((value) >> 8) & 0xf, pc);
    let opc1 = ((value) >> 20) & 0xf;
    let crd = CoReg::parse(((value) >> 12) & 0xf, pc);
    let crn = CoReg::parse(((value) >> 16) & 0xf, pc);
    let crm = CoReg::parse((value) & 0xf, pc);
    let opc2 = ((value) >> 5) & 0x7;
    Some(Ins::Cdp2 {
        coproc,
        opc1,
        crd,
        crn,
        crm,
        opc2,
    })
}
fn parse_arm_clrex_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xfff0f != 0xff00f {
        return None;
    }
    Some(Ins::Clrex {})
}
fn parse_arm_clz_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0f00 != 0xf0f00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Clz { cond, rd, rm })
}
fn parse_arm_cmn_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf000 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let op2 = Op2::parse(value, pc)?;
    Some(Ins::Cmn { cond, rn, op2 })
}
fn parse_thumb_cmn_0(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let rn = Reg::parse((value) & 0x7, pc);
    let op2 = Op2::ShiftImm(ShiftImm {
        rm: Reg::parse(((value) >> 3) & 0x7, pc),
        shift_op: ShiftOp::default(),
        imm: 0,
    });
    Some(Ins::Cmn { cond, rn, op2 })
}
fn parse_arm_cmp_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf000 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let op2 = Op2::parse(value, pc)?;
    Some(Ins::Cmp { cond, rn, op2 })
}
fn parse_thumb_cmp_0(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let rn = Reg::parse(((value) >> 8) & 0x7, pc);
    let op2 = Op2::Imm((value) & 0xff);
    Some(Ins::Cmp { cond, rn, op2 })
}
fn parse_thumb_cmp_1(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let rn = Reg::parse((value) & 0x7, pc);
    let op2 = Op2::ShiftImm(ShiftImm {
        rm: Reg::parse(((value) >> 3) & 0x7, pc),
        shift_op: ShiftOp::default(),
        imm: 0,
    });
    Some(Ins::Cmp { cond, rn, op2 })
}
fn parse_thumb_cmp_2(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let rn = Reg::parse(((((value) >> 7) & 0x1) << 3) | ((value) & 0x7), pc);
    let op2 = Op2::ShiftImm(ShiftImm {
        rm: Reg::parse(((value) >> 3) & 0xf, pc),
        shift_op: ShiftOp::default(),
        imm: 0,
    });
    Some(Ins::Cmp { cond, rn, op2 })
}
fn parse_arm_cps_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xfe00 != 0 {
        return None;
    }
    let effect = CpsEffect::parse(((value) >> 18) & 0x3, pc)?;
    let aif = AifFlags::parse(((value) >> 6) & 0x7, pc);
    let mode = (value) & 0x1f;
    Some(Ins::Cps { effect, aif, mode })
}
fn parse_thumb_cps_0(value: u32, pc: u32) -> Option<Ins> {
    let effect = CpsEffect::parse(((value) >> 4) & 0x3, pc)?;
    let aif = AifFlags::parse((value) & 0x7, pc);
    let mode = 0;
    Some(Ins::Cps { effect, aif, mode })
}
fn parse_arm_csdb_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xff00 != 0xf000 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    Some(Ins::Csdb { cond })
}
fn parse_arm_eor_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let s = (((value) >> 20) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let op2 = Op2::parse(value, pc)?;
    Some(Ins::Eor { s, cond, rd, rn, op2 })
}
fn parse_thumb_eor_0(value: u32, pc: u32) -> Option<Ins> {
    let s = (1) != 0;
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let rn = Reg::parse((value) & 0x7, pc);
    let op2 = Op2::ShiftImm(ShiftImm {
        rm: Reg::parse(((value) >> 3) & 0x7, pc),
        shift_op: ShiftOp::default(),
        imm: 0,
    });
    Some(Ins::Eor { s, cond, rd, rn, op2 })
}
fn parse_arm_ldc_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let l = (((value) >> 22) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let coproc = Coproc::parse(((value) >> 8) & 0xf, pc);
    let crd = CoReg::parse(((value) >> 12) & 0xf, pc);
    let dest = AddrLdcStc::parse(value, pc)?;
    Some(Ins::Ldc {
        l,
        cond,
        coproc,
        crd,
        dest,
    })
}
fn parse_arm_ldc2_0(value: u32, pc: u32) -> Option<Ins> {
    let l = (((value) >> 22) & 0x1) != 0;
    let coproc = Coproc::parse(((value) >> 8) & 0xf, pc);
    let crd = CoReg::parse(((value) >> 12) & 0xf, pc);
    let dest = AddrLdcStc::parse(value, pc)?;
    Some(Ins::Ldc2 { l, coproc, crd, dest })
}
fn parse_arm_ldm_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xffff == 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let mode = LdmStmMode::parse(((value) >> 23) & 0x3, pc);
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let writeback = (((value) >> 21) & 0x1) != 0;
    let regs = RegList::parse((value) & 0xffff);
    let user_mode = (0) != 0;
    Some(Ins::Ldm {
        mode,
        cond,
        rn,
        writeback,
        regs,
        user_mode,
    })
}
fn parse_arm_ldm_1(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xffff == 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let mode = LdmStmMode::parse(((value) >> 23) & 0x3, pc);
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let writeback = (0) != 0;
    let regs = RegList::parse((value) & 0x7fff);
    let user_mode = (1) != 0;
    Some(Ins::Ldm {
        mode,
        cond,
        rn,
        writeback,
        regs,
        user_mode,
    })
}
fn parse_arm_ldm_2(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let mode = LdmStmMode::parse(((value) >> 23) & 0x3, pc);
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let writeback = (((value) >> 21) & 0x1) != 0;
    let regs = RegList::parse((value) & 0xffff);
    let user_mode = (1) != 0;
    Some(Ins::Ldm {
        mode,
        cond,
        rn,
        writeback,
        regs,
        user_mode,
    })
}
fn parse_thumb_ldm_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xff == 0 {
        return None;
    }
    let mode = LdmStmMode::default();
    let cond = Cond::default();
    let rn = Reg::parse(((value) >> 8) & 0x7, pc);
    let writeback = ((!((value) & 0xff) >> (((value) >> 8) & 0x7)) & 1) != 0;
    let regs = RegList::parse((value) & 0xff);
    let user_mode = (0) != 0;
    Some(Ins::Ldm {
        mode,
        cond,
        rn,
        writeback,
        regs,
        user_mode,
    })
}
fn parse_arm_ldr_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let addr = AddrLdrStr::parse(value, pc)?;
    Some(Ins::Ldr { cond, rd, addr })
}
fn parse_thumb_ldr_0(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let addr = AddrLdrStr::Pre {
        rn: Reg::parse(((value) >> 3) & 0x7, pc),
        offset: LdrStrOffset::Imm(((((value) >> 6) & 0x1f) << 2) as i32),
        writeback: false,
    };
    Some(Ins::Ldr { cond, rd, addr })
}
fn parse_thumb_ldr_1(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let rd = Reg::parse(((value) >> 8) & 0x7, pc);
    let addr = AddrLdrStr::Pre {
        rn: Reg::parse(13, pc),
        offset: LdrStrOffset::Imm((((value) & 0xff) << 2) as i32),
        writeback: false,
    };
    Some(Ins::Ldr { cond, rd, addr })
}
fn parse_thumb_ldr_2(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let rd = Reg::parse(((value) >> 8) & 0x7, pc);
    let addr = AddrLdrStr::Pre {
        rn: Reg::parse(15, pc),
        offset: LdrStrOffset::Imm((((value) & 0xff) << 2) as i32),
        writeback: false,
    };
    Some(Ins::Ldr { cond, rd, addr })
}
fn parse_thumb_ldr_3(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let addr = AddrLdrStr::Pre {
        rn: Reg::parse(((value) >> 3) & 0x7, pc),
        offset: LdrStrOffset::Reg {
            subtract: false,
            rm: Reg::parse(((value) >> 6) & 0x7, pc),
            shift_op: ShiftOp::default(),
            imm: 0,
        },
        writeback: false,
    };
    Some(Ins::Ldr { cond, rd, addr })
}
fn parse_arm_ldrb_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let addr = AddrLdrStr::parse(value, pc)?;
    Some(Ins::Ldrb { cond, rd, addr })
}
fn parse_thumb_ldrb_0(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let addr = AddrLdrStr::Pre {
        rn: Reg::parse(((value) >> 3) & 0x7, pc),
        offset: LdrStrOffset::Imm(((((value) >> 6) & 0x1f)) as i32),
        writeback: false,
    };
    Some(Ins::Ldrb { cond, rd, addr })
}
fn parse_thumb_ldrb_1(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let addr = AddrLdrStr::Pre {
        rn: Reg::parse(((value) >> 3) & 0x7, pc),
        offset: LdrStrOffset::Reg {
            subtract: false,
            rm: Reg::parse(((value) >> 6) & 0x7, pc),
            shift_op: ShiftOp::default(),
            imm: 0,
        },
        writeback: false,
    };
    Some(Ins::Ldrb { cond, rd, addr })
}
fn parse_arm_ldrbt_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let addr = AddrLdrStr::Post(AddrLdrStrPost::parse(value, pc)?);
    Some(Ins::Ldrbt { cond, rd, addr })
}
fn parse_arm_ldrd_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0x1000 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rd2 = Reg::parse((((value) >> 12) & 0xf).wrapping_add(1), pc);
    let addr = AddrMiscLoad::parse(value, pc)?;
    Some(Ins::Ldrd { cond, rd, rd2, addr })
}
fn parse_arm_ldrd_1(value: u32, pc: u32) -> Option<Ins> {
    if value & 0x01201000 != 0x01000000 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rd2 = Reg::parse((((value) >> 12) & 0xf).wrapping_add(1), pc);
    let addr = AddrMiscLoad::parse(value, pc)?;
    Some(Ins::Ldrd { cond, rd, rd2, addr })
}
fn parse_arm_ldrex_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0f != 0xf0f {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    Some(Ins::Ldrex { cond, rd, rn })
}
fn parse_arm_ldrexb_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0f != 0xf0f {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    Some(Ins::Ldrexb { cond, rd, rn })
}
fn parse_arm_ldrexd_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0x1f0f != 0xf0f {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rd2 = Reg::parse((((value) >> 12) & 0xf).wrapping_add(1), pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    Some(Ins::Ldrexd { cond, rd, rd2, rn })
}
fn parse_arm_ldrexh_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0f != 0xf0f {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    Some(Ins::Ldrexh { cond, rd, rn })
}
fn parse_arm_ldrh_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let addr = AddrMiscLoad::parse(value, pc)?;
    Some(Ins::Ldrh { cond, rd, addr })
}
fn parse_thumb_ldrh_0(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let addr = AddrMiscLoad::Pre {
        rn: Reg::parse(((value) >> 3) & 0x7, pc),
        offset: MiscLoadOffset::Imm(((((value) >> 6) & 0x1f) << 1) as i32),
        writeback: false,
    };
    Some(Ins::Ldrh { cond, rd, addr })
}
fn parse_thumb_ldrh_1(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let addr = AddrMiscLoad::Pre {
        rn: Reg::parse(((value) >> 3) & 0x7, pc),
        offset: MiscLoadOffset::Reg {
            rm: Reg::parse(((value) >> 6) & 0x7, pc),
            subtract: false,
        },
        writeback: false,
    };
    Some(Ins::Ldrh { cond, rd, addr })
}
fn parse_arm_ldrsb_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let addr = AddrMiscLoad::parse(value, pc)?;
    Some(Ins::Ldrsb { cond, rd, addr })
}
fn parse_thumb_ldrsb_0(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let addr = AddrMiscLoad::Pre {
        rn: Reg::parse(((value) >> 3) & 0x7, pc),
        offset: MiscLoadOffset::Reg {
            rm: Reg::parse(((value) >> 6) & 0x7, pc),
            subtract: false,
        },
        writeback: false,
    };
    Some(Ins::Ldrsb { cond, rd, addr })
}
fn parse_arm_ldrsh_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let addr = AddrMiscLoad::parse(value, pc)?;
    Some(Ins::Ldrsh { cond, rd, addr })
}
fn parse_thumb_ldrsh_0(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let addr = AddrMiscLoad::Pre {
        rn: Reg::parse(((value) >> 3) & 0x7, pc),
        offset: MiscLoadOffset::Reg {
            rm: Reg::parse(((value) >> 6) & 0x7, pc),
            subtract: false,
        },
        writeback: false,
    };
    Some(Ins::Ldrsh { cond, rd, addr })
}
fn parse_arm_ldrt_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let addr = AddrLdrStr::Post(AddrLdrStrPost::parse(value, pc)?);
    Some(Ins::Ldrt { cond, rd, addr })
}
fn parse_arm_lsl_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let s = (((value) >> 20) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse((value) & 0xf, pc);
    let op2 = Op2Shift::parse(value, pc)?;
    Some(Ins::Lsl { s, cond, rd, rn, op2 })
}
fn parse_thumb_lsl_0(value: u32, pc: u32) -> Option<Ins> {
    let s = (1) != 0;
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let rn = Reg::parse(((value) >> 3) & 0x7, pc);
    let op2 = Op2Shift::Imm(((value) >> 6) & 0x1f);
    Some(Ins::Lsl { s, cond, rd, rn, op2 })
}
fn parse_thumb_lsl_1(value: u32, pc: u32) -> Option<Ins> {
    let s = (1) != 0;
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let rn = Reg::parse((value) & 0x7, pc);
    let op2 = Op2Shift::Reg(Reg::parse(((value) >> 3) & 0x7, pc));
    Some(Ins::Lsl { s, cond, rd, rn, op2 })
}
fn parse_arm_lsr_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let s = (((value) >> 20) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse((value) & 0xf, pc);
    let op2 = Op2Shift::parse(value, pc)?;
    Some(Ins::Lsr { s, cond, rd, rn, op2 })
}
fn parse_thumb_lsr_0(value: u32, pc: u32) -> Option<Ins> {
    let s = (1) != 0;
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let rn = Reg::parse(((value) >> 3) & 0x7, pc);
    let op2 = Op2Shift::Imm(
        if (((value) >> 6) & 0x1f) != 0 { (((value) >> 6) & 0x1f) } else { 32 },
    );
    Some(Ins::Lsr { s, cond, rd, rn, op2 })
}
fn parse_thumb_lsr_1(value: u32, pc: u32) -> Option<Ins> {
    let s = (1) != 0;
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let rn = Reg::parse((value) & 0x7, pc);
    let op2 = Op2Shift::Reg(Reg::parse(((value) >> 3) & 0x7, pc));
    Some(Ins::Lsr { s, cond, rd, rn, op2 })
}
fn parse_arm_mcr_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let coproc = Coproc::parse(((value) >> 8) & 0xf, pc);
    let opc1 = ((value) >> 21) & 0x7;
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let crn = CoReg::parse(((value) >> 16) & 0xf, pc);
    let crm = CoReg::parse((value) & 0xf, pc);
    let opc2 = ((value) >> 5) & 0x7;
    Some(Ins::Mcr {
        cond,
        coproc,
        opc1,
        rd,
        crn,
        crm,
        opc2,
    })
}
fn parse_arm_mcr2_0(value: u32, pc: u32) -> Option<Ins> {
    let coproc = Coproc::parse(((value) >> 8) & 0xf, pc);
    let opc1 = ((value) >> 21) & 0x7;
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let crn = CoReg::parse(((value) >> 16) & 0xf, pc);
    let crm = CoReg::parse((value) & 0xf, pc);
    let opc2 = ((value) >> 5) & 0x7;
    Some(Ins::Mcr2 {
        coproc,
        opc1,
        rd,
        crn,
        crm,
        opc2,
    })
}
fn parse_arm_mcrr_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let coproc = Coproc::parse(((value) >> 8) & 0xf, pc);
    let opc = ((value) >> 20) & 0xf;
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rd2 = Reg::parse(((value) >> 16) & 0xf, pc);
    let crm = CoReg::parse((value) & 0xf, pc);
    Some(Ins::Mcrr {
        cond,
        coproc,
        opc,
        rd,
        rd2,
        crm,
    })
}
fn parse_arm_mcrr2_0(value: u32, pc: u32) -> Option<Ins> {
    let coproc = Coproc::parse(((value) >> 8) & 0xf, pc);
    let opc = ((value) >> 20) & 0xf;
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rd2 = Reg::parse(((value) >> 16) & 0xf, pc);
    let crm = CoReg::parse((value) & 0xf, pc);
    Some(Ins::Mcrr2 {
        coproc,
        opc,
        rd,
        rd2,
        crm,
    })
}
fn parse_arm_mla_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let s = (((value) >> 20) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 16) & 0xf, pc);
    let rn = Reg::parse((value) & 0xf, pc);
    let rm = Reg::parse(((value) >> 8) & 0xf, pc);
    let ra = Reg::parse(((value) >> 12) & 0xf, pc);
    Some(Ins::Mla {
        s,
        cond,
        rd,
        rn,
        rm,
        ra,
    })
}
fn parse_arm_mov_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let s = (((value) >> 20) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let op2 = Op2::parse(value, pc)?;
    Some(Ins::Mov { s, cond, rd, op2 })
}
fn parse_arm_mov_1(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let s = (((value) >> 20) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let op2 = Op2::parse(value, pc)?;
    Some(Ins::Mov { s, cond, rd, op2 })
}
fn parse_thumb_mov_0(value: u32, pc: u32) -> Option<Ins> {
    let s = (1) != 0;
    let cond = Cond::default();
    let rd = Reg::parse(((value) >> 8) & 0x7, pc);
    let op2 = Op2::Imm((value) & 0xff);
    Some(Ins::Mov { s, cond, rd, op2 })
}
fn parse_thumb_mov_1(value: u32, pc: u32) -> Option<Ins> {
    let s = (0) != 0;
    let cond = Cond::default();
    let rd = Reg::parse(((((value) >> 7) & 0x1) << 3) | ((value) & 0x7), pc);
    let op2 = Op2::ShiftImm(ShiftImm {
        rm: Reg::parse(((value) >> 3) & 0xf, pc),
        shift_op: ShiftOp::default(),
        imm: 0,
    });
    Some(Ins::Mov { s, cond, rd, op2 })
}
fn parse_thumb_mov_2(value: u32, pc: u32) -> Option<Ins> {
    let s = (1) != 0;
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let op2 = Op2::ShiftImm(ShiftImm {
        rm: Reg::parse(((value) >> 3) & 0x7, pc),
        shift_op: ShiftOp::default(),
        imm: 0,
    });
    Some(Ins::Mov { s, cond, rd, op2 })
}
fn parse_arm_mrc_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let coproc = Coproc::parse(((value) >> 8) & 0xf, pc);
    let opc1 = ((value) >> 21) & 0x7;
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let crn = CoReg::parse(((value) >> 16) & 0xf, pc);
    let crm = CoReg::parse((value) & 0xf, pc);
    let opc2 = ((value) >> 5) & 0x7;
    Some(Ins::Mrc {
        cond,
        coproc,
        opc1,
        rd,
        crn,
        crm,
        opc2,
    })
}
fn parse_arm_mrc2_0(value: u32, pc: u32) -> Option<Ins> {
    let coproc = Coproc::parse(((value) >> 8) & 0xf, pc);
    let opc1 = ((value) >> 21) & 0x7;
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let crn = CoReg::parse(((value) >> 16) & 0xf, pc);
    let crm = CoReg::parse((value) & 0xf, pc);
    let opc2 = ((value) >> 5) & 0x7;
    Some(Ins::Mrc2 {
        coproc,
        opc1,
        rd,
        crn,
        crm,
        opc2,
    })
}
fn parse_arm_mrrc_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let coproc = Coproc::parse(((value) >> 8) & 0xf, pc);
    let opc = ((value) >> 4) & 0xf;
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rd2 = Reg::parse(((value) >> 16) & 0xf, pc);
    let crm = CoReg::parse((value) & 0xf, pc);
    Some(Ins::Mrrc {
        cond,
        coproc,
        opc,
        rd,
        rd2,
        crm,
    })
}
fn parse_arm_mrrc2_0(value: u32, pc: u32) -> Option<Ins> {
    let coproc = Coproc::parse(((value) >> 8) & 0xf, pc);
    let opc = ((value) >> 4) & 0xf;
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rd2 = Reg::parse(((value) >> 16) & 0xf, pc);
    let crm = CoReg::parse((value) & 0xf, pc);
    Some(Ins::Mrrc2 {
        coproc,
        opc,
        rd,
        rd2,
        crm,
    })
}
fn parse_arm_mrs_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0x000f0d0f != 0x000f0000 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let status_reg = StatusReg::parse(((value) >> 22) & 0x1, pc);
    Some(Ins::Mrs { cond, rd, status_reg })
}
fn parse_arm_msr_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf000 != 0xf000 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let status_fields = StatusFields::parse(value, pc);
    let op2 = MsrOp2::parse(value, pc)?;
    Some(Ins::Msr {
        cond,
        status_fields,
        op2,
    })
}
fn parse_arm_mul_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf000 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let s = (((value) >> 20) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 16) & 0xf, pc);
    let rn = Reg::parse((value) & 0xf, pc);
    let rm = Reg::parse(((value) >> 8) & 0xf, pc);
    Some(Ins::Mul { s, cond, rd, rn, rm })
}
fn parse_thumb_mul_0(value: u32, pc: u32) -> Option<Ins> {
    let s = (1) != 0;
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let rn = Reg::parse(((value) >> 3) & 0x7, pc);
    let rm = Reg::parse((value) & 0x7, pc);
    Some(Ins::Mul { s, cond, rd, rn, rm })
}
fn parse_arm_mvn_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let s = (((value) >> 20) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let op2 = Op2::parse(value, pc)?;
    Some(Ins::Mvn { s, cond, rd, op2 })
}
fn parse_thumb_mvn_0(value: u32, pc: u32) -> Option<Ins> {
    let s = (1) != 0;
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let op2 = Op2::ShiftImm(ShiftImm {
        rm: Reg::parse(((value) >> 3) & 0x7, pc),
        shift_op: ShiftOp::default(),
        imm: 0,
    });
    Some(Ins::Mvn { s, cond, rd, op2 })
}
fn parse_arm_nop_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xff00 != 0xf000 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    Some(Ins::Nop { cond })
}
fn parse_thumb_nop_0(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    Some(Ins::Nop { cond })
}
fn parse_arm_orr_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let s = (((value) >> 20) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let op2 = Op2::parse(value, pc)?;
    Some(Ins::Orr { s, cond, rd, rn, op2 })
}
fn parse_thumb_orr_0(value: u32, pc: u32) -> Option<Ins> {
    let s = (1) != 0;
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let rn = Reg::parse((value) & 0x7, pc);
    let op2 = Op2::ShiftImm(ShiftImm {
        rm: Reg::parse(((value) >> 3) & 0x7, pc),
        shift_op: ShiftOp::default(),
        imm: 0,
    });
    Some(Ins::Orr { s, cond, rd, rn, op2 })
}
fn parse_arm_pkhbt_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    let shift_op = ShiftOp::parse(0, pc);
    let shift = ((value) >> 7) & 0x1f;
    Some(Ins::Pkhbt {
        cond,
        rd,
        rn,
        rm,
        shift_op,
        shift,
    })
}
fn parse_arm_pkhtb_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    let shift_op = ShiftOp::parse(2, pc);
    let shift = if (((value) >> 7) & 0x1f) != 0 { (((value) >> 7) & 0x1f) } else { 32 };
    Some(Ins::Pkhtb {
        cond,
        rd,
        rn,
        rm,
        shift_op,
        shift,
    })
}
fn parse_arm_pld_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf000 != 0xf000 {
        return None;
    }
    let addr = AddrLdrStr::parse(value, pc)?;
    Some(Ins::Pld { addr })
}
fn parse_arm_pop_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xffff == 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let regs = RegList::parse((value) & 0xffff);
    Some(Ins::Pop { cond, regs })
}
fn parse_arm_pop_1(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let regs = RegList::parse(1 << (((value) >> 12) & 0xf));
    Some(Ins::Pop { cond, regs })
}
fn parse_thumb_pop_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0x1ff == 0 {
        return None;
    }
    let cond = Cond::parse(14, pc);
    let regs = RegList::parse(((((value) >> 8) & 0x1) << 15) | ((value) & 0xff));
    Some(Ins::Pop { cond, regs })
}
fn parse_arm_push_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xffff == 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let regs = RegList::parse((value) & 0xffff);
    Some(Ins::Push { cond, regs })
}
fn parse_arm_push_1(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let regs = RegList::parse(1 << (((value) >> 12) & 0xf));
    Some(Ins::Push { cond, regs })
}
fn parse_thumb_push_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0x1ff == 0 {
        return None;
    }
    let cond = Cond::parse(14, pc);
    let regs = RegList::parse(((((value) >> 8) & 0x1) << 14) | ((value) & 0xff));
    Some(Ins::Push { cond, regs })
}
fn parse_arm_qadd_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    Some(Ins::Qadd { cond, rd, rm, rn })
}
fn parse_arm_qadd16_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Qadd16 { cond, rd, rn, rm })
}
fn parse_arm_qadd8_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Qadd8 { cond, rd, rn, rm })
}
fn parse_arm_qasx_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Qasx { cond, rd, rn, rm })
}
fn parse_arm_qdadd_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    Some(Ins::Qdadd { cond, rd, rm, rn })
}
fn parse_arm_qdsub_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    Some(Ins::Qdsub { cond, rd, rm, rn })
}
fn parse_arm_qsax_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Qsax { cond, rd, rn, rm })
}
fn parse_arm_qsub_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    Some(Ins::Qsub { cond, rd, rm, rn })
}
fn parse_arm_qsub16_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Qsub16 { cond, rd, rn, rm })
}
fn parse_arm_qsub8_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Qsub8 { cond, rd, rn, rm })
}
fn parse_arm_rev_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0f00 != 0xf0f00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Rev { cond, rd, rm })
}
fn parse_thumb_rev_0(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::parse(14, pc);
    let rd = Reg::parse((value) & 0x7, pc);
    let rm = Reg::parse(((value) >> 3) & 0x7, pc);
    Some(Ins::Rev { cond, rd, rm })
}
fn parse_arm_rev16_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0f00 != 0xf0f00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Rev16 { cond, rd, rm })
}
fn parse_thumb_rev16_0(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::parse(14, pc);
    let rd = Reg::parse((value) & 0x7, pc);
    let rm = Reg::parse(((value) >> 3) & 0x7, pc);
    Some(Ins::Rev16 { cond, rd, rm })
}
fn parse_arm_revsh_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0f00 != 0xf0f00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Revsh { cond, rd, rm })
}
fn parse_thumb_revsh_0(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::parse(14, pc);
    let rd = Reg::parse((value) & 0x7, pc);
    let rm = Reg::parse(((value) >> 3) & 0x7, pc);
    Some(Ins::Revsh { cond, rd, rm })
}
fn parse_arm_rfe_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xffff != 0x0a00 {
        return None;
    }
    let addr_mode = SrsRfeMode::parse(((value) >> 23) & 0x3, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let writeback = (((value) >> 21) & 0x1) != 0;
    Some(Ins::Rfe {
        addr_mode,
        rn,
        writeback,
    })
}
fn parse_arm_ror_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let s = (((value) >> 20) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse((value) & 0xf, pc);
    let op2 = Op2Shift::parse(value, pc)?;
    Some(Ins::Ror { s, cond, rd, rn, op2 })
}
fn parse_thumb_ror_0(value: u32, pc: u32) -> Option<Ins> {
    let s = (1) != 0;
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let rn = Reg::parse((value) & 0x7, pc);
    let op2 = Op2Shift::Reg(Reg::parse(((value) >> 3) & 0x7, pc));
    Some(Ins::Ror { s, cond, rd, rn, op2 })
}
fn parse_arm_rrx_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let s = (((value) >> 20) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Rrx { s, cond, rd, rm })
}
fn parse_arm_rsb_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let s = (((value) >> 20) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let op2 = Op2::parse(value, pc)?;
    Some(Ins::Rsb { s, cond, rd, rn, op2 })
}
fn parse_thumb_rsb_0(value: u32, pc: u32) -> Option<Ins> {
    let s = (1) != 0;
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let rn = Reg::parse(((value) >> 3) & 0x7, pc);
    let op2 = Op2::Imm(0);
    Some(Ins::Rsb { s, cond, rd, rn, op2 })
}
fn parse_arm_rsc_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let s = (((value) >> 20) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let op2 = Op2::parse(value, pc)?;
    Some(Ins::Rsc { s, cond, rd, rn, op2 })
}
fn parse_arm_sadd16_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Sadd16 { cond, rd, rn, rm })
}
fn parse_arm_sadd8_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Sadd8 { cond, rd, rn, rm })
}
fn parse_arm_sasx_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Sasx { cond, rd, rn, rm })
}
fn parse_arm_sbc_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let s = (((value) >> 20) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let op2 = Op2::parse(value, pc)?;
    Some(Ins::Sbc { s, cond, rd, rn, op2 })
}
fn parse_thumb_sbc_0(value: u32, pc: u32) -> Option<Ins> {
    let s = (1) != 0;
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let rn = Reg::parse((value) & 0x7, pc);
    let op2 = Op2::ShiftImm(ShiftImm {
        rm: Reg::parse(((value) >> 3) & 0x7, pc),
        shift_op: ShiftOp::default(),
        imm: 0,
    });
    Some(Ins::Sbc { s, cond, rd, rn, op2 })
}
fn parse_arm_sel_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Sel { cond, rd, rn, rm })
}
fn parse_arm_setend_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xefd0f != 0 {
        return None;
    }
    let endian = Endianness::parse(((value) >> 9) & 0x1, pc);
    Some(Ins::Setend { endian })
}
fn parse_thumb_setend_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0x17 != 0x10 {
        return None;
    }
    let endian = Endianness::parse(((value) >> 3) & 0x1, pc);
    Some(Ins::Setend { endian })
}
fn parse_arm_sev_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xff00 != 0xf000 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    Some(Ins::Sev { cond })
}
fn parse_arm_shadd16_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Shadd16 { cond, rd, rn, rm })
}
fn parse_arm_shadd8_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Shadd8 { cond, rd, rn, rm })
}
fn parse_arm_shasx_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Shasx { cond, rd, rn, rm })
}
fn parse_arm_shsax_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Shsax { cond, rd, rn, rm })
}
fn parse_arm_shsub16_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Shsub16 { cond, rd, rn, rm })
}
fn parse_arm_shsub8_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Shsub8 { cond, rd, rn, rm })
}
fn parse_arm_smla_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 16) & 0xf, pc);
    let rn = Reg::parse((value) & 0xf, pc);
    let rn_side = RegSide::parse(((value) >> 5) & 0x1, pc);
    let rm = Reg::parse(((value) >> 8) & 0xf, pc);
    let rm_side = RegSide::parse(((value) >> 6) & 0x1, pc);
    let ra = Reg::parse(((value) >> 12) & 0xf, pc);
    Some(Ins::Smla {
        cond,
        rd,
        rn,
        rn_side,
        rm,
        rm_side,
        ra,
    })
}
fn parse_arm_smlad_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 16) & 0xf, pc);
    let rn = Reg::parse((value) & 0xf, pc);
    let rm = Reg::parse(((value) >> 8) & 0xf, pc);
    let swap_rm = (((value) >> 5) & 0x1) != 0;
    let ra = Reg::parse(((value) >> 12) & 0xf, pc);
    Some(Ins::Smlad {
        cond,
        rd,
        rn,
        rm,
        swap_rm,
        ra,
    })
}
fn parse_arm_smlal_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let s = (((value) >> 20) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd_lo = Reg::parse(((value) >> 12) & 0xf, pc);
    let rd_hi = Reg::parse(((value) >> 16) & 0xf, pc);
    let rn = Reg::parse((value) & 0xf, pc);
    let rm = Reg::parse(((value) >> 8) & 0xf, pc);
    Some(Ins::Smlal {
        s,
        cond,
        rd_lo,
        rd_hi,
        rn,
        rm,
    })
}
fn parse_arm_smlal_half_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd_lo = Reg::parse(((value) >> 12) & 0xf, pc);
    let rd_hi = Reg::parse(((value) >> 16) & 0xf, pc);
    let rn = Reg::parse((value) & 0xf, pc);
    let rn_side = RegSide::parse(((value) >> 5) & 0x1, pc);
    let rm = Reg::parse(((value) >> 8) & 0xf, pc);
    let rm_side = RegSide::parse(((value) >> 6) & 0x1, pc);
    Some(Ins::SmlalHalf {
        cond,
        rd_lo,
        rd_hi,
        rn,
        rn_side,
        rm,
        rm_side,
    })
}
fn parse_arm_smlald_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd_lo = Reg::parse(((value) >> 12) & 0xf, pc);
    let rd_hi = Reg::parse(((value) >> 16) & 0xf, pc);
    let rn = Reg::parse((value) & 0xf, pc);
    let rm = Reg::parse(((value) >> 8) & 0xf, pc);
    let swap_rm = (((value) >> 5) & 0x1) != 0;
    Some(Ins::Smlald {
        cond,
        rd_lo,
        rd_hi,
        rn,
        rm,
        swap_rm,
    })
}
fn parse_arm_smlaw_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 16) & 0xf, pc);
    let rn = Reg::parse((value) & 0xf, pc);
    let rm = Reg::parse(((value) >> 8) & 0xf, pc);
    let rm_side = RegSide::parse(((value) >> 6) & 0x1, pc);
    let ra = Reg::parse(((value) >> 12) & 0xf, pc);
    Some(Ins::Smlaw {
        cond,
        rd,
        rn,
        rm,
        rm_side,
        ra,
    })
}
fn parse_arm_smlsd_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 16) & 0xf, pc);
    let rn = Reg::parse((value) & 0xf, pc);
    let rm = Reg::parse(((value) >> 8) & 0xf, pc);
    let swap_rm = (((value) >> 5) & 0x1) != 0;
    let ra = Reg::parse(((value) >> 12) & 0xf, pc);
    Some(Ins::Smlsd {
        cond,
        rd,
        rn,
        rm,
        swap_rm,
        ra,
    })
}
fn parse_arm_smlsld_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd_lo = Reg::parse(((value) >> 12) & 0xf, pc);
    let rd_hi = Reg::parse(((value) >> 16) & 0xf, pc);
    let rn = Reg::parse((value) & 0xf, pc);
    let rm = Reg::parse(((value) >> 8) & 0xf, pc);
    let swap_rm = (((value) >> 5) & 0x1) != 0;
    Some(Ins::Smlsld {
        cond,
        rd_lo,
        rd_hi,
        rn,
        rm,
        swap_rm,
    })
}
fn parse_arm_smmla_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let round = (((value) >> 5) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 16) & 0xf, pc);
    let rn = Reg::parse((value) & 0xf, pc);
    let rm = Reg::parse(((value) >> 8) & 0xf, pc);
    let ra = Reg::parse(((value) >> 12) & 0xf, pc);
    Some(Ins::Smmla {
        round,
        cond,
        rd,
        rn,
        rm,
        ra,
    })
}
fn parse_arm_smmls_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let round = (((value) >> 5) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 16) & 0xf, pc);
    let rn = Reg::parse((value) & 0xf, pc);
    let rm = Reg::parse(((value) >> 8) & 0xf, pc);
    let ra = Reg::parse(((value) >> 12) & 0xf, pc);
    Some(Ins::Smmls {
        round,
        cond,
        rd,
        rn,
        rm,
        ra,
    })
}
fn parse_arm_smmul_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let round = (((value) >> 5) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 16) & 0xf, pc);
    let rn = Reg::parse((value) & 0xf, pc);
    let rm = Reg::parse(((value) >> 8) & 0xf, pc);
    Some(Ins::Smmul {
        round,
        cond,
        rd,
        rn,
        rm,
    })
}
fn parse_arm_smuad_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 16) & 0xf, pc);
    let rn = Reg::parse((value) & 0xf, pc);
    let rm = Reg::parse(((value) >> 8) & 0xf, pc);
    let swap_rm = (((value) >> 5) & 0x1) != 0;
    Some(Ins::Smuad {
        cond,
        rd,
        rn,
        rm,
        swap_rm,
    })
}
fn parse_arm_smul_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf000 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 16) & 0xf, pc);
    let rn = Reg::parse((value) & 0xf, pc);
    let rn_side = RegSide::parse(((value) >> 5) & 0x1, pc);
    let rm = Reg::parse(((value) >> 8) & 0xf, pc);
    let rm_side = RegSide::parse(((value) >> 6) & 0x1, pc);
    Some(Ins::Smul {
        cond,
        rd,
        rn,
        rn_side,
        rm,
        rm_side,
    })
}
fn parse_arm_smull_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let s = (((value) >> 20) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd_lo = Reg::parse(((value) >> 12) & 0xf, pc);
    let rd_hi = Reg::parse(((value) >> 16) & 0xf, pc);
    let rn = Reg::parse((value) & 0xf, pc);
    let rm = Reg::parse(((value) >> 8) & 0xf, pc);
    Some(Ins::Smull {
        s,
        cond,
        rd_lo,
        rd_hi,
        rn,
        rm,
    })
}
fn parse_arm_smulw_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf000 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 16) & 0xf, pc);
    let rn = Reg::parse((value) & 0xf, pc);
    let rm = Reg::parse(((value) >> 8) & 0xf, pc);
    let rm_side = RegSide::parse(((value) >> 6) & 0x1, pc);
    Some(Ins::Smulw {
        cond,
        rd,
        rn,
        rm,
        rm_side,
    })
}
fn parse_arm_smusd_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 16) & 0xf, pc);
    let rn = Reg::parse((value) & 0xf, pc);
    let rm = Reg::parse(((value) >> 8) & 0xf, pc);
    let swap_rm = (((value) >> 5) & 0x1) != 0;
    Some(Ins::Smusd {
        cond,
        rd,
        rn,
        rm,
        swap_rm,
    })
}
fn parse_arm_srs_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xfffe0 != 0xd0500 {
        return None;
    }
    let addr_mode = SrsRfeMode::parse(((value) >> 23) & 0x3, pc);
    let rn = Reg::parse(13, pc);
    let writeback = (((value) >> 21) & 0x1) != 0;
    let mode = (value) & 0x1f;
    Some(Ins::Srs {
        addr_mode,
        rn,
        writeback,
        mode,
    })
}
fn parse_arm_ssat_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let imm = (((value) >> 16) & 0x1f).wrapping_add(1);
    let op2 = ShiftImm::parse((value) & 0xfff, pc);
    Some(Ins::Ssat { cond, rd, imm, op2 })
}
fn parse_arm_ssat16_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let imm = (((value) >> 16) & 0x1f).wrapping_add(1);
    let rn = Reg::parse((value) & 0xf, pc);
    Some(Ins::Ssat16 { cond, rd, imm, rn })
}
fn parse_arm_ssax_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Ssax { cond, rd, rn, rm })
}
fn parse_arm_ssub16_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Ssub16 { cond, rd, rn, rm })
}
fn parse_arm_ssub8_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Ssub8 { cond, rd, rn, rm })
}
fn parse_arm_stc_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let l = (((value) >> 22) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let coproc = Coproc::parse(((value) >> 8) & 0xf, pc);
    let crd = CoReg::parse(((value) >> 12) & 0xf, pc);
    let dest = AddrLdcStc::parse(value, pc)?;
    Some(Ins::Stc {
        l,
        cond,
        coproc,
        crd,
        dest,
    })
}
fn parse_arm_stc2_0(value: u32, pc: u32) -> Option<Ins> {
    let l = (((value) >> 22) & 0x1) != 0;
    let coproc = Coproc::parse(((value) >> 8) & 0xf, pc);
    let crd = CoReg::parse(((value) >> 12) & 0xf, pc);
    let dest = AddrLdcStc::parse(value, pc)?;
    Some(Ins::Stc2 { l, coproc, crd, dest })
}
fn parse_arm_stm_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xffff == 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let mode = LdmStmMode::parse(((value) >> 23) & 0x3, pc);
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let writeback = (((value) >> 21) & 0x1) != 0;
    let regs = RegList::parse((value) & 0xffff);
    let user_mode = (((value) >> 22) & 0x1) != 0;
    Some(Ins::Stm {
        mode,
        cond,
        rn,
        writeback,
        regs,
        user_mode,
    })
}
fn parse_thumb_stm_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xff == 0 {
        return None;
    }
    let mode = LdmStmMode::default();
    let cond = Cond::default();
    let rn = Reg::parse(((value) >> 8) & 0x7, pc);
    let writeback = (1) != 0;
    let regs = RegList::parse((value) & 0xff);
    let user_mode = (0) != 0;
    Some(Ins::Stm {
        mode,
        cond,
        rn,
        writeback,
        regs,
        user_mode,
    })
}
fn parse_arm_str_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let addr = AddrLdrStr::parse(value, pc)?;
    Some(Ins::Str { cond, rd, addr })
}
fn parse_thumb_str_0(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let addr = AddrLdrStr::Pre {
        rn: Reg::parse(((value) >> 3) & 0x7, pc),
        offset: LdrStrOffset::Imm(((((value) >> 6) & 0x1f) << 2) as i32),
        writeback: false,
    };
    Some(Ins::Str { cond, rd, addr })
}
fn parse_thumb_str_1(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let rd = Reg::parse(((value) >> 8) & 0x7, pc);
    let addr = AddrLdrStr::Pre {
        rn: Reg::parse(13, pc),
        offset: LdrStrOffset::Imm((((value) & 0xff) << 2) as i32),
        writeback: false,
    };
    Some(Ins::Str { cond, rd, addr })
}
fn parse_thumb_str_2(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let addr = AddrLdrStr::Pre {
        rn: Reg::parse(((value) >> 3) & 0x7, pc),
        offset: LdrStrOffset::Reg {
            subtract: false,
            rm: Reg::parse(((value) >> 6) & 0x7, pc),
            shift_op: ShiftOp::default(),
            imm: 0,
        },
        writeback: false,
    };
    Some(Ins::Str { cond, rd, addr })
}
fn parse_arm_strb_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let addr = AddrLdrStr::parse(value, pc)?;
    Some(Ins::Strb { cond, rd, addr })
}
fn parse_thumb_strb_0(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let addr = AddrLdrStr::Pre {
        rn: Reg::parse(((value) >> 3) & 0x7, pc),
        offset: LdrStrOffset::Imm(((((value) >> 6) & 0x1f)) as i32),
        writeback: false,
    };
    Some(Ins::Strb { cond, rd, addr })
}
fn parse_thumb_strb_1(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let addr = AddrLdrStr::Pre {
        rn: Reg::parse(((value) >> 3) & 0x7, pc),
        offset: LdrStrOffset::Reg {
            subtract: false,
            rm: Reg::parse(((value) >> 6) & 0x7, pc),
            shift_op: ShiftOp::default(),
            imm: 0,
        },
        writeback: false,
    };
    Some(Ins::Strb { cond, rd, addr })
}
fn parse_arm_strbt_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let addr = AddrLdrStr::Post(AddrLdrStrPost::parse(value, pc)?);
    Some(Ins::Strbt { cond, rd, addr })
}
fn parse_arm_strd_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0x1000 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rd2 = Reg::parse((((value) >> 12) & 0xf).wrapping_add(1), pc);
    let addr = AddrMiscLoad::parse(value, pc)?;
    Some(Ins::Strd { cond, rd, rd2, addr })
}
fn parse_arm_strex_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    Some(Ins::Strex { cond, rd, rm, rn })
}
fn parse_arm_strexb_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    Some(Ins::Strexb { cond, rd, rm, rn })
}
fn parse_arm_strexd_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf01 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    let rm2 = Reg::parse(((value) & 0xf).wrapping_add(1), pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    Some(Ins::Strexd {
        cond,
        rd,
        rm,
        rm2,
        rn,
    })
}
fn parse_arm_strexh_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf01 != 0xf01 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    Some(Ins::Strexh { cond, rd, rm, rn })
}
fn parse_arm_strh_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let addr = AddrMiscLoad::parse(value, pc)?;
    Some(Ins::Strh { cond, rd, addr })
}
fn parse_thumb_strh_0(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let addr = AddrMiscLoad::Pre {
        rn: Reg::parse(((value) >> 3) & 0x7, pc),
        offset: MiscLoadOffset::Imm(((((value) >> 6) & 0x1f) << 1) as i32),
        writeback: false,
    };
    Some(Ins::Strh { cond, rd, addr })
}
fn parse_thumb_strh_1(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let addr = AddrMiscLoad::Pre {
        rn: Reg::parse(((value) >> 3) & 0x7, pc),
        offset: MiscLoadOffset::Reg {
            rm: Reg::parse(((value) >> 6) & 0x7, pc),
            subtract: false,
        },
        writeback: false,
    };
    Some(Ins::Strh { cond, rd, addr })
}
fn parse_arm_strt_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let addr = AddrLdrStr::Post(AddrLdrStrPost::parse(value, pc)?);
    Some(Ins::Strt { cond, rd, addr })
}
fn parse_arm_sub_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let s = (((value) >> 20) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let op2 = Op2::parse(value, pc)?;
    Some(Ins::Sub { s, cond, rd, rn, op2 })
}
fn parse_thumb_sub_0(value: u32, pc: u32) -> Option<Ins> {
    let s = (1) != 0;
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let rn = Reg::parse(((value) >> 3) & 0x7, pc);
    let op2 = Op2::Imm(((value) >> 6) & 0x7);
    Some(Ins::Sub { s, cond, rd, rn, op2 })
}
fn parse_thumb_sub_1(value: u32, pc: u32) -> Option<Ins> {
    let s = (1) != 0;
    let cond = Cond::default();
    let rd = Reg::parse(((value) >> 8) & 0x7, pc);
    let rn = Reg::parse(((value) >> 8) & 0x7, pc);
    let op2 = Op2::Imm((value) & 0xff);
    Some(Ins::Sub { s, cond, rd, rn, op2 })
}
fn parse_thumb_sub_2(value: u32, pc: u32) -> Option<Ins> {
    let s = (1) != 0;
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let rn = Reg::parse(((value) >> 3) & 0x7, pc);
    let op2 = Op2::ShiftImm(ShiftImm {
        rm: Reg::parse(((value) >> 6) & 0x7, pc),
        shift_op: ShiftOp::default(),
        imm: 0,
    });
    Some(Ins::Sub { s, cond, rd, rn, op2 })
}
fn parse_thumb_sub_3(value: u32, pc: u32) -> Option<Ins> {
    let s = false;
    let cond = Cond::default();
    let rd = Reg::parse(13, pc);
    let rn = Reg::parse(13, pc);
    let op2 = Op2::Imm(((value) & 0x7f) << 2);
    Some(Ins::Sub { s, cond, rd, rn, op2 })
}
fn parse_arm_svc_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let imm = (value) & 0xffffff;
    Some(Ins::Svc { cond, imm })
}
fn parse_thumb_svc_0(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let imm = (value) & 0xff;
    Some(Ins::Svc { cond, imm })
}
fn parse_arm_swp_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rd2 = Reg::parse((value) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    Some(Ins::Swp { cond, rd, rd2, rn })
}
fn parse_arm_swpb_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rd2 = Reg::parse((value) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    Some(Ins::Swpb { cond, rd, rd2, rn })
}
fn parse_arm_sxtab_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0x300 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    let rotate = (((value) >> 10) & 0x3) << 3;
    Some(Ins::Sxtab {
        cond,
        rd,
        rn,
        rm,
        rotate,
    })
}
fn parse_arm_sxtab16_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0x300 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    let rotate = (((value) >> 10) & 0x3) << 3;
    Some(Ins::Sxtab16 {
        cond,
        rd,
        rn,
        rm,
        rotate,
    })
}
fn parse_arm_sxtah_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0x300 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    let rotate = (((value) >> 10) & 0x3) << 3;
    Some(Ins::Sxtah {
        cond,
        rd,
        rn,
        rm,
        rotate,
    })
}
fn parse_arm_sxtb_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0x300 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    let rotate = (((value) >> 10) & 0x3) << 3;
    Some(Ins::Sxtb { cond, rd, rm, rotate })
}
fn parse_thumb_sxtb_0(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let rm = Reg::parse(((value) >> 3) & 0x7, pc);
    let rotate = 0;
    Some(Ins::Sxtb { cond, rd, rm, rotate })
}
fn parse_arm_sxtb16_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0x300 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    let rotate = (((value) >> 10) & 0x3) << 3;
    Some(Ins::Sxtb16 {
        cond,
        rd,
        rm,
        rotate,
    })
}
fn parse_arm_sxth_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0x300 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    let rotate = (((value) >> 10) & 0x3) << 3;
    Some(Ins::Sxth { cond, rd, rm, rotate })
}
fn parse_thumb_sxth_0(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let rm = Reg::parse(((value) >> 3) & 0x7, pc);
    let rotate = 0;
    Some(Ins::Sxth { cond, rd, rm, rotate })
}
fn parse_arm_teq_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf000 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let op2 = Op2::parse(value, pc)?;
    Some(Ins::Teq { cond, rn, op2 })
}
fn parse_arm_tst_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf000 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let op2 = Op2::parse(value, pc)?;
    Some(Ins::Tst { cond, rn, op2 })
}
fn parse_thumb_tst_0(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let rn = Reg::parse((value) & 0x7, pc);
    let op2 = Op2::ShiftImm(ShiftImm {
        rm: Reg::parse(((value) >> 3) & 0x7, pc),
        shift_op: ShiftOp::default(),
        imm: 0,
    });
    Some(Ins::Tst { cond, rn, op2 })
}
fn parse_arm_uadd16_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Uadd16 { cond, rd, rn, rm })
}
fn parse_arm_uadd8_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Uadd8 { cond, rd, rn, rm })
}
fn parse_arm_uasx_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Uasx { cond, rd, rn, rm })
}
fn parse_arm_udf_0(value: u32, pc: u32) -> Option<Ins> {
    let imm = ((((value) >> 8) & 0xfff) << 4) | ((value) & 0xf);
    Some(Ins::Udf { imm })
}
fn parse_thumb_udf_0(value: u32, pc: u32) -> Option<Ins> {
    let imm = (value) & 0xff;
    Some(Ins::Udf { imm })
}
fn parse_arm_uhadd16_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Uhadd16 { cond, rd, rn, rm })
}
fn parse_arm_uhadd8_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Uhadd8 { cond, rd, rn, rm })
}
fn parse_arm_uhasx_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Uhasx { cond, rd, rn, rm })
}
fn parse_arm_uhsax_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Uhsax { cond, rd, rn, rm })
}
fn parse_arm_uhsub16_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Uhsub16 { cond, rd, rn, rm })
}
fn parse_arm_uhsub8_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Uhsub8 { cond, rd, rn, rm })
}
fn parse_arm_umaal_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd_lo = Reg::parse(((value) >> 12) & 0xf, pc);
    let rd_hi = Reg::parse(((value) >> 16) & 0xf, pc);
    let rn = Reg::parse((value) & 0xf, pc);
    let rm = Reg::parse(((value) >> 8) & 0xf, pc);
    Some(Ins::Umaal {
        cond,
        rd_lo,
        rd_hi,
        rn,
        rm,
    })
}
fn parse_arm_umlal_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let s = (((value) >> 20) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd_lo = Reg::parse(((value) >> 12) & 0xf, pc);
    let rd_hi = Reg::parse(((value) >> 16) & 0xf, pc);
    let rn = Reg::parse((value) & 0xf, pc);
    let rm = Reg::parse(((value) >> 8) & 0xf, pc);
    Some(Ins::Umlal {
        s,
        cond,
        rd_lo,
        rd_hi,
        rn,
        rm,
    })
}
fn parse_arm_umull_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let s = (((value) >> 20) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd_lo = Reg::parse(((value) >> 12) & 0xf, pc);
    let rd_hi = Reg::parse(((value) >> 16) & 0xf, pc);
    let rn = Reg::parse((value) & 0xf, pc);
    let rm = Reg::parse(((value) >> 8) & 0xf, pc);
    Some(Ins::Umull {
        s,
        cond,
        rd_lo,
        rd_hi,
        rn,
        rm,
    })
}
fn parse_arm_uqadd16_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Uqadd16 { cond, rd, rn, rm })
}
fn parse_arm_uqadd8_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Uqadd8 { cond, rd, rn, rm })
}
fn parse_arm_uqasx_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Uqasx { cond, rd, rn, rm })
}
fn parse_arm_uqsax_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Uqsax { cond, rd, rn, rm })
}
fn parse_arm_uqsub16_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Uqsub16 { cond, rd, rn, rm })
}
fn parse_arm_uqsub8_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Uqsub8 { cond, rd, rn, rm })
}
fn parse_arm_usad8_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 16) & 0xf, pc);
    let rn = Reg::parse((value) & 0xf, pc);
    let rm = Reg::parse(((value) >> 8) & 0xf, pc);
    Some(Ins::Usad8 { cond, rd, rn, rm })
}
fn parse_arm_usada8_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 16) & 0xf, pc);
    let rn = Reg::parse((value) & 0xf, pc);
    let rm = Reg::parse(((value) >> 8) & 0xf, pc);
    let ra = Reg::parse(((value) >> 12) & 0xf, pc);
    Some(Ins::Usada8 {
        cond,
        rd,
        rn,
        rm,
        ra,
    })
}
fn parse_arm_usat_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let imm = (((value) >> 16) & 0x1f);
    let op2 = ShiftImm::parse((value) & 0xfff, pc);
    Some(Ins::Usat { cond, rd, imm, op2 })
}
fn parse_arm_usat16_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let imm = (((value) >> 16) & 0x1f);
    let rn = Reg::parse((value) & 0xf, pc);
    Some(Ins::Usat16 { cond, rd, imm, rn })
}
fn parse_arm_usax_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Usax { cond, rd, rn, rm })
}
fn parse_arm_usub16_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Usub16 { cond, rd, rn, rm })
}
fn parse_arm_usub8_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf00 != 0xf00 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    Some(Ins::Usub8 { cond, rd, rn, rm })
}
fn parse_arm_uxtab_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0x300 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    let rotate = (((value) >> 10) & 0x3) << 3;
    Some(Ins::Uxtab {
        cond,
        rd,
        rn,
        rm,
        rotate,
    })
}
fn parse_arm_uxtab16_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0x300 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    let rotate = (((value) >> 10) & 0x3) << 3;
    Some(Ins::Uxtab16 {
        cond,
        rd,
        rn,
        rm,
        rotate,
    })
}
fn parse_arm_uxtah_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0x300 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    let rotate = (((value) >> 10) & 0x3) << 3;
    Some(Ins::Uxtah {
        cond,
        rd,
        rn,
        rm,
        rotate,
    })
}
fn parse_arm_uxtb_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0x300 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    let rotate = (((value) >> 10) & 0x3) << 3;
    Some(Ins::Uxtb { cond, rd, rm, rotate })
}
fn parse_thumb_uxtb_0(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let rm = Reg::parse(((value) >> 3) & 0x7, pc);
    let rotate = 0;
    Some(Ins::Uxtb { cond, rd, rm, rotate })
}
fn parse_arm_uxtb16_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0x300 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    let rotate = (((value) >> 10) & 0x3) << 3;
    Some(Ins::Uxtb16 {
        cond,
        rd,
        rm,
        rotate,
    })
}
fn parse_arm_uxth_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0x300 != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let rm = Reg::parse((value) & 0xf, pc);
    let rotate = (((value) >> 10) & 0x3) << 3;
    Some(Ins::Uxth { cond, rd, rm, rotate })
}
fn parse_thumb_uxth_0(value: u32, pc: u32) -> Option<Ins> {
    let cond = Cond::default();
    let rd = Reg::parse((value) & 0x7, pc);
    let rm = Reg::parse(((value) >> 3) & 0x7, pc);
    let rotate = 0;
    Some(Ins::Uxth { cond, rd, rm, rotate })
}
fn parse_arm_vabs_f32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let sd = Sreg::parse(((((value) >> 12) & 0xf) << 1) | (((value) >> 22) & 0x1), pc);
    let sm = Sreg::parse((((value) & 0xf) << 1) | (((value) >> 5) & 0x1), pc);
    Some(Ins::VabsF32 { cond, sd, sm })
}
fn parse_arm_vabs_f64_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let dd = Dreg::parse(((((value) >> 22) & 0x1) << 4) | (((value) >> 12) & 0xf), pc);
    let dm = Dreg::parse(((((value) >> 5) & 0x1) << 4) | ((value) & 0xf), pc);
    Some(Ins::VabsF64 { cond, dd, dm })
}
fn parse_arm_vadd_f32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let sd = Sreg::parse(((((value) >> 12) & 0xf) << 1) | (((value) >> 22) & 0x1), pc);
    let sn = Sreg::parse(((((value) >> 16) & 0xf) << 1) | (((value) >> 7) & 0x1), pc);
    let sm = Sreg::parse((((value) & 0xf) << 1) | (((value) >> 5) & 0x1), pc);
    Some(Ins::VaddF32 { cond, sd, sn, sm })
}
fn parse_arm_vadd_f64_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let dd = Dreg::parse(((((value) >> 22) & 0x1) << 4) | (((value) >> 12) & 0xf), pc);
    let dn = Dreg::parse(((((value) >> 7) & 0x1) << 4) | (((value) >> 16) & 0xf), pc);
    let dm = Dreg::parse(((((value) >> 5) & 0x1) << 4) | ((value) & 0xf), pc);
    Some(Ins::VaddF64 { cond, dd, dn, dm })
}
fn parse_arm_vcmp_f32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let quiet_nan_exc = (((value) >> 7) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let sd = Sreg::parse(((((value) >> 12) & 0xf) << 1) | (((value) >> 22) & 0x1), pc);
    let op2 = VcmpF32Op2::parse((value) & 0x3f, pc)?;
    Some(Ins::VcmpF32 {
        quiet_nan_exc,
        cond,
        sd,
        op2,
    })
}
fn parse_arm_vcmp_f64_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let quiet_nan_exc = (((value) >> 7) & 0x1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let dd = Dreg::parse(((((value) >> 12) & 0xf) << 1) | (((value) >> 22) & 0x1), pc);
    let op2 = VcmpF64Op2::parse((value) & 0x3f, pc)?;
    Some(Ins::VcmpF64 {
        quiet_nan_exc,
        cond,
        dd,
        op2,
    })
}
fn parse_arm_vcvt_f32_f64_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let sd = Sreg::parse(((((value) >> 12) & 0xf) << 1) | (((value) >> 22) & 0x1), pc);
    let dm = Dreg::parse(((((value) >> 5) & 0x1) << 4) | ((value) & 0xf), pc);
    Some(Ins::VcvtF32F64 { cond, sd, dm })
}
fn parse_arm_vcvt_f32_s32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let sd = Sreg::parse(((((value) >> 12) & 0xf) << 1) | (((value) >> 22) & 0x1), pc);
    let sm = Sreg::parse((((value) & 0xf) << 1) | (((value) >> 5) & 0x1), pc);
    Some(Ins::VcvtF32S32 { cond, sd, sm })
}
fn parse_arm_vcvt_f32_u32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let sd = Sreg::parse(((((value) >> 12) & 0xf) << 1) | (((value) >> 22) & 0x1), pc);
    let sm = Sreg::parse((((value) & 0xf) << 1) | (((value) >> 5) & 0x1), pc);
    Some(Ins::VcvtF32U32 { cond, sd, sm })
}
fn parse_arm_vcvt_f64_f32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let dd = Dreg::parse(((((value) >> 22) & 0x1) << 4) | (((value) >> 12) & 0xf), pc);
    let sm = Sreg::parse((((value) & 0xf) << 1) | (((value) >> 5) & 0x1), pc);
    Some(Ins::VcvtF64F32 { cond, dd, sm })
}
fn parse_arm_vcvt_f64_s32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let dd = Dreg::parse(((((value) >> 22) & 0x1) << 4) | (((value) >> 12) & 0xf), pc);
    let sm = Sreg::parse((((value) & 0xf) << 1) | (((value) >> 5) & 0x1), pc);
    Some(Ins::VcvtF64S32 { cond, dd, sm })
}
fn parse_arm_vcvt_f64_u32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let dd = Dreg::parse(((((value) >> 22) & 0x1) << 4) | (((value) >> 12) & 0xf), pc);
    let sm = Sreg::parse((((value) & 0xf) << 1) | (((value) >> 5) & 0x1), pc);
    Some(Ins::VcvtF64U32 { cond, dd, sm })
}
fn parse_arm_vcvt_s32_f32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let round_zero = ((((value) >> 7) & 0x1) ^ 1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let sd = Sreg::parse(((((value) >> 12) & 0xf) << 1) | (((value) >> 22) & 0x1), pc);
    let sm = Sreg::parse((((value) & 0xf) << 1) | (((value) >> 5) & 0x1), pc);
    Some(Ins::VcvtS32F32 {
        round_zero,
        cond,
        sd,
        sm,
    })
}
fn parse_arm_vcvt_s32_f64_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let round_zero = ((((value) >> 7) & 0x1) ^ 1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let sd = Sreg::parse(((((value) >> 12) & 0xf) << 1) | (((value) >> 22) & 0x1), pc);
    let dm = Dreg::parse(((((value) >> 5) & 0x1) << 4) | ((value) & 0xf), pc);
    Some(Ins::VcvtS32F64 {
        round_zero,
        cond,
        sd,
        dm,
    })
}
fn parse_arm_vcvt_u32_f32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let round_zero = ((((value) >> 7) & 0x1) ^ 1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let sd = Sreg::parse(((((value) >> 12) & 0xf) << 1) | (((value) >> 22) & 0x1), pc);
    let sm = Sreg::parse((((value) & 0xf) << 1) | (((value) >> 5) & 0x1), pc);
    Some(Ins::VcvtU32F32 {
        round_zero,
        cond,
        sd,
        sm,
    })
}
fn parse_arm_vcvt_u32_f64_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let round_zero = ((((value) >> 7) & 0x1) ^ 1) != 0;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let sd = Sreg::parse(((((value) >> 12) & 0xf) << 1) | (((value) >> 22) & 0x1), pc);
    let dm = Dreg::parse(((((value) >> 5) & 0x1) << 4) | ((value) & 0xf), pc);
    Some(Ins::VcvtU32F64 {
        round_zero,
        cond,
        sd,
        dm,
    })
}
fn parse_arm_vdiv_f32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let sd = Sreg::parse(((((value) >> 12) & 0xf) << 1) | (((value) >> 22) & 0x1), pc);
    let sn = Sreg::parse(((((value) >> 16) & 0xf) << 1) | (((value) >> 7) & 0x1), pc);
    let sm = Sreg::parse((((value) & 0xf) << 1) | (((value) >> 5) & 0x1), pc);
    Some(Ins::VdivF32 { cond, sd, sn, sm })
}
fn parse_arm_vdiv_f64_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let dd = Dreg::parse(((((value) >> 22) & 0x1) << 4) | (((value) >> 12) & 0xf), pc);
    let dn = Dreg::parse(((((value) >> 7) & 0x1) << 4) | (((value) >> 16) & 0xf), pc);
    let dm = Dreg::parse(((((value) >> 5) & 0x1) << 4) | ((value) & 0xf), pc);
    Some(Ins::VdivF64 { cond, dd, dn, dm })
}
fn parse_arm_vldm_f32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let mode = VldmVstmMode::parse(((value) >> 23) & 0x3, pc)?;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let writeback = (((value) >> 21) & 0x1) != 0;
    let regs = SregList::parse(value);
    Some(Ins::VldmF32 {
        mode,
        cond,
        rn,
        writeback,
        regs,
    })
}
fn parse_arm_vldm_f64_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let mode = VldmVstmMode::parse(((value) >> 23) & 0x3, pc)?;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let writeback = (((value) >> 21) & 0x1) != 0;
    let regs = DregList::parse(value);
    Some(Ins::VldmF64 {
        mode,
        cond,
        rn,
        writeback,
        regs,
    })
}
fn parse_arm_vldr_f32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let sd = Sreg::parse(((((value) >> 12) & 0xf) << 1) | (((value) >> 22) & 0x1), pc);
    let addr = AddrLdrStr::Pre {
        rn: Reg::parse(((value) >> 16) & 0xf, pc),
        offset: LdrStrOffset::Imm(
            ((if (((value) >> 23) & 0x1) == 0 {
                -((((value) & 0xff) << 2) as i32)
            } else {
                (((value) & 0xff) << 2) as i32
            })) as i32,
        ),
        writeback: false,
    };
    Some(Ins::VldrF32 { cond, sd, addr })
}
fn parse_arm_vldr_f64_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let dd = Dreg::parse(((((value) >> 22) & 0x1) << 4) | (((value) >> 12) & 0xf), pc);
    let addr = AddrLdrStr::Pre {
        rn: Reg::parse(((value) >> 16) & 0xf, pc),
        offset: LdrStrOffset::Imm(
            ((if (((value) >> 23) & 0x1) == 0 {
                -((((value) & 0xff) << 2) as i32)
            } else {
                (((value) & 0xff) << 2) as i32
            })) as i32,
        ),
        writeback: false,
    };
    Some(Ins::VldrF64 { cond, dd, addr })
}
fn parse_arm_vmla_f32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let sd = Sreg::parse(((((value) >> 12) & 0xf) << 1) | (((value) >> 22) & 0x1), pc);
    let sn = Sreg::parse(((((value) >> 16) & 0xf) << 1) | (((value) >> 7) & 0x1), pc);
    let sm = Sreg::parse((((value) & 0xf) << 1) | (((value) >> 5) & 0x1), pc);
    Some(Ins::VmlaF32 { cond, sd, sn, sm })
}
fn parse_arm_vmla_f64_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let dd = Dreg::parse(((((value) >> 22) & 0x1) << 4) | (((value) >> 12) & 0xf), pc);
    let dn = Dreg::parse(((((value) >> 7) & 0x1) << 4) | (((value) >> 16) & 0xf), pc);
    let dm = Dreg::parse(((((value) >> 5) & 0x1) << 4) | ((value) & 0xf), pc);
    Some(Ins::VmlaF64 { cond, dd, dn, dm })
}
fn parse_arm_vmls_f32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let sd = Sreg::parse(((((value) >> 12) & 0xf) << 1) | (((value) >> 22) & 0x1), pc);
    let sn = Sreg::parse(((((value) >> 16) & 0xf) << 1) | (((value) >> 7) & 0x1), pc);
    let sm = Sreg::parse((((value) & 0xf) << 1) | (((value) >> 5) & 0x1), pc);
    Some(Ins::VmlsF32 { cond, sd, sn, sm })
}
fn parse_arm_vmls_f64_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let dd = Dreg::parse(((((value) >> 22) & 0x1) << 4) | (((value) >> 12) & 0xf), pc);
    let dn = Dreg::parse(((((value) >> 7) & 0x1) << 4) | (((value) >> 16) & 0xf), pc);
    let dm = Dreg::parse(((((value) >> 5) & 0x1) << 4) | ((value) & 0xf), pc);
    Some(Ins::VmlsF64 { cond, dd, dn, dm })
}
fn parse_arm_vmov_32_reg_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let dd = DregIndex::parse(value, pc);
    let rt = Reg::parse(((value) >> 12) & 0xf, pc);
    Some(Ins::Vmov32Reg { cond, dd, rt })
}
fn parse_arm_vmov_f32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let sd = Sreg::parse(((((value) >> 12) & 0xf) << 1) | (((value) >> 22) & 0x1), pc);
    let sm = Sreg::parse((((value) & 0xf) << 1) | (((value) >> 5) & 0x1), pc);
    Some(Ins::VmovF32 { cond, sd, sm })
}
fn parse_arm_vmov_f32_reg_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0x6f != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let sn = Sreg::parse(((((value) >> 16) & 0xf) << 1) | (((value) >> 7) & 0x1), pc);
    let rt = Reg::parse(((value) >> 12) & 0xf, pc);
    Some(Ins::VmovF32Reg { cond, sn, rt })
}
fn parse_arm_vmov_f64_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let dd = Dreg::parse(((((value) >> 22) & 0x1) << 4) | (((value) >> 12) & 0xf), pc);
    let dm = Dreg::parse(((((value) >> 5) & 0x1) << 4) | ((value) & 0xf), pc);
    Some(Ins::VmovF64 { cond, dd, dm })
}
fn parse_arm_vmov_reg_32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rt = Reg::parse(((value) >> 12) & 0xf, pc);
    let dn = DregIndex::parse(value, pc);
    Some(Ins::VmovReg32 { cond, rt, dn })
}
fn parse_arm_vmov_reg_f32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0x6f != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rt = Reg::parse(((value) >> 12) & 0xf, pc);
    let sn = Sreg::parse(((((value) >> 16) & 0xf) << 1) | (((value) >> 7) & 0x1), pc);
    Some(Ins::VmovRegF32 { cond, rt, sn })
}
fn parse_arm_vmov_reg_f32_dual_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0x2f == 0x2f {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rt = Reg::parse(((value) >> 12) & 0xf, pc);
    let rt2 = Reg::parse(((value) >> 16) & 0xf, pc);
    let sm = Sreg::parse((((value) & 0xf) << 1) | (((value) >> 5) & 0x1), pc);
    let sm2 = Sreg::parse(
        ((((value) & 0xf) << 1) | (((value) >> 5) & 0x1)).wrapping_add(1),
        pc,
    );
    Some(Ins::VmovRegF32Dual {
        cond,
        rt,
        rt2,
        sm,
        sm2,
    })
}
fn parse_arm_vmov_f32_reg_dual_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0x2f == 0x2f {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let sm = Sreg::parse((((value) & 0xf) << 1) | (((value) >> 5) & 0x1), pc);
    let sm2 = Sreg::parse(
        ((((value) & 0xf) << 1) | (((value) >> 5) & 0x1)).wrapping_add(1),
        pc,
    );
    let rt = Reg::parse(((value) >> 12) & 0xf, pc);
    let rt2 = Reg::parse(((value) >> 16) & 0xf, pc);
    Some(Ins::VmovF32RegDual {
        cond,
        sm,
        sm2,
        rt,
        rt2,
    })
}
fn parse_arm_vmov_reg_f64_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rt = Reg::parse(((value) >> 12) & 0xf, pc);
    let rt2 = Reg::parse(((value) >> 16) & 0xf, pc);
    let dm = Dreg::parse(((((value) >> 5) & 0x1) << 4) | ((value) & 0xf), pc);
    Some(Ins::VmovRegF64 {
        cond,
        rt,
        rt2,
        dm,
    })
}
fn parse_arm_vmov_f64_reg_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let dm = Dreg::parse(((((value) >> 5) & 0x1) << 4) | ((value) & 0xf), pc);
    let rt = Reg::parse(((value) >> 12) & 0xf, pc);
    let rt2 = Reg::parse(((value) >> 16) & 0xf, pc);
    Some(Ins::VmovF64Reg {
        cond,
        dm,
        rt,
        rt2,
    })
}
fn parse_arm_vmrs_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xef != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    let fpscr = Fpscr::default();
    Some(Ins::Vmrs { cond, rd, fpscr })
}
fn parse_arm_vmsr_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xef != 0 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let fpscr = Fpscr::default();
    let rd = Reg::parse(((value) >> 12) & 0xf, pc);
    Some(Ins::Vmsr { cond, fpscr, rd })
}
fn parse_arm_vmul_f32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let sd = Sreg::parse(((((value) >> 12) & 0xf) << 1) | (((value) >> 22) & 0x1), pc);
    let sn = Sreg::parse(((((value) >> 16) & 0xf) << 1) | (((value) >> 7) & 0x1), pc);
    let sm = Sreg::parse((((value) & 0xf) << 1) | (((value) >> 5) & 0x1), pc);
    Some(Ins::VmulF32 { cond, sd, sn, sm })
}
fn parse_arm_vmul_f64_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let dd = Dreg::parse(((((value) >> 22) & 0x1) << 4) | (((value) >> 12) & 0xf), pc);
    let dn = Dreg::parse(((((value) >> 7) & 0x1) << 4) | (((value) >> 16) & 0xf), pc);
    let dm = Dreg::parse(((((value) >> 5) & 0x1) << 4) | ((value) & 0xf), pc);
    Some(Ins::VmulF64 { cond, dd, dn, dm })
}
fn parse_arm_vneg_f32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let sd = Sreg::parse(((((value) >> 12) & 0xf) << 1) | (((value) >> 22) & 0x1), pc);
    let sm = Sreg::parse((((value) & 0xf) << 1) | (((value) >> 5) & 0x1), pc);
    Some(Ins::VnegF32 { cond, sd, sm })
}
fn parse_arm_vneg_f64_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let dd = Dreg::parse(((((value) >> 22) & 0x1) << 4) | (((value) >> 12) & 0xf), pc);
    let dm = Dreg::parse(((((value) >> 5) & 0x1) << 4) | ((value) & 0xf), pc);
    Some(Ins::VnegF64 { cond, dd, dm })
}
fn parse_arm_vnmla_f32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let sd = Sreg::parse(((((value) >> 12) & 0xf) << 1) | (((value) >> 22) & 0x1), pc);
    let sn = Sreg::parse(((((value) >> 16) & 0xf) << 1) | (((value) >> 7) & 0x1), pc);
    let sm = Sreg::parse((((value) & 0xf) << 1) | (((value) >> 5) & 0x1), pc);
    Some(Ins::VnmlaF32 { cond, sd, sn, sm })
}
fn parse_arm_vnmla_f64_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let dd = Dreg::parse(((((value) >> 22) & 0x1) << 4) | (((value) >> 12) & 0xf), pc);
    let dn = Dreg::parse(((((value) >> 7) & 0x1) << 4) | (((value) >> 16) & 0xf), pc);
    let dm = Dreg::parse(((((value) >> 5) & 0x1) << 4) | ((value) & 0xf), pc);
    Some(Ins::VnmlaF64 { cond, dd, dn, dm })
}
fn parse_arm_vnmls_f32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let sd = Sreg::parse(((((value) >> 12) & 0xf) << 1) | (((value) >> 22) & 0x1), pc);
    let sn = Sreg::parse(((((value) >> 16) & 0xf) << 1) | (((value) >> 7) & 0x1), pc);
    let sm = Sreg::parse((((value) & 0xf) << 1) | (((value) >> 5) & 0x1), pc);
    Some(Ins::VnmlsF32 { cond, sd, sn, sm })
}
fn parse_arm_vnmls_f64_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let dd = Dreg::parse(((((value) >> 22) & 0x1) << 4) | (((value) >> 12) & 0xf), pc);
    let dn = Dreg::parse(((((value) >> 7) & 0x1) << 4) | (((value) >> 16) & 0xf), pc);
    let dm = Dreg::parse(((((value) >> 5) & 0x1) << 4) | ((value) & 0xf), pc);
    Some(Ins::VnmlsF64 { cond, dd, dn, dm })
}
fn parse_arm_vnmul_f32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let sd = Sreg::parse(((((value) >> 12) & 0xf) << 1) | (((value) >> 22) & 0x1), pc);
    let sn = Sreg::parse(((((value) >> 16) & 0xf) << 1) | (((value) >> 7) & 0x1), pc);
    let sm = Sreg::parse((((value) & 0xf) << 1) | (((value) >> 5) & 0x1), pc);
    Some(Ins::VnmulF32 { cond, sd, sn, sm })
}
fn parse_arm_vnmul_f64_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let dd = Dreg::parse(((((value) >> 22) & 0x1) << 4) | (((value) >> 12) & 0xf), pc);
    let dn = Dreg::parse(((((value) >> 7) & 0x1) << 4) | (((value) >> 16) & 0xf), pc);
    let dm = Dreg::parse(((((value) >> 5) & 0x1) << 4) | ((value) & 0xf), pc);
    Some(Ins::VnmulF64 { cond, dd, dn, dm })
}
fn parse_arm_vpop_f32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let regs = SregList::parse(value);
    Some(Ins::VpopF32 { cond, regs })
}
fn parse_arm_vpop_f64_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let regs = DregList::parse(value);
    Some(Ins::VpopF64 { cond, regs })
}
fn parse_arm_vpush_f32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let regs = SregList::parse(value);
    Some(Ins::VpushF32 { cond, regs })
}
fn parse_arm_vpush_f64_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let regs = DregList::parse(value);
    Some(Ins::VpushF64 { cond, regs })
}
fn parse_arm_vsqrt_f32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let sd = Sreg::parse(((((value) >> 12) & 0xf) << 1) | (((value) >> 22) & 0x1), pc);
    let sm = Sreg::parse((((value) & 0xf) << 1) | (((value) >> 5) & 0x1), pc);
    Some(Ins::VsqrtF32 { cond, sd, sm })
}
fn parse_arm_vsqrt_f64_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let dd = Dreg::parse(((((value) >> 22) & 0x1) << 4) | (((value) >> 12) & 0xf), pc);
    let dm = Dreg::parse(((((value) >> 5) & 0x1) << 4) | ((value) & 0xf), pc);
    Some(Ins::VsqrtF64 { cond, dd, dm })
}
fn parse_arm_vstm_f32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let mode = VldmVstmMode::parse(((value) >> 23) & 0x3, pc)?;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let writeback = (((value) >> 21) & 0x1) != 0;
    let regs = SregList::parse(value);
    Some(Ins::VstmF32 {
        mode,
        cond,
        rn,
        writeback,
        regs,
    })
}
fn parse_arm_vstm_f64_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let mode = VldmVstmMode::parse(((value) >> 23) & 0x3, pc)?;
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let rn = Reg::parse(((value) >> 16) & 0xf, pc);
    let writeback = (((value) >> 21) & 0x1) != 0;
    let regs = DregList::parse(value);
    Some(Ins::VstmF64 {
        mode,
        cond,
        rn,
        writeback,
        regs,
    })
}
fn parse_arm_vstr_f32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let sd = Sreg::parse(((((value) >> 12) & 0xf) << 1) | (((value) >> 22) & 0x1), pc);
    let addr = AddrLdrStr::Pre {
        rn: Reg::parse(((value) >> 16) & 0xf, pc),
        offset: LdrStrOffset::Imm(
            ((if (((value) >> 23) & 0x1) == 0 {
                -((((value) & 0xff) << 2) as i32)
            } else {
                (((value) & 0xff) << 2) as i32
            })) as i32,
        ),
        writeback: false,
    };
    Some(Ins::VstrF32 { cond, sd, addr })
}
fn parse_arm_vstr_f64_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let dd = Dreg::parse(((((value) >> 22) & 0x1) << 4) | (((value) >> 12) & 0xf), pc);
    let addr = AddrLdrStr::Pre {
        rn: Reg::parse(((value) >> 16) & 0xf, pc),
        offset: LdrStrOffset::Imm(
            ((if (((value) >> 23) & 0x1) == 0 {
                -((((value) & 0xff) << 2) as i32)
            } else {
                (((value) & 0xff) << 2) as i32
            })) as i32,
        ),
        writeback: false,
    };
    Some(Ins::VstrF64 { cond, dd, addr })
}
fn parse_arm_vsub_f32_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let sd = Sreg::parse(((((value) >> 12) & 0xf) << 1) | (((value) >> 22) & 0x1), pc);
    let sn = Sreg::parse(((((value) >> 16) & 0xf) << 1) | (((value) >> 7) & 0x1), pc);
    let sm = Sreg::parse((((value) & 0xf) << 1) | (((value) >> 5) & 0x1), pc);
    Some(Ins::VsubF32 { cond, sd, sn, sm })
}
fn parse_arm_vsub_f64_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    let dd = Dreg::parse(((((value) >> 22) & 0x1) << 4) | (((value) >> 12) & 0xf), pc);
    let dn = Dreg::parse(((((value) >> 7) & 0x1) << 4) | (((value) >> 16) & 0xf), pc);
    let dm = Dreg::parse(((((value) >> 5) & 0x1) << 4) | ((value) & 0xf), pc);
    Some(Ins::VsubF64 { cond, dd, dn, dm })
}
fn parse_arm_wfe_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xff00 != 0xf000 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    Some(Ins::Wfe { cond })
}
fn parse_arm_wfi_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xff00 != 0xf000 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    Some(Ins::Wfi { cond })
}
fn parse_arm_yield_0(value: u32, pc: u32) -> Option<Ins> {
    if value & 0xff00 != 0xf000 {
        return None;
    }
    if value & 0xf0000000 == 0xf0000000 {
        return None;
    }
    let cond = Cond::parse(((value) >> 28) & 0xf, pc);
    Some(Ins::Yield { cond })
}
